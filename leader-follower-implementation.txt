#ifndef LEADERFOLLOWERDP_HPP
#define LEADERFOLLOWERDP_HPP

#include <vector>
#include <queue>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <atomic>
#include <functional>
#include "RequestService.hpp"

class LeaderFollowerDP : public RequestService {
private:
    struct Task {
        int clientFD;
        int operation;
        std::function<void()> task;
    };

    std::vector<std::thread> threads;
    std::queue<Task> taskQueue;
    std::mutex queueMutex;
    std::condition_variable queueCV;
    std::atomic<bool> done{false};
    std::atomic<int> activeThreads{0};

    void workerThread();
    void handleTask(const Task& task);
    void enqueueTask(int clientFD, int operation, std::function<void()> task);

public:
    LeaderFollowerDP(int numThreads = std::thread::hardware_concurrency());
    ~LeaderFollowerDP() override;
    void handleRequest(int client_FD) override;
};

// Implementation

LeaderFollowerDP::LeaderFollowerDP(int numThreads) {
    for (int i = 0; i < numThreads; ++i) {
        threads.emplace_back(&LeaderFollowerDP::workerThread, this);
    }
}

LeaderFollowerDP::~LeaderFollowerDP() {
    done = true;
    queueCV.notify_all();
    for (auto& thread : threads) {
        if (thread.joinable()) {
            thread.join();
        }
    }
    if (graph) {
        delete graph;
    }
}

void LeaderFollowerDP::workerThread() {
    while (!done) {
        std::unique_lock<std::mutex> lock(queueMutex);
        queueCV.wait(lock, [this] { return !taskQueue.empty() || done; });
        
        if (done) return;

        Task task = std::move(taskQueue.front());
        taskQueue.pop();
        lock.unlock();

        handleTask(task);
    }
}

void LeaderFollowerDP::handleTask(const Task& task) {
    activeThreads++;
    
    // Perform the task
    task.task();

    // Handle follow-up operations
    while (true) {
        int nextOperation = startConversation(task.clientFD);
        if (nextOperation == 10) {  // Exit
            close(task.clientFD);
            break;
        }

        switch (nextOperation) {
            case 1: // Create graph
                createGraph(task.clientFD);
                break;
            case 2: // Add edge
            case 3: // Remove edge
                modifyGraph(task.clientFD, nextOperation == 2);
                break;
            case 4: // Compute MST
                calculateMST(task.clientFD);
                break;
            case 5: // MST operations
            case 6:
            case 7:
            case 8:
            case 9:
                getMSTData(task.clientFD, nextOperation);
                break;
        }
    }

    activeThreads--;
}

void LeaderFollowerDP::enqueueTask(int clientFD, int operation, std::function<void()> task) {
    std::lock_guard<std::mutex> lock(queueMutex);
    taskQueue.push({clientFD, operation, std::move(task)});
    queueCV.notify_one();
}

void LeaderFollowerDP::handleRequest(int client_FD) {
    int initialOperation = startConversation(client_FD);
    
    if (initialOperation == 10) {  // Exit
        close(client_FD);
        return;
    }

    enqueueTask(client_FD, initialOperation, [this, client_FD, initialOperation] {
        switch (initialOperation) {
            case 1: // Create graph
                createGraph(client_FD);
                break;
            case 2: // Add edge
            case 3: // Remove edge
                modifyGraph(client_FD, initialOperation == 2);
                break;
            case 4: // Compute MST
                calculateMST(client_FD);
                break;
            case 5: // MST operations
            case 6:
            case 7:
            case 8:
            case 9:
                getMSTData(client_FD, initialOperation);
                break;
        }
    });
}

#endif
