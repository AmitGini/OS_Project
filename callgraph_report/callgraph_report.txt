--------------------------------------------------------------------------------
Profile data file 'callgrind.out.18059' (creator: callgrind-3.18.1)
--------------------------------------------------------------------------------
I1 cache: 65536 B, 64 B, 2-way associative
D1 cache: 65536 B, 64 B, 2-way associative
LL cache: 262144 B, 64 B, 8-way associative
Timerange: Basic block 0 - 476508
Trigger: Program termination
Profiled target:  ./graph (PID 18059, part 1)
Events recorded:  Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Events shown:     Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Event sort order: Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Thresholds:       99 0 0 0 0 0 0 0 0
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                 Dr               Dw               I1mr           D1mr            D1mw           ILmr           DLmr           DLmw           
--------------------------------------------------------------------------------
2,830,274 (100.0%) 691,103 (100.0%) 279,989 (100.0%) 5,909 (100.0%) 13,282 (100.0%) 3,028 (100.0%) 3,237 (100.0%) 9,005 (100.0%) 2,394 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                 Dr               Dw              I1mr         D1mr           D1mw           ILmr         DLmr           DLmw            file:function
--------------------------------------------------------------------------------
1,018,018 (35.97%) 168,500 (24.38%) 57,376 (20.49%)  32 ( 0.54%) 2,018 (15.19%)    24 ( 0.79%)  15 ( 0.46%) 1,824 (20.26%)    18 ( 0.75%)  ./elf/./elf/dl-lookup.c:_dl_lookup_symbol_x [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  598,600 (21.15%) 199,581 (28.88%) 83,762 (29.92%)  53 ( 0.90%) 3,148 (23.70%)    72 ( 2.38%)  43 ( 1.33%) 1,095 (12.16%)    61 ( 2.55%)  ./elf/./elf/dl-lookup.c:do_lookup_x [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  268,703 ( 9.49%)  64,682 ( 9.36%) 24,913 ( 8.90%)  28 ( 0.47%) 2,790 (21.01%) 1,676 (55.35%)  28 ( 0.86%) 2,444 (27.14%) 1,123 (46.91%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
  124,586 ( 4.40%)  41,522 ( 6.01%) 13,908 ( 4.97%)   8 ( 0.14%)   627 ( 4.72%)     6 ( 0.20%)   8 ( 0.25%)   400 ( 4.44%)     4 ( 0.17%)  ./elf/./elf/dl-lookup.c:check_match [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  111,769 ( 3.95%)  35,263 ( 5.10%) 10,608 ( 3.79%)  17 ( 0.29%) 2,558 (19.26%)     2 ( 0.07%)  17 ( 0.53%) 1,852 (20.57%)     .           ./elf/./elf/do-rel.h:_dl_relocate_object
   88,054 ( 3.11%)  20,549 ( 2.97%)      0          110 ( 1.86%)   368 ( 2.77%)     0          101 ( 3.12%)   257 ( 2.85%)     .           ./string/../sysdeps/x86_64/strcmp.S:strcmp [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
   45,482 ( 1.61%)  12,049 ( 1.74%)  6,672 ( 2.38%)  18 ( 0.30%)     0              0            6 ( 0.19%)     .              .           ./libio/./libio/fileops.c:_IO_file_overflow@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
   40,881 ( 1.44%)   7,369 ( 1.07%)      6 ( 0.00%)   5 ( 0.08%)    81 ( 0.61%)     1 ( 0.03%)   5 ( 0.15%)    81 ( 0.90%)     1 ( 0.04%)  ./elf/./elf/dl-tunables.c:__GI___tunables_init [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
   37,303 ( 1.32%)   7,507 ( 1.09%)  2,602 ( 0.93%)  12 ( 0.20%)     0             23 ( 0.76%)   6 ( 0.19%)     0             21 ( 0.88%)  ./libio/./libio/fileops.c:_IO_file_xsputn@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
   20,625 ( 0.73%)       0           4,590 ( 1.64%)   .              .              .            .              .              .           ./elf/../sysdeps/generic/dl-protected.h:do_lookup_x
   18,765 ( 0.66%)   6,209 ( 0.90%)  1,435 ( 0.51%)   5 ( 0.08%)     0              0            5 ( 0.15%)     .              .           ./libio/./libio/genops.c:_IO_default_xsputn [/usr/lib/x86_64-linux-gnu/libc.so.6]
   16,983 ( 0.60%)   4,710 ( 0.68%)  3,155 ( 1.13%)  57 ( 0.96%)     4 ( 0.03%)    12 ( 0.40%)   4 ( 0.12%)     4 ( 0.04%)    12 ( 0.50%)  ./libio/./libio/iofwrite.c:fwrite [/usr/lib/x86_64-linux-gnu/libc.so.6]
   13,630 ( 0.48%)   4,756 ( 0.69%)    917 ( 0.33%)  20 ( 0.34%)    90 ( 0.68%)    68 ( 2.25%)  20 ( 0.62%)    85 ( 0.94%)    67 ( 2.80%)  ./elf/./elf/dl-version.c:_dl_check_map_versions [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
   12,887 ( 0.46%)   4,482 ( 0.65%)  2,801 ( 1.00%)   9 ( 0.15%)     1 ( 0.01%)     0            3 ( 0.09%)     .              .           ???:std::ostream::sentry::sentry(std::ostream&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   12,128 ( 0.43%)   3,520 ( 0.51%)    288 ( 0.10%)   6 ( 0.10%)     0              0            6 ( 0.19%)     .              .           ???:std::locale::_Impl::_M_install_facet(std::locale::id const*, std::locale::facet const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   11,816 ( 0.42%)   5,064 ( 0.73%)  2,532 ( 0.90%)  47 ( 0.80%)     4 ( 0.03%)     0            5 ( 0.15%)     1 ( 0.01%)     .           ???:std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   11,400 ( 0.40%)   2,280 ( 0.33%)      0            3 ( 0.05%)     0              0            2 ( 0.06%)     .              .           ./elf/../sysdeps/generic/ldsodefs.h:do_lookup_x
   10,494 ( 0.37%)   3,498 ( 0.51%)      .            .              .              .            .              .              .           ./elf/../sysdeps/generic/ldsodefs.h:_dl_relocate_object
   10,240 ( 0.36%)   3,072 ( 0.44%)  1,536 ( 0.55%)   4 ( 0.07%)     4 ( 0.03%)     0            4 ( 0.12%)     4 ( 0.04%)     .           ./wcsmbs/./wcsmbs/btowc.c:btowc [/usr/lib/x86_64-linux-gnu/libc.so.6]
    9,625 ( 0.34%)   1,609 ( 0.23%)  1,672 ( 0.60%)  98 ( 1.66%)    14 ( 0.11%)    54 ( 1.78%)  29 ( 0.90%)     1 ( 0.01%)    52 ( 2.17%)  ./malloc/./malloc/malloc.c:_int_malloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
    9,514 ( 0.34%)   3,418 ( 0.49%)    939 ( 0.34%)  13 ( 0.22%)   305 ( 2.30%)     4 ( 0.13%)  13 ( 0.40%)   153 ( 1.70%)     3 ( 0.13%)  ./elf/./elf/dl-runtime.c:_dl_fixup [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    8,930 ( 0.32%)   2,644 ( 0.38%)  1,815 ( 0.65%)  53 ( 0.90%)     0              0            5 ( 0.15%)     .              .           ./libio/./libio/fileops.c:_IO_do_write@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    8,538 ( 0.30%)   1,638 ( 0.24%)  1,729 ( 0.62%)  45 ( 0.76%)     0              0            7 ( 0.22%)     .              .           ???:std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    6,791 ( 0.24%)     929 ( 0.13%)      0           63 ( 1.07%)    39 ( 0.29%)     0            7 ( 0.22%)    31 ( 0.34%)     .           ./string/../sysdeps/x86_64/multiarch/strlen-vec.S:__strlen_sse2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    6,341 ( 0.22%)   1,869 ( 0.27%)    967 ( 0.35%)  72 ( 1.22%)    13 ( 0.10%)     0           18 ( 0.56%)     3 ( 0.03%)     .           ./malloc/./malloc/malloc.c:_int_free [/usr/lib/x86_64-linux-gnu/libc.so.6]
    6,105 ( 0.22%)   1,320 ( 0.19%)    825 ( 0.29%)   3 ( 0.05%)     0              1 ( 0.03%)   3 ( 0.09%)     .              .           ./libio/./libio/fileops.c:_IO_file_write@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    5,384 ( 0.19%)     942 ( 0.14%)    965 ( 0.34%)  21 ( 0.36%)     0              0            3 ( 0.09%)     .              .           ./libio/./libio/libioP.h:fwrite
    5,199 ( 0.18%)   2,097 ( 0.30%)    821 ( 0.29%)  11 ( 0.19%)     2 ( 0.02%)     0            6 ( 0.19%)     1 ( 0.01%)     .           ???:std::ostream& std::ostream::_M_insert<long>(long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    5,040 ( 0.18%)   2,280 ( 0.33%)    720 ( 0.26%)   9 ( 0.15%)     0              0            4 ( 0.12%)     .              .           ???:std::ostream::put(char) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    4,798 ( 0.17%)   2,397 ( 0.35%)    632 ( 0.23%)  35 ( 0.59%)     3 ( 0.02%)     0            4 ( 0.12%)     2 ( 0.02%)     .           ???:std::ostream::flush() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    4,774 ( 0.17%)       .               .            .              .              .            .              .              .           ./libio/./libio/libioP.h:_IO_default_xsputn
    4,730 ( 0.17%)     840 ( 0.12%)    527 ( 0.19%) 192 ( 3.25%)     0              3 ( 0.10%)   5 ( 0.15%)     0              1 ( 0.04%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__mempcpy_sse2_unaligned [/usr/lib/x86_64-linux-gnu/libc.so.6]
    4,297 ( 0.15%)   1,422 ( 0.21%)    853 ( 0.30%)  38 ( 0.64%)     0              0            5 ( 0.15%)     .              .           ./libio/./libio/putc.c:putc [/usr/lib/x86_64-linux-gnu/libc.so.6]
    4,230 ( 0.15%)   1,390 ( 0.20%)     80 ( 0.03%)   5 ( 0.08%)     0              0            5 ( 0.15%)     .              .           ./malloc/./malloc/malloc.c:__malloc_arena_thread_freeres
    4,204 ( 0.15%)     310 ( 0.04%)    164 ( 0.06%)  16 ( 0.27%)    47 ( 0.35%)     4 ( 0.13%)  16 ( 0.49%)    23 ( 0.26%)     3 ( 0.13%)  ./elf/./elf/dl-reloc.c:_dl_relocate_object [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    4,192 ( 0.15%)     926 ( 0.13%)    129 ( 0.05%)   5 ( 0.08%)     8 ( 0.06%)     0            5 ( 0.15%)     8 ( 0.09%)     .           ./elf/../sysdeps/x86/dl-cacheinfo.h:intel_check_word.constprop.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    4,086 ( 0.14%)       0               0            2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           ./elf/../bits/stdlib-bsearch.h:intel_check_word.constprop.0
    4,035 ( 0.14%)   1,070 ( 0.15%)      0            1 ( 0.02%)     1 ( 0.01%)     0            1 ( 0.03%)     1 ( 0.01%)     .           ./elf/./elf/dl-tunables.h:__GI___tunables_init
    3,996 ( 0.14%)   1,463 ( 0.21%)    934 ( 0.33%)   4 ( 0.07%)     3 ( 0.02%)     0            4 ( 0.12%)     2 ( 0.02%)     .           ./libio/./libio/iofflush.c:fflush [/usr/lib/x86_64-linux-gnu/libc.so.6]
    3,802 ( 0.13%)     301 ( 0.04%)    198 ( 0.07%)  28 ( 0.47%)     3 ( 0.02%)     0            3 ( 0.09%)     .              .           ???:0x000000000012e8f0 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    3,782 ( 0.13%)     819 ( 0.12%)    400 ( 0.14%)  41 ( 0.69%)    54 ( 0.41%)    22 ( 0.73%)  41 ( 1.27%)    54 ( 0.60%)    22 ( 0.92%)  ./elf/./elf/dl-load.c:_dl_map_object_from_fd [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    3,762 ( 0.13%)     594 ( 0.09%)    792 ( 0.28%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           ???:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    3,753 ( 0.13%)     978 ( 0.14%)    972 ( 0.35%)  55 ( 0.93%)     0              0            3 ( 0.09%)     .              .           ./io/../sysdeps/unix/sysv/linux/write.c:write [/usr/lib/x86_64-linux-gnu/libc.so.6]
    3,456 ( 0.12%)     896 ( 0.13%)    512 ( 0.18%)   3 ( 0.05%)     0              0            3 ( 0.09%)     .              .           ./wcsmbs/./wcsmbs/wctob.c:wctob [/usr/lib/x86_64-linux-gnu/libc.so.6]
    3,332 ( 0.12%)     819 ( 0.12%)    363 ( 0.13%)  54 ( 0.91%)    12 ( 0.09%)     0            8 ( 0.25%)     1 ( 0.01%)     .           ./malloc/./malloc/malloc.c:malloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
    3,172 ( 0.11%)     468 ( 0.07%)      0            4 ( 0.07%)    35 ( 0.26%)     0            4 ( 0.12%)    35 ( 0.39%)     .           ./elf/./elf/dl-cache.c:_dl_cache_libcmp [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    2,900 ( 0.10%)   2,800 ( 0.41%)  2,700 ( 0.96%)   6 ( 0.10%)     0             15 ( 0.50%)   3 ( 0.09%)     0             10 ( 0.42%)  ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_fxsave [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    2,848 ( 0.10%)     761 ( 0.11%)    443 ( 0.16%)   2 ( 0.03%)     1 ( 0.01%)     1 ( 0.03%)   2 ( 0.06%)     0              1 ( 0.04%)  ./elf/./elf/dl-misc.c:_dl_name_match_p [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    2,733 ( 0.10%)       5 ( 0.00%)    810 ( 0.29%)   4 ( 0.07%)     0             20 ( 0.66%)   4 ( 0.12%)     0             20 ( 0.84%)  ???:std::ctype<wchar_t>::_M_initialize_ctype() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    2,430 ( 0.09%)     945 ( 0.14%)    405 ( 0.14%)   3 ( 0.05%)     1 ( 0.01%)     0            3 ( 0.09%)     1 ( 0.01%)     .           ./libio/./libio/fileops.c:_IO_file_sync@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    2,406 ( 0.09%)     842 ( 0.12%)    361 ( 0.13%)  12 ( 0.20%)     0              0            4 ( 0.12%)     .              .           ???:std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    2,400 ( 0.08%)     532 ( 0.08%)    402 ( 0.14%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           ./libio/./libio/libioP.h:fflush
    2,353 ( 0.08%)     905 ( 0.13%)    181 ( 0.06%)  33 ( 0.56%)     2 ( 0.02%)     0            2 ( 0.06%)     1 ( 0.01%)     .           ./nptl/./nptl/cancellation.c:__pthread_enable_asynccancel [/usr/lib/x86_64-linux-gnu/libc.so.6]
    2,298 ( 0.08%)     802 ( 0.12%)    348 ( 0.12%)  17 ( 0.29%)     7 ( 0.05%)     0            5 ( 0.15%)     .              .           ./malloc/./malloc/malloc.c:free [/usr/lib/x86_64-linux-gnu/libc.so.6]
    2,256 ( 0.08%)   1,316 ( 0.19%)    658 ( 0.24%)   3 ( 0.05%)     1 ( 0.01%)     0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>::_Deque_iterator(std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*> const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
    2,243 ( 0.08%)     541 ( 0.08%)    288 ( 0.10%)  27 ( 0.46%)     1 ( 0.01%)     7 ( 0.23%)  27 ( 0.83%)     1 ( 0.01%)     7 ( 0.29%)  ./elf/./elf/dl-load.c:_dl_map_object [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    2,226 ( 0.08%)     389 ( 0.06%)    209 ( 0.07%)  34 ( 0.58%)     9 ( 0.07%)     8 ( 0.26%)  34 ( 1.05%)     1 ( 0.01%)     8 ( 0.33%)  ./elf/./elf/dl-deps.c:_dl_map_object_deps [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    2,163 ( 0.08%)     927 ( 0.13%)    515 ( 0.18%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           ???:0x000000000012b240 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    1,884 ( 0.07%)     314 ( 0.05%)      0            2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           ???:__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::xsputn(char const*, long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    1,641 ( 0.06%)     290 ( 0.04%)      0           15 ( 0.25%)     0              0           12 ( 0.37%)     .              .           ./string/../sysdeps/x86_64/multiarch/memcmp-sse4.S:__memcmp_sse4_1 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    1,566 ( 0.06%)     522 ( 0.08%)     96 ( 0.03%)  21 ( 0.36%)     5 ( 0.04%)     0            2 ( 0.06%)     5 ( 0.06%)     .           ???:std::locale::id::_M_id() const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    1,530 ( 0.05%)     470 ( 0.07%)    240 ( 0.09%)  60 ( 1.02%)     4 ( 0.03%)     0            8 ( 0.25%)     .              .           ./elf/../elf/dl-tls.c:_dl_allocate_tls [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    1,492 ( 0.05%)     214 ( 0.03%)    159 ( 0.06%)   9 ( 0.15%)    39 ( 0.29%)    29 ( 0.96%)   9 ( 0.28%)    39 ( 0.43%)    29 ( 1.21%)  ./elf/./elf/get-dynamic-info.h:_dl_map_object_from_fd
    1,481 ( 0.05%)     331 ( 0.05%)    145 ( 0.05%)  24 ( 0.41%)    14 ( 0.11%)     1 ( 0.03%)  21 ( 0.65%)    14 ( 0.16%)     1 ( 0.04%)  ./elf/./elf/dl-load.c:open_verify.constprop.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    1,479 ( 0.05%)     493 ( 0.07%)    376 ( 0.13%)   .              .              .            .              .              .           ./libio/./libio/libioP.h:putc
    1,399 ( 0.05%)     411 ( 0.06%)    426 ( 0.15%)  70 ( 1.18%)     6 ( 0.05%)    50 ( 1.65%)  15 ( 0.46%)     4 ( 0.04%)    50 ( 2.09%)  ./nptl/./nptl/pthread_create.c:pthread_create@@GLIBC_2.34 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    1,360 ( 0.05%)     310 ( 0.04%)    290 ( 0.10%)  44 ( 0.74%)     1 ( 0.01%)    41 ( 1.35%)  13 ( 0.40%)     1 ( 0.01%)    40 ( 1.67%)  ./nptl/./nptl/allocatestack.c:pthread_create@@GLIBC_2.34
    1,320 ( 0.05%)     480 ( 0.07%)    120 ( 0.04%)   6 ( 0.10%)     0              0            2 ( 0.06%)     .              .           ./libio/./libio/genops.c:__overflow [/usr/lib/x86_64-linux-gnu/libc.so.6]
    1,320 ( 0.05%)       0               0          152 ( 2.57%)     0              0            1 ( 0.03%)     .              .           ./libio/./libio/libioP.h:_IO_do_write@@GLIBC_2.2.5
    1,310 ( 0.05%)     295 ( 0.04%)    151 ( 0.05%)  71 ( 1.20%)    40 ( 0.30%)    10 ( 0.33%)  71 ( 2.19%)    32 ( 0.36%)     9 ( 0.38%)  ./elf/./elf/rtld.c:dl_main [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    1,251 ( 0.04%)      77 ( 0.01%)    947 ( 0.34%)  18 ( 0.30%)     0             20 ( 0.66%)   6 ( 0.19%)     0             18 ( 0.75%)  ./malloc/./malloc/malloc.c:tcache_init.part.0 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    1,248 ( 0.04%)     455 ( 0.07%)    273 ( 0.10%)   8 ( 0.14%)     0              0            7 ( 0.22%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_initialize_map(unsigned long) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
    1,199 ( 0.04%)     247 ( 0.04%)    143 ( 0.05%)  19 ( 0.32%)    30 ( 0.23%)     1 ( 0.03%)  15 ( 0.46%)    29 ( 0.32%)     1 ( 0.04%)  ./elf/./elf/dl-cache.c:_dl_load_cache_lookup [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    1,196 ( 0.04%)      31 ( 0.00%)    494 ( 0.18%)   9 ( 0.15%)     0            117 ( 3.86%)   7 ( 0.22%)     0            117 ( 4.89%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:memset [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    1,190 ( 0.04%)     280 ( 0.04%)    290 ( 0.10%)  30 ( 0.51%)    10 ( 0.08%)     8 ( 0.26%)   9 ( 0.28%)     1 ( 0.01%)     8 ( 0.33%)  ./nptl/./nptl/pthread_cond_wait.c:pthread_cond_wait@@GLIBC_2.3.2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    1,187 ( 0.04%)     316 ( 0.05%)    167 ( 0.06%)  16 ( 0.27%)     1 ( 0.01%)     4 ( 0.13%)  15 ( 0.46%)     1 ( 0.01%)     4 ( 0.17%)  ./elf/./elf/dl-load.c:open_path [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    1,152 ( 0.04%)     384 ( 0.06%)    192 ( 0.07%)   3 ( 0.05%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
    1,129 ( 0.04%)     214 ( 0.03%)    207 ( 0.07%)  15 ( 0.25%)     7 ( 0.05%)    40 ( 1.32%)  15 ( 0.46%)     7 ( 0.08%)    40 ( 1.67%)  ./elf/./elf/dl-object.c:_dl_new_object [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    1,125 ( 0.04%)     562 ( 0.08%)      2 ( 0.00%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           ???:0x00000000048fa1f0 [???]
    1,115 ( 0.04%)     218 ( 0.03%)    217 ( 0.08%)   4 ( 0.07%)     4 ( 0.03%)     5 ( 0.17%)   4 ( 0.12%)     3 ( 0.03%)     4 ( 0.17%)  ./elf/./elf/dl-minimal-malloc.c:__minimal_malloc [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    1,086 ( 0.04%)     362 ( 0.05%)    181 ( 0.06%)   5 ( 0.08%)     1 ( 0.01%)     5 ( 0.17%)   1 ( 0.03%)     .              .           ./nptl/./nptl/cancellation.c:__pthread_disable_asynccancel [/usr/lib/x86_64-linux-gnu/libc.so.6]
    1,068 ( 0.04%)     247 ( 0.04%)    123 ( 0.04%)  66 ( 1.12%)     2 ( 0.02%)     0            7 ( 0.22%)     1 ( 0.01%)     .           ./nptl/./nptl/pthread_mutex_lock.c:pthread_mutex_lock@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    1,044 ( 0.04%)     216 ( 0.03%)    228 ( 0.08%)   8 ( 0.14%)     0              0            6 ( 0.19%)     .              .           ???:std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<unsigned long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    1,036 ( 0.04%)     158 ( 0.02%)    177 ( 0.06%)   2 ( 0.03%)     4 ( 0.03%)     0            2 ( 0.06%)     4 ( 0.04%)     .           ./wctype/./wctype/wctype_l.c:wctype_l [/usr/lib/x86_64-linux-gnu/libc.so.6]
    1,001 ( 0.04%)     273 ( 0.04%)      0            8 ( 0.14%)     0              0            1 ( 0.03%)     .              .           ???:std::ostream::operator<<(int) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      990 ( 0.03%)     180 ( 0.03%)    228 ( 0.08%)  50 ( 0.85%)     0              0            6 ( 0.19%)     .              .           ActiveObject.cpp:ActiveObject::printStatus() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      896 ( 0.03%)     128 ( 0.02%)      0            1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           ./wcsmbs/./wcsmbsload.h:btowc
      883 ( 0.03%)     319 ( 0.05%)    148 ( 0.05%)   5 ( 0.08%)    44 ( 0.33%)    22 ( 0.73%)   5 ( 0.15%)    44 ( 0.49%)    22 ( 0.92%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_start
      880 ( 0.03%)     280 ( 0.04%)    200 ( 0.07%)  35 ( 0.59%)    11 ( 0.08%)    16 ( 0.53%)   8 ( 0.25%)     0             10 ( 0.42%)  ./nptl/./nptl/pthread_create.c:start_thread [/usr/lib/x86_64-linux-gnu/libc.so.6]
      862 ( 0.03%)     192 ( 0.03%)    125 ( 0.04%)   8 ( 0.14%)     1 ( 0.01%)     0            5 ( 0.15%)     .              .           ./nptl/./nptl/pthread_mutex_unlock.c:pthread_mutex_unlock@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      852 ( 0.03%)     162 ( 0.02%)    100 ( 0.04%)   3 ( 0.05%)     2 ( 0.02%)    17 ( 0.56%)   3 ( 0.09%)     2 ( 0.02%)    17 ( 0.71%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:mempcpy [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      843 ( 0.03%)     167 ( 0.02%)     68 ( 0.02%)  15 ( 0.25%)     0              0           11 ( 0.34%)     .              .           ./malloc/./malloc/malloc.c:calloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
      840 ( 0.03%)     120 ( 0.02%)      0            1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           ???:__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::overflow(int) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      840 ( 0.03%)       .               .            .              .              .            .              .              .           ./libio/./libio/libioP.h:__overflow
      816 ( 0.03%)     138 ( 0.02%)    174 ( 0.06%)   9 ( 0.15%)     0              1 ( 0.03%)   8 ( 0.25%)     .              .           ActiveObject.cpp:ActiveObject::~ActiveObject() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      815 ( 0.03%)     165 ( 0.02%)      0            2 ( 0.03%)    20 ( 0.15%)     0            2 ( 0.06%)    20 ( 0.22%)     .           ./elf/./elf/do-rel.h:_dl_start
      813 ( 0.03%)     110 ( 0.02%)      0            4 ( 0.07%)     5 ( 0.04%)     0            4 ( 0.12%)     5 ( 0.06%)     .           ./string/../sysdeps/x86_64/multiarch/strlen-vec.S:strlen [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      779 ( 0.03%)     342 ( 0.05%)    171 ( 0.06%)   3 ( 0.05%)     0              0            3 ( 0.09%)     .              .           /usr/include/c++/11/bits/deque.tcc:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_destroy_data_aux(std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>, std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      776 ( 0.03%)       0             131 ( 0.05%)   2 ( 0.03%)     0             35 ( 1.16%)   2 ( 0.06%)     0             35 ( 1.46%)  ./malloc/./malloc/malloc.c:ptmalloc_init.part.0
      774 ( 0.03%)     258 ( 0.04%)      .            .              .              .            .              .              .           ./elf/../sysdeps/nptl/dl-tls_init_tp.c:rtld_mutex_dummy [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      769 ( 0.03%)       0             129 ( 0.05%)   0              0             33 ( 1.09%)   0              0             33 ( 1.38%)  ./malloc/./malloc/malloc.c:arena_get2.part.0
      768 ( 0.03%)     384 ( 0.06%)      0            1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           ./elf/./elf/dl-profstub.c:_dl_mcount_wrapper_check [/usr/lib/x86_64-linux-gnu/libc.so.6]
      768 ( 0.03%)     128 ( 0.02%)      0            2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           ./iconv/./iconv/gconv_simple.c:__gconv_btwoc_ascii [/usr/lib/x86_64-linux-gnu/libc.so.6]
      750 ( 0.03%)     138 ( 0.02%)    174 ( 0.06%)  11 ( 0.19%)     3 ( 0.02%)    12 ( 0.40%)  11 ( 0.34%)     0             12 ( 0.50%)  ActiveObject.cpp:ActiveObject::work() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      745 ( 0.03%)     228 ( 0.03%)     81 ( 0.03%)   7 ( 0.12%)     0              1 ( 0.03%)   7 ( 0.22%)     0              1 ( 0.04%)  ./elf/./dl-map-segments.h:_dl_map_object_from_fd
      744 ( 0.03%)      93 ( 0.01%)      0            5 ( 0.08%)     7 ( 0.05%)     0            5 ( 0.15%)     7 ( 0.08%)     .           ./string/../sysdeps/x86_64/multiarch/../strchr.S:index [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      740 ( 0.03%)     144 ( 0.02%)     36 ( 0.01%)   3 ( 0.05%)    37 ( 0.28%)     0            3 ( 0.09%)    36 ( 0.40%)     .           ./elf/./elf/dl-tunables.c:__tunable_get_val [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      732 ( 0.03%)     122 ( 0.02%)    122 ( 0.04%)  24 ( 0.41%)     0              0            2 ( 0.06%)     .              .           ???:operator new(unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      732 ( 0.03%)      36 ( 0.01%)     38 ( 0.01%)  10 ( 0.17%)     6 ( 0.05%)     1 ( 0.03%)  10 ( 0.31%)     4 ( 0.04%)     .           ???:std::ctype<char>::_M_widen_init() const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      731 ( 0.03%)     190 ( 0.03%)    151 ( 0.05%)   8 ( 0.14%)    21 ( 0.16%)    33 ( 1.09%)   7 ( 0.22%)    21 ( 0.23%)    33 ( 1.38%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:memcpy [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      708 ( 0.03%)     106 ( 0.02%)    174 ( 0.06%)   4 ( 0.07%)     0              1 ( 0.03%)   4 ( 0.12%)     0              1 ( 0.04%)  ./elf/../sysdeps/x86/dl-cacheinfo.h:handle_intel.constprop.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      705 ( 0.02%)     178 ( 0.03%)     81 ( 0.03%)   7 ( 0.12%)     5 ( 0.04%)     0            7 ( 0.22%)     3 ( 0.03%)     .           ./stdlib/./stdlib/cxa_finalize.c:__cxa_finalize [/usr/lib/x86_64-linux-gnu/libc.so.6]
      700 ( 0.02%)     210 ( 0.03%)    210 ( 0.08%)   3 ( 0.05%)     .              .            .              .              .           /usr/include/c++/11/tuple:std::thread*& std::__get_helper<0ul, std::thread*, std::default_delete<std::thread> >(std::_Tuple_impl<0ul, std::thread*, std::default_delete<std::thread> >&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      700 ( 0.02%)     210 ( 0.03%)    210 ( 0.08%)   2 ( 0.03%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::_M_ptr() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      700 ( 0.02%)     210 ( 0.03%)    210 ( 0.08%)   2 ( 0.03%)     .              .            .              .              .           /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, std::thread*, std::default_delete<std::thread> >::_M_head(std::_Tuple_impl<0ul, std::thread*, std::default_delete<std::thread> >&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      700 ( 0.02%)     210 ( 0.03%)    210 ( 0.08%)   .              .              .            .              .              .           /usr/include/c++/11/tuple:std::tuple_element<0ul, std::tuple<std::thread*, std::default_delete<std::thread> > >::type& std::get<0ul, std::thread*, std::default_delete<std::thread> >(std::tuple<std::thread*, std::default_delete<std::thread> >&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      696 ( 0.02%)     172 ( 0.02%)    132 ( 0.05%)   7 ( 0.12%)     8 ( 0.06%)     0            6 ( 0.19%)     .              .           ./nptl/./nptl/pthread_join_common.c:__pthread_clockjoin_ex [/usr/lib/x86_64-linux-gnu/libc.so.6]
      694 ( 0.02%)     123 ( 0.02%)    111 ( 0.04%)  36 ( 0.61%)     0              8 ( 0.26%)  36 ( 1.11%)     0              8 ( 0.33%)  ./elf/./elf/dl-hwcaps.c:_dl_important_hwcaps [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      684 ( 0.02%)     276 ( 0.04%)    108 ( 0.04%)  15 ( 0.25%)     0              0            5 ( 0.15%)     .              .           ???:std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      679 ( 0.02%)     212 ( 0.03%)    150 ( 0.05%)  15 ( 0.25%)     0              0           14 ( 0.43%)     .              .           Server.cpp:Server::handleConnections() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      666 ( 0.02%)      88 ( 0.01%)    385 ( 0.14%)  55 ( 0.93%)    25 ( 0.19%)    50 ( 1.65%)  55 ( 1.70%)     2 ( 0.02%)    50 ( 2.09%)  ???:std::locale::_Impl::_Impl(unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      663 ( 0.02%)     119 ( 0.02%)    170 ( 0.06%)   3 ( 0.05%)     0              9 ( 0.30%)   3 ( 0.09%)     0              9 ( 0.38%)  ./stdlib/./stdlib/cxa_atexit.c:__cxa_atexit [/usr/lib/x86_64-linux-gnu/libc.so.6]
      650 ( 0.02%)     286 ( 0.04%)    208 ( 0.07%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>::_M_set_node(std::weak_ptr<Graph>**) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      633 ( 0.02%)     316 ( 0.05%)      2 ( 0.00%)   0              1 ( 0.01%)     0            0              1 ( 0.01%)     .           ???:0x00000000048f9bf0 [???]
      630 ( 0.02%)     140 ( 0.02%)    190 ( 0.07%)   8 ( 0.14%)     0              0            6 ( 0.19%)     .              .           ./nptl/./nptl/pthread_create.c:create_thread [/usr/lib/x86_64-linux-gnu/libc.so.6]
      627 ( 0.02%)     152 ( 0.02%)    171 ( 0.06%)   8 ( 0.14%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_destroy_data(std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>, std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>, std::allocator<std::weak_ptr<Graph> > const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      626 ( 0.02%)     313 ( 0.05%)      0            1 ( 0.02%)     1 ( 0.01%)     0            1 ( 0.03%)     1 ( 0.01%)     .           ???:0x0000000004acc3e0 [???]
      624 ( 0.02%)     144 ( 0.02%)     24 ( 0.01%)   9 ( 0.15%)     0              0            3 ( 0.09%)     .              .           ./elf/../elf/dl-tls.c:_dl_deallocate_tls [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      608 ( 0.02%)     119 ( 0.02%)     86 ( 0.03%)   4 ( 0.07%)     4 ( 0.03%)     1 ( 0.03%)   4 ( 0.12%)     2 ( 0.02%)     .           ./stdlib/./stdlib/cxa_atexit.c:__new_exitfn [/usr/lib/x86_64-linux-gnu/libc.so.6]
      600 ( 0.02%)     108 ( 0.02%)    108 ( 0.04%)  22 ( 0.37%)     3 ( 0.02%)    14 ( 0.46%)   5 ( 0.15%)     0             13 ( 0.54%)  ./nptl/./nptl/futex-internal.c:__futex_abstimed_wait_cancelable64 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      594 ( 0.02%)     231 ( 0.03%)    126 ( 0.05%)   4 ( 0.07%)     0              0            4 ( 0.12%)     .              .           ./libio/./libio/getc.c:getc [/usr/lib/x86_64-linux-gnu/libc.so.6]
      593 ( 0.02%)     156 ( 0.02%)     40 ( 0.01%)  16 ( 0.27%)    22 ( 0.17%)     6 ( 0.20%)  16 ( 0.49%)    22 ( 0.24%)     6 ( 0.25%)  ./elf/../elf/dl-sysdep.c:_dl_sysdep_start [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      588 ( 0.02%)     180 ( 0.03%)    144 ( 0.05%)   9 ( 0.15%)     0              0            6 ( 0.19%)     .              .           /usr/include/c++/11/bits/basic_string.tcc:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      576 ( 0.02%)     100 ( 0.01%)     36 ( 0.01%)   2 ( 0.03%)     3 ( 0.02%)     0            2 ( 0.06%)     .              .           ./elf/./elf/dl-find_object.c:_dlfo_sort_mappings [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      570 ( 0.02%)     228 ( 0.03%)    228 ( 0.08%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>::_Deque_iterator() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      560 ( 0.02%)     224 ( 0.03%)    168 ( 0.06%)   2 ( 0.03%)     0              6 ( 0.20%)   1 ( 0.03%)     0              6 ( 0.25%)  /usr/include/c++/11/bits/atomic_base.h:std::operator&(std::memory_order, std::__memory_order_modifier) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      545 ( 0.02%)     187 ( 0.03%)      2 ( 0.00%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           ./elf/./elf/dl-environ.c:_dl_next_ld_env_entry [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      536 ( 0.02%)     130 ( 0.02%)     24 ( 0.01%)   8 ( 0.14%)     6 ( 0.05%)     3 ( 0.10%)   8 ( 0.25%)     4 ( 0.04%)     3 ( 0.13%)  ./elf/./elf/dl-find_object.c:_dlfo_process_initial [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      530 ( 0.02%)     161 ( 0.02%)     86 ( 0.03%)   6 ( 0.10%)     7 ( 0.05%)     0            6 ( 0.19%)     7 ( 0.08%)     .           ./elf/./elf/dl-sort-maps.c:dfs_traversal.part.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      530 ( 0.02%)     115 ( 0.02%)    196 ( 0.07%)   7 ( 0.12%)     1 ( 0.01%)    12 ( 0.40%)   6 ( 0.19%)     1 ( 0.01%)    12 ( 0.50%)  ./setjmp/../sysdeps/x86_64/setjmp.S:__sigsetjmp [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      518 ( 0.02%)      84 ( 0.01%)     91 ( 0.03%)  10 ( 0.17%)     0              0            6 ( 0.19%)     .              .           ./nptl/./nptl/pthread_cond_common.c:pthread_cond_broadcast@@GLIBC_2.3.2
      517 ( 0.02%)     258 ( 0.04%)      2 ( 0.00%)   2 ( 0.03%)     1 ( 0.01%)     0            2 ( 0.06%)     .              .           ???:0x00000000048f9a60 [???]
      516 ( 0.02%)     192 ( 0.03%)     48 ( 0.02%)   3 ( 0.05%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::operator-(std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*> const&, std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*> const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      516 ( 0.02%)     180 ( 0.03%)    132 ( 0.05%)  16 ( 0.27%)     0              0            4 ( 0.12%)     .              .           /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      510 ( 0.02%)     120 ( 0.02%)    144 ( 0.05%)  10 ( 0.17%)     2 ( 0.02%)     0            8 ( 0.25%)     .              .           ActiveObject.cpp:ActiveObject::ActiveObject(int) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      507 ( 0.02%)     143 ( 0.02%)    117 ( 0.04%)   2 ( 0.03%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::~deque() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      504 ( 0.02%)     136 ( 0.02%)     32 ( 0.01%)   2 ( 0.03%)    73 ( 0.55%)     3 ( 0.10%)   2 ( 0.06%)    71 ( 0.79%)     3 ( 0.13%)  ./elf/./dl-find_object.h:_dl_find_object_from_map [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      502 ( 0.02%)      93 ( 0.01%)     42 ( 0.02%)   6 ( 0.10%)     3 ( 0.02%)     0            6 ( 0.19%)     3 ( 0.03%)     .           ./elf/../sysdeps/x86/dl-prop.h:_dl_map_object_from_fd
      499 ( 0.02%)     168 ( 0.02%)     79 ( 0.03%)  13 ( 0.22%)     1 ( 0.01%)     0           13 ( 0.40%)     .              .           ???:std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      490 ( 0.02%)     210 ( 0.03%)    140 ( 0.05%)   .              .              .            .              .              .           /usr/include/c++/11/tuple:std::_Head_base<0ul, std::thread*, false>::_M_head(std::_Head_base<0ul, std::thread*, false>&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      490 ( 0.02%)      10 ( 0.00%)    200 ( 0.07%)  25 ( 0.42%)     0             38 ( 1.25%)   4 ( 0.12%)     0             38 ( 1.59%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_sse2_unaligned [/usr/lib/x86_64-linux-gnu/libc.so.6]
      486 ( 0.02%)     102 ( 0.01%)    156 ( 0.06%)   7 ( 0.12%)     0              0            7 ( 0.22%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<ActiveObject, std::allocator<ActiveObject>, int&>(ActiveObject*&, std::_Sp_alloc_shared_tag<std::allocator<ActiveObject> >, int&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      464 ( 0.02%)       8 ( 0.00%)    192 ( 0.07%)   3 ( 0.05%)     0             29 ( 0.96%)   3 ( 0.09%)     0             19 ( 0.79%)  ???:std::ios_base::ios_base() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      462 ( 0.02%)     198 ( 0.03%)    132 ( 0.05%)   .              .              .            .              .              .           /usr/include/c++/11/bits/move.h:ActiveObject*&& std::forward<ActiveObject*>(std::remove_reference<ActiveObject*>::type&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      462 ( 0.02%)     132 ( 0.02%)     99 ( 0.04%)  13 ( 0.22%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::empty() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      453 ( 0.02%)     160 ( 0.02%)    121 ( 0.04%)   4 ( 0.07%)     3 ( 0.02%)     0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_destroy_nodes(std::weak_ptr<Graph>**, std::weak_ptr<Graph>**) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      452 ( 0.02%)     156 ( 0.02%)    132 ( 0.05%)  29 ( 0.49%)     0              0            8 ( 0.25%)     .              .           /usr/include/c++/11/bits/vector.tcc:void std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::_M_realloc_insert<std::shared_ptr<ActiveObject> >(__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >, std::shared_ptr<ActiveObject>&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      444 ( 0.02%)     152 ( 0.02%)    132 ( 0.05%)  18 ( 0.30%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::~unique_ptr() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      442 ( 0.02%)     130 ( 0.02%)    130 ( 0.05%)   8 ( 0.14%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_get_map_allocator() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      440 ( 0.02%)     160 ( 0.02%)    100 ( 0.04%)   5 ( 0.08%)     3 ( 0.02%)     0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/std_thread.h:std::thread::joinable() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      438 ( 0.02%)     180 ( 0.03%)    174 ( 0.06%)  23 ( 0.39%)     0              0            5 ( 0.15%)     .              .           /usr/include/c++/11/bits/move.h:std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data> >, std::is_move_constructible<std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data>, std::is_move_assignable<std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data> >::value, void>::type std::swap<std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data>(std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data&, std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      430 ( 0.02%)     129 ( 0.02%)    172 ( 0.06%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/atomic:std::atomic<bool>::operator bool() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      429 ( 0.02%)     198 ( 0.03%)     99 ( 0.04%)   3 ( 0.05%)     3 ( 0.02%)     0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::operator==(std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*> const&, std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*> const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      428 ( 0.02%)     154 ( 0.02%)     77 ( 0.03%)   6 ( 0.10%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      427 ( 0.02%)     213 ( 0.03%)      2 ( 0.00%) 129 ( 2.18%)     2 ( 0.02%)     0            2 ( 0.06%)     .              .           ???:0x00000000048f89f0 [???]
      423 ( 0.01%)     108 ( 0.02%)    191 ( 0.07%)  28 ( 0.47%)     4 ( 0.03%)    16 ( 0.53%)  28 ( 0.86%)     1 ( 0.01%)    13 ( 0.54%)  ???:std::ios_base::Init::Init() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      421 ( 0.01%)     125 ( 0.02%)     66 ( 0.02%)   4 ( 0.07%)    27 ( 0.20%)     0            4 ( 0.12%)    25 ( 0.28%)     .           ./elf/./elf/dl-init.c:call_init.part.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      420 ( 0.01%)     170 ( 0.02%)    140 ( 0.05%)   8 ( 0.14%)     1 ( 0.01%)     0            4 ( 0.12%)     .              .           ./nptl/./nptl/pthread_attr_copy.c:__pthread_attr_copy [/usr/lib/x86_64-linux-gnu/libc.so.6]
      420 ( 0.01%)     120 ( 0.02%)    120 ( 0.04%)   3 ( 0.05%)     0              0            3 ( 0.09%)     .              .           ./malloc/./malloc/arena.c:__malloc_arena_thread_freeres [/usr/lib/x86_64-linux-gnu/libc.so.6]
      420 ( 0.01%)      84 ( 0.01%)    156 ( 0.06%)   3 ( 0.05%)     0              3 ( 0.10%)   3 ( 0.09%)     0              3 ( 0.13%)  ./elf/./elf/dl-error-skeleton.c:_dl_catch_exception [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      416 ( 0.01%)     195 ( 0.03%)     65 ( 0.02%)   .              .              .            .              .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::~_Deque_base() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      416 ( 0.01%)     104 ( 0.02%)    104 ( 0.04%)   4 ( 0.07%)     0              0            3 ( 0.09%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_allocate_map(unsigned long) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      414 ( 0.01%)     137 ( 0.02%)     75 ( 0.03%)   7 ( 0.12%)     4 ( 0.03%)     0            7 ( 0.22%)     4 ( 0.04%)     .           ???:std::__cxx11::numpunct<char>::_M_initialize_numpunct(__locale_struct*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      414 ( 0.01%)     137 ( 0.02%)     75 ( 0.03%)   5 ( 0.08%)     0              0            5 ( 0.15%)     .              .           ???:std::numpunct<char>::_M_initialize_numpunct(__locale_struct*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      414 ( 0.01%)     112 ( 0.02%)     75 ( 0.03%)  12 ( 0.20%)    28 ( 0.21%)     5 ( 0.17%)  12 ( 0.37%)    12 ( 0.13%)     5 ( 0.21%)  ./elf/./elf/dl-fini.c:_dl_fini [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      407 ( 0.01%)     203 ( 0.03%)      2 ( 0.00%)   3 ( 0.05%)     1 ( 0.01%)     0            2 ( 0.06%)     .              .           ???:0x00000000048f7bb0 [???]
      404 ( 0.01%)     105 ( 0.02%)     92 ( 0.03%)   5 ( 0.08%)     1 ( 0.01%)     0            4 ( 0.12%)     1 ( 0.01%)     .           /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      400 ( 0.01%)     180 ( 0.03%)     90 ( 0.03%)   4 ( 0.07%)     0              0            3 ( 0.09%)     .              .           ./misc/../sysdeps/unix/sysv/linux/clone-internal.c:__clone_internal [/usr/lib/x86_64-linux-gnu/libc.so.6]
      399 ( 0.01%)      63 ( 0.01%)     63 ( 0.02%)   7 ( 0.12%)     5 ( 0.04%)     1 ( 0.03%)   7 ( 0.22%)     1 ( 0.01%)     1 ( 0.04%)  ./stdlib/./stdlib/exit.c:__run_exit_handlers [/usr/lib/x86_64-linux-gnu/libc.so.6]
      396 ( 0.01%)     198 ( 0.03%)      0            6 ( 0.10%)     0              0            1 ( 0.03%)     .              .           ???:0x000000000010c8b0 [???]
      396 ( 0.01%)      50 ( 0.01%)     84 ( 0.03%)  18 ( 0.30%)     1 ( 0.01%)     0            7 ( 0.22%)     1 ( 0.01%)     .           Pipeline.cpp:Pipeline::createAOStages() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      392 ( 0.01%)      80 ( 0.01%)     67 ( 0.02%)   3 ( 0.05%)     1 ( 0.01%)     0            3 ( 0.09%)     1 ( 0.01%)     .           ./elf/./elf/dl-hwcaps_split.c:_dl_hwcaps_split_masked [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      387 ( 0.01%)     129 ( 0.02%)    129 ( 0.05%)  15 ( 0.25%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/std_thread.h:std::thread::id::id() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      387 ( 0.01%)     129 ( 0.02%)     86 ( 0.03%)   1 ( 0.02%)     0              4 ( 0.13%)   1 ( 0.03%)     0              4 ( 0.17%)  /usr/include/c++/11/bits/atomic_base.h:std::atomic<bool>::operator bool() const
      384 ( 0.01%)     128 ( 0.02%)      0            1 ( 0.02%)     1 ( 0.01%)     0            1 ( 0.03%)     .              .           ???:__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::sync() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      383 ( 0.01%)     191 ( 0.03%)      2 ( 0.00%)  14 ( 0.24%)     1 ( 0.01%)     0            2 ( 0.06%)     .              .           ???:0x00000000048f76b0 [???]
      380 ( 0.01%)     114 ( 0.02%)    114 ( 0.04%)   3 ( 0.05%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data::_Deque_impl_data() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      378 ( 0.01%)     162 ( 0.02%)    108 ( 0.04%)   .              .              .            .              .              .           /usr/include/c++/11/bits/move.h:void (ActiveObject::*&&std::forward<void (ActiveObject::*)()>(std::remove_reference<void (ActiveObject::*)()>::type&))() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      378 ( 0.01%)      18 ( 0.00%)     30 ( 0.01%)   2 ( 0.03%)     0              2 ( 0.07%)   2 ( 0.06%)     0              2 ( 0.08%)  ./io/../sysdeps/unix/sysv/linux/open64_nocancel.c:__open_nocancel [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      377 ( 0.01%)     104 ( 0.02%)    104 ( 0.04%)   2 ( 0.03%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_deallocate_map(std::weak_ptr<Graph>**, unsigned long) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      374 ( 0.01%)     132 ( 0.02%)    132 ( 0.05%)   3 ( 0.05%)     1 ( 0.01%)     2 ( 0.07%)   3 ( 0.09%)     0              1 ( 0.04%)  ???:std::locale::locale() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      368 ( 0.01%)     144 ( 0.02%)     64 ( 0.02%)  14 ( 0.24%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/unique_lock.h:std::unique_lock<std::mutex>::unlock() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      360 ( 0.01%)     108 ( 0.02%)     84 ( 0.03%)   3 ( 0.05%)     0              0            3 ( 0.09%)     .              .           /usr/include/c++/11/thread:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::thread::id) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      360 ( 0.01%)      90 ( 0.01%)     90 ( 0.03%)  18 ( 0.30%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      357 ( 0.01%)      51 ( 0.01%)      0            7 ( 0.12%)     0              0            1 ( 0.03%)     .              .           ./nptl/./nptl/lowlevellock.c:__lll_lock_wake_private [/usr/lib/x86_64-linux-gnu/libc.so.6]
      355 ( 0.01%)     106 ( 0.02%)     84 ( 0.03%)  16 ( 0.27%)     0              0            4 ( 0.12%)     .              .           ./malloc/./malloc/arena.c:get_free_list [/usr/lib/x86_64-linux-gnu/libc.so.6]
      352 ( 0.01%)     144 ( 0.02%)     64 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_lock.h:std::unique_lock<std::mutex>::lock() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      352 ( 0.01%)     128 ( 0.02%)     96 ( 0.03%)   8 ( 0.14%)     .              .            .              .              .           /usr/include/c++/11/bits/std_thread.h:std::operator==(std::thread::id, std::thread::id) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      352 ( 0.01%)     100 ( 0.01%)     96 ( 0.03%)   3 ( 0.05%)     2 ( 0.02%)     0            3 ( 0.09%)     .              .           ./nptl/./nptl/nptl-stack.c:__nptl_deallocate_stack [/usr/lib/x86_64-linux-gnu/libc.so.6]
      351 ( 0.01%)     130 ( 0.02%)    117 ( 0.04%)   2 ( 0.03%)     0              1 ( 0.03%)   2 ( 0.06%)     0              1 ( 0.04%)  /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_create_nodes(std::weak_ptr<Graph>**, std::weak_ptr<Graph>**) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      350 ( 0.01%)     150 ( 0.02%)    100 ( 0.04%)   2 ( 0.03%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_get_Tp_allocator() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      350 ( 0.01%)      74 ( 0.01%)     74 ( 0.03%)   6 ( 0.10%)     0              0            6 ( 0.19%)     .              .           ???:std::numpunct<wchar_t>::_M_initialize_numpunct(__locale_struct*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      350 ( 0.01%)      74 ( 0.01%)     74 ( 0.03%)   5 ( 0.08%)     1 ( 0.01%)     3 ( 0.10%)   5 ( 0.15%)     1 ( 0.01%)     3 ( 0.13%)  ???:std::__cxx11::numpunct<wchar_t>::_M_initialize_numpunct(__locale_struct*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      350 ( 0.01%)       7 ( 0.00%)    319 ( 0.11%)   3 ( 0.05%)     0             41 ( 1.35%)   3 ( 0.09%)     0             41 ( 1.71%)  ./elf/../elf/dl-tls.c:_dl_allocate_tls_storage [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      344 ( 0.01%)      74 ( 0.01%)     48 ( 0.02%)  19 ( 0.32%)     1 ( 0.01%)     0           19 ( 0.59%)     1 ( 0.01%)     .           ./elf/./elf/dl-sort-maps.c:_dl_sort_maps [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      342 ( 0.01%)     126 ( 0.02%)     84 ( 0.03%)  13 ( 0.22%)     0              0            3 ( 0.09%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_erase_at_end(std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      342 ( 0.01%)      52 ( 0.01%)     39 ( 0.01%)  10 ( 0.17%)     8 ( 0.06%)     6 ( 0.20%)  10 ( 0.31%)     8 ( 0.09%)     6 ( 0.25%)  ./elf/./get-dynamic-info.h:dl_main
      338 ( 0.01%)     117 ( 0.02%)     91 ( 0.03%)   5 ( 0.08%)     0              1 ( 0.03%)   1 ( 0.03%)     0              1 ( 0.04%)  /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      336 ( 0.01%)     144 ( 0.02%)     96 ( 0.03%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/move.h:int& std::forward<int&>(std::remove_reference<int&>::type&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      336 ( 0.01%)     112 ( 0.02%)    128 ( 0.05%)   5 ( 0.08%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_lock.h:std::unique_lock<std::mutex>::unique_lock(std::mutex&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      333 ( 0.01%)      37 ( 0.01%)      0            2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           ./misc/../sysdeps/unix/sysv/linux/mmap64.c:mmap [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      330 ( 0.01%)      99 ( 0.01%)     99 ( 0.04%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_queue.h:std::queue<std::weak_ptr<Graph>, std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::empty() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      330 ( 0.01%)      90 ( 0.01%)     90 ( 0.03%)  11 ( 0.19%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObject>::~shared_ptr() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      329 ( 0.01%)      72 ( 0.01%)     55 ( 0.02%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           ./nptl/./nptl/lowlevellock.c:__lll_lock_wait_private [/usr/lib/x86_64-linux-gnu/libc.so.6]
      324 ( 0.01%)     108 ( 0.02%)    108 ( 0.04%)   1 ( 0.02%)     .              .            .              .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::reset(std::thread*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      322 ( 0.01%)     138 ( 0.02%)     69 ( 0.02%)   2 ( 0.03%)     2 ( 0.02%)     0            2 ( 0.06%)     .              .           /usr/include/c++/11/ext/atomicity.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()
      322 ( 0.01%)       0               0            1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           ./libio/./libio/libioP.h:_IO_file_xsputn@@GLIBC_2.2.5
      318 ( 0.01%)      72 ( 0.01%)    102 ( 0.04%)   9 ( 0.15%)     0              0            4 ( 0.12%)     .              .           /usr/include/c++/11/bits/std_thread.h:std::thread::thread<void (ActiveObject::*)(), ActiveObject*, void>(void (ActiveObject::*&&)(), ActiveObject*&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      318 ( 0.01%)      66 ( 0.01%)     66 ( 0.02%)   5 ( 0.08%)     0              0            4 ( 0.12%)     .              .           ActiveObject.cpp:ActiveObject::stopProcess() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      312 ( 0.01%)      78 ( 0.01%)    104 ( 0.04%)  13 ( 0.22%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/allocator.h:std::allocator<std::weak_ptr<Graph>*>::allocator<std::weak_ptr<Graph> >(std::allocator<std::weak_ptr<Graph> > const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      312 ( 0.01%)      65 ( 0.01%)     78 ( 0.03%)   8 ( 0.14%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::weak_ptr<Graph>*>::allocate(unsigned long, void const*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      312 ( 0.01%)      65 ( 0.01%)     78 ( 0.03%)   4 ( 0.07%)     0              0            3 ( 0.09%)     .              .           /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::weak_ptr<Graph> >::allocate(unsigned long, void const*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      312 ( 0.01%)      52 ( 0.01%)     55 ( 0.02%)  16 ( 0.27%)     2 ( 0.02%)     5 ( 0.17%)  16 ( 0.49%)     2 ( 0.02%)     5 ( 0.21%)  ./elf/./elf/dl-load.c:_dl_init_paths [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      311 ( 0.01%)      20 ( 0.00%)      0            0              3 ( 0.02%)     .            .              .              .           ./malloc/./malloc/arena.c:free
      310 ( 0.01%)      18 ( 0.00%)      1 ( 0.00%)   5 ( 0.08%)     0              1 ( 0.03%)   1 ( 0.03%)     0              1 ( 0.04%)  ./nptl/../sysdeps/nptl/futex-internal.h:__lll_lock_wait_private
      308 ( 0.01%)     132 ( 0.02%)     88 ( 0.03%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/move.h:LeaderFollower*&& std::forward<LeaderFollower*>(std::remove_reference<LeaderFollower*>::type&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      306 ( 0.01%)      78 ( 0.01%)     84 ( 0.03%)  10 ( 0.17%)     0              0            5 ( 0.15%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<int&>(std::allocator<ActiveObject>, int&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      300 ( 0.01%)      80 ( 0.01%)    100 ( 0.04%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/alloc_traits.h:void std::_Destroy<std::weak_ptr<Graph>*, std::weak_ptr<Graph> >(std::weak_ptr<Graph>*, std::weak_ptr<Graph>*, std::allocator<std::weak_ptr<Graph> >&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      299 ( 0.01%)      65 ( 0.01%)    104 ( 0.04%)   .              .              .            .              .              .           /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::shared_ptr<ActiveObject> >::construct<std::shared_ptr<ActiveObject>, std::shared_ptr<ActiveObject> >(std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      294 ( 0.01%)     101 ( 0.01%)    122 ( 0.04%)  25 ( 0.42%)     5 ( 0.04%)     6 ( 0.20%)  25 ( 0.77%)     1 ( 0.01%)     6 ( 0.25%)  ???:0x00000000000dc6c0 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      288 ( 0.01%)     168 ( 0.02%)     84 ( 0.03%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::unique_ptr<std::thread, std::default_delete<std::thread> >&, std::unique_ptr<std::thread, std::default_delete<std::thread> >*>::_Deque_iterator(std::_Deque_iterator<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::unique_ptr<std::thread, std::default_delete<std::thread> >&, std::unique_ptr<std::thread, std::default_delete<std::thread> >*> const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      288 ( 0.01%)      90 ( 0.01%)     63 ( 0.02%)   4 ( 0.07%)     0              0            4 ( 0.12%)     .              .           ./libio/./libio/ioungetc.c:ungetc [/usr/lib/x86_64-linux-gnu/libc.so.6]
      286 ( 0.01%)     104 ( 0.02%)     78 ( 0.03%)   1 ( 0.02%)     1 ( 0.01%)     0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::_M_ptr() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      286 ( 0.01%)      78 ( 0.01%)     78 ( 0.03%)   .              .              .            .              .              .           /usr/include/c++/11/bits/allocator.h:std::allocator<std::weak_ptr<Graph>*>::~allocator() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      286 ( 0.01%)      52 ( 0.01%)    169 ( 0.06%)   2 ( 0.03%)     0              9 ( 0.30%)   2 ( 0.06%)     0              9 ( 0.38%)  /usr/include/c++/11/bits/stl_queue.h:std::queue<std::weak_ptr<Graph>, std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::queue<std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >, void>() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      285 ( 0.01%)      95 ( 0.01%)     76 ( 0.03%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::begin() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      285 ( 0.01%)      95 ( 0.01%)     76 ( 0.03%)   .              .              .            .              .              .           /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::end() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      280 ( 0.01%)     105 ( 0.02%)    105 ( 0.04%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/new:operator new(unsigned long, void*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      280 ( 0.01%)      80 ( 0.01%)     80 ( 0.03%)   1 ( 0.02%)     .              .            .              .              .           /usr/include/c++/11/bits/stl_construct.h:void std::_Destroy<std::weak_ptr<Graph>*>(std::weak_ptr<Graph>*, std::weak_ptr<Graph>*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      280 ( 0.01%)      80 ( 0.01%)     60 ( 0.02%)   2 ( 0.03%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_construct.h:void std::_Destroy_aux<false>::__destroy<std::weak_ptr<Graph>*>(std::weak_ptr<Graph>*, std::weak_ptr<Graph>*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      280 ( 0.01%)      70 ( 0.01%)     30 ( 0.01%)   3 ( 0.05%)     1 ( 0.01%)     0            2 ( 0.06%)     .              .           ./nptl/../nptl/pthread_mutex_lock.c:__pthread_mutex_cond_lock [/usr/lib/x86_64-linux-gnu/libc.so.6]
      280 ( 0.01%)      50 ( 0.01%)      0           11 ( 0.19%)     0              0            5 ( 0.15%)     .              .           ./malloc/./malloc/arena.c:_int_free
      278 ( 0.01%)      91 ( 0.01%)     91 ( 0.03%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_uninitialized.h:std::shared_ptr<ActiveObject>* std::__relocate_a_1<std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::allocator<std::shared_ptr<ActiveObject> > >(std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::allocator<std::shared_ptr<ActiveObject> >&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      278 ( 0.01%)      16 ( 0.00%)     29 ( 0.01%)  30 ( 0.51%)     3 ( 0.02%)     1 ( 0.03%)  30 ( 0.93%)     3 ( 0.03%)     1 ( 0.04%)  ???:__cpu_indicator_init [/usr/lib/x86_64-linux-gnu/libgcc_s.so.1]
      276 ( 0.01%)     114 ( 0.02%)    102 ( 0.04%)  14 ( 0.24%)     0              0            4 ( 0.12%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data::_Deque_impl_data(std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      276 ( 0.01%)      51 ( 0.01%)     42 ( 0.02%)   8 ( 0.14%)     0              0            7 ( 0.22%)     .              .           ./misc/../sysdeps/unix/sysv/linux/select.c:select [/usr/lib/x86_64-linux-gnu/libc.so.6]
      273 ( 0.01%)       0               0            1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           ???:std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      271 ( 0.01%)     135 ( 0.02%)      2 ( 0.00%)   2 ( 0.03%)     1 ( 0.01%)     0            2 ( 0.06%)     .              .           ???:0x00000000048fa340 [???]
      270 ( 0.01%)      72 ( 0.01%)     48 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           ActiveObject.cpp:ActiveObject::work()::{lambda()#1}::operator()() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      268 ( 0.01%)      95 ( 0.01%)     39 ( 0.01%)   7 ( 0.12%)     7 ( 0.05%)     0            7 ( 0.22%)     3 ( 0.03%)     .           ./elf/./elf/dl-lookup-direct.c:_dl_lookup_direct [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      266 ( 0.01%)      76 ( 0.01%)     76 ( 0.03%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>::_S_buffer_size() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      265 ( 0.01%)      62 ( 0.01%)     53 ( 0.02%)   3 ( 0.05%)     0              0            3 ( 0.09%)     .              .           ./elf/./elf/dl-object.c:_dl_add_to_namespace_list [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      264 ( 0.01%)     110 ( 0.02%)     88 ( 0.03%)   2 ( 0.03%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >::__normal_iterator(std::shared_ptr<ActiveObject>* const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      264 ( 0.01%)      96 ( 0.01%)     42 ( 0.02%)   2 ( 0.03%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/std_function.h:std::_Function_base::~_Function_base() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      264 ( 0.01%)      72 ( 0.01%)     72 ( 0.03%)   .              .              .            .              .              .           /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObject>::~allocator() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      261 ( 0.01%)     130 ( 0.02%)      2 ( 0.00%)   2 ( 0.03%)     1 ( 0.01%)     0            2 ( 0.06%)     .              .           ???:0x00000000048f7f30 [???]
      260 ( 0.01%)      78 ( 0.01%)     78 ( 0.03%)  14 ( 0.24%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/tuple:std::thread* const& std::__get_helper<0ul, std::thread*, std::default_delete<std::thread> >(std::_Tuple_impl<0ul, std::thread*, std::default_delete<std::thread> > const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      260 ( 0.01%)      78 ( 0.01%)     78 ( 0.03%)   9 ( 0.15%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/tuple:std::tuple_element<0ul, std::tuple<std::thread*, std::default_delete<std::thread> > >::type const& std::get<0ul, std::thread*, std::default_delete<std::thread> >(std::tuple<std::thread*, std::default_delete<std::thread> > const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      260 ( 0.01%)      78 ( 0.01%)     78 ( 0.03%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::get() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      260 ( 0.01%)      78 ( 0.01%)     78 ( 0.03%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, std::thread*, std::default_delete<std::thread> >::_M_head(std::_Tuple_impl<0ul, std::thread*, std::default_delete<std::thread> > const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      260 ( 0.01%)      40 ( 0.01%)     30 ( 0.01%)   2 ( 0.03%)     0             10 ( 0.33%)   2 ( 0.06%)     0             10 ( 0.42%)  ./misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:clone [/usr/lib/x86_64-linux-gnu/libc.so.6]
      259 ( 0.01%)      84 ( 0.01%)     56 ( 0.02%)   3 ( 0.05%)     1 ( 0.01%)     0            3 ( 0.09%)     .              .           ./nptl/./nptl/pthread_cond_broadcast.c:pthread_cond_broadcast@@GLIBC_2.3.2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      257 ( 0.01%)     128 ( 0.02%)      2 ( 0.00%)   2 ( 0.03%)     1 ( 0.01%)     0            2 ( 0.06%)     1 ( 0.01%)     .           ???:0x00000000048f8770 [???]
      256 ( 0.01%)      64 ( 0.01%)     88 ( 0.03%)   .              .              .            .              .              .           /usr/include/c++/11/bits/stl_uninitialized.h:std::shared_ptr<ActiveObject>* std::__relocate_a<std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::allocator<std::shared_ptr<ActiveObject> > >(std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::allocator<std::shared_ptr<ActiveObject> >&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      255 ( 0.01%)      51 ( 0.01%)     68 ( 0.02%)   2 ( 0.03%)     0              6 ( 0.20%)   2 ( 0.06%)     0              6 ( 0.25%)  /usr/include/x86_64-linux-gnu/c++/11/bits/gthr-default.h:__gthread_mutex_lock(pthread_mutex_t*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      255 ( 0.01%)      51 ( 0.01%)     68 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/x86_64-linux-gnu/c++/11/bits/gthr-default.h:__gthread_mutex_unlock(pthread_mutex_t*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      253 ( 0.01%)     126 ( 0.02%)     54 ( 0.02%)  12 ( 0.20%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      252 ( 0.01%)     108 ( 0.02%)     72 ( 0.03%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/move.h:void (LeaderFollower::*&&std::forward<void (LeaderFollower::*)()>(std::remove_reference<void (LeaderFollower::*)()>::type&))() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      252 ( 0.01%)     108 ( 0.02%)     72 ( 0.03%)   .              .              .            .              .              .           /usr/include/c++/11/bits/move.h:std::shared_ptr<ActiveObject>&& std::forward<std::shared_ptr<ActiveObject> >(std::remove_reference<std::shared_ptr<ActiveObject> >::type&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      252 ( 0.01%)      72 ( 0.01%)     72 ( 0.03%)   .              .              .            .              .              .           /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObject>::allocator(std::allocator<ActiveObject> const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      252 ( 0.01%)      54 ( 0.01%)     48 ( 0.02%)   3 ( 0.05%)     3 ( 0.02%)     0            3 ( 0.09%)     .              .           ActiveObject.cpp:ActiveObject::stopActiveObject() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      251 ( 0.01%)      55 ( 0.01%)     12 ( 0.00%)  12 ( 0.20%)    11 ( 0.08%)     2 ( 0.07%)  12 ( 0.37%)    11 ( 0.12%)     2 ( 0.08%)  ./elf/./elf/dl-load.c:open_verify.constprop.1 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      250 ( 0.01%)      50 ( 0.01%)     20 ( 0.01%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           ./nptl/./nptl/pthread_mutex_unlock.c:__pthread_mutex_unlock_usercnt [/usr/lib/x86_64-linux-gnu/libc.so.6]
      248 ( 0.01%)      77 ( 0.01%)      1 ( 0.00%)   2 ( 0.03%)     2 ( 0.02%)     0            2 ( 0.06%)     2 ( 0.02%)     .           ./elf/./elf/dl-minimal.c:strsep [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      247 ( 0.01%)      65 ( 0.01%)     78 ( 0.03%)   2 ( 0.03%)     .              .            .              .              .           /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::shared_ptr<ActiveObject> > >::construct<std::shared_ptr<ActiveObject>, std::shared_ptr<ActiveObject> >(std::allocator<std::shared_ptr<ActiveObject> >&, std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      245 ( 0.01%)     122 ( 0.02%)      2 ( 0.00%)  31 ( 0.52%)     .              .            .              .              .           ???:0x00000000048f8a30 [???]
      245 ( 0.01%)     122 ( 0.02%)      2 ( 0.00%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           ???:0x00000000048f6fa0 [???]
      245 ( 0.01%)      35 ( 0.01%)     20 ( 0.01%)   4 ( 0.07%)     0              0            4 ( 0.12%)     .              .           ./elf/./elf/dl-tunables.c:__GI___tunable_set_val [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      244 ( 0.01%)      53 ( 0.01%)     11 ( 0.00%)   9 ( 0.15%)     0              0            9 ( 0.28%)     .              .           ./elf/../sysdeps/x86/dl-prop.h:dl_main
      243 ( 0.01%)      95 ( 0.01%)     52 ( 0.02%)   9 ( 0.15%)     0              0            9 ( 0.28%)     .              .           ./libio/./libio/fileops.c:_IO_file_underflow@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      243 ( 0.01%)      36 ( 0.01%)     26 ( 0.01%)   7 ( 0.12%)     6 ( 0.05%)     6 ( 0.20%)   7 ( 0.22%)     6 ( 0.07%)     6 ( 0.25%)  ./elf/./get-dynamic-info.h:_dl_start
      240 ( 0.01%)     120 ( 0.02%)      0            7 ( 0.12%)     .              .            .              .              .           ???:0x000000000010c8e0 [???]
      240 ( 0.01%)      80 ( 0.01%)     48 ( 0.02%)   5 ( 0.08%)     5 ( 0.04%)     .            .              .              .           /usr/include/c++/11/bits/unique_lock.h:std::unique_lock<std::mutex>::~unique_lock() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      240 ( 0.01%)      45 ( 0.01%)     60 ( 0.02%)   2 ( 0.03%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_weak_release() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      240 ( 0.01%)       0               0            1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           ???:std::ostream::operator<<(std::ostream& (*)(std::ostream&)) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      238 ( 0.01%)      68 ( 0.01%)     68 ( 0.02%)   6 ( 0.10%)     0              4 ( 0.13%)   1 ( 0.03%)     0              4 ( 0.17%)  /usr/include/c++/11/bits/std_mutex.h:std::mutex::lock() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      234 ( 0.01%)     117 ( 0.02%)     78 ( 0.03%)   6 ( 0.10%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      234 ( 0.01%)     102 ( 0.01%)     84 ( 0.03%)   3 ( 0.05%)     0              0            3 ( 0.09%)     .              .           /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::function(std::function<void (std::weak_ptr<Graph>)>&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      234 ( 0.01%)      65 ( 0.01%)     78 ( 0.03%)   0              0              1 ( 0.03%)   .              .              .           /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObject>::shared_ptr(std::shared_ptr<ActiveObject>&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      234 ( 0.01%)      54 ( 0.01%)     60 ( 0.02%)   3 ( 0.05%)     0              0            3 ( 0.09%)     .              .           ActiveObject.cpp:ActiveObject::setTaskHandler(std::function<void (std::weak_ptr<Graph>)>) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      233 ( 0.01%)     108 ( 0.02%)     34 ( 0.01%)   3 ( 0.05%)     1 ( 0.01%)     4 ( 0.13%)   3 ( 0.09%)     1 ( 0.01%)     4 ( 0.17%)  ./string/../sysdeps/x86_64/strcspn.S:strcspn [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      232 ( 0.01%)      68 ( 0.01%)     60 ( 0.02%)   7 ( 0.12%)     0              0            5 ( 0.15%)     .              .           /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::_M_check_len(unsigned long, char const*) const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      230 ( 0.01%)      14 ( 0.00%)     61 ( 0.02%)   7 ( 0.12%)     0              0            6 ( 0.19%)     .              .           Pipeline.cpp:Pipeline::~Pipeline() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      228 ( 0.01%)      90 ( 0.01%)     78 ( 0.03%)   2 ( 0.03%)     1 ( 0.01%)     0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/move.h:std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      228 ( 0.01%)      72 ( 0.01%)     48 ( 0.02%)  11 ( 0.19%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/std_thread.h:std::this_thread::get_id() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      224 ( 0.01%)      64 ( 0.01%)     64 ( 0.02%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, std::thread*, std::default_delete<std::thread> >::_Tuple_impl() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      222 ( 0.01%)      90 ( 0.01%)     60 ( 0.02%)   4 ( 0.07%)     0              0            3 ( 0.09%)     .              .           ./nptl/./nptl/nptl-stack.c:__nptl_free_stacks [/usr/lib/x86_64-linux-gnu/libc.so.6]
      222 ( 0.01%)      48 ( 0.01%)     54 ( 0.02%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      221 ( 0.01%)      65 ( 0.01%)     65 ( 0.02%)   3 ( 0.05%)     0              0            3 ( 0.09%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_base() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      221 ( 0.01%)      52 ( 0.01%)     65 ( 0.02%)   2 ( 0.03%)     .              .            .              .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_deallocate_node(std::weak_ptr<Graph>*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      220 ( 0.01%)      77 ( 0.01%)     44 ( 0.02%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::end() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      220 ( 0.01%)      66 ( 0.01%)     66 ( 0.02%)   2 ( 0.03%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/tuple:std::default_delete<std::thread>& std::__get_helper<1ul, std::default_delete<std::thread>>(std::_Tuple_impl<1ul, std::default_delete<std::thread>>&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      220 ( 0.01%)      66 ( 0.01%)     66 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::_M_deleter() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      220 ( 0.01%)      66 ( 0.01%)     66 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/tuple:std::_Tuple_impl<1ul, std::default_delete<std::thread> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<std::thread> >&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      220 ( 0.01%)      66 ( 0.01%)     66 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/tuple:std::tuple_element<1ul, std::tuple<std::thread*, std::default_delete<std::thread> > >::type& std::get<1ul, std::thread*, std::default_delete<std::thread> >(std::tuple<std::thread*, std::default_delete<std::thread> >&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      216 ( 0.01%)      72 ( 0.01%)     90 ( 0.03%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/std_function.h:std::_Function_base::_Function_base() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      216 ( 0.01%)      72 ( 0.01%)     84 ( 0.03%)   7 ( 0.12%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> > >::__allocated_ptr(std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      216 ( 0.01%)      72 ( 0.01%)     54 ( 0.02%)   .              .              .            .              .              .           ./libio/./libio/libioP.h:getc
      215 ( 0.01%)      20 ( 0.00%)     16 ( 0.01%)  13 ( 0.22%)     0              0           13 ( 0.40%)     .              .           ./elf/../sysdeps/x86/dl-cacheinfo.h:get_common_cache_info.constprop.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      212 ( 0.01%)      48 ( 0.01%)     68 ( 0.02%)   4 ( 0.07%)     0              0            4 ( 0.12%)     .              .           /usr/include/c++/11/bits/std_thread.h:std::thread::thread<void (LeaderFollower::*)(), LeaderFollower*, void>(void (LeaderFollower::*&&)(), LeaderFollower*&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      210 ( 0.01%)      90 ( 0.01%)     60 ( 0.02%)   .              .              .            .              .              .           /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >::base() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      210 ( 0.01%)      90 ( 0.01%)     45 ( 0.02%)   4 ( 0.07%)     2 ( 0.02%)     0            2 ( 0.06%)     .              .           /usr/include/c++/11/ext/atomicity.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_weak_release()
      210 ( 0.01%)      90 ( 0.01%)     45 ( 0.02%)   1 ( 0.02%)     1 ( 0.01%)     0            1 ( 0.03%)     .              .           /usr/include/c++/11/ext/atomicity.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_weak_add_ref()
      210 ( 0.01%)      54 ( 0.01%)     72 ( 0.03%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::_MakeUniq<std::thread>::__single_object std::make_unique<std::thread, void (ActiveObject::*)(), ActiveObject*>(void (ActiveObject::*&&)(), ActiveObject*&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      210 ( 0.01%)      54 ( 0.01%)     54 ( 0.02%)  13 ( 0.22%)     0              0            3 ( 0.09%)     .              .           /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObject> std::make_shared<ActiveObject, int&>(int&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      208 ( 0.01%)      96 ( 0.01%)     32 ( 0.01%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::size() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      208 ( 0.01%)      65 ( 0.01%)     65 ( 0.02%)  13 ( 0.22%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::weak_ptr<Graph>*> >::deallocate(std::allocator<std::weak_ptr<Graph>*>&, std::weak_ptr<Graph>**, unsigned long) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      208 ( 0.01%)      65 ( 0.01%)     65 ( 0.02%)   .              .              .            .              .              .           /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::weak_ptr<Graph> > >::deallocate(std::allocator<std::weak_ptr<Graph> >&, std::weak_ptr<Graph>*, unsigned long) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      208 ( 0.01%)      56 ( 0.01%)     64 ( 0.02%)   3 ( 0.05%)     1 ( 0.01%)     0            3 ( 0.09%)     1 ( 0.01%)     .           ???:std::ios_base::_M_init() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      208 ( 0.01%)      52 ( 0.01%)     65 ( 0.02%)   3 ( 0.05%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::weak_ptr<Graph> >::deallocate(std::weak_ptr<Graph>*, unsigned long) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      207 ( 0.01%)      32 ( 0.00%)     71 ( 0.03%)  21 ( 0.36%)     0              3 ( 0.10%)  21 ( 0.65%)     0              3 ( 0.13%)  ./elf/../sysdeps/x86/dl-cacheinfo.h:init_cpu_features.constprop.0
      204 ( 0.01%)      54 ( 0.01%)     66 ( 0.02%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/std_thread.h:std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (ActiveObject::*)(), ActiveObject*> > >::_State_impl<void (ActiveObject::*)(), ActiveObject*>(void (ActiveObject::*&&)(), ActiveObject*&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      203 ( 0.01%)      56 ( 0.01%)     35 ( 0.01%)   3 ( 0.05%)     5 ( 0.04%)     1 ( 0.03%)   3 ( 0.09%)     5 ( 0.06%)     1 ( 0.04%)  ./elf/./elf/dl-setup_hash.c:_dl_setup_hash [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      200 ( 0.01%)      72 ( 0.01%)     80 ( 0.03%)   3 ( 0.05%)     1 ( 0.01%)     0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/atomic_base.h:std::__atomic_base<bool>::operator=(bool) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      200 ( 0.01%)      70 ( 0.01%)     60 ( 0.02%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      200 ( 0.01%)      60 ( 0.01%)     60 ( 0.02%)  18 ( 0.30%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      200 ( 0.01%)      60 ( 0.01%)     60 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::operator->() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      200 ( 0.01%)      60 ( 0.01%)     60 ( 0.02%)   .              .              .            .              .              .           /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      200 ( 0.01%)      60 ( 0.01%)     60 ( 0.02%)   .              .              .            .              .              .           /usr/include/c++/11/tuple:std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      200 ( 0.01%)      60 ( 0.01%)     60 ( 0.02%)   .              .              .            .              .              .           /usr/include/c++/11/tuple:std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      200 ( 0.01%)      56 ( 0.01%)     56 ( 0.02%)   3 ( 0.05%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::_S_max_size(std::allocator<std::shared_ptr<ActiveObject> > const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      198 ( 0.01%)     198 ( 0.03%)    102 ( 0.04%)   0              9 ( 0.07%)     .            .              .              .           ./elf/../include/rtld-malloc.h:_dl_deallocate_tls
      198 ( 0.01%)      88 ( 0.01%)     33 ( 0.01%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           ./elf/./elf/dl-deps.c:openaux [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      198 ( 0.01%)      74 ( 0.01%)     48 ( 0.02%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/vector.tcc:std::shared_ptr<ActiveObject>& std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::emplace_back<std::shared_ptr<ActiveObject> >(std::shared_ptr<ActiveObject>&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      198 ( 0.01%)      66 ( 0.01%)     66 ( 0.02%)   2 ( 0.03%)     0              1 ( 0.03%)   2 ( 0.06%)     0              1 ( 0.04%)  ./elf/./elf/dl-load.c:_dl_dst_count [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      198 ( 0.01%)      54 ( 0.01%)     54 ( 0.02%)  24 ( 0.41%)     .              .            .              .              .           /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::~function() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      198 ( 0.01%)      54 ( 0.01%)     54 ( 0.02%)   6 ( 0.10%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>::_M_ptr() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      197 ( 0.01%)      36 ( 0.01%)     50 ( 0.02%)   9 ( 0.15%)     0              0            8 ( 0.25%)     .              .           LeaderFollower.cpp:LeaderFollower::~LeaderFollower() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      196 ( 0.01%)      90 ( 0.01%)      5 ( 0.00%)   3 ( 0.05%)     1 ( 0.01%)     0            3 ( 0.09%)     1 ( 0.01%)     .           ???:0x00000000000c2320 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      195 ( 0.01%)      52 ( 0.01%)     65 ( 0.02%)   1 ( 0.02%)     .              .            .              .              .           /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::weak_ptr<Graph>*>::deallocate(std::weak_ptr<Graph>**, unsigned long) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      195 ( 0.01%)      45 ( 0.01%)     45 ( 0.02%)   4 ( 0.07%)     0              0            4 ( 0.12%)     .              .           ActiveObject.cpp:ActiveObject::setNextStage(std::weak_ptr<ActiveObject>) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      192 ( 0.01%)      80 ( 0.01%)     48 ( 0.02%)   2 ( 0.03%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::operator[](unsigned long) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      192 ( 0.01%)      72 ( 0.01%)     60 ( 0.02%)   3 ( 0.05%)     0              0            3 ( 0.09%)     .              .           /usr/include/c++/11/bits/move.h:std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      192 ( 0.01%)      72 ( 0.01%)     60 ( 0.02%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/move.h:std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&, std::weak_ptr<Graph>&&)> >, std::is_move_constructible<void (*)(std::_Any_data const&, std::weak_ptr<Graph>&&)>, std::is_move_assignable<void (*)(std::_Any_data const&, std::weak_ptr<Graph>&&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&, std::weak_ptr<Graph>&&)>(void (*&)(std::_Any_data const&, std::weak_ptr<Graph>&&), void (*&)(std::_Any_data const&, std::weak_ptr<Graph>&&)) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      192 ( 0.01%)      72 ( 0.01%)     30 ( 0.01%)   7 ( 0.12%)     .              .            .              .              .           /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      192 ( 0.01%)      48 ( 0.01%)     60 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_iterator_base_funcs.h:std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      192 ( 0.01%)      48 ( 0.01%)     48 ( 0.02%)   7 ( 0.12%)     .              .            .              .              .           /usr/include/c++/11/bits/char_traits.h:std::char_traits<char>::length(char const*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      190 ( 0.01%)      60 ( 0.01%)     70 ( 0.03%)  12 ( 0.20%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      190 ( 0.01%)      60 ( 0.01%)     70 ( 0.03%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::__uniq_ptr_impl(std::thread*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      190 ( 0.01%)      40 ( 0.01%)     60 ( 0.02%)   1 ( 0.02%)     .              .            .              .              .           /usr/include/c++/11/bits/unique_ptr.h:std::default_delete<std::thread>::operator()(std::thread*) const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      189 ( 0.01%)      81 ( 0.01%)     54 ( 0.02%)   .              .              .            .              .              .           /usr/include/c++/11/bits/move.h:std::shared_ptr<ActiveObject>* std::__addressof<std::shared_ptr<ActiveObject> >(std::shared_ptr<ActiveObject>&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      189 ( 0.01%)      49 ( 0.01%)     56 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_uninitialized.h:void std::__relocate_object_a<std::shared_ptr<ActiveObject>, std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >(std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::allocator<std::shared_ptr<ActiveObject> >&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      188 ( 0.01%)      70 ( 0.01%)     35 ( 0.01%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__weak_count<(__gnu_cxx::_Lock_policy)2>::~__weak_count() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      187 ( 0.01%)     110 ( 0.02%)     33 ( 0.01%)   3 ( 0.05%)    13 ( 0.10%)     0            2 ( 0.06%)     5 ( 0.06%)     .           ./ctype/./ctype/ctype-info.c:__ctype_init [/usr/lib/x86_64-linux-gnu/libc.so.6]
      187 ( 0.01%)      93 ( 0.01%)      2 ( 0.00%)   6 ( 0.10%)     3 ( 0.02%)     0            2 ( 0.06%)     .              .           ???:0x00000000048f8ae0 [???]
      187 ( 0.01%)      93 ( 0.01%)      2 ( 0.00%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           ???:0x00000000048f7360 [???]
      187 ( 0.01%)      51 ( 0.01%)     51 ( 0.02%)   .              .              .            .              .              .           /usr/include/c++/11/bits/std_mutex.h:std::mutex::unlock() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      186 ( 0.01%)      72 ( 0.01%)     42 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data::_Deque_impl_data(std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      186 ( 0.01%)      66 ( 0.01%)     54 ( 0.02%)   7 ( 0.12%)     0              0            3 ( 0.09%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<ActiveObject>, int&>(std::_Sp_alloc_shared_tag<std::allocator<ActiveObject> >, int&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      186 ( 0.01%)      48 ( 0.01%)     48 ( 0.02%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::operator=(std::function<void (std::weak_ptr<Graph>)>&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      185 ( 0.01%)      34 ( 0.00%)     54 ( 0.02%)   7 ( 0.12%)     0              0            7 ( 0.22%)     .              .           LeaderFollower.cpp:LeaderFollower::LeaderFollower() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      184 ( 0.01%)      44 ( 0.01%)     36 ( 0.01%)   4 ( 0.07%)     0              4 ( 0.13%)   4 ( 0.12%)     0              4 ( 0.17%)  LeaderFollower.cpp:LeaderFollower::work() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      182 ( 0.01%)      91 ( 0.01%)      0            1 ( 0.02%)     2 ( 0.02%)     0            1 ( 0.03%)     .              .           ???:0x000000000010ca90 [???]
      182 ( 0.01%)      78 ( 0.01%)     52 ( 0.02%)   8 ( 0.14%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_get_Tp_allocator() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      182 ( 0.01%)      78 ( 0.01%)     52 ( 0.02%)   3 ( 0.05%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/tuple:std::_Head_base<0ul, std::thread*, false>::_M_head(std::_Head_base<0ul, std::thread*, false> const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      182 ( 0.01%)      78 ( 0.01%)     52 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/move.h:std::remove_reference<std::shared_ptr<ActiveObject>&>::type&& std::move<std::shared_ptr<ActiveObject>&>(std::shared_ptr<ActiveObject>&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      182 ( 0.01%)      52 ( 0.01%)     52 ( 0.02%)   4 ( 0.07%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::weak_ptr<Graph> > >::allocate(std::allocator<std::weak_ptr<Graph> >&, unsigned long) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      182 ( 0.01%)      52 ( 0.01%)     52 ( 0.02%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl::_Deque_impl() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      182 ( 0.01%)      52 ( 0.01%)     52 ( 0.02%)   2 ( 0.03%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::weak_ptr<Graph>*>::new_allocator() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      182 ( 0.01%)      52 ( 0.01%)     52 ( 0.02%)   .              .              .            .              .              .           /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::weak_ptr<Graph>*> >::allocate(std::allocator<std::weak_ptr<Graph>*>&, unsigned long) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      182 ( 0.01%)      52 ( 0.01%)     52 ( 0.02%)   .              .              .            .              .              .           /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::weak_ptr<Graph>*>::~new_allocator() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      182 ( 0.01%)      39 ( 0.01%)     52 ( 0.02%)   .              .              .            .              .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_allocate_node() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      180 ( 0.01%)      54 ( 0.01%)     54 ( 0.02%)   6 ( 0.10%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<ActiveObject>::_M_ptr() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      180 ( 0.01%)      50 ( 0.01%)     30 ( 0.01%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_add_ref_lock_nothrow() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      180 ( 0.01%)      30 ( 0.00%)     40 ( 0.01%)   2 ( 0.03%)     0              1 ( 0.03%)   2 ( 0.06%)     0              1 ( 0.04%)  ./nptl/./nptl/pthread_getattr_default_np.c:pthread_getattr_default_np@@GLIBC_2.34 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      176 ( 0.01%)      52 ( 0.01%)     41 ( 0.01%)  10 ( 0.17%)     3 ( 0.02%)     0           10 ( 0.31%)     1 ( 0.01%)     .           ./libio/./libio/genops.c:_IO_cleanup [/usr/lib/x86_64-linux-gnu/libc.so.6]
      176 ( 0.01%)      48 ( 0.01%)     48 ( 0.02%)   7 ( 0.12%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/tuple:std::tuple<std::thread*, std::default_delete<std::thread> >::tuple<true, true>() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      176 ( 0.01%)      48 ( 0.01%)     48 ( 0.02%)   3 ( 0.05%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/tuple:std::_Tuple_impl<1ul, std::default_delete<std::thread> >::_Tuple_impl() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      174 ( 0.01%)      48 ( 0.01%)     60 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<ActiveObject>::construct<ActiveObject, int&>(ActiveObject*, int&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      174 ( 0.01%)      48 ( 0.01%)     54 ( 0.02%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_move_assign1(std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >&&, std::integral_constant<bool, true>) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      172 ( 0.01%)      48 ( 0.01%)     32 ( 0.01%)   2 ( 0.03%)     3 ( 0.02%)     0            2 ( 0.06%)     .              .           LeaderFollower.cpp:LeaderFollower::work()::{lambda()#1}::operator()() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      171 ( 0.01%)      54 ( 0.01%)     36 ( 0.01%)   3 ( 0.05%)     0              0            3 ( 0.09%)     .              .           ./libio/./libio/genops.c:_IO_sputbackc [/usr/lib/x86_64-linux-gnu/libc.so.6]
      171 ( 0.01%)      54 ( 0.01%)      9 ( 0.00%)   3 ( 0.05%)     1 ( 0.01%)     0            3 ( 0.09%)     1 ( 0.01%)     .           ./elf/./dl-load.h:_dl_map_object_from_fd
      170 ( 0.01%)      80 ( 0.01%)     60 ( 0.02%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           ./resolv/./resolv/resolv_context.c:__resolv_context_freeres [/usr/lib/x86_64-linux-gnu/libc.so.6]
      170 ( 0.01%)      68 ( 0.01%)     34 ( 0.01%)   3 ( 0.05%)     .              .            .              .              .           /usr/include/x86_64-linux-gnu/c++/11/bits/gthr-default.h:__gthread_active_p() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      170 ( 0.01%)      51 ( 0.01%)     51 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObject, (__gnu_cxx::_Lock_policy)2, false, false>::_M_get() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      170 ( 0.01%)      51 ( 0.01%)     51 ( 0.02%)   .              .              .            .              .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObject, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      170 ( 0.01%)       0               0            2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           ./elf/./elf/dl-minimal-malloc.c:__minimal_calloc [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      168 ( 0.01%)      72 ( 0.01%)     48 ( 0.02%)   .              .              .            .              .              .           /usr/include/c++/11/bits/stl_algobase.h:std::shared_ptr<ActiveObject>* std::__niter_base<std::shared_ptr<ActiveObject>*>(std::shared_ptr<ActiveObject>*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      168 ( 0.01%)      48 ( 0.01%)     48 ( 0.02%)   .              .              .            .              .              .           /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<ActiveObject>::~new_allocator() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      168 ( 0.01%)      48 ( 0.01%)     36 ( 0.01%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::swap(std::function<void (std::weak_ptr<Graph>)>&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      168 ( 0.01%)      48 ( 0.01%)     36 ( 0.01%)   1 ( 0.02%)     .              .            .              .              .           /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::size() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      168 ( 0.01%)      24 ( 0.00%)     42 ( 0.02%)  12 ( 0.20%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/condition_variable:void std::condition_variable::wait<ActiveObject::work()::{lambda()#1}>(std::unique_lock<std::mutex>&, ActiveObject::work()::{lambda()#1}) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      165 ( 0.01%)      45 ( 0.01%)     60 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_weak_add_ref() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      162 ( 0.01%)      54 ( 0.01%)     36 ( 0.01%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >::operator-(long) const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      162 ( 0.01%)      42 ( 0.01%)     54 ( 0.02%)   6 ( 0.10%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/std_thread.h:std::thread::_Invoker<std::tuple<void (ActiveObject::*)(), ActiveObject*> >::_Invoker<void (ActiveObject::*)(), ActiveObject*>(void (ActiveObject::*&&)(), ActiveObject*&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      162 ( 0.01%)      42 ( 0.01%)     54 ( 0.02%)   6 ( 0.10%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, void (ActiveObject::*)(), ActiveObject*>::_Tuple_impl<void (ActiveObject::*)(), ActiveObject*, void>(void (ActiveObject::*&&)(), ActiveObject*&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      162 ( 0.01%)      42 ( 0.01%)     54 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/tuple:std::tuple<void (ActiveObject::*)(), ActiveObject*>::tuple<void (ActiveObject::*)(), ActiveObject*, true>(void (ActiveObject::*&&)(), ActiveObject*&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      162 ( 0.01%)      17 ( 0.00%)     41 ( 0.01%)  11 ( 0.19%)     0              0           11 ( 0.34%)     .              .           Pipeline.cpp:Pipeline::setAONextStage() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      160 ( 0.01%)      56 ( 0.01%)     24 ( 0.01%)   3 ( 0.05%)     0              0            3 ( 0.09%)     .              .           ???:std::locale::operator=(std::locale const&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      160 ( 0.01%)      20 ( 0.00%)     10 ( 0.00%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           ./misc/../sysdeps/unix/sysv/linux/x86_64/clone3.S:clone3 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      160 ( 0.01%)      10 ( 0.00%)     20 ( 0.01%)   8 ( 0.14%)     0              0            2 ( 0.06%)     .              .           ./nptl/./nptl/allocatestack.c:start_thread
      159 ( 0.01%)      14 ( 0.00%)      0            2 ( 0.03%)     4 ( 0.03%)     0            2 ( 0.06%)     4 ( 0.04%)     .           ./elf/./elf/dl-misc.c:_dl_higher_prime_number [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      156 ( 0.01%)      36 ( 0.01%)     24 ( 0.01%)   .              .              .            .              .              .           ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:memcpy@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      154 ( 0.01%)      66 ( 0.01%)     44 ( 0.02%)   2 ( 0.03%)     .              .            .              .              .           /usr/include/c++/11/tuple:std::_Head_base<1ul, std::default_delete<std::thread>, true>::_M_head(std::_Head_base<1ul, std::default_delete<std::thread>, true>&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      154 ( 0.01%)      42 ( 0.01%)     42 ( 0.02%)  12 ( 0.20%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/allocator.h:std::allocator<std::weak_ptr<Graph> >::~allocator() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      154 ( 0.01%)      42 ( 0.01%)     42 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/allocator.h:std::allocator<std::weak_ptr<Graph> >::allocator() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      153 ( 0.01%)      31 ( 0.00%)     22 ( 0.01%)  20 ( 0.34%)     2 ( 0.02%)     2 ( 0.07%)  20 ( 0.62%)     2 ( 0.02%)     2 ( 0.08%)  ./malloc/./malloc/malloc.c:sysmalloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
      152 ( 0.01%)      31 ( 0.00%)     31 ( 0.01%)  12 ( 0.20%)     0              0           12 ( 0.37%)     .              .           ./elf/./elf/dl-load.c:fillin_rpath.isra.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      152 ( 0.01%)      17 ( 0.00%)      8 ( 0.00%)   5 ( 0.08%)     0              0            3 ( 0.09%)     .              .           ./io/../sysdeps/unix/sysv/linux/fstatat64.c:fstatat [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      151 ( 0.01%)      45 ( 0.01%)     21 ( 0.01%)   8 ( 0.14%)     8 ( 0.06%)     1 ( 0.03%)   8 ( 0.25%)     5 ( 0.06%)     1 ( 0.04%)  ./elf/../elf/dl-tls.c:_dl_allocate_tls_init [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      150 ( 0.01%)      70 ( 0.01%)     40 ( 0.01%)  11 ( 0.19%)    12 ( 0.09%)    10 ( 0.33%)   1 ( 0.03%)     0             10 ( 0.42%)  ???:0x00000000000dc240 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      150 ( 0.01%)      60 ( 0.01%)     30 ( 0.01%)   0              2 ( 0.02%)     .            .              .              .           /usr/include/c++/11/bits/invoke.h:void std::__invoke_impl<void, void (ActiveObject::*)(), ActiveObject*>(std::__invoke_memfun_deref, void (ActiveObject::*&&)(), ActiveObject*&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      150 ( 0.01%)      42 ( 0.01%)     48 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::operator=(std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      150 ( 0.01%)      36 ( 0.01%)     48 ( 0.02%)  12 ( 0.20%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::back() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      150 ( 0.01%)      21 ( 0.00%)     44 ( 0.02%)  21 ( 0.36%)     1 ( 0.01%)     3 ( 0.10%)  21 ( 0.65%)     1 ( 0.01%)     3 ( 0.13%)  ./elf/../sysdeps/x86/cpu-features.c:init_cpu_features.constprop.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      149 ( 0.01%)       6 ( 0.00%)     29 ( 0.01%)  14 ( 0.24%)     0              0           14 ( 0.43%)     .              .           ???:std::__timepunct<char>::_M_initialize_timepunct(__locale_struct*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      149 ( 0.01%)       6 ( 0.00%)     29 ( 0.01%)  14 ( 0.24%)     0              0           14 ( 0.43%)     .              .           ???:std::__timepunct<wchar_t>::_M_initialize_timepunct(__locale_struct*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      147 ( 0.01%)      42 ( 0.01%)     84 ( 0.03%)  14 ( 0.24%)     2 ( 0.02%)     0            1 ( 0.03%)     1 ( 0.01%)     .           ./nptl/./nptl/cleanup_compat.c:_pthread_cleanup_push@@GLIBC_2.34 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      146 ( 0.01%)      49 ( 0.01%)     14 ( 0.01%)   6 ( 0.10%)     1 ( 0.01%)     1 ( 0.03%)   6 ( 0.19%)     1 ( 0.01%)     1 ( 0.04%)  ./elf/./elf/dl-init.c:_dl_init [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      146 ( 0.01%)      12 ( 0.00%)      0            7 ( 0.12%)     0              0            7 ( 0.22%)     .              .           ???:std::ctype<wchar_t>::_M_convert_to_wmask(unsigned short) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      145 ( 0.01%)      19 ( 0.00%)     41 ( 0.01%)  10 ( 0.17%)     0              0           10 ( 0.31%)     .              .           Pipeline.cpp:Pipeline::setTaskHandler() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      144 ( 0.01%)      48 ( 0.01%)     48 ( 0.02%)   .              .              .            .              .              .           /usr/include/c++/11/tuple:std::_Head_base<0ul, std::thread*, false>::_Head_base() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      144 ( 0.01%)      42 ( 0.01%)     30 ( 0.01%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::clear() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      144 ( 0.01%)      36 ( 0.01%)     54 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<ActiveObject>::new_allocator(__gnu_cxx::new_allocator<ActiveObject> const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      144 ( 0.01%)      36 ( 0.01%)     48 ( 0.02%)   7 ( 0.12%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/allocator.h:std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >::allocator<ActiveObject>(std::allocator<ActiveObject> const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      144 ( 0.01%)      36 ( 0.01%)     36 ( 0.01%)   .              .              .            .              .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__weak_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::~__weak_ptr() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      144 ( 0.01%)      30 ( 0.00%)     48 ( 0.02%)   .              .              .            .              .              .           /usr/include/c++/11/bits/std_thread.h:void std::thread::_Invoker<std::tuple<void (ActiveObject::*)(), ActiveObject*> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      144 ( 0.01%)      30 ( 0.00%)     36 ( 0.01%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      143 ( 0.01%)      39 ( 0.01%)     39 ( 0.01%)   1 ( 0.02%)     .              .            .              .              .           /usr/include/c++/11/bits/stl_queue.h:std::queue<std::weak_ptr<Graph>, std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::~queue() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      143 ( 0.01%)      39 ( 0.01%)     39 ( 0.01%)   .              .              .            .              .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl::~_Deque_impl() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      143 ( 0.01%)      39 ( 0.01%)     39 ( 0.01%)   .              .              .            .              .              .           /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::deque() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      140 ( 0.00%)      70 ( 0.01%)     40 ( 0.01%)   4 ( 0.07%)    10 ( 0.08%)     0            1 ( 0.03%)    10 ( 0.11%)     .           ./resolv/./resolv/res-close.c:__res_thread_freeres [/usr/lib/x86_64-linux-gnu/libc.so.6]
      140 ( 0.00%)      60 ( 0.01%)     40 ( 0.01%)   .              .              .            .              .              .           /usr/include/c++/11/tuple:std::_Head_base<0ul, std::thread::_State*, false>::_M_head(std::_Head_base<0ul, std::thread::_State*, false>&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      140 ( 0.00%)      49 ( 0.01%)     42 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >(__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > > const&, __gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > > const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      140 ( 0.00%)      48 ( 0.01%)     32 ( 0.01%)   3 ( 0.05%)     0              0            3 ( 0.09%)     .              .           ./elf/./elf/dl-minimal.c:lookup_malloc_symbol [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      140 ( 0.00%)      40 ( 0.01%)     40 ( 0.01%)   2 ( 0.03%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::unique_ptr<std::default_delete<std::thread>, void>(std::thread*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      140 ( 0.00%)      40 ( 0.01%)     40 ( 0.01%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_data<std::thread, std::default_delete<std::thread>, true, true>::__uniq_ptr_impl(std::thread*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      140 ( 0.00%)      40 ( 0.01%)     40 ( 0.01%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      140 ( 0.00%)      40 ( 0.01%)     40 ( 0.01%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      140 ( 0.00%)      40 ( 0.01%)     40 ( 0.01%)   .              .              .            .              .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_data<std::thread::_State, std::default_delete<std::thread::_State>, true, true>::__uniq_ptr_impl(std::thread::_State*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      140 ( 0.00%)      36 ( 0.01%)     48 ( 0.02%)   3 ( 0.05%)     0              0            3 ( 0.09%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::_MakeUniq<std::thread>::__single_object std::make_unique<std::thread, void (LeaderFollower::*)(), LeaderFollower*>(void (LeaderFollower::*&&)(), LeaderFollower*&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      137 ( 0.00%)       0               1 ( 0.00%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           ./malloc/./malloc/arena.c:malloc
      136 ( 0.00%)      68 ( 0.01%)     34 ( 0.01%)   .              .              .            .              .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::get() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      136 ( 0.00%)      68 ( 0.01%)      0            1 ( 0.02%)     1 ( 0.01%)     0            1 ( 0.03%)     1 ( 0.01%)     .           ???:0x0000000004acc490 [???]
      136 ( 0.00%)      56 ( 0.01%)     28 ( 0.01%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/deque.tcc:std::unique_ptr<std::thread, std::default_delete<std::thread> >& std::deque<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::emplace_back<std::unique_ptr<std::thread, std::default_delete<std::thread> > >(std::unique_ptr<std::thread, std::default_delete<std::thread> >&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      136 ( 0.00%)      36 ( 0.01%)     44 ( 0.02%)   3 ( 0.05%)     0              0            3 ( 0.09%)     .              .           /usr/include/c++/11/bits/std_thread.h:std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (LeaderFollower::*)(), LeaderFollower*> > >::_State_impl<void (LeaderFollower::*)(), LeaderFollower*>(void (LeaderFollower::*&&)(), LeaderFollower*&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      135 ( 0.00%)      45 ( 0.01%)     25 ( 0.01%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count(std::__weak_count<(__gnu_cxx::_Lock_policy)2> const&, std::nothrow_t) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      135 ( 0.00%)      40 ( 0.01%)     30 ( 0.01%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__weak_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2> const&, std::nothrow_t) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      134 ( 0.00%)      39 ( 0.01%)     29 ( 0.01%)   7 ( 0.12%)     8 ( 0.06%)     0            5 ( 0.15%)     3 ( 0.03%)     .           ./csu/../csu/libc-start.c:__libc_start_main@@GLIBC_2.34 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      132 ( 0.00%)      55 ( 0.01%)     22 ( 0.01%)   3 ( 0.05%)     0              0            2 ( 0.06%)     .              .           ./stdlib/./stdlib/cxa_thread_atexit_impl.c:__call_tls_dtors [/usr/lib/x86_64-linux-gnu/libc.so.6]
      132 ( 0.00%)      48 ( 0.01%)     48 ( 0.02%)   2 ( 0.03%)     .              .            .              .              .           /usr/include/c++/11/bits/std_thread.h:std::thread::id::id(unsigned long) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      132 ( 0.00%)      36 ( 0.01%)     36 ( 0.01%)   4 ( 0.07%)     .              .            .              .              .           /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<ActiveObject>::~weak_ptr() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      132 ( 0.00%)      36 ( 0.01%)     36 ( 0.01%)   3 ( 0.05%)     .              .            .              .              .           /usr/include/c++/11/bits/allocator.h:std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >::~allocator() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      132 ( 0.00%)      36 ( 0.01%)     36 ( 0.01%)   .              .              .            .              .              .           /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::operator bool() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      130 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   2 ( 0.03%)     .              .            .              .              .           /usr/include/c++/11/bits/std_thread.h:std::thread::~thread() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      130 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   1 ( 0.02%)     0              1 ( 0.03%)   1 ( 0.03%)     .              .           ???:std::thread::join() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      130 ( 0.00%)      30 ( 0.00%)     20 ( 0.01%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           ./nptl/./nptl/nptl_free_tcb.c:__nptl_free_tcb [/usr/lib/x86_64-linux-gnu/libc.so.6]
      130 ( 0.00%)       0               0            4 ( 0.07%)     0              0            1 ( 0.03%)     .              .           ./nptl/../sysdeps/unix/sysv/linux/internal-signals.h:pthread_create@@GLIBC_2.34
      129 ( 0.00%)      64 ( 0.01%)      2 ( 0.00%)   4 ( 0.07%)     0              0            2 ( 0.06%)     .              .           ???:0x00000000048f70d0 [???]
      128 ( 0.00%)      48 ( 0.01%)     48 ( 0.02%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::_S_relocate(std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::allocator<std::shared_ptr<ActiveObject> >&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      128 ( 0.00%)      48 ( 0.01%)     48 ( 0.02%)   1 ( 0.02%)     .              .            .              .              .           /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::_S_do_relocate(std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::allocator<std::shared_ptr<ActiveObject> >&, std::integral_constant<bool, true>) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      127 ( 0.00%)      63 ( 0.01%)      2 ( 0.00%)  21 ( 0.36%)     2 ( 0.02%)     0            2 ( 0.06%)     .              .           ???:0x00000000048f7b30 [???]
      127 ( 0.00%)      63 ( 0.01%)      2 ( 0.00%)  11 ( 0.19%)     1 ( 0.01%)     .            .              .              .           ???:0x00000000048f72e0 [???]
      126 ( 0.00%)      54 ( 0.01%)     36 ( 0.01%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/move.h:std::remove_reference<std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data&>::type&& std::move<std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data&>(std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      126 ( 0.00%)      54 ( 0.01%)     36 ( 0.01%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<ActiveObject>::_M_addr() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      126 ( 0.00%)      54 ( 0.01%)     36 ( 0.01%)   .              .              .            .              .              .           /usr/include/c++/11/bits/move.h:std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      126 ( 0.00%)      54 ( 0.01%)     36 ( 0.01%)   .              .              .            .              .              .           /usr/include/c++/11/bits/move.h:std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      126 ( 0.00%)      54 ( 0.01%)     36 ( 0.01%)   .              .              .            .              .              .           /usr/include/c++/11/bits/move.h:std::remove_reference<void (*&)(std::_Any_data const&, std::weak_ptr<Graph>&&)>::type&& std::move<void (*&)(std::_Any_data const&, std::weak_ptr<Graph>&&)>(void (*&)(std::_Any_data const&, std::weak_ptr<Graph>&&)) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      126 ( 0.00%)      54 ( 0.01%)     30 ( 0.01%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      126 ( 0.00%)      42 ( 0.01%)     21 ( 0.01%)   2 ( 0.03%)     4 ( 0.03%)     0            1 ( 0.03%)     .              .           ./nptl/./nptl/cleanup_compat.c:_pthread_cleanup_pop@@GLIBC_2.34 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      126 ( 0.00%)      36 ( 0.01%)     42 ( 0.02%)   7 ( 0.12%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObject>::shared_ptr<std::allocator<ActiveObject>, int&>(std::_Sp_alloc_shared_tag<std::allocator<ActiveObject> >, int&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      126 ( 0.00%)      30 ( 0.00%)     42 ( 0.02%)   0              2 ( 0.02%)     .            .              .              .           /usr/include/c++/11/bits/invoke.h:std::__invoke_result<void (ActiveObject::*)(), ActiveObject*>::type std::__invoke<void (ActiveObject::*)(), ActiveObject*>(void (ActiveObject::*&&)(), ActiveObject*&&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      126 ( 0.00%)      30 ( 0.00%)     36 ( 0.01%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>::_M_dispose() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      126 ( 0.00%)      28 ( 0.00%)     14 ( 0.01%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           ???:std::locale::facet::_S_get_c_locale() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      126 ( 0.00%)      21 ( 0.00%)     14 ( 0.01%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           ./nptl/./nptl/pthread_cond_destroy.c:pthread_cond_destroy@@GLIBC_2.3.2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      124 ( 0.00%)      60 ( 0.01%)     17 ( 0.01%)   4 ( 0.07%)     7 ( 0.05%)     0            4 ( 0.12%)     3 ( 0.03%)     .           ???:std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::flush() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      124 ( 0.00%)      52 ( 0.01%)     24 ( 0.01%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::deque<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::pop_front() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      124 ( 0.00%)      12 ( 0.00%)     44 ( 0.02%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           ???:std::basic_ios<char, std::char_traits<char> >::_M_cache_locale(std::locale const&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      124 ( 0.00%)      12 ( 0.00%)     44 ( 0.02%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           ???:std::basic_ios<wchar_t, std::char_traits<wchar_t> >::_M_cache_locale(std::locale const&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      122 ( 0.00%)      61 ( 0.01%)      0            4 ( 0.07%)     1 ( 0.01%)     0            1 ( 0.03%)     .              .           ???:0x000000000010c8c0 [???]
      122 ( 0.00%)      61 ( 0.01%)      .            .              .              .            .              .              .           ???:0x000000000010c8d0 [???]
      122 ( 0.00%)       0               0            4 ( 0.07%)     0              0            1 ( 0.03%)     .              .           ???:operator delete(void*, unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      122 ( 0.00%)       .               .            .              .              .            .              .              .           ???:operator delete(void*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      121 ( 0.00%)      26 ( 0.00%)     29 ( 0.01%)   8 ( 0.14%)     0              0            8 ( 0.25%)     .              .           Server.cpp:Server::~Server() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      120 ( 0.00%)      60 ( 0.01%)      0            1 ( 0.02%)     1 ( 0.01%)     0            1 ( 0.03%)     1 ( 0.01%)     .           ./misc/../sysdeps/unix/sysv/linux/getpagesize.c:getpagesize [/usr/lib/x86_64-linux-gnu/libc.so.6]
      120 ( 0.00%)      55 ( 0.01%)     30 ( 0.01%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__weak_count<(__gnu_cxx::_Lock_policy)2>::operator=(std::__weak_count<(__gnu_cxx::_Lock_policy)2> const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      120 ( 0.00%)      50 ( 0.01%)     20 ( 0.01%)  16 ( 0.27%)     1 ( 0.01%)     0            3 ( 0.09%)     .              .           ./sunrpc/./sunrpc/rpc_thread.c:__rpc_thread_destroy [/usr/lib/x86_64-linux-gnu/libc.so.6]
      120 ( 0.00%)      48 ( 0.01%)     24 ( 0.01%)   .              .              .            .              .              .           /usr/include/c++/11/bits/std_function.h:std::_Function_base::_M_empty() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      120 ( 0.00%)      48 ( 0.01%)      0            3 ( 0.05%)     6 ( 0.05%)     0            3 ( 0.09%)     6 ( 0.07%)     .           ./elf/./elf/dl-load.c:_dl_process_pt_gnu_property [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      120 ( 0.00%)      42 ( 0.01%)     30 ( 0.01%)   7 ( 0.12%)     .              .            .              .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2> const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      120 ( 0.00%)      36 ( 0.01%)     36 ( 0.01%)   2 ( 0.03%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_queue.h:std::queue<std::weak_ptr<Graph>, std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::size() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      120 ( 0.00%)      36 ( 0.01%)     36 ( 0.01%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>::_Impl::_M_alloc() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      120 ( 0.00%)      32 ( 0.00%)     32 ( 0.01%)   3 ( 0.05%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/atomic:std::atomic<bool>::atomic(bool) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      120 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)  12 ( 0.20%)     0             10 ( 0.33%)   2 ( 0.06%)     0             10 ( 0.42%)  ./nptl/./nptl/nptl-stack.c:__nptl_stack_list_add [/usr/lib/x86_64-linux-gnu/libc.so.6]
      120 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   2 ( 0.03%)     0              0            1 ( 0.03%)     .              .           ???:std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      120 ( 0.00%)      20 ( 0.00%)      0            2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           ./misc/../sysdeps/unix/syscall-template.S:mprotect [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      117 ( 0.00%)      39 ( 0.01%)     39 ( 0.01%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      117 ( 0.00%)      27 ( 0.00%)     63 ( 0.02%)   0              0              6 ( 0.20%)   0              0              6 ( 0.25%)  /usr/include/c++/11/bits/std_mutex.h:std::__mutex_base::__mutex_base() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      116 ( 0.00%)       8 ( 0.00%)     79 ( 0.03%)   4 ( 0.07%)     1 ( 0.01%)     9 ( 0.30%)   4 ( 0.12%)     1 ( 0.01%)     9 ( 0.38%)  ???:std::ctype<char>::ctype(unsigned short const*, bool, unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      114 ( 0.00%)      53 ( 0.01%)     10 ( 0.00%)   3 ( 0.05%)     1 ( 0.01%)     0            3 ( 0.09%)     1 ( 0.01%)     .           ./elf/../sysdeps/posix/dl-fileid.h:_dl_map_object_from_fd
      114 ( 0.00%)      36 ( 0.01%)     36 ( 0.01%)   1 ( 0.02%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObject> std::allocate_shared<ActiveObject, std::allocator<ActiveObject>, int&>(std::allocator<ActiveObject> const&, int&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      114 ( 0.00%)      36 ( 0.01%)     30 ( 0.01%)   2 ( 0.03%)     0              0            1 ( 0.03%)     .              .           /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> > > std::__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      114 ( 0.00%)      30 ( 0.00%)     36 ( 0.01%)   1 ( 0.02%)     .              .            .              .              .           /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::reset(std::thread*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      114 ( 0.00%)      30 ( 0.00%)     36 ( 0.01%)   0              1 ( 0.01%)     0            0              1 ( 0.01%)     .           /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<ActiveObject> >::construct<ActiveObject, int&>(std::allocator<ActiveObject>&, ActiveObject*, int&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
      113 ( 0.00%)      38 ( 0.01%)     31 ( 0.01%)   5 ( 0.08%)     0              0            5 ( 0.15%)     .              .           ???:std::__cxx11::moneypunct<char, true>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      113 ( 0.00%)      38 ( 0.01%)     31 ( 0.01%)   5 ( 0.08%)     0              0            5 ( 0.15%)     .              .           ???:std::moneypunct<char, true>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      113 ( 0.00%)      38 ( 0.01%)     31 ( 0.01%)   4 ( 0.07%)     1 ( 0.01%)     0            4 ( 0.12%)     1 ( 0.01%)     .           ???:std::__cxx11::moneypunct<char, false>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      113 ( 0.00%)      38 ( 0.01%)     31 ( 0.01%)   4 ( 0.07%)     1 ( 0.01%)     0            4 ( 0.12%)     .              .           ???:std::moneypunct<char, false>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      112 ( 0.00%)      56 ( 0.01%)     24 ( 0.01%)   2 ( 0.03%)     0              0            2 ( 0.06%)     .              .           /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/invoke.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 63 ----------------------------------------
  .           .           .          .          .          .          .          .          .             template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
  .           .           .          .          .          .          .          .          .               constexpr _Res
  .           .           .          .          .          .          .          .          .               __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
  .           .           .          .          .          .          .          .          .           		  _Args&&... __args)
  .           .           .          .          .          .          .          .          .               { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
  .           .           .          .          .          .          .          .          .               constexpr _Res
 60 ( 0.00%)  0          30 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
  .           .           .          .          .          .          .          .          .           		  _Args&&... __args)
  .           .           .          .          .          .          .          .          .               {
170 ( 0.01%) 80 ( 0.01%) 20 ( 0.01%) 2 ( 0.03%) .          .          .          .          .                 return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
3,216 ( 0.11%) 908 ( 0.13%) 708 ( 0.25%) 39 ( 0.66%) 15 ( 0.11%) 30 ( 0.99%) 7 ( 0.22%) 0          28 ( 1.17%)  => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/LeaderFollower.cpp:LeaderFollower::work() (4x)
 28 ( 0.00%) 12 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:LeaderFollower*&& std::forward<LeaderFollower*>(std::remove_reference<LeaderFollower*>::type&) (4x)
 20 ( 0.00%) 20 ( 0.00%)  0          0          4 ( 0.03%) .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             template<typename _Res, typename _MemPtr, typename _Tp>
  .           .           .          .          .          .          .          .          .               constexpr _Res
  .           .           .          .          .          .          .          .          .               __invoke_impl(__invoke_memobj_ref, _MemPtr&& __f, _Tp&& __t)
  .           .           .          .          .          .          .          .          .               { return __invfwd<_Tp>(__t).*__f; }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             template<typename _Res, typename _MemPtr, typename _Tp>
  .           .           .          .          .          .          .          .          .               constexpr _Res
  .           .           .          .          .          .          .          .          .               __invoke_impl(__invoke_memobj_deref, _MemPtr&& __f, _Tp&& __t)
  .           .           .          .          .          .          .          .          .               { return (*std::forward<_Tp>(__t)).*__f; }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             /// Invoke a callable object.
  .           .           .          .          .          .          .          .          .             template<typename _Callable, typename... _Args>
  .           .           .          .          .          .          .          .          .               constexpr typename __invoke_result<_Callable, _Args...>::type
 70 ( 0.00%)  0          40 ( 0.01%) .          .          .          .          .          .               __invoke(_Callable&& __fn, _Args&&... __args)
  .           .           .          .          .          .          .          .          .               noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 using __result = __invoke_result<_Callable, _Args...>;
  .           .           .          .          .          .          .          .          .                 using __type = typename __result::type;
  .           .           .          .          .          .          .          .          .                 using __tag = typename __result::__invoke_type;
100 ( 0.00%) 20 ( 0.00%) 30 ( 0.01%) .          .          .          .          .          .                 return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
77,611 ( 2.74%) 21,517 ( 3.11%) 11,855 ( 4.23%) 629 (10.64%) 57 ( 0.43%) 85 ( 2.81%) 91 ( 2.81%) 19 ( 0.21%) 78 ( 3.26%)  => /usr/include/c++/11/bits/invoke.h:void std::__invoke_impl<void, void (ActiveObject::*)(), ActiveObject*>(std::__invoke_memfun_deref, void (ActiveObject::*&&)(), ActiveObject*&&) (6x)
 42 ( 0.00%) 18 ( 0.00%) 12 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:void (ActiveObject::*&&std::forward<void (ActiveObject::*)()>(std::remove_reference<void (ActiveObject::*)()>::type&))() (6x)
 42 ( 0.00%) 18 ( 0.00%) 12 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:ActiveObject*&& std::forward<ActiveObject*>(std::remove_reference<ActiveObject*>::type&) (6x)
 10 ( 0.00%)  0           0          1 ( 0.02%) .          .          .          .          .           					std::forward<_Args>(__args)...);
 30 ( 0.00%) 30 ( 0.00%)  0          0          4 ( 0.03%) .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201703L
  .           .           .          .          .          .          .          .          .             // INVOKE<R>: Invoke a callable object and convert the result to R.
  .           .           .          .          .          .          .          .          .             template<typename _Res, typename _Callable, typename... _Args>
  .           .           .          .          .          .          .          .          .               constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
  .           .           .          .          .          .          .          .          .               __invoke_r(_Callable&& __fn, _Args&&... __args)
  .           .           .          .          .          .          .          .          .               noexcept(is_nothrow_invocable_r_v<_Res, _Callable, _Args...>)
  .           .           .          .          .          .          .          .          .               {
-- line 106 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/allocator.h
--------------------------------------------------------------------------------
Ir           Dr           Dw           I1mr        D1mr       D1mw       ILmr        DLmr DLmw 

-- line 148 ----------------------------------------
  .            .            .           .          .          .           .          .          .                 using is_always_equal
  .            .            .           .          .          .           .          .          .           	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
  .            .            .           .          .          .           .          .          .           	= true_type;
  .            .            .           .          .          .           .          .          .           #endif
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .            .            .           .          .          .           .          .          .                 // 3035. std::allocator's constructors should be constexpr
  .            .            .           .          .          .           .          .          .                 _GLIBCXX20_CONSTEXPR
264 ( 0.01%)  72 ( 0.01%)  72 ( 0.03%) 11 ( 0.19%) 0          0          11 ( 0.34%) .          .                 allocator() _GLIBCXX_NOTHROW { }
 42 ( 0.00%)  12 ( 0.00%)  12 ( 0.00%)  2 ( 0.03%) 0          0           2 ( 0.06%) .          .           => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<ActiveObject>::new_allocator() (6x)
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .                 _GLIBCXX20_CONSTEXPR
108 ( 0.00%)   0           54 ( 0.02%)  .          .          .           .          .          .                 allocator(const allocator& __a) _GLIBCXX_NOTHROW
144 ( 0.01%)  72 ( 0.01%)  18 ( 0.01%)  .          .          .           .          .          .                 : __allocator_base<_Tp>(__a) { }
144 ( 0.01%)  36 ( 0.01%)  54 ( 0.02%)  1 ( 0.02%) 0          0           1 ( 0.03%) .          .           => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<ActiveObject>::new_allocator(__gnu_cxx::new_allocator<ActiveObject> const&) (18x)
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .           #if __cplusplus >= 201103L
  .            .            .           .          .          .           .          .          .                 // Avoid implicit deprecation.
  .            .            .           .          .          .           .          .          .                 allocator& operator=(const allocator&) = default;
  .            .            .           .          .          .           .          .          .           #endif
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .                 template<typename _Tp1>
  .            .            .           .          .          .           .          .          .           	_GLIBCXX20_CONSTEXPR
480 ( 0.02%) 120 ( 0.02%) 160 ( 0.06%) 20 ( 0.34%) 0          0           3 ( 0.09%) .          .           	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 84 ( 0.00%)  24 ( 0.00%)  24 ( 0.01%)  7 ( 0.12%) 0          0           1 ( 0.03%) .          .           => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >::new_allocator() (12x)
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .           #if __cpp_constexpr_dynamic_alloc
  .            .            .           .          .          .           .          .          .                 constexpr
  .            .            .           .          .          .           .          .          .           #endif
902 ( 0.03%) 246 ( 0.04%) 246 ( 0.09%) 16 ( 0.27%) 0          0           1 ( 0.03%) .          .                 ~allocator() _GLIBCXX_NOTHROW { }
168 ( 0.01%)  48 ( 0.01%)  48 ( 0.02%)  .          .          .           .          .          .           => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<ActiveObject>::~new_allocator() (24x)
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .           #if __cplusplus > 201703L
  .            .            .           .          .          .           .          .          .                 [[nodiscard,__gnu__::__always_inline__]]
  .            .            .           .          .          .           .          .          .                 constexpr _Tp*
  .            .            .           .          .          .           .          .          .                 allocate(size_t __n)
  .            .            .           .          .          .           .          .          .                 {
  .            .            .           .          .          .           .          .          .           #ifdef __cpp_lib_is_constant_evaluated
  .            .            .           .          .          .           .          .          .           	if (std::is_constant_evaluated())
-- line 182 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_queue.h
--------------------------------------------------------------------------------
Ir           Dr           Dw           I1mr       D1mr       D1mw        ILmr       DLmr       DLmw        

-- line 88 ----------------------------------------
  .            .            .          .          .           .          .          .           .              *  that supports @c front, @c back, @c push_back, and @c pop_front,
  .            .            .          .          .           .          .          .           .              *  such as std::list or an appropriate user-defined type.
  .            .            .          .          .           .          .          .           .              *
  .            .            .          .          .           .          .          .           .              *  Members not found in @a normal containers are @c container_type,
  .            .            .          .          .           .          .          .           .              *  which is a typedef for the second Sequence parameter, and @c push and
  .            .            .          .          .           .          .          .           .              *  @c pop, which are standard %queue/FIFO operations.
  .            .            .          .          .           .          .          .           .             */
  .            .            .          .          .           .          .          .           .             template<typename _Tp, typename _Sequence = deque<_Tp> >
238 ( 0.01%)  72 ( 0.01%)  66 ( 0.02%) 3 ( 0.05%) 0           0          1 ( 0.03%) .           .               class queue
4,488 ( 0.16%) 1,830 ( 0.26%) 1,332 ( 0.48%) 84 ( 1.42%) 0           0          36 ( 1.11%) .           .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::operator=(std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >&&) (6x)
  .            .            .          .          .           .          .          .           .               {
  .            .            .          .          .           .          .          .           .           #ifdef _GLIBCXX_CONCEPT_CHECKS
  .            .            .          .          .           .          .          .           .                 // concept requirements
  .            .            .          .          .           .          .          .           .                 typedef typename _Sequence::value_type _Sequence_value_type;
  .            .            .          .          .           .          .          .           .           # if __cplusplus < 201103L
  .            .            .          .          .           .          .          .           .                 __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
  .            .            .          .          .           .          .          .           .           # endif
  .            .            .          .          .           .          .          .           .                 __glibcxx_class_requires(_Sequence, _FrontInsertionSequenceConcept)
-- line 104 ----------------------------------------
-- line 158 ----------------------------------------
  .            .            .          .          .           .          .          .           .                  */
  .            .            .          .          .           .          .          .           .           #if __cplusplus < 201103L
  .            .            .          .          .           .          .          .           .                 explicit
  .            .            .          .          .           .          .          .           .                 queue(const _Sequence& __c = _Sequence())
  .            .            .          .          .           .          .          .           .                 : c(__c) { }
  .            .            .          .          .           .          .          .           .           #else
  .            .            .          .          .           .          .          .           .                 template<typename _Seq = _Sequence, typename _Requires = typename
  .            .            .          .          .           .          .          .           .           	       enable_if<is_default_constructible<_Seq>::value>::type>
 70 ( 0.00%)   0           28 ( 0.01%) 2 ( 0.03%) 0           0          2 ( 0.06%) .           .           	queue()
238 ( 0.01%)  56 ( 0.01%) 154 ( 0.06%) 3 ( 0.05%) 0          10 ( 0.33%) 3 ( 0.09%) 0          10 ( 0.42%)  	: c() { }
11,045 ( 0.39%) 3,134 ( 0.45%) 2,512 ( 0.90%) 78 ( 1.32%) 3 ( 0.02%) 16 ( 0.53%) 38 ( 1.17%) 0          15 ( 0.63%)  => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::deque() (13x)
  .            .            .          .          .           .          .          .           .           
  .            .            .          .          .           .          .          .           .                 explicit
  .            .            .          .          .           .          .          .           .                 queue(const _Sequence& __c)
  .            .            .          .          .           .          .          .           .                 : c(__c) { }
  .            .            .          .          .           .          .          .           .           
  .            .            .          .          .           .          .          .           .                 explicit
  .            .            .          .          .           .          .          .           .                 queue(_Sequence&& __c)
  .            .            .          .          .           .          .          .           .                 : c(std::move(__c)) { }
-- line 175 ----------------------------------------
-- line 195 ----------------------------------------
  .            .            .          .          .           .          .          .           .           	queue(queue&& __q, const _Alloc& __a)
  .            .            .          .          .           .          .          .           .           	: c(std::move(__q.c), __a) { }
  .            .            .          .          .           .          .          .           .           #endif
  .            .            .          .          .           .          .          .           .           
  .            .            .          .          .           .          .          .           .                 /**
  .            .            .          .          .           .          .          .           .                  *  Returns true if the %queue is empty.
  .            .            .          .          .           .          .          .           .                  */
  .            .            .          .          .           .          .          .           .                 _GLIBCXX_NODISCARD bool
190 ( 0.01%)   0           76 ( 0.03%) 2 ( 0.03%) 0           0          2 ( 0.06%) .           .                 empty() const
190 ( 0.01%) 114 ( 0.02%)  38 ( 0.01%) .          .           .          .          .           .                 { return c.empty(); }
135 ( 0.00%)  50 ( 0.01%)  30 ( 0.01%) 2 ( 0.03%) 1 ( 0.01%)  .          .          .           .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::empty() const (5x)
  .            .            .          .          .           .          .          .           .           
  .            .            .          .          .           .          .          .           .                 /**  Returns the number of elements in the %queue.  */
  .            .            .          .          .           .          .          .           .                 size_type
 60 ( 0.00%)   0           24 ( 0.01%) 2 ( 0.03%) 0           0          1 ( 0.03%) .           .                 size() const
 60 ( 0.00%)  36 ( 0.01%)  12 ( 0.00%) .          .           .          .          .           .                 { return c.size(); }
912 ( 0.03%) 312 ( 0.05%) 132 ( 0.05%) 4 ( 0.07%) 0           0          2 ( 0.06%) .           .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::size() const (12x)
  .            .            .          .          .           .          .          .           .           
  .            .            .          .          .           .          .          .           .                 /**
  .            .            .          .          .           .          .          .           .                  *  Returns a read/write reference to the data at the first
  .            .            .          .          .           .          .          .           .                  *  element of the %queue.
  .            .            .          .          .           .          .          .           .                  */
  .            .            .          .          .           .          .          .           .                 reference
 20 ( 0.00%)   0            8 ( 0.00%) .          .           .          .          .           .                 front()
  .            .            .          .          .           .          .          .           .                 {
  .            .            .          .          .           .          .          .           .           	__glibcxx_requires_nonempty();
 12 ( 0.00%)   4 ( 0.00%)   4 ( 0.00%) .          .           .          .          .           .           	return c.front();
272 ( 0.01%) 116 ( 0.02%)  72 ( 0.03%) 3 ( 0.05%) 0           0          3 ( 0.09%) .           .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::front() (4x)
  8 ( 0.00%)   8 ( 0.00%)   .          .          .           .          .          .           .                 }
  .            .            .          .          .           .          .          .           .           
  .            .            .          .          .           .          .          .           .                 /**
  .            .            .          .          .           .          .          .           .                  *  Returns a read-only (constant) reference to the data at the first
  .            .            .          .          .           .          .          .           .                  *  element of the %queue.
  .            .            .          .          .           .          .          .           .                  */
  .            .            .          .          .           .          .          .           .                 const_reference
  .            .            .          .          .           .          .          .           .                 front() const
  .            .            .          .          .           .          .          .           .                 {
-- line 228 ----------------------------------------
-- line 262 ----------------------------------------
  .            .            .          .          .           .          .          .           .                  *  underlying sequence.
  .            .            .          .          .           .          .          .           .                  */
  .            .            .          .          .           .          .          .           .                 void
  .            .            .          .          .           .          .          .           .                 push(const value_type& __x)
  .            .            .          .          .           .          .          .           .                 { c.push_back(__x); }
  .            .            .          .          .           .          .          .           .           
  .            .            .          .          .           .          .          .           .           #if __cplusplus >= 201103L
  .            .            .          .          .           .          .          .           .                 void
 28 ( 0.00%)   0           16 ( 0.01%) 1 ( 0.02%) 0           0          1 ( 0.03%) .           .                 push(value_type&& __x)
 44 ( 0.00%)  20 ( 0.00%)   8 ( 0.00%) .          .           .          .          .           .                 { c.push_back(std::move(__x)); }
1,452 ( 0.05%) 508 ( 0.07%) 412 ( 0.15%) 20 ( 0.34%) 0           0          19 ( 0.59%) .           .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::push_back(std::unique_ptr<std::thread, std::default_delete<std::thread> >&&) (4x)
 28 ( 0.00%)  12 ( 0.00%)   8 ( 0.00%) 8 ( 0.14%) 0           0          1 ( 0.03%) .           .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::unique_ptr<std::thread, std::default_delete<std::thread> >&>::type&& std::move<std::unique_ptr<std::thread, std::default_delete<std::thread> >&>(std::unique_ptr<std::thread, std::default_delete<std::thread> >&) (4x)
  .            .            .          .          .           .          .          .           .           
  .            .            .          .          .           .          .          .           .           #if __cplusplus > 201402L
  .            .            .          .          .           .          .          .           .                 template<typename... _Args>
  .            .            .          .          .           .          .          .           .           	decltype(auto)
  .            .            .          .          .           .          .          .           .           	emplace(_Args&&... __args)
  .            .            .          .          .           .          .          .           .           	{ return c.emplace_back(std::forward<_Args>(__args)...); }
  .            .            .          .          .           .          .          .           .           #else
  .            .            .          .          .           .          .          .           .                 template<typename... _Args>
-- line 279 ----------------------------------------
-- line 290 ----------------------------------------
  .            .            .          .          .           .          .          .           .                  *  The time complexity of the operation depends on the underlying
  .            .            .          .          .           .          .          .           .                  *  sequence.
  .            .            .          .          .           .          .          .           .                  *
  .            .            .          .          .           .          .          .           .                  *  Note that no data is returned, and if the first element's
  .            .            .          .          .           .          .          .           .                  *  data is needed, it should be retrieved before pop() is
  .            .            .          .          .           .          .          .           .                  *  called.
  .            .            .          .          .           .          .          .           .                  */
  .            .            .          .          .           .          .          .           .                 void
 20 ( 0.00%)   0            8 ( 0.00%) .          .           .          .          .           .                 pop()
  .            .            .          .          .           .          .          .           .                 {
  .            .            .          .          .           .          .          .           .           	__glibcxx_requires_nonempty();
 12 ( 0.00%)   4 ( 0.00%)   4 ( 0.00%) 1 ( 0.02%) 0           0          1 ( 0.03%) .           .           	c.pop_front();
1,604 ( 0.06%) 503 ( 0.07%) 369 ( 0.13%) 16 ( 0.27%) 1 ( 0.01%)  0          3 ( 0.09%) .           .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::pop_front() (4x)
 12 ( 0.00%)   8 ( 0.00%)   .          .          .           .          .          .           .                 }
  .            .            .          .          .           .          .          .           .           
  .            .            .          .          .           .          .          .           .           #if __cplusplus >= 201103L
  .            .            .          .          .           .          .          .           .                 void
  .            .            .          .          .           .          .          .           .                 swap(queue& __q)
  .            .            .          .          .           .          .          .           .           #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11
  .            .            .          .          .           .          .          .           .                 noexcept(__is_nothrow_swappable<_Sequence>::value)
  .            .            .          .          .           .          .          .           .           #else
  .            .            .          .          .           .          .          .           .                 noexcept(__is_nothrow_swappable<_Tp>::value)
-- line 310 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/atomic
--------------------------------------------------------------------------------
Ir           Dr           Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 68 ----------------------------------------
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .             public:
  .            .           .          .          .          .          .          .          .               atomic() noexcept = default;
  .            .           .          .          .          .          .          .          .               ~atomic() noexcept = default;
  .            .           .          .          .          .          .          .          .               atomic(const atomic&) = delete;
  .            .           .          .          .          .          .          .          .               atomic& operator=(const atomic&) = delete;
  .            .           .          .          .          .          .          .          .               atomic& operator=(const atomic&) volatile = delete;
  .            .           .          .          .          .          .          .          .           
120 ( 0.00%)  32 ( 0.00%) 32 ( 0.01%) 3 ( 0.05%) 0          0          2 ( 0.06%) .          .               constexpr atomic(bool __i) noexcept : _M_base(__i) { }
 96 ( 0.00%)  32 ( 0.00%) 32 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/atomic_base.h:std::__atomic_base<bool>::__atomic_base(bool) (8x)
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .               bool
 56 ( 0.00%)   0          24 ( 0.01%) .          .          .          .          .          .               operator=(bool __i) noexcept
 56 ( 0.00%)  32 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .               { return _M_base.operator=(__i); }
280 ( 0.01%) 104 ( 0.02%) 104 ( 0.04%) 3 ( 0.05%) 1 ( 0.01%) 0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/atomic_base.h:std::__atomic_base<bool>::operator=(bool) (8x)
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .               bool
  .            .           .          .          .          .          .          .          .               operator=(bool __i) volatile noexcept
  .            .           .          .          .          .          .          .          .               { return _M_base.operator=(__i); }
  .            .           .          .          .          .          .          .          .           
215 ( 0.01%)   0          86 ( 0.03%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               operator bool() const noexcept
215 ( 0.01%) 129 ( 0.02%) 86 ( 0.03%) .          .          .          .          .          .               { return _M_base.load(); }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .               operator bool() const volatile noexcept
  .            .           .          .          .          .          .          .          .               { return _M_base.load(); }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .               bool
  .            .           .          .          .          .          .          .          .               is_lock_free() const noexcept { return _M_base.is_lock_free(); }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .               bool
-- line 95 ----------------------------------------
-- line 217 ----------------------------------------
  .            .           .          .          .          .          .          .          .           #if __cplusplus > 201703L
  .            .           .          .          .          .          .          .          .                 static_assert(is_copy_constructible_v<_Tp>);
  .            .           .          .          .          .          .          .          .                 static_assert(is_move_constructible_v<_Tp>);
  .            .           .          .          .          .          .          .          .                 static_assert(is_copy_assignable_v<_Tp>);
  .            .           .          .          .          .          .          .          .                 static_assert(is_move_assignable_v<_Tp>);
  .            .           .          .          .          .          .          .          .           #endif
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .               public:
 11 ( 0.00%)   3 ( 0.00%)  3 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 atomic() = default;
  9 ( 0.00%)   3 ( 0.00%)  3 ( 0.00%) 1 ( 0.02%) .          .          .          .          .           => /usr/include/c++/11/bits/std_thread.h:std::thread::id::id() (1x)
  .            .           .          .          .          .          .          .          .                 ~atomic() noexcept = default;
  .            .           .          .          .          .          .          .          .                 atomic(const atomic&) = delete;
  .            .           .          .          .          .          .          .          .                 atomic& operator=(const atomic&) = delete;
  .            .           .          .          .          .          .          .          .                 atomic& operator=(const atomic&) volatile = delete;
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 operator _Tp() const noexcept
-- line 233 ----------------------------------------
-- line 825 ----------------------------------------
  .            .           .          .          .          .          .          .          .                 typedef __atomic_base<int> 		__base_type;
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 atomic() noexcept = default;
  .            .           .          .          .          .          .          .          .                 ~atomic() noexcept = default;
  .            .           .          .          .          .          .          .          .                 atomic(const atomic&) = delete;
  .            .           .          .          .          .          .          .          .                 atomic& operator=(const atomic&) = delete;
  .            .           .          .          .          .          .          .          .                 atomic& operator=(const atomic&) volatile = delete;
  .            .           .          .          .          .          .          .          .           
 14 ( 0.00%)   4 ( 0.00%)  4 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }
 11 ( 0.00%)   4 ( 0.00%)  4 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/atomic_base.h:std::__atomic_base<int>::__atomic_base(int) (1x)
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 using __base_type::operator __integral_type;
  .            .           .          .          .          .          .          .          .                 using __base_type::operator=;
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .           #if __cplusplus >= 201703L
  .            .           .          .          .          .          .          .          .               static constexpr bool is_always_lock_free = ATOMIC_INT_LOCK_FREE == 2;
  .            .           .          .          .          .          .          .          .           #endif
  .            .           .          .          .          .          .          .          .               };
-- line 841 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/atomic_base.h
--------------------------------------------------------------------------------
Ir           Dr           Dw           I1mr       D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 97 ----------------------------------------
  .            .            .          .          .          .          .          .          .             constexpr memory_order
  .            .            .          .          .          .          .          .          .             operator|(memory_order __m, __memory_order_modifier __mod)
  .            .            .          .          .          .          .          .          .             {
  .            .            .          .          .          .          .          .          .               return memory_order(int(__m) | int(__mod));
  .            .            .          .          .          .          .          .          .             }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .             constexpr memory_order
  .            .            .          .          .          .          .          .          .             operator&(memory_order __m, __memory_order_modifier __mod)
280 ( 0.01%)   0          168 ( 0.06%) 2 ( 0.03%) 0          6 ( 0.20%) 1 ( 0.03%) 0          6 ( 0.25%)    {
168 ( 0.01%) 112 ( 0.02%)   .          .          .          .          .          .          .               return memory_order(int(__m) & int(__mod));
112 ( 0.00%) 112 ( 0.02%)   .          .          .          .          .          .          .             }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .             // Drop release ordering as per [atomics.types.operations.req]/21
  .            .            .          .          .          .          .          .          .             constexpr memory_order
  .            .            .          .          .          .          .          .          .             __cmpexch_failure_order2(memory_order __m) noexcept
  .            .            .          .          .          .          .          .          .             {
  .            .            .          .          .          .          .          .          .               return __m == memory_order_acq_rel ? memory_order_acquire
  .            .            .          .          .          .          .          .          .                 : __m == memory_order_release ? memory_order_relaxed : __m;
  .            .            .          .          .          .          .          .          .             }
-- line 115 ----------------------------------------
-- line 337 ----------------------------------------
  .            .            .          .          .          .          .          .          .               public:
  .            .            .          .          .          .          .          .          .                 __atomic_base() noexcept = default;
  .            .            .          .          .          .          .          .          .                 ~__atomic_base() noexcept = default;
  .            .            .          .          .          .          .          .          .                 __atomic_base(const __atomic_base&) = delete;
  .            .            .          .          .          .          .          .          .                 __atomic_base& operator=(const __atomic_base&) = delete;
  .            .            .          .          .          .          .          .          .                 __atomic_base& operator=(const __atomic_base&) volatile = delete;
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .                 // Requires __int_type convertible to _M_i.
107 ( 0.00%)  36 ( 0.01%)  36 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .                 operator __int_type() const noexcept
  .            .            .          .          .          .          .          .          .                 { return load(); }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .                 operator __int_type() const volatile noexcept
  .            .            .          .          .          .          .          .          .                 { return load(); }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .                 __int_type
 56 ( 0.00%)   0           24 ( 0.01%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .                 operator=(__int_type __i) noexcept
  .            .            .          .          .          .          .          .          .                 {
 48 ( 0.00%)  16 ( 0.00%)  32 ( 0.01%) .          .          .          .          .          .           	store(__i);
  8 ( 0.00%)   8 ( 0.00%)   0          1 ( 0.02%) .          .          .          .          .           	return __i;
 16 ( 0.00%)  16 ( 0.00%)   .          .          .          .          .          .          .                 }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .                 __int_type
  .            .            .          .          .          .          .          .          .                 operator=(__int_type __i) volatile noexcept
  .            .            .          .          .          .          .          .          .                 {
  .            .            .          .          .          .          .          .          .           	store(__i);
  .            .            .          .          .          .          .          .          .           	return __i;
  .            .            .          .          .          .          .          .          .                 }
  .            .            .          .          .          .          .          .          .           
-- line 366 ----------------------------------------
-- line 451 ----------------------------------------
  .            .            .          .          .          .          .          .          .           	return __atomic_is_lock_free(sizeof(_M_i),
  .            .            .          .          .          .          .          .          .           	    reinterpret_cast<void *>(-_S_alignment));
  .            .            .          .          .          .          .          .          .                 }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .                 _GLIBCXX_ALWAYS_INLINE void
  .            .            .          .          .          .          .          .          .                 store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
  .            .            .          .          .          .          .          .          .                 {
  .            .            .          .          .          .          .          .          .           	memory_order __b __attribute__ ((__unused__))
 40 ( 0.00%)   8 ( 0.00%)  16 ( 0.01%) .          .          .          .          .          .           	  = __m & __memory_order_mask;
 80 ( 0.00%)  32 ( 0.00%)  24 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/atomic_base.h:std::operator&(std::memory_order, std::__memory_order_modifier) (8x)
  .            .            .          .          .          .          .          .          .           	__glibcxx_assert(__b != memory_order_acquire);
  .            .            .          .          .          .          .          .          .           	__glibcxx_assert(__b != memory_order_acq_rel);
  .            .            .          .          .          .          .          .          .           	__glibcxx_assert(__b != memory_order_consume);
  .            .            .          .          .          .          .          .          .           
 24 ( 0.00%)  24 ( 0.00%)   8 ( 0.00%) 0          1 ( 0.01%) .          .          .          .           	__atomic_store_n(&_M_i, __i, int(__m));
  8 ( 0.00%)   .            .          .          .          .          .          .          .                 }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .                 _GLIBCXX_ALWAYS_INLINE void
  .            .            .          .          .          .          .          .          .                 store(__int_type __i,
  .            .            .          .          .          .          .          .          .           	    memory_order __m = memory_order_seq_cst) volatile noexcept
  .            .            .          .          .          .          .          .          .                 {
  .            .            .          .          .          .          .          .          .           	memory_order __b __attribute__ ((__unused__))
  .            .            .          .          .          .          .          .          .           	  = __m & __memory_order_mask;
  .            .            .          .          .          .          .          .          .           	__glibcxx_assert(__b != memory_order_acquire);
-- line 473 ----------------------------------------
-- line 476 ----------------------------------------
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .           	__atomic_store_n(&_M_i, __i, int(__m));
  .            .            .          .          .          .          .          .          .                 }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .                 _GLIBCXX_ALWAYS_INLINE __int_type
  .            .            .          .          .          .          .          .          .                 load(memory_order __m = memory_order_seq_cst) const noexcept
  .            .            .          .          .          .          .          .          .                 {
  .            .            .          .          .          .          .          .          .           	memory_order __b __attribute__ ((__unused__))
240 ( 0.01%)  48 ( 0.01%)  96 ( 0.03%) 0          0          4 ( 0.13%) 0          0          4 ( 0.17%)  	  = __m & __memory_order_mask;
 50 ( 0.00%)  20 ( 0.00%)  15 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/atomic_base.h:std::operator&(std::memory_order, std::__memory_order_modifier) (5x)
  .            .            .          .          .          .          .          .          .           	__glibcxx_assert(__b != memory_order_release);
  .            .            .          .          .          .          .          .          .           	__glibcxx_assert(__b != memory_order_acq_rel);
  .            .            .          .          .          .          .          .          .           
182 ( 0.01%)  96 ( 0.01%)   0          1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	return __atomic_load_n(&_M_i, int(__m));
  .            .            .          .          .          .          .          .          .                 }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .                 _GLIBCXX_ALWAYS_INLINE __int_type
  .            .            .          .          .          .          .          .          .                 load(memory_order __m = memory_order_seq_cst) const volatile noexcept
  .            .            .          .          .          .          .          .          .                 {
  .            .            .          .          .          .          .          .          .           	memory_order __b __attribute__ ((__unused__))
  .            .            .          .          .          .          .          .          .           	  = __m & __memory_order_mask;
  .            .            .          .          .          .          .          .          .           	__glibcxx_assert(__b != memory_order_release);
-- line 496 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_algobase.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr        D1mr       D1mw       ILmr       DLmr DLmw 

-- line 222 ----------------------------------------
  .           .           .           .          .          .          .          .          .              *
  .           .           .           .          .          .          .          .          .              *  This is the simple classic generic implementation.  It will work on
  .           .           .           .          .          .          .          .          .              *  temporary expressions, since they are only evaluated once, unlike a
  .           .           .           .          .          .          .          .          .              *  preprocessor macro.
  .           .           .           .          .          .          .          .          .             */
  .           .           .           .          .          .          .          .          .             template<typename _Tp>
  .           .           .           .          .          .          .          .          .               _GLIBCXX14_CONSTEXPR
  .           .           .           .          .          .          .          .          .               inline const _Tp&
 40 ( 0.00%)  0          24 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .               min(const _Tp& __a, const _Tp& __b)
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                 // concept requirements
  .           .           .           .          .          .          .          .          .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
  .           .           .           .          .          .          .          .          .                 //return __b < __a ? __b : __a;
 48 ( 0.00%) 32 ( 0.00%)  .           .          .          .          .          .          .                 if (__b < __a)
  .           .           .           .          .          .          .          .          .           	return __b;
  8 ( 0.00%)  8 ( 0.00%)  0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 return __a;
 16 ( 0.00%) 16 ( 0.00%)  .           .          .          .          .          .          .               }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             /**
  .           .           .           .          .          .          .          .          .              *  @brief This does what you think it does.
  .           .           .           .          .          .          .          .          .              *  @ingroup sorting_algorithms
  .           .           .           .          .          .          .          .          .              *  @param  __a  A thing of arbitrary type.
  .           .           .           .          .          .          .          .          .              *  @param  __b  Another thing of arbitrary type.
  .           .           .           .          .          .          .          .          .              *  @return   The greater of the parameters.
  .           .           .           .          .          .          .          .          .              *
  .           .           .           .          .          .          .          .          .              *  This is the simple classic generic implementation.  It will work on
  .           .           .           .          .          .          .          .          .              *  temporary expressions, since they are only evaluated once, unlike a
  .           .           .           .          .          .          .          .          .              *  preprocessor macro.
  .           .           .           .          .          .          .          .          .             */
  .           .           .           .          .          .          .          .          .             template<typename _Tp>
  .           .           .           .          .          .          .          .          .               _GLIBCXX14_CONSTEXPR
  .           .           .           .          .          .          .          .          .               inline const _Tp&
 95 ( 0.00%)  0          57 ( 0.02%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .               max(const _Tp& __a, const _Tp& __b)
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                 // concept requirements
  .           .           .           .          .          .          .          .          .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
  .           .           .           .          .          .          .          .          .                 //return  __a < __b ? __b : __a;
114 ( 0.00%) 76 ( 0.01%)  0          11 ( 0.19%) 0          0          1 ( 0.03%) .          .                 if (__a < __b)
  2 ( 0.00%)  1 ( 0.00%)  .           .          .          .          .          .          .           	return __b;
 18 ( 0.00%) 18 ( 0.00%)  .           .          .          .          .          .          .                 return __a;
 38 ( 0.00%) 38 ( 0.01%)  .           .          .          .          .          .          .               }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             /**
  .           .           .           .          .          .          .          .          .              *  @brief This does what you think it does.
  .           .           .           .          .          .          .          .          .              *  @ingroup sorting_algorithms
  .           .           .           .          .          .          .          .          .              *  @param  __a  A thing of arbitrary type.
  .           .           .           .          .          .          .          .          .              *  @param  __b  Another thing of arbitrary type.
  .           .           .           .          .          .          .          .          .              *  @param  __comp  A @link comparison_functors comparison functor@endlink.
  .           .           .           .          .          .          .          .          .              *  @return   The lesser of the parameters.
-- line 270 ----------------------------------------
-- line 305 ----------------------------------------
  .           .           .           .          .          .          .          .          .                 return __a;
  .           .           .           .          .          .          .          .          .               }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             // Fallback implementation of the function in bits/stl_iterator.h used to
  .           .           .           .          .          .          .          .          .             // remove the __normal_iterator wrapper. See copy, fill, ...
  .           .           .           .          .          .          .          .          .             template<typename _Iterator>
  .           .           .           .          .          .          .          .          .               _GLIBCXX20_CONSTEXPR
  .           .           .           .          .          .          .          .          .               inline _Iterator
 96 ( 0.00%)  0          48 ( 0.02%)  .          .          .          .          .          .               __niter_base(_Iterator __it)
  .           .           .           .          .          .          .          .          .               _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 72 ( 0.00%) 72 ( 0.01%)  .           .          .          .          .          .          .               { return __it; }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             template<typename _Ite, typename _Seq>
  .           .           .           .          .          .          .          .          .               _Ite
  .           .           .           .          .          .          .          .          .               __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,
  .           .           .           .          .          .          .          .          .           		 std::random_access_iterator_tag>&);
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             // Reverse the __niter_base transformation to get a
  .           .           .           .          .          .          .          .          .             // __normal_iterator back again (this assumes that __normal_iterator
-- line 323 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/ext/new_allocator.h
--------------------------------------------------------------------------------
Ir           Dr           Dw           I1mr        D1mr       D1mw       ILmr        DLmr DLmw 

-- line 71 ----------------------------------------
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .           #if __cplusplus >= 201103L
  .            .            .           .          .          .           .          .          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .            .            .           .          .          .           .          .          .                 // 2103. propagate_on_container_move_assignment
  .            .            .           .          .          .           .          .          .                 typedef std::true_type propagate_on_container_move_assignment;
  .            .            .           .          .          .           .          .          .           #endif
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .                 _GLIBCXX20_CONSTEXPR
448 ( 0.02%) 128 ( 0.02%) 128 ( 0.05%) 18 ( 0.30%) 0          0          11 ( 0.34%) .          .                 new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .                 _GLIBCXX20_CONSTEXPR
144 ( 0.01%)  36 ( 0.01%)  54 ( 0.02%)  1 ( 0.02%) 0          0           1 ( 0.03%) .          .                 new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .                 template<typename _Tp1>
  .            .            .           .          .          .           .          .          .           	_GLIBCXX20_CONSTEXPR
  .            .            .           .          .          .           .          .          .           	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .           #if __cplusplus <= 201703L
574 ( 0.02%) 164 ( 0.02%) 164 ( 0.06%)  1 ( 0.02%) 0          0           1 ( 0.03%) .          .                 ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .                 pointer
  .            .            .           .          .          .           .          .          .                 address(reference __x) const _GLIBCXX_NOEXCEPT
  .            .            .           .          .          .           .          .          .                 { return std::__addressof(__x); }
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .                 const_pointer
  .            .            .           .          .          .           .          .          .                 address(const_reference __x) const _GLIBCXX_NOEXCEPT
  .            .            .           .          .          .           .          .          .                 { return std::__addressof(__x); }
  .            .            .           .          .          .           .          .          .           #endif
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .                 // NB: __n is permitted to be 0.  The C++ standard says nothing
  .            .            .           .          .          .           .          .          .                 // about what the return value is when __n == 0.
  .            .            .           .          .          .           .          .          .                 _GLIBCXX_NODISCARD _Tp*
266 ( 0.01%)   0          152 ( 0.05%) 14 ( 0.24%) 0          0           7 ( 0.22%) .          .                 allocate(size_type __n, const void* = static_cast<const void*>(0))
  .            .            .           .          .          .           .          .          .                 {
  .            .            .           .          .          .           .          .          .           #if __cplusplus >= 201103L
  .            .            .           .          .          .           .          .          .           	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .            .            .           .          .          .           .          .          .           	 // 3308. std::allocator<void>().allocate(n)
  .            .            .           .          .          .           .          .          .           	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
  .            .            .           .          .          .           .          .          .           #endif
  .            .            .           .          .          .           .          .          .           
380 ( 0.01%)  76 ( 0.01%)  38 ( 0.01%)  4 ( 0.07%) 0          0           4 ( 0.12%) .          .           	if (__builtin_expect(__n > this->_M_max_size(), false))
 91 ( 0.00%)  26 ( 0.00%)  26 ( 0.01%)  .          .          .           .          .          .           => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::weak_ptr<Graph>*>::_M_max_size() const (13x)
  .            .            .           .          .          .           .          .          .           	  {
  .            .            .           .          .          .           .          .          .           	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .            .            .           .          .          .           .          .          .           	    // 3190. allocator::allocate sometimes returns too little storage
  .            .            .           .          .          .           .          .          .           	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
  .            .            .           .          .          .           .          .          .           	      std::__throw_bad_array_new_length();
  .            .            .           .          .          .           .          .          .           	    std::__throw_bad_alloc();
  .            .            .           .          .          .           .          .          .           	  }
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .           #if __cpp_aligned_new
  .            .            .           .          .          .           .          .          .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
  .            .            .           .          .          .           .          .          .           	  {
  .            .            .           .          .          .           .          .          .           	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
  .            .            .           .          .          .           .          .          .           	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
  .            .            .           .          .          .           .          .          .           	  }
  .            .            .           .          .          .           .          .          .           #endif
190 ( 0.01%)  38 ( 0.01%)  38 ( 0.01%)  3 ( 0.05%) 0          0           3 ( 0.09%) .          .           	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
1,855 ( 0.07%) 378 ( 0.05%) 268 ( 0.10%)  5 ( 0.08%) 1 ( 0.01%) 7 ( 0.23%)  0          0          7 ( 0.29%)  => ???:0x000000000010c8c0 (13x)
 76 ( 0.00%)  76 ( 0.01%)   0           1 ( 0.02%) 0          0           1 ( 0.03%) .          .                 }
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .                 // __p is not permitted to be a null pointer.
  .            .            .           .          .          .           .          .          .                 void
266 ( 0.01%)   0          152 ( 0.05%)  6 ( 0.10%) 0          0           2 ( 0.06%) .          .                 deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
  .            .            .           .          .          .           .          .          .                 {
  .            .            .           .          .          .           .          .          .           #if __cpp_aligned_new
  .            .            .           .          .          .           .          .          .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
  .            .            .           .          .          .           .          .          .           	  {
  .            .            .           .          .          .           .          .          .           	    ::operator delete(__p,
  .            .            .           .          .          .           .          .          .           # if __cpp_sized_deallocation
  .            .            .           .          .          .           .          .          .           			      __t * sizeof(_Tp),
  .            .            .           .          .          .           .          .          .           # endif
  .            .            .           .          .          .           .          .          .           			      std::align_val_t(alignof(_Tp)));
  .            .            .           .          .          .           .          .          .           	    return;
  .            .            .           .          .          .           .          .          .           	  }
  .            .            .           .          .          .           .          .          .           #endif
251 ( 0.01%)  76 ( 0.01%)  38 ( 0.01%)  .          .          .           .          .          .           	::operator delete(__p
594 ( 0.02%) 186 ( 0.03%)  90 ( 0.03%)  0          1 ( 0.01%) .           .          .          .           => ???:0x000000000010c8d0 (6x)
  .            .            .           .          .          .           .          .          .           #if __cpp_sized_deallocation
  .            .            .           .          .          .           .          .          .           			  , __t * sizeof(_Tp)
  .            .            .           .          .          .           .          .          .           #endif
  .            .            .           .          .          .           .          .          .           			 );
 76 ( 0.00%)  76 ( 0.01%)   .           .          .          .           .          .          .                 }
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .           #if __cplusplus <= 201703L
  .            .            .           .          .          .           .          .          .                 size_type
 40 ( 0.00%)   0           16 ( 0.01%)  .          .          .           .          .          .                 max_size() const _GLIBCXX_USE_NOEXCEPT
 40 ( 0.00%)  24 ( 0.00%)   8 ( 0.00%)  1 ( 0.02%) 0          0           1 ( 0.03%) .          .                 { return _M_max_size(); }
 56 ( 0.00%)  16 ( 0.00%)  16 ( 0.01%)  .          .          .           .          .          .           => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::shared_ptr<ActiveObject> >::_M_max_size() const (8x)
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .           #if __cplusplus >= 201103L
  .            .            .           .          .          .           .          .          .                 template<typename _Up, typename... _Args>
  .            .            .           .          .          .           .          .          .           	void
196 ( 0.01%)   0          127 ( 0.05%)  1 ( 0.02%) 0          0           1 ( 0.03%) .          .           	construct(_Up* __p, _Args&&... __args)
  .            .            .           .          .          .           .          .          .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
369 ( 0.01%) 133 ( 0.02%)  69 ( 0.02%)  2 ( 0.03%) 0          0           2 ( 0.06%) .          .           	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
576 ( 0.02%) 180 ( 0.03%) 176 ( 0.06%)  4 ( 0.07%) 0          0           3 ( 0.09%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::unique_ptr(std::unique_ptr<std::thread, std::default_delete<std::thread> >&&) (4x)
 32 ( 0.00%)  12 ( 0.00%)  12 ( 0.00%)  .          .          .           .          .          .           => /usr/include/c++/11/new:operator new(unsigned long, void*) (4x)
 28 ( 0.00%)  12 ( 0.00%)   8 ( 0.00%)  .          .          .           .          .          .           => /usr/include/c++/11/bits/move.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >&& std::forward<std::unique_ptr<std::thread, std::default_delete<std::thread> > >(std::remove_reference<std::unique_ptr<std::thread, std::default_delete<std::thread> > >::type&) (4x)
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .                 template<typename _Up>
  .            .            .           .          .          .           .          .          .           	void
102 ( 0.00%)   0           51 ( 0.02%)  .          .          .           .          .          .           	destroy(_Up* __p)
  .            .            .           .          .          .           .          .          .           	noexcept(std::is_nothrow_destructible<_Up>::value)
102 ( 0.00%)  51 ( 0.01%)  17 ( 0.01%)  1 ( 0.02%) 0          0           1 ( 0.03%) .          .           	{ __p->~_Up(); }
1,348 ( 0.05%) 411 ( 0.06%) 305 ( 0.11%) 12 ( 0.20%) 1 ( 0.01%) .           .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::~unique_ptr() (4x)
  .            .            .           .          .          .           .          .          .           #else
  .            .            .           .          .          .           .          .          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .            .            .           .          .          .           .          .          .                 // 402. wrong new expression in [some_] allocator::construct
  .            .            .           .          .          .           .          .          .                 void
  .            .            .           .          .          .           .          .          .                 construct(pointer __p, const _Tp& __val)
  .            .            .           .          .          .           .          .          .                 { ::new((void *)__p) _Tp(__val); }
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .                 void
-- line 176 ----------------------------------------
-- line 189 ----------------------------------------
  .            .            .           .          .          .           .          .          .           	friend _GLIBCXX20_CONSTEXPR bool
  .            .            .           .          .          .           .          .          .           	operator!=(const new_allocator&, const new_allocator<_Up>&)
  .            .            .           .          .          .           .          .          .           	_GLIBCXX_NOTHROW
  .            .            .           .          .          .           .          .          .           	{ return false; }
  .            .            .           .          .          .           .          .          .           #endif
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .               private:
  .            .            .           .          .          .           .          .          .                 _GLIBCXX_CONSTEXPR size_type
184 ( 0.01%)   0           92 ( 0.03%)  1 ( 0.02%) 0          0           1 ( 0.03%) .          .                 _M_max_size() const _GLIBCXX_USE_NOEXCEPT
  .            .            .           .          .          .           .          .          .                 {
  .            .            .           .          .          .           .          .          .           #if __PTRDIFF_MAX__ < __SIZE_MAX__
 46 ( 0.00%)   .            .           .          .          .           .          .          .           	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
  .            .            .           .          .          .           .          .          .           #else
  .            .            .           .          .          .           .          .          .           	return std::size_t(-1) / sizeof(_Tp);
  .            .            .           .          .          .           .          .          .           #endif
 92 ( 0.00%)  92 ( 0.01%)   .           .          .          .           .          .          .                 }
  .            .            .           .          .          .           .          .          .               };
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .           _GLIBCXX_END_NAMESPACE_VERSION
  .            .            .           .          .          .           .          .          .           } // namespace
  .            .            .           .          .          .           .          .          .           
  .            .            .           .          .          .           .          .          .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: LeaderFollower.cpp
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr       DLmw       

  .           .           .          .          .          .          .          .          .           #include "LeaderFollower.hpp"
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #define NO_PROCESS -1
  .           .           .          .          .          .          .          .          .           #define AT_PROCESS 0
  .           .           .          .          .          .          .          .          .           #define FINISH_PROCESS 1
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           // Constructor
 41 ( 0.00%)  9 ( 0.00%) 13 ( 0.00%) 3 ( 0.05%) 0          0          3 ( 0.09%) .          .           LeaderFollower::LeaderFollower() : stop(false)
1,021 ( 0.04%) 270 ( 0.04%) 229 ( 0.08%) 39 ( 0.66%) 0          4 ( 0.13%) 39 ( 1.20%) 0          3 ( 0.13%)  => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::deque<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > > >::queue<std::deque<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >, void>() (1x)
708 ( 0.03%) 218 ( 0.03%) 181 ( 0.06%) 6 ( 0.10%) 0          2 ( 0.07%) 0          0          2 ( 0.08%)  => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::weak_ptr<Graph>, std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::queue<std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >, void>() (1x)
 27 ( 0.00%)  8 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::atomic(bool) (1x)
 25 ( 0.00%)  8 ( 0.00%)  8 ( 0.00%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/atomic:std::atomic<int>::atomic(int) (1x)
 24 ( 0.00%)  6 ( 0.00%) 10 ( 0.00%) 0          0          1 ( 0.03%) 0          0          1 ( 0.04%)  => /usr/include/c++/11/bits/std_mutex.h:std::mutex::mutex() (1x)
 20 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%) 2 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/atomic:std::atomic<std::thread::id>::atomic() (1x)
  8 ( 0.00%)  2 ( 0.00%)  3 ( 0.00%) 2 ( 0.03%) .          .          .          .          .           => ???:0x000000000010c9e0 (1x)
  .           .           .          .          .          .          .          .          .           {
  .           .           .          .          .          .          .          .          .               try
  .           .           .          .          .          .          .          .          .               {
 46 ( 0.00%) 10 ( 0.00%) 15 ( 0.01%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .                   for (int i = 0; i < this->numThreads.load(); i++)
  .           .           .          .          .          .          .          .          .                   {
 80 ( 0.00%)  8 ( 0.00%) 24 ( 0.01%) .          .          .          .          .          .                       this->threadsPool.push(std::make_unique<std::thread>(&LeaderFollower::work, this));
9,204 ( 0.33%) 2,296 ( 0.33%) 2,080 ( 0.74%) 113 ( 1.91%) 1 ( 0.01%) 84 ( 2.77%) 23 ( 0.71%) 0          84 ( 3.51%)  => /usr/include/c++/11/bits/unique_ptr.h:std::_MakeUniq<std::thread>::__single_object std::make_unique<std::thread, void (LeaderFollower::*)(), LeaderFollower*>(void (LeaderFollower::*&&)(), LeaderFollower*&&) (4x)
1,552 ( 0.05%) 540 ( 0.08%) 444 ( 0.16%) 29 ( 0.49%) 0          0          21 ( 0.65%) .          .           => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::deque<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > > >::push(std::unique_ptr<std::thread, std::default_delete<std::thread> >&&) (4x)
268 ( 0.01%) 88 ( 0.01%) 80 ( 0.03%) 4 ( 0.07%) .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::~unique_ptr() (4x)
  .           .           .          .          .          .          .          .          .                   }
  9 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   std::cout << "Threads Created and Added to Pool." << std::endl;
486 ( 0.02%) 160 ( 0.02%) 78 ( 0.03%) 14 ( 0.24%) .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
461 ( 0.02%) 114 ( 0.02%) 46 ( 0.02%) 11 ( 0.19%) 2 ( 0.02%) 0          0          2 ( 0.02%) .           => ???:0x000000000010c8b0 (1x)
  .           .           .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .               catch (const std::exception &e)
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                   std::cerr << "Error: " << e.what() << std::endl;
  .           .           .          .          .          .          .          .          .               }
  9 ( 0.00%)  6 ( 0.00%)  0          1 ( 0.02%) 0          0          1 ( 0.03%) .          .           }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           // Destructor
  8 ( 0.00%)  1 ( 0.00%)  3 ( 0.00%) 1 ( 0.02%) .          .          .          .          .           LeaderFollower::~LeaderFollower()
  .           .           .          .          .          .          .          .          .           {
  9 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               std::cout << "\n********* START Leader-Follower Stop Process *********" << std::endl;
3,656 ( 0.13%) 944 ( 0.14%) 402 ( 0.14%) 4 ( 0.07%) .          .          .          .          .           => ???:0x000000000010c8b0 (1x)
486 ( 0.02%) 160 ( 0.02%) 78 ( 0.03%) 2 ( 0.03%) .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
  5 ( 0.00%)  1 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .               this->stop = true;
 49 ( 0.00%) 17 ( 0.00%) 17 ( 0.01%) 0          1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::operator=(bool) (1x)
  .           .           .          .          .          .          .          .          .           
  7 ( 0.00%)  1 ( 0.00%)  1 ( 0.00%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .               while (!this->queue_taskData.empty())
 37 ( 0.00%) 13 ( 0.00%)  9 ( 0.00%) 0          1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::weak_ptr<Graph>, std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::empty() const (1x)
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                   std::lock_guard<std::mutex> lock(this->mtx_lf);
  .           .           .          .          .          .          .          .          .                   this->queue_taskData.pop();
  .           .           .          .          .          .          .          .          .               }
  4 ( 0.00%)  1 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .               this->cv_lf.notify_all(); // Notify all threads to exit
136 ( 0.00%) 29 ( 0.00%) 22 ( 0.01%) 4 ( 0.07%) .          .          .          .          .           => ???:0x000000000010ca60 (1x)
  .           .           .          .          .          .          .          .          .           
  9 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               std::cout << "\nLeader-Follower: Task Queue is Empty" << std::endl;
2,612 ( 0.09%) 674 ( 0.10%) 294 ( 0.11%) 3 ( 0.05%) 1 ( 0.01%) 0          0          1 ( 0.01%) .           => ???:0x000000000010c8b0 (1x)
486 ( 0.02%) 160 ( 0.02%) 78 ( 0.03%) .          .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
  .           .           .          .          .          .          .          .          .           
 36 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               while (!this->threadsPool.empty())
185 ( 0.01%) 65 ( 0.01%) 45 ( 0.02%) 3 ( 0.05%) 1 ( 0.01%) 0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::deque<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > > >::empty() const (5x)
  .           .           .          .          .          .          .          .          .               {
 20 ( 0.00%)  4 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .                   auto &thread = this->threadsPool.front();
312 ( 0.01%) 128 ( 0.02%) 84 ( 0.03%) 3 ( 0.05%) 0          0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::deque<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > > >::front() (4x)
 28 ( 0.00%)  4 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .                   if (thread->joinable())
272 ( 0.01%) 88 ( 0.01%) 80 ( 0.03%) 7 ( 0.12%) 1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::operator->() const (4x)
168 ( 0.01%) 60 ( 0.01%) 44 ( 0.02%) 0          3 ( 0.02%) .          .          .          .           => /usr/include/c++/11/bits/std_thread.h:std::thread::joinable() const (4x)
  .           .           .          .          .          .          .          .          .                   {
 20 ( 0.00%)  4 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .                       thread->join();
2,160 ( 0.08%) 678 ( 0.10%) 372 ( 0.13%) 12 ( 0.20%) 8 ( 0.06%) 1 ( 0.03%) .          .          .           => ???:0x000000000010ca70 (4x)
272 ( 0.01%) 88 ( 0.01%) 80 ( 0.03%) .          .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::operator->() const (4x)
  .           .           .          .          .          .          .          .          .                   }
 16 ( 0.00%)  4 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .                   this->threadsPool.pop();
1,648 ( 0.06%) 515 ( 0.07%) 381 ( 0.14%) 17 ( 0.29%) 1 ( 0.01%) 0          4 ( 0.12%) .          .           => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::deque<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > > >::pop() (4x)
  .           .           .          .          .          .          .          .          .               }
  9 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               std::cout << "\nLeader-Follower: Threads Pool is Clean and Threads Detached" << std::endl;
3,972 ( 0.14%) 1,027 ( 0.15%) 432 ( 0.15%) 14 ( 0.24%) 2 ( 0.02%) 0          0          1 ( 0.01%) .           => ???:0x000000000010c8b0 (1x)
486 ( 0.02%) 160 ( 0.02%) 78 ( 0.03%) 3 ( 0.05%) .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
  9 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               std::cout << "\n********* FINISH Leader-Follower Stop Process *********" << std::endl;
3,740 ( 0.13%) 967 ( 0.14%) 408 ( 0.15%) 3 ( 0.05%) 1 ( 0.01%) 0          0          1 ( 0.01%) .           => ???:0x000000000010c8b0 (1x)
486 ( 0.02%) 160 ( 0.02%) 78 ( 0.03%) .          .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
 17 ( 0.00%)  7 ( 0.00%)  3 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           }
864 ( 0.03%) 290 ( 0.04%) 189 ( 0.07%) 4 ( 0.07%) 1 ( 0.01%) 0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::weak_ptr<Graph>, std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::~queue() (1x)
802 ( 0.03%) 276 ( 0.04%) 184 ( 0.07%) 26 ( 0.44%) 0          0          9 ( 0.28%) .          .           => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::deque<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > > >::~queue() (1x)
 29 ( 0.00%)  5 ( 0.00%)  2 ( 0.00%) 1 ( 0.02%) .          .          .          .          .           => ???:0x000000000010cae0 (1x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           // Function that Recive data from the server to process
  .           .           .          .          .          .          .          .          .           void LeaderFollower::processGraphs(std::vector<std::weak_ptr<Graph>>& graphs)
  .           .           .          .          .          .          .          .          .           {
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                   std::lock_guard<std::mutex> lock(this->mtx_lf);
  .           .           .          .          .          .          .          .          .                   for (const auto& graph : graphs)
  .           .           .          .          .          .          .          .          .                   {
-- line 59 ----------------------------------------
-- line 60 ----------------------------------------
  .           .           .          .          .          .          .          .          .                       this->queue_taskData.push(graph);
  .           .           .          .          .          .          .          .          .                   }
  .           .           .          .          .          .          .          .          .                   std::cout << "Leader-Follower: Graphs Added to Task Queue." << std::endl;
  .           .           .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .               promoteFollower();
  .           .           .          .          .          .          .          .          .           }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           // Start the conversation with the client
 36 ( 0.00%)  4 ( 0.00%) 16 ( 0.01%) 1 ( 0.02%) 0          4 ( 0.13%) 1 ( 0.03%) 0          4 ( 0.17%)  void LeaderFollower::work() {
 32 ( 0.00%)  4 ( 0.00%)  4 ( 0.00%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .               while (!this->stop) {
116 ( 0.00%) 40 ( 0.01%) 36 ( 0.01%) 0          0          4 ( 0.13%) 0          0          4 ( 0.17%)  => /usr/include/c++/11/atomic:std::atomic<bool>::operator bool() const (4x)
  .           .           .          .          .          .          .          .          .                   {
 24 ( 0.00%)  4 ( 0.00%)  4 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                       std::unique_lock<std::mutex> lock(this->mtx_lf);
484 ( 0.02%) 148 ( 0.02%) 108 ( 0.04%) 2 ( 0.03%) 0          4 ( 0.13%) 0          0          4 ( 0.17%)  => /usr/include/c++/11/bits/unique_lock.h:std::unique_lock<std::mutex>::unique_lock(std::mutex&) (4x)
 92 ( 0.00%) 40 ( 0.01%) 20 ( 0.01%) 2 ( 0.03%) 3 ( 0.02%) 0          2 ( 0.06%) .          .                       this->cv_lf.wait(lock, [this]
1,884 ( 0.07%) 512 ( 0.07%) 408 ( 0.15%) 22 ( 0.37%) 13 ( 0.10%) 18 ( 0.59%) 3 ( 0.09%) 0          16 ( 0.67%)  => /usr/include/c++/11/condition_variable:void std::condition_variable::wait<LeaderFollower::work()::{lambda()#1}>(std::unique_lock<std::mutex>&, LeaderFollower::work()::{lambda()#1}) (4x)
108 ( 0.00%) 16 ( 0.00%) 16 ( 0.01%) .          .          .          .          .          .                           { return  (!this->queue_taskData.empty() && isLeader())  || this->stop; });
296 ( 0.01%) 104 ( 0.02%) 72 ( 0.03%) 5 ( 0.08%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::weak_ptr<Graph>, std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::empty() const (8x)
232 ( 0.01%) 80 ( 0.01%) 72 ( 0.03%) .          .          .          .          .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::operator bool() const (8x)
 12 ( 0.00%)  0           4 ( 0.00%) .          .          .          .          .          .                   }
432 ( 0.02%) 124 ( 0.02%) 84 ( 0.03%) 11 ( 0.19%) 2 ( 0.02%) .          .          .          .           => /usr/include/c++/11/bits/unique_lock.h:std::unique_lock<std::mutex>::~unique_lock() (4x)
 24 ( 0.00%)  4 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .                   if (this->stop) 
116 ( 0.00%) 40 ( 0.01%) 36 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::operator bool() const (4x)
  .           .           .          .          .          .          .          .          .                   {
  4 ( 0.00%)  .           .          .          .          .          .          .          .                       return;
  .           .           .          .          .          .          .          .          .                   } else {
  .           .           .          .          .          .          .          .          .                       executeTask();
  .           .           .          .          .          .          .          .          .                       promoteFollower();
  .           .           .          .          .          .          .          .          .                   }
  .           .           .          .          .          .          .          .          .               }
 24 ( 0.00%) 20 ( 0.00%)  .          .          .          .          .          .          .           }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           void LeaderFollower::executeTask() {
  .           .           .          .          .          .          .          .          .               std::shared_ptr<Graph> currentGraph;
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                   if (this->queue_taskData.empty()) return;
  .           .           .          .          .          .          .          .          .                   /* 
  .           .           .          .          .          .          .          .          .                       If the graph is valid  (return value of lock is not NULL) 
  .           .           .          .          .          .          .          .          .                           Do:
-- line 91 ----------------------------------------
-- line 134 ----------------------------------------
  .           .           .          .          .          .          .          .          .           }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           bool LeaderFollower::isLeader() {
  .           .           .          .          .          .          .          .          .               return std::this_thread::get_id() == currentLeader.load();
  .           .           .          .          .          .          .          .          .           }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           void LeaderFollower::setLeader(std::thread::id id) {
  .           .           .          .          .          .          .          .          .               currentLeader.store(id);
 21 ( 0.00%)  6 ( 0.00%)  5 ( 0.00%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .           }127 ( 0.00%) 31 ( 0.00%) 27 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => LeaderFollower.cpp:__static_initialization_and_destruction_0(int, int) (1x)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/basic_string.tcc
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 198 ----------------------------------------
  .           .           .          .          .          .          .          .          .           	  }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	_M_set_length(__len);
  .           .           .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             template<typename _CharT, typename _Traits, typename _Alloc>
  .           .           .          .          .          .          .          .          .               template<typename _InIterator>
  .           .           .          .          .          .          .          .          .                 void
132 ( 0.00%) 12 ( 0.00%) 72 ( 0.03%) 2 ( 0.03%) 0          0          1 ( 0.03%) .          .                 basic_string<_CharT, _Traits, _Alloc>::
  .           .           .          .          .          .          .          .          .                 _M_construct(_InIterator __beg, _InIterator __end,
  .           .           .          .          .          .          .          .          .           		   std::forward_iterator_tag)
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	// NB: Not required, but considered best practice.
 96 ( 0.00%) 12 ( 0.00%) 12 ( 0.00%) 2 ( 0.03%) 0          0          1 ( 0.03%) .          .           	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 96 ( 0.00%) 36 ( 0.01%) 24 ( 0.01%) 2 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/ext/type_traits.h:bool __gnu_cxx::__is_null_pointer<char const>(char const*) (12x)
  .           .           .          .          .          .          .          .          .           	  std::__throw_logic_error(__N("basic_string::"
  .           .           .          .          .          .          .          .          .           				       "_M_construct null not valid"));
  .           .           .          .          .          .          .          .          .           
 72 ( 0.00%) 24 ( 0.00%) 24 ( 0.01%) 2 ( 0.03%) 0          0          1 ( 0.03%) .          .           	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
372 ( 0.01%) 120 ( 0.02%) 120 ( 0.04%) 3 ( 0.05%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/stl_iterator_base_funcs.h:std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*) (12x)
  .           .           .          .          .          .          .          .          .           
 36 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .          .           	if (__dnew > size_type(_S_local_capacity))
  .           .           .          .          .          .          .          .          .           	  {
  .           .           .          .          .          .          .          .          .           	    _M_data(_M_create(__dnew, size_type(0)));
  .           .           .          .          .          .          .          .          .           	    _M_capacity(__dnew);
  .           .           .          .          .          .          .          .          .           	  }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	// Check for out_of_range and length_error exceptions.
  .           .           .          .          .          .          .          .          .           	__try
108 ( 0.00%) 36 ( 0.01%) 24 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	  { this->_S_copy_chars(_M_data(), __beg, __end); }
1,297 ( 0.05%) 377 ( 0.05%) 164 ( 0.06%) 16 ( 0.27%) 23 ( 0.17%) 0          5 ( 0.15%) 14 ( 0.16%) .           => ???:0x000000000010c930 (12x)
 60 ( 0.00%) 36 ( 0.01%)  0          8 ( 0.14%) 1 ( 0.01%) 0          2 ( 0.06%) .          .           => ???:0x000000000010c920 (12x)
  .           .           .          .          .          .          .          .          .           	__catch(...)
  .           .           .          .          .          .          .          .          .           	  {
  .           .           .          .          .          .          .          .          .           	    _M_dispose();
  .           .           .          .          .          .          .          .          .           	    __throw_exception_again;
  .           .           .          .          .          .          .          .          .           	  }
  .           .           .          .          .          .          .          .          .           
 60 ( 0.00%) 24 ( 0.00%) 12 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	_M_set_length(__dnew);
 84 ( 0.00%) 36 ( 0.01%) 24 ( 0.01%) 6 ( 0.10%) 1 ( 0.01%) 0          1 ( 0.03%) 1 ( 0.01%) .           => ???:0x000000000010c7a0 (12x)
 84 ( 0.00%) 60 ( 0.01%)  0          1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             template<typename _CharT, typename _Traits, typename _Alloc>
  .           .           .          .          .          .          .          .          .               void
  .           .           .          .          .          .          .          .          .               basic_string<_CharT, _Traits, _Alloc>::
  .           .           .          .          .          .          .          .          .               _M_construct(size_type __n, _CharT __c)
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 if (__n > size_type(_S_local_capacity))
  .           .           .          .          .          .          .          .          .           	{
-- line 241 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: ActiveObject.cpp
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr        D1mr       D1mw       ILmr       DLmr       DLmw       

  .           .           .           .          .          .          .          .          .           #include "ActiveObject.hpp"
  .           .           .           .          .          .          .          .          .           
258 ( 0.01%) 66 ( 0.01%) 84 ( 0.03%)  4 ( 0.07%) 0          0          4 ( 0.12%) .          .           ActiveObject::ActiveObject(int stage) : stageID(stage), working(false), stop(false)
4,689 ( 0.17%) 1,381 ( 0.20%) 1,154 ( 0.41%) 74 ( 1.25%) 3 ( 0.02%) 12 ( 0.40%) 40 ( 1.24%) 0          11 ( 0.46%)  => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::weak_ptr<Graph>, std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::queue<std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >, void>() (6x)
522 ( 0.02%) 150 ( 0.02%) 150 ( 0.05%) 14 ( 0.24%) 0          1 ( 0.03%) 10 ( 0.31%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::unique_ptr<std::default_delete<std::thread>, void>() (6x)
204 ( 0.01%) 60 ( 0.01%) 60 ( 0.02%)  4 ( 0.07%) 0          1 ( 0.03%) 4 ( 0.12%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<ActiveObject>::weak_ptr() (6x)
174 ( 0.01%) 54 ( 0.01%) 72 ( 0.03%)  3 ( 0.05%) 0          4 ( 0.13%) 3 ( 0.09%) 0          4 ( 0.17%)  => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::function() (6x)
162 ( 0.01%) 48 ( 0.01%) 48 ( 0.02%)  1 ( 0.02%) .          .          .          .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::atomic(bool) (6x)
144 ( 0.01%) 36 ( 0.01%) 60 ( 0.02%)  0          0          4 ( 0.13%) 0          0          4 ( 0.17%)  => /usr/include/c++/11/bits/std_mutex.h:std::mutex::mutex() (6x)
 48 ( 0.00%) 12 ( 0.00%) 18 ( 0.01%) 10 ( 0.17%) 2 ( 0.02%) 1 ( 0.03%) 2 ( 0.06%) 1 ( 0.01%) 1 ( 0.04%)  => ???:0x000000000010c9e0 (6x)
  .           .           .           .          .          .          .          .          .           {
 72 ( 0.00%)  6 ( 0.00%) 18 ( 0.01%)  2 ( 0.03%) 0          0          1 ( 0.03%) .          .               this->queue_taskData = std::queue<std::weak_ptr<Graph>>();                           // task queue for the active object
5,934 ( 0.21%) 1,587 ( 0.23%) 1,346 ( 0.48%)  0          0          11 ( 0.36%) 0          0          11 ( 0.46%)  => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::weak_ptr<Graph>, std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::queue<std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >, void>() (6x)
6,054 ( 0.21%) 2,097 ( 0.30%) 1,336 ( 0.48%) 47 ( 0.80%) 21 ( 0.16%) 12 ( 0.40%) 19 ( 0.59%) 4 ( 0.04%) 9 ( 0.38%)  => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::weak_ptr<Graph>, std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::~queue() (6x)
4,572 ( 0.16%) 1,860 ( 0.27%) 1,356 ( 0.48%) 85 ( 1.44%) 0          0          37 ( 1.14%) .          .           => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::weak_ptr<Graph>, std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::operator=(std::queue<std::weak_ptr<Graph>, std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >&&) (6x)
120 ( 0.00%) 12 ( 0.00%) 36 ( 0.01%)  2 ( 0.03%) 0          0          1 ( 0.03%) .          .               this->activeObjectThread = std::make_unique<std::thread>(&ActiveObject::work, this); // Create a new thread for the active object
15,518 ( 0.55%) 3,990 ( 0.58%) 3,336 ( 1.19%) 355 ( 6.01%) 43 ( 0.32%) 133 ( 4.39%) 148 ( 4.57%) 19 ( 0.21%) 131 ( 5.47%)  => /usr/include/c++/11/bits/unique_ptr.h:std::_MakeUniq<std::thread>::__single_object std::make_unique<std::thread, void (ActiveObject::*)(), ActiveObject*>(void (ActiveObject::*&&)(), ActiveObject*&&) (6x)
2,292 ( 0.08%) 744 ( 0.11%) 696 ( 0.25%)  8 ( 0.14%) 0          0          8 ( 0.25%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::operator=(std::unique_ptr<std::thread, std::default_delete<std::thread> >&&) (6x)
402 ( 0.01%) 132 ( 0.02%) 120 ( 0.04%) 12 ( 0.20%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::~unique_ptr() (6x)
 18 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .               printStatus();                                                                       // Printing starting point status
24,918 ( 0.88%) 7,270 ( 1.05%) 3,790 ( 1.35%) 234 ( 3.96%) 34 ( 0.26%) 0          43 ( 1.33%) 21 ( 0.23%) .           => ActiveObject.cpp:ActiveObject::printStatus() (6x)
 42 ( 0.00%) 30 ( 0.00%)  0           1 ( 0.02%) 2 ( 0.02%) 0          1 ( 0.03%) .          .           }
  .           .           .           .          .          .          .          .          .           
 30 ( 0.00%)  0          12 ( 0.00%)  1 ( 0.02%) .          .          .          .          .           ActiveObject::~ActiveObject()
  .           .           .           .          .          .          .          .          .           {
  .           .           .           .          .          .          .          .          .               // // Check if the thread is joinable
120 ( 0.00%) 18 ( 0.00%) 24 ( 0.01%)  2 ( 0.03%) 0          1 ( 0.03%) 2 ( 0.06%) .          .               std::cout << "\nActive-Object - Stage " << stageID << " : Destruction Activated" << std::endl;
13,392 ( 0.47%) 3,446 ( 0.50%) 1,526 ( 0.55%) 57 ( 0.96%) 3 ( 0.02%) 1 ( 0.03%) 4 ( 0.12%) 1 ( 0.01%) .           => ???:0x000000000010c8b0 (12x)
2,938 ( 0.10%) 964 ( 0.14%) 472 ( 0.17%) 18 ( 0.30%) .          .          .          .          .           => ???:0x000000000010c8e0 (6x)
2,391 ( 0.08%) 624 ( 0.09%) 366 ( 0.13%) 17 ( 0.29%) .          .          .          .          .           => ???:0x000000000010ca90 (6x)
  .           .           .           .          .          .          .          .          .           
108 ( 0.00%) 12 ( 0.00%) 18 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .               if (this->activeObjectThread && this->activeObjectThread->joinable())
408 ( 0.01%) 132 ( 0.02%) 120 ( 0.04%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::operator->() const (6x)
420 ( 0.01%) 132 ( 0.02%) 120 ( 0.04%) 26 ( 0.44%) 0          0          12 ( 0.37%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::operator bool() const (6x)
252 ( 0.01%) 90 ( 0.01%) 66 ( 0.02%)  6 ( 0.10%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_thread.h:std::thread::joinable() const (6x)
  .           .           .           .          .          .          .          .          .               {
120 ( 0.00%) 18 ( 0.00%) 24 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   std::cout << "\nActive-Object - Stage " << stageID << ": Join Thread - Destruction" << std::endl;
13,296 ( 0.47%) 3,414 ( 0.49%) 1,524 ( 0.54%) 28 ( 0.47%) .          .          .          .          .           => ???:0x000000000010c8b0 (12x)
2,916 ( 0.10%) 960 ( 0.14%) 468 ( 0.17%)  8 ( 0.14%) .          .          .          .          .           => ???:0x000000000010c8e0 (6x)
2,391 ( 0.08%) 624 ( 0.09%) 366 ( 0.13%)  4 ( 0.07%) .          .          .          .          .           => ???:0x000000000010ca90 (6x)
 36 ( 0.00%)  6 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .                   this->activeObjectThread->join(); // Join the thread (wait for the thread to finish)
3,445 ( 0.12%) 1,041 ( 0.15%) 564 ( 0.20%) 60 ( 1.02%) 52 ( 0.39%) 7 ( 0.23%) 25 ( 0.77%) 21 ( 0.23%) 1 ( 0.04%)  => ???:0x000000000010ca70 (6x)
408 ( 0.01%) 132 ( 0.02%) 120 ( 0.04%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::operator->() const (6x)
  .           .           .           .          .          .          .          .          .               }
  .           .           .           .          .          .          .          .          .           
 30 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   this->activeObjectThread.reset(); // release unique ptr - before destruction join
2,226 ( 0.08%) 696 ( 0.10%) 570 ( 0.20%) 16 ( 0.27%) 1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::reset(std::thread*) (6x)
120 ( 0.00%) 18 ( 0.00%) 24 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .               std::cout << "\nStage " << this->stageID << " (Active-Object):  Release smart pointer - Thread" << std::endl;
8,349 ( 0.29%) 2,101 ( 0.30%) 961 ( 0.34%) 32 ( 0.54%) 6 ( 0.05%) 1 ( 0.03%) 0          1 ( 0.01%) .           => ???:0x000000000010c8b0 (12x)
2,916 ( 0.10%) 960 ( 0.14%) 468 ( 0.17%) 22 ( 0.37%) .          .          .          .          .           => ???:0x000000000010c8e0 (6x)
2,391 ( 0.08%) 624 ( 0.09%) 366 ( 0.13%)  6 ( 0.10%) .          .          .          .          .           => ???:0x000000000010ca90 (6x)
120 ( 0.00%) 18 ( 0.00%) 24 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .               std::cout << "\n********* FINISH Active Object " << stageID << " Stop Process *********" << std::endl;
16,329 ( 0.58%) 4,201 ( 0.61%) 1,849 ( 0.66%) 24 ( 0.41%) .          .          .          .          .           => ???:0x000000000010c8b0 (12x)
2,927 ( 0.10%) 962 ( 0.14%) 470 ( 0.17%)  7 ( 0.12%) .          .          .          .          .           => ???:0x000000000010c8e0 (6x)
2,391 ( 0.08%) 624 ( 0.09%) 366 ( 0.13%)  .          .          .          .          .          .           => ???:0x000000000010ca90 (6x)
132 ( 0.00%) 42 ( 0.01%) 30 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           }
4,650 ( 0.16%) 1,626 ( 0.24%) 1,110 ( 0.40%) 41 ( 0.69%) 9 ( 0.07%) 0          2 ( 0.06%) 3 ( 0.03%) .           => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::weak_ptr<Graph>, std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::~queue() (6x)
1,279 ( 0.05%) 335 ( 0.05%) 140 ( 0.05%) 16 ( 0.27%) 18 ( 0.14%) 0          4 ( 0.12%) 13 ( 0.14%) .           => ???:0x000000000010cae0 (6x)
594 ( 0.02%) 192 ( 0.03%) 156 ( 0.06%) 58 ( 0.98%) 0          0          39 ( 1.20%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::~function() (6x)
402 ( 0.01%) 132 ( 0.02%) 120 ( 0.04%)  2 ( 0.03%) .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::~unique_ptr() (6x)
380 ( 0.01%) 115 ( 0.02%) 88 ( 0.03%)  7 ( 0.12%) 2 ( 0.02%) .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<ActiveObject>::~weak_ptr() (6x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           // Set the next stage
  .           .           .           .          .          .          .          .          .           void ActiveObject::setNextStage(std::weak_ptr<ActiveObject> wptr_nextStage)
 50 ( 0.00%)  5 ( 0.00%) 25 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           {
 75 ( 0.00%)  5 ( 0.00%) 15 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .               if (wptr_nextStage.lock() != nullptr)
770 ( 0.03%) 250 ( 0.04%) 160 ( 0.06%)  9 ( 0.15%) 0          0          9 ( 0.28%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<ActiveObject>::lock() const (5x)
345 ( 0.01%) 105 ( 0.02%) 80 ( 0.03%)  8 ( 0.14%) 0          0          5 ( 0.15%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObject>::~shared_ptr() (5x)
105 ( 0.00%) 35 ( 0.01%) 30 ( 0.01%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:bool std::operator!=<ActiveObject>(std::shared_ptr<ActiveObject> const&, decltype(nullptr)) (5x)
  .           .           .           .          .          .          .          .          .               {
 30 ( 0.00%) 10 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .                   this->nextStage = wptr_nextStage;
415 ( 0.01%) 165 ( 0.02%) 110 ( 0.04%)  4 ( 0.07%) 0          1 ( 0.03%) 4 ( 0.12%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<ActiveObject>::operator=(std::weak_ptr<ActiveObject> const&) (5x)
  .           .           .           .          .          .          .          .          .               }
  .           .           .           .          .          .          .          .          .               else
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                   std::cerr << "Set Next Stage Failed, Stage: " << stageID << std::endl;
  .           .           .           .          .          .          .          .          .               }
 40 ( 0.00%) 25 ( 0.00%)  0           2 ( 0.03%) 0          0          2 ( 0.06%) .          .           }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           // Set the task of the active object
  .           .           .           .          .          .          .          .          .           void ActiveObject::setTaskHandler(std::function<void(std::weak_ptr<Graph>)> taskFunction)
 36 ( 0.00%)  0          18 ( 0.01%)  .          .          .          .          .          .           {
 24 ( 0.00%)  6 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .               bool isValidTaskFunction = static_cast<bool>(taskFunction);
126 ( 0.00%) 42 ( 0.01%) 30 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::operator bool() const (6x)
 12 ( 0.00%)  6 ( 0.00%)  0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .               if (isValidTaskFunction)
  .           .           .           .          .          .          .          .          .               {
 90 ( 0.00%) 18 ( 0.00%) 18 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   std::cout << "Set Task Handler for stage: " << stageID << std::endl;
2,949 ( 0.10%) 966 ( 0.14%) 474 ( 0.17%) 12 ( 0.20%) .          .          .          .          .           => ???:0x000000000010c8e0 (6x)
2,538 ( 0.09%) 636 ( 0.09%) 264 ( 0.09%) 18 ( 0.30%) 1 ( 0.01%) 0          0          1 ( 0.01%) .           => ???:0x000000000010c8b0 (6x)
2,391 ( 0.08%) 624 ( 0.09%) 366 ( 0.13%)  7 ( 0.12%) .          .          .          .          .           => ???:0x000000000010ca90 (6x)
 48 ( 0.00%) 12 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .                   this->taskHandler = std::move(taskFunction); // Set the task handler to the provided handler
1,956 ( 0.07%) 720 ( 0.10%) 576 ( 0.21%) 26 ( 0.44%) 1 ( 0.01%) 0          14 ( 0.43%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::operator=(std::function<void (std::weak_ptr<Graph>)>&&) (6x)
 42 ( 0.00%) 18 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::function<void (std::weak_ptr<Graph>)>&>::type&& std::move<std::function<void (std::weak_ptr<Graph>)>&>(std::function<void (std::weak_ptr<Graph>)>&) (6x)
  .           .           .           .          .          .          .          .          .               }
  .           .           .           .          .          .          .          .          .               else
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                   std::cerr << "Set Task Handler Failed, Stage: " << stageID << std::endl;
  .           .           .           .          .          .          .          .          .               }
 24 ( 0.00%) 12 ( 0.00%)  0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .           }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           // insert task to the queue
  .           .           .           .          .          .          .          .          .           void ActiveObject::enqueueTask(std::weak_ptr<Graph> wptr_graph)
  .           .           .           .          .          .          .          .          .           {
  .           .           .           .          .          .          .          .          .               if (wptr_graph.lock() != nullptr)
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                   std::lock_guard<std::mutex> lock(this->mtx_AO); // Lock the mutex for the task queue
  .           .           .           .          .          .          .          .          .                   this->queue_taskData.push(std::move(wptr_graph));
-- line 60 ----------------------------------------
-- line 66 ----------------------------------------
  .           .           .           .          .          .          .          .          .               if (!this->working)
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                   this->cv_AO.notify_one();
  .           .           .           .          .          .          .          .          .               }
  .           .           .           .          .          .          .          .          .           }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           // The main work function for the active object
  .           .           .           .          .          .          .          .          .           void ActiveObject::work()
 60 ( 0.00%)  6 ( 0.00%) 30 ( 0.01%)  2 ( 0.03%) 0          6 ( 0.20%) 2 ( 0.06%) 0          6 ( 0.25%)  {
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               // infinite loop till the stop flag is set to true so that the thread can be stopped
 48 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  1 ( 0.02%) 0          6 ( 0.20%) 1 ( 0.03%) 0          6 ( 0.25%)      while (!this->stop)
174 ( 0.01%) 60 ( 0.01%) 54 ( 0.02%)  3 ( 0.05%) 0          6 ( 0.20%) 3 ( 0.09%) 0          6 ( 0.25%)  => /usr/include/c++/11/atomic:std::atomic<bool>::operator bool() const (6x)
  .           .           .           .          .          .          .          .          .               { // Loop until the stop flag is set
  .           .           .           .          .          .          .          .          .           
 36 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .                   if (queue_taskData.empty())
222 ( 0.01%) 78 ( 0.01%) 54 ( 0.02%)  8 ( 0.14%) 1 ( 0.01%) 0          5 ( 0.15%) .          .           => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::weak_ptr<Graph>, std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::empty() const (6x)
  .           .           .           .          .          .          .          .          .                   {                          // Check if the task queue is empty
 12 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                       this->working = false; // Set the working flag to false (in case it was working before it was empty)
  .           .           .           .          .          .          .          .          .           
 36 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .                       std::unique_lock<std::mutex> lock(this->mtx_AO);
726 ( 0.03%) 222 ( 0.03%) 162 ( 0.06%) 29 ( 0.49%) 1 ( 0.01%) 6 ( 0.20%) 5 ( 0.15%) 0          6 ( 0.25%)  => /usr/include/c++/11/bits/unique_lock.h:std::unique_lock<std::mutex>::unique_lock(std::mutex&) (6x)
180 ( 0.01%) 18 ( 0.00%) 42 ( 0.02%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .                       std::cout << "Stage " << this->stageID << " (Thread " << std::this_thread::get_id() << ") is sleeping" << std::endl;
5,808 ( 0.21%) 1,541 ( 0.22%) 812 ( 0.29%) 57 ( 0.96%) 3 ( 0.02%) 14 ( 0.46%) 0          2 ( 0.02%) 13 ( 0.54%)  => ???:0x000000000010c8b0 (18x)
5,624 ( 0.20%) 1,336 ( 0.19%) 714 ( 0.26%) 45 ( 0.76%) 16 ( 0.12%) 20 ( 0.66%) 22 ( 0.68%) 8 ( 0.09%) 20 ( 0.84%)  => /usr/include/c++/11/thread:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::thread::id) (6x)
3,013 ( 0.11%) 976 ( 0.14%) 482 ( 0.17%) 59 ( 1.00%) 0          0          8 ( 0.25%) .          .           => ???:0x000000000010c8e0 (6x)
2,391 ( 0.08%) 624 ( 0.09%) 366 ( 0.13%) 19 ( 0.32%) 3 ( 0.02%) 12 ( 0.40%) 0          1 ( 0.01%) 12 ( 0.50%)  => ???:0x000000000010ca90 (6x)
210 ( 0.01%) 78 ( 0.01%) 48 ( 0.02%)  8 ( 0.14%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/std_thread.h:std::this_thread::get_id() (6x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                       // Wait until a task is [enqueued] or [stop flag is set] and [notify condition]
138 ( 0.00%) 60 ( 0.01%) 30 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                       cv_AO.wait(lock, [this]
3,755 ( 0.13%) 1,034 ( 0.15%) 728 ( 0.26%) 81 ( 1.37%) 21 ( 0.16%) 9 ( 0.30%) 28 ( 0.86%) 7 ( 0.08%) 5 ( 0.21%)  => /usr/include/c++/11/condition_variable:void std::condition_variable::wait<ActiveObject::work()::{lambda()#1}>(std::unique_lock<std::mutex>&, ActiveObject::work()::{lambda()#1}) (6x)
174 ( 0.01%) 24 ( 0.00%) 24 ( 0.01%)  .          .          .          .          .          .                                  { return (!this->queue_taskData.empty()) || this->stop; });
444 ( 0.02%) 156 ( 0.02%) 108 ( 0.04%)  3 ( 0.05%) 1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::weak_ptr<Graph>, std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::empty() const (12x)
348 ( 0.01%) 120 ( 0.02%) 108 ( 0.04%)  .          .          .          .          .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::operator bool() const (12x)
  .           .           .           .          .          .          .          .          .           
 12 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  1 ( 0.02%) 2 ( 0.02%) 0          1 ( 0.03%) .          .                       this->working = true; // Set the working flag to true
180 ( 0.01%) 18 ( 0.00%) 42 ( 0.02%)  2 ( 0.03%) 1 ( 0.01%) 0          2 ( 0.06%) .          .                       std::cout << "Stage " << stageID << " (Thread " << std::this_thread::get_id() << ") has woke up" << std::endl;
5,982 ( 0.21%) 1,559 ( 0.23%) 828 ( 0.30%) 17 ( 0.29%) .          .          .          .          .           => ???:0x000000000010c8b0 (18x)
3,454 ( 0.12%) 800 ( 0.12%) 496 ( 0.18%) 15 ( 0.25%) 1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/thread:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::thread::id) (6x)
2,949 ( 0.10%) 966 ( 0.14%) 474 ( 0.17%) 21 ( 0.36%) 1 ( 0.01%) .          .          .          .           => ???:0x000000000010c8e0 (6x)
2,419 ( 0.09%) 628 ( 0.09%) 369 ( 0.13%)  6 ( 0.10%) 0          2 ( 0.07%) .          .          .           => ???:0x000000000010ca90 (6x)
210 ( 0.01%) 78 ( 0.01%) 48 ( 0.02%) 13 ( 0.22%) .          .          .          .          .           => /usr/include/c++/11/bits/std_thread.h:std::this_thread::get_id() (6x)
 18 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .                       printStatus();
23,767 ( 0.84%) 6,928 ( 1.00%) 3,634 ( 1.30%) 108 ( 1.83%) 1 ( 0.01%) 4 ( 0.13%) 0          0          4 ( 0.17%)  => ActiveObject.cpp:ActiveObject::printStatus() (6x)
 18 ( 0.00%)  0           6 ( 0.00%)  .          .          .          .          .          .                   }
648 ( 0.02%) 186 ( 0.03%) 126 ( 0.05%) 17 ( 0.29%) 3 ( 0.02%) 0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/unique_lock.h:std::unique_lock<std::mutex>::~unique_lock() (6x)
  .           .           .           .          .          .          .          .          .           
 36 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .                   if (this->stop)
174 ( 0.01%) 60 ( 0.01%) 54 ( 0.02%)  .          .          .          .          .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::operator bool() const (6x)
  .           .           .           .          .          .          .          .          .                   {
 18 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .                       stopProcess();
15,143 ( 0.54%) 4,147 ( 0.60%) 2,190 ( 0.78%) 112 ( 1.90%) 1 ( 0.01%) 0          4 ( 0.12%) 1 ( 0.01%) .           => ActiveObject.cpp:ActiveObject::stopProcess() (6x)
  6 ( 0.00%)  0           0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .                       return;
  .           .           .           .          .          .          .          .          .                   }
  .           .           .           .          .          .          .          .          .                   else
  .           .           .           .          .          .          .          .          .                   {
  .           .           .           .          .          .          .          .          .                       try{
  .           .           .           .          .          .          .          .          .                           std::weak_ptr<Graph> wptr_graph;
  .           .           .           .          .          .          .          .          .                           {
  .           .           .           .          .          .          .          .          .                               std::unique_lock<std::mutex> lock(this->mtx_AO); // Lock the mutex for the active task
  .           .           .           .          .          .          .          .          .                               wptr_graph = this->queue_taskData.front();
-- line 107 ----------------------------------------
-- line 116 ----------------------------------------
  .           .           .           .          .          .          .          .          .                           }
  .           .           .           .          .          .          .          .          .                       }
  .           .           .           .          .          .          .          .          .                       catch(const std::exception& e)
  .           .           .           .          .          .          .          .          .                       {
  .           .           .           .          .          .          .          .          .                           std::cerr << "Error - Execute task: " << e.what() << std::endl;
  .           .           .           .          .          .          .          .          .                       }
  .           .           .           .          .          .          .          .          .                   }
  .           .           .           .          .          .          .          .          .               }
 48 ( 0.00%) 36 ( 0.01%)  0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .           }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           void ActiveObject::stopActiveObject()
 30 ( 0.00%)  0          12 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           {
120 ( 0.00%) 18 ( 0.00%) 24 ( 0.01%)  2 ( 0.03%) 3 ( 0.02%) 0          2 ( 0.06%) .          .               std::cout << "\n********* START Active Object " << this->stageID << " Stop Process *********" << std::endl;
16,059 ( 0.57%) 4,122 ( 0.60%) 1,822 ( 0.65%) 34 ( 0.58%) 1 ( 0.01%) 1 ( 0.03%) 0          1 ( 0.01%) 1 ( 0.04%)  => ???:0x000000000010c8b0 (12x)
2,949 ( 0.10%) 966 ( 0.14%) 474 ( 0.17%) 32 ( 0.54%) 0          0          1 ( 0.03%) .          .           => ???:0x000000000010c8e0 (6x)
2,391 ( 0.08%) 624 ( 0.09%) 366 ( 0.13%) 14 ( 0.24%) 2 ( 0.02%) .          .          .          .           => ???:0x000000000010ca90 (6x)
 30 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .               this->stop = true;
294 ( 0.01%) 102 ( 0.01%) 102 ( 0.04%)  .          .          .          .          .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::operator=(bool) (6x)
 30 ( 0.00%) 12 ( 0.00%)  .           .          .          .          .          .          .               if (!this->working)
  .           .           .           .          .          .          .          .          .               {
 24 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .                   this->cv_AO.notify_all();
1,829 ( 0.06%) 458 ( 0.07%) 253 ( 0.09%) 29 ( 0.49%) 17 ( 0.13%) 0          20 ( 0.62%) 9 ( 0.10%) .           => ???:0x000000000010ca60 (6x)
  .           .           .           .          .          .          .          .          .               }
 18 ( 0.00%) 12 ( 0.00%)  .           .          .          .          .          .          .           }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           void ActiveObject::stopProcess()
 54 ( 0.00%)  6 ( 0.00%) 24 ( 0.01%)  2 ( 0.03%) 0          0          1 ( 0.03%) .          .           {
  .           .           .           .          .          .          .          .          .               {
 36 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .                   std::unique_lock<std::mutex> lock(mtx_AO); // Lock the mutex
726 ( 0.03%) 222 ( 0.03%) 162 ( 0.06%) 21 ( 0.36%) .          .          .          .          .           => /usr/include/c++/11/bits/unique_lock.h:std::unique_lock<std::mutex>::unique_lock(std::mutex&) (6x)
  .           .           .           .          .          .          .          .          .                   
 48 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   while (!this->queue_taskData.empty())
222 ( 0.01%) 78 ( 0.01%) 54 ( 0.02%)  1 ( 0.02%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::weak_ptr<Graph>, std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::empty() const (6x)
  .           .           .           .          .          .          .          .          .                   {
  .           .           .           .          .          .          .          .          .                       this->queue_taskData.front().reset(); // release weak ptr
  .           .           .           .          .          .          .          .          .                       this->queue_taskData.pop();
  .           .           .           .          .          .          .          .          .                   }
120 ( 0.00%) 18 ( 0.00%) 24 ( 0.01%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .                   std::cout << "\nStage " << this->stageID << " (Active-Object):  Clean tasks queue" << std::endl;
7,968 ( 0.28%) 2,024 ( 0.29%) 962 ( 0.34%) 53 ( 0.90%) 1 ( 0.01%) 0          0          1 ( 0.01%) .           => ???:0x000000000010c8b0 (12x)
2,916 ( 0.10%) 960 ( 0.14%) 468 ( 0.17%) 22 ( 0.37%) .          .          .          .          .           => ???:0x000000000010c8e0 (6x)
2,423 ( 0.09%) 629 ( 0.09%) 370 ( 0.13%) 10 ( 0.17%) .          .          .          .          .           => ???:0x000000000010ca90 (6x)
  .           .           .           .          .          .          .          .          .           
 18 ( 0.00%)  0           6 ( 0.00%)  .          .          .          .          .          .               }
570 ( 0.02%) 168 ( 0.02%) 108 ( 0.04%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/unique_lock.h:std::unique_lock<std::mutex>::~unique_lock() (6x)
 42 ( 0.00%) 30 ( 0.00%)  .           .          .          .          .          .          .           }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           void ActiveObject::printStatus()
108 ( 0.00%) 12 ( 0.00%) 48 ( 0.02%)  3 ( 0.05%) 0          0          1 ( 0.03%) .          .           {
180 ( 0.01%) 36 ( 0.01%) 36 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .               std::cout << "Stage " << this->stageID << std::endl;
5,865 ( 0.21%) 1,926 ( 0.28%) 942 ( 0.34%) 43 ( 0.73%) 1 ( 0.01%) 0          0          1 ( 0.01%) .           => ???:0x000000000010c8e0 (12x)
3,628 ( 0.13%) 982 ( 0.14%) 536 ( 0.19%) 55 ( 0.93%) 1 ( 0.01%) 0          5 ( 0.15%) .          .           => ???:0x000000000010c8b0 (12x)
4,782 ( 0.17%) 1,248 ( 0.18%) 732 ( 0.26%) 18 ( 0.30%) 1 ( 0.01%) 4 ( 0.13%) 0          0          4 ( 0.17%)  => ???:0x000000000010ca90 (12x)
 60 ( 0.00%) 12 ( 0.00%) 24 ( 0.01%)  6 ( 0.10%) 0          0          1 ( 0.03%) .          .               int queueSize = this->queue_taskData.size();
1,032 ( 0.04%) 348 ( 0.05%) 168 ( 0.06%)  6 ( 0.10%) 0          0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/stl_queue.h:std::queue<std::weak_ptr<Graph>, std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::size() const (12x)
168 ( 0.01%) 24 ( 0.00%) 36 ( 0.01%)  6 ( 0.10%) 0          0          1 ( 0.03%) .          .               std::cout << "1. Number of Tasks in Queue: " << queueSize << std::endl;
5,886 ( 0.21%) 1,929 ( 0.28%) 944 ( 0.34%) 14 ( 0.24%) 1 ( 0.01%) 0          0          1 ( 0.01%) .           => ???:0x000000000010c8e0 (12x)
5,136 ( 0.18%) 1,284 ( 0.19%) 528 ( 0.19%) 14 ( 0.24%) 2 ( 0.02%) 0          0          2 ( 0.02%) .           => ???:0x000000000010c8b0 (12x)
4,812 ( 0.17%) 1,248 ( 0.18%) 732 ( 0.26%) 12 ( 0.20%) .          .          .          .          .           => ???:0x000000000010ca90 (12x)
198 ( 0.01%) 24 ( 0.00%) 36 ( 0.01%) 12 ( 0.20%) 0          0          1 ( 0.03%) .          .               std::string message = this->working ? "True" : "False";
3,553 ( 0.13%) 1,097 ( 0.16%) 668 ( 0.24%) 93 ( 1.57%) 26 ( 0.20%) 0          25 ( 0.77%) 16 ( 0.18%) .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (12x)
 48 ( 0.00%) 24 ( 0.00%)  0           6 ( 0.10%) 1 ( 0.01%) 0          1 ( 0.03%) .          .           => ???:0x000000000010cab0 (12x)
 48 ( 0.00%) 24 ( 0.00%)  .           .          .          .          .          .          .           => ???:0x000000000010c910 (12x)
168 ( 0.01%) 12 ( 0.00%) 36 ( 0.01%) 12 ( 0.20%) 0          0          1 ( 0.03%) .          .               std::cout << "2. Working: " << message << std::endl;
5,843 ( 0.21%) 1,922 ( 0.28%) 938 ( 0.34%) 13 ( 0.22%) .          .          .          .          .           => ???:0x000000000010c8e0 (12x)
3,900 ( 0.14%) 1,044 ( 0.15%) 528 ( 0.19%) 13 ( 0.22%) .          .          .          .          .           => ???:0x000000000010c8b0 (12x)
3,066 ( 0.11%) 906 ( 0.13%) 480 ( 0.17%)  3 ( 0.05%) 0          0          1 ( 0.03%) .          .           => ???:0x000000000010c860 (12x)
129 ( 0.00%) 66 ( 0.01%) 17 ( 0.01%) 13 ( 0.22%) 0          0          3 ( 0.09%) .          .           } 96 ( 0.00%) 36 ( 0.01%)  0           2 ( 0.03%) 2 ( 0.02%) 0          2 ( 0.06%) 1 ( 0.01%) .           => ???:0x000000000010c780 (12x)

--------------------------------------------------------------------------------
-- Auto-annotated source: Pipeline.cpp
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr       DLmw 

-- line 4 ----------------------------------------
  .           .           .          .          .          .          .          .          .           #define STAGE_UNDEFINE -1 // Undefined stage for error handling
  .           .           .          .          .          .          .          .          .           #define STAGE_0_START_MST_CALCULATION 0
  .           .           .          .          .          .          .          .          .           #define STAGE_1_TOTAL_WEIGHT_MST 1
  .           .           .          .          .          .          .          .          .           #define STAGE_2_LON_DIS_BET_TWO_VER_MST 2
  .           .           .          .          .          .          .          .          .           #define STAGE_3_SHO_DIS_BET_TWO_VER_MST 3
  .           .           .          .          .          .          .          .          .           #define STAGE_4_AVG_DIS_BET_TWO_EDG_MST 4
  .           .           .          .          .          .          .          .          .           #define STAGE_5_FINISH_MST_CALCUATION 5
  .           .           .          .          .          .          .          .          .           
 13 ( 0.00%)  2 ( 0.00%)  5 ( 0.00%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .           Pipeline::Pipeline()
 67 ( 0.00%) 20 ( 0.00%) 20 ( 0.01%) 8 ( 0.14%) 0          0          8 ( 0.25%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::vector() (1x)
 24 ( 0.00%)  6 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_mutex.h:std::mutex::mutex() (1x)
  .           .           .          .          .          .          .          .          .           {
  3 ( 0.00%)  1 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .               createAOStages();
103,258 ( 3.65%) 30,207 ( 4.37%) 20,817 ( 7.43%) 1,314 (22.24%) 136 ( 1.02%) 190 ( 6.27%) 459 (14.18%) 61 ( 0.68%) 183 ( 7.64%)  => Pipeline.cpp:Pipeline::createAOStages() (1x)
  3 ( 0.00%)  1 ( 0.00%)  1 ( 0.00%) 1 ( 0.02%) .          .          .          .          .               setAONextStage();
3,614 ( 0.13%) 1,193 ( 0.17%) 878 ( 0.31%) 56 ( 0.95%) 1 ( 0.01%) 1 ( 0.03%) 51 ( 1.58%) .          .           => Pipeline.cpp:Pipeline::setAONextStage() (1x)
  3 ( 0.00%)  1 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .               setTaskHandler();
11,509 ( 0.41%) 3,457 ( 0.50%) 2,183 ( 0.78%) 116 ( 1.96%) 2 ( 0.02%) 0          67 ( 2.07%) 1 ( 0.01%) .           => Pipeline.cpp:Pipeline::setTaskHandler() (1x)
  4 ( 0.00%)  3 ( 0.00%)  0          1 ( 0.02%) 1 ( 0.01%) 0          1 ( 0.03%) .          .           }
  .           .           .          .          .          .          .          .          .           
  8 ( 0.00%)  1 ( 0.00%)  3 ( 0.00%) 1 ( 0.02%) .          .          .          .          .           Pipeline::~Pipeline()
  .           .           .          .          .          .          .          .          .           {
  9 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               std::cout << "\n********* START Pipeline Stop Process *********" << std::endl;
3,250 ( 0.11%) 839 ( 0.12%) 360 ( 0.13%) 3 ( 0.05%) 2 ( 0.02%) 0          0          2 ( 0.02%) .           => ???:0x000000000010c8b0 (1x)
486 ( 0.02%) 160 ( 0.02%) 78 ( 0.03%) .          .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               // Lock the mutex to ensure thread safety
  6 ( 0.00%)  1 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .               std::lock_guard<std::mutex> lock(pipeMtx);
 87 ( 0.00%) 24 ( 0.00%) 18 ( 0.01%) 3 ( 0.05%) .          .          .          .          .           => /usr/include/c++/11/bits/std_mutex.h:std::lock_guard<std::mutex>::lock_guard(std::mutex&) (1x)
126 ( 0.00%)  3 ( 0.00%) 30 ( 0.01%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .               for (auto stage : stages)
480 ( 0.02%) 174 ( 0.03%) 126 ( 0.05%) 13 ( 0.22%) 2 ( 0.02%) 0          5 ( 0.15%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObject>::shared_ptr(std::shared_ptr<ActiveObject> const&) (6x)
238 ( 0.01%) 91 ( 0.01%) 70 ( 0.03%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >(__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > > const&, __gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > > const&) (7x)
 72 ( 0.00%) 36 ( 0.01%) 18 ( 0.01%) 3 ( 0.05%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >::operator++() (6x)
 48 ( 0.00%) 24 ( 0.00%) 12 ( 0.00%) 1 ( 0.02%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >::operator*() const (6x)
 32 ( 0.00%) 12 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::end() (1x)
 31 ( 0.00%) 12 ( 0.00%)  8 ( 0.00%) 1 ( 0.02%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::begin() (1x)
  .           .           .          .          .          .          .          .          .               {
 30 ( 0.00%)  0          12 ( 0.00%) .          .          .          .          .          .                   stage->stopActiveObject(); // Stop the active object
23,774 ( 0.84%) 6,326 ( 0.92%) 3,065 ( 1.09%) 112 ( 1.90%) 23 ( 0.17%) 1 ( 0.03%) 24 ( 0.74%) 10 ( 0.11%) 1 ( 0.04%)  => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/ActiveObject.cpp:ActiveObject::stopActiveObject() (6x)
168 ( 0.01%) 60 ( 0.01%) 48 ( 0.02%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObject, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (6x)
 18 ( 0.00%)  0           6 ( 0.00%) .          .          .          .          .          .               }
414 ( 0.01%) 126 ( 0.02%) 96 ( 0.03%) 9 ( 0.15%) .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObject>::~shared_ptr() (6x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               // Clear the stages vector to release the shared_ptr resources
  3 ( 0.00%)  1 ( 0.00%)  1 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               stages.clear();
91,354 ( 3.23%) 25,329 ( 3.67%) 13,408 ( 4.79%) 524 ( 8.87%) 95 ( 0.72%) 10 ( 0.33%) 105 ( 3.24%) 40 ( 0.44%) 1 ( 0.04%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::clear() (1x)
  9 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .               std::cout << "\nPipeline: Cleared Active-Object Stages " << std::endl;
2,786 ( 0.10%) 719 ( 0.10%) 312 ( 0.11%) 7 ( 0.12%) 2 ( 0.02%) 0          0          1 ( 0.01%) .           => ???:0x000000000010c8b0 (1x)
486 ( 0.02%) 160 ( 0.02%) 78 ( 0.03%) .          .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
  9 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               std::cout << "\n********* FINISH Pipeline Stop Process *********" << std::endl;
3,308 ( 0.12%) 854 ( 0.12%) 366 ( 0.13%) 3 ( 0.05%) 1 ( 0.01%) .          .          .          .           => ???:0x000000000010c8b0 (1x)
486 ( 0.02%) 160 ( 0.02%) 78 ( 0.03%) .          .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
 12 ( 0.00%)  5 ( 0.00%)  2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           }
275 ( 0.01%) 87 ( 0.01%) 61 ( 0.02%) 5 ( 0.08%) 1 ( 0.01%) 0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::~vector() (1x)
 69 ( 0.00%) 18 ( 0.00%) 14 ( 0.01%) 3 ( 0.05%) 1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/std_mutex.h:std::lock_guard<std::mutex>::~lock_guard() (1x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           // Process the graphs that sended from the server
  .           .           .          .          .          .          .          .          .           void Pipeline::processGraphs(std::vector<std::weak_ptr<Graph>> &graphs)
  .           .           .          .          .          .          .          .          .           {
  .           .           .          .          .          .          .          .          .               // Lock the mutex to ensure thread safety
  .           .           .          .          .          .          .          .          .               std::lock_guard<std::mutex> lock(this->pipeMtx);
  .           .           .          .          .          .          .          .          .               for (auto graph : graphs)
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                   stages[STAGE_0_START_MST_CALCULATION]->enqueueTask(graph); // enqueue the weak ptr although we have used shared ptr for validation
  .           .           .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           void Pipeline::createAOStages()
 10 ( 0.00%)  1 ( 0.00%)  5 ( 0.00%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .           {
  .           .           .          .          .          .          .          .          .               try
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                   // Create stages with error checking
 41 ( 0.00%) 13 ( 0.00%)  7 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   for (int stageNumber = STAGE_0_START_MST_CALCULATION; stageNumber <= STAGE_5_FINISH_MST_CALCUATION; ++stageNumber)
  .           .           .          .          .          .          .          .          .                   {
144 ( 0.01%) 12 ( 0.00%) 30 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                       std::cout << "***** " << "Creating stage " << stageNumber << " *****" << std::endl;
5,604 ( 0.20%) 1,512 ( 0.22%) 792 ( 0.28%) 12 ( 0.20%) 1 ( 0.01%) 0          2 ( 0.06%) 1 ( 0.01%) .           => ???:0x000000000010c8b0 (18x)
4,529 ( 0.16%) 1,158 ( 0.17%) 582 ( 0.21%) 29 ( 0.49%) 19 ( 0.14%) 0          25 ( 0.77%) 11 ( 0.12%) .           => ???:0x000000000010ca90 (6x)
2,866 ( 0.10%) 941 ( 0.14%) 455 ( 0.16%) 11 ( 0.19%) .          .          .          .          .           => ???:0x000000000010c8e0 (6x)
 78 ( 0.00%)  6 ( 0.00%) 18 ( 0.01%) 7 ( 0.12%) 0          0          1 ( 0.03%) .          .                       stages.push_back(std::make_shared<ActiveObject>(stageNumber)); // Create a shared pointer to an active object
72,025 ( 2.54%) 21,146 ( 3.06%) 15,256 ( 5.45%) 980 (16.58%) 111 ( 0.84%) 186 ( 6.14%) 372 (11.49%) 46 ( 0.51%) 180 ( 7.52%)  => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObject> std::make_shared<ActiveObject, int&>(int&) (6x)
8,200 ( 0.29%) 2,674 ( 0.39%) 2,236 ( 0.80%) 151 ( 2.56%) 3 ( 0.02%) 4 ( 0.13%) 48 ( 1.48%) 1 ( 0.01%) 3 ( 0.13%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::push_back(std::shared_ptr<ActiveObject>&&) (6x)
210 ( 0.01%) 60 ( 0.01%) 48 ( 0.02%) 11 ( 0.19%) 0          0          5 ( 0.15%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObject>::~shared_ptr() (6x)
114 ( 0.00%) 12 ( 0.00%) 24 ( 0.01%) 6 ( 0.10%) 0          0          1 ( 0.03%) .          .                       std::cout << "Stage " << stageNumber << " created successfully" << std::endl;
4,110 ( 0.15%) 1,080 ( 0.16%) 528 ( 0.19%) 45 ( 0.76%) 1 ( 0.01%) 0          0          1 ( 0.01%) .           => ???:0x000000000010c8b0 (12x)
2,391 ( 0.08%) 624 ( 0.09%) 366 ( 0.13%) 21 ( 0.36%) .          .          .          .          .           => ???:0x000000000010ca90 (6x)
2,927 ( 0.10%) 962 ( 0.14%) 470 ( 0.17%) 36 ( 0.61%) .          .          .          .          .           => ???:0x000000000010c8e0 (6x)
  .           .           .          .          .          .          .          .          .                   }
  .           .           .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .               catch (const std::exception &e)
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                   std::cerr << "Stage creation failed: " << e.what() << std::endl;
  .           .           .          .          .          .          .          .          .                   throw;
  .           .           .          .          .          .          .          .          .               }
  9 ( 0.00%)  6 ( 0.00%)  0          1 ( 0.02%) 1 ( 0.01%) 0          1 ( 0.03%) 1 ( 0.01%) .           }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           void Pipeline::setAONextStage()
 10 ( 0.00%)  1 ( 0.00%)  5 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           {
  .           .           .          .          .          .          .          .          .               try
  .           .           .          .          .          .          .          .          .               {
  9 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .                   std::weak_ptr<ActiveObject> myNextStage = stages[STAGE_1_TOTAL_WEIGHT_MST]; // Stage 1
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) 2 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::operator[](unsigned long) (1x)
 80 ( 0.00%) 29 ( 0.00%) 21 ( 0.01%) 5 ( 0.08%) 0          0          5 ( 0.15%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<ActiveObject>::weak_ptr<ActiveObject, void>(std::shared_ptr<ActiveObject> const&) (1x)
 19 ( 0.00%)  1 ( 0.00%)  5 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   stages[STAGE_0_START_MST_CALCULATION]->setNextStage(myNextStage);           // Set Stage 0 -> 1
366 ( 0.01%) 120 ( 0.02%) 85 ( 0.03%) 27 ( 0.46%) 0          0          24 ( 0.74%) .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/ActiveObject.cpp:ActiveObject::setNextStage(std::weak_ptr<ActiveObject>) (1x)
 69 ( 0.00%) 21 ( 0.00%) 16 ( 0.01%) 5 ( 0.08%) 0          0          5 ( 0.15%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<ActiveObject>::~weak_ptr() (1x)
 80 ( 0.00%) 29 ( 0.00%) 21 ( 0.01%) 3 ( 0.05%) 0          0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<ActiveObject>::weak_ptr(std::weak_ptr<ActiveObject> const&) (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObject, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::operator[](unsigned long) (1x)
  9 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   myNextStage = stages[STAGE_2_LON_DIS_BET_TWO_VER_MST];                      // Stage 2
117 ( 0.00%) 44 ( 0.01%) 30 ( 0.01%) 2 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::enable_if<std::is_assignable<std::__weak_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>&, std::shared_ptr<ActiveObject> const&>::value, std::weak_ptr<ActiveObject>&>::type std::weak_ptr<ActiveObject>::operator=<ActiveObject>(std::shared_ptr<ActiveObject> const&) (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::operator[](unsigned long) (1x)
 19 ( 0.00%)  1 ( 0.00%)  5 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   stages[STAGE_1_TOTAL_WEIGHT_MST]->setNextStage(myNextStage);                // Set Stage 1 -> 2
366 ( 0.01%) 120 ( 0.02%) 85 ( 0.03%) .          .          .          .          .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/ActiveObject.cpp:ActiveObject::setNextStage(std::weak_ptr<ActiveObject>) (1x)
 69 ( 0.00%) 21 ( 0.00%) 16 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<ActiveObject>::~weak_ptr() (1x)
 80 ( 0.00%) 29 ( 0.00%) 21 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<ActiveObject>::weak_ptr(std::weak_ptr<ActiveObject> const&) (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObject, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::operator[](unsigned long) (1x)
  9 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .                   myNextStage = stages[STAGE_3_SHO_DIS_BET_TWO_VER_MST];                      // Stage 3
117 ( 0.00%) 44 ( 0.01%) 30 ( 0.01%) 0          1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::enable_if<std::is_assignable<std::__weak_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>&, std::shared_ptr<ActiveObject> const&>::value, std::weak_ptr<ActiveObject>&>::type std::weak_ptr<ActiveObject>::operator=<ActiveObject>(std::shared_ptr<ActiveObject> const&) (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::operator[](unsigned long) (1x)
 19 ( 0.00%)  1 ( 0.00%)  5 ( 0.00%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .                   stages[STAGE_2_LON_DIS_BET_TWO_VER_MST]->setNextStage(myNextStage);         // Set Stage 2 -> 3
366 ( 0.01%) 120 ( 0.02%) 85 ( 0.03%) .          .          .          .          .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/ActiveObject.cpp:ActiveObject::setNextStage(std::weak_ptr<ActiveObject>) (1x)
 69 ( 0.00%) 21 ( 0.00%) 16 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<ActiveObject>::~weak_ptr() (1x)
 80 ( 0.00%) 29 ( 0.00%) 21 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<ActiveObject>::weak_ptr(std::weak_ptr<ActiveObject> const&) (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObject, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::operator[](unsigned long) (1x)
  9 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .                   myNextStage = stages[STAGE_4_AVG_DIS_BET_TWO_EDG_MST];                      // Stage 4
117 ( 0.00%) 44 ( 0.01%) 30 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::enable_if<std::is_assignable<std::__weak_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>&, std::shared_ptr<ActiveObject> const&>::value, std::weak_ptr<ActiveObject>&>::type std::weak_ptr<ActiveObject>::operator=<ActiveObject>(std::shared_ptr<ActiveObject> const&) (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::operator[](unsigned long) (1x)
 19 ( 0.00%)  1 ( 0.00%)  5 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   stages[STAGE_3_SHO_DIS_BET_TWO_VER_MST]->setNextStage(myNextStage);         // Set Stage 3 -> 4
366 ( 0.01%) 120 ( 0.02%) 85 ( 0.03%) 0          0          1 ( 0.03%) .          .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/ActiveObject.cpp:ActiveObject::setNextStage(std::weak_ptr<ActiveObject>) (1x)
 69 ( 0.00%) 21 ( 0.00%) 16 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<ActiveObject>::~weak_ptr() (1x)
 80 ( 0.00%) 29 ( 0.00%) 21 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<ActiveObject>::weak_ptr(std::weak_ptr<ActiveObject> const&) (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObject, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::operator[](unsigned long) (1x)
  9 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   myNextStage = stages[STAGE_5_FINISH_MST_CALCUATION];                        // Stage 5
117 ( 0.00%) 44 ( 0.01%) 30 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::enable_if<std::is_assignable<std::__weak_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>&, std::shared_ptr<ActiveObject> const&>::value, std::weak_ptr<ActiveObject>&>::type std::weak_ptr<ActiveObject>::operator=<ActiveObject>(std::shared_ptr<ActiveObject> const&) (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::operator[](unsigned long) (1x)
 19 ( 0.00%)  1 ( 0.00%)  5 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   stages[STAGE_4_AVG_DIS_BET_TWO_EDG_MST]->setNextStage(myNextStage);         // Set Stage 4 -> 5
366 ( 0.01%) 120 ( 0.02%) 85 ( 0.03%) .          .          .          .          .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/ActiveObject.cpp:ActiveObject::setNextStage(std::weak_ptr<ActiveObject>) (1x)
 69 ( 0.00%) 21 ( 0.00%) 16 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<ActiveObject>::~weak_ptr() (1x)
 80 ( 0.00%) 29 ( 0.00%) 21 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<ActiveObject>::weak_ptr(std::weak_ptr<ActiveObject> const&) (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObject, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::operator[](unsigned long) (1x)
  3 ( 0.00%)  0           1 ( 0.00%) .          .          .          .          .          .               }
 69 ( 0.00%) 21 ( 0.00%) 16 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<ActiveObject>::~weak_ptr() (1x)
  .           .           .          .          .          .          .          .          .               catch (const std::exception &e)
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                   std::cerr << "Set Next Active Object Failed: " << e.what() << std::endl;
  .           .           .          .          .          .          .          .          .                   throw;
  .           .           .          .          .          .          .          .          .               }
  9 ( 0.00%)  6 ( 0.00%)  0          2 ( 0.03%) 0          0          2 ( 0.06%) .          .           }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           // define the task handlers for each stage
  .           .           .          .          .          .          .          .          .           void Pipeline::setTaskHandler()
 10 ( 0.00%)  1 ( 0.00%)  5 ( 0.00%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .           {
  .           .           .          .          .          .          .          .          .               try
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                   // Define task handlers for each stage
 21 ( 0.00%)  2 ( 0.00%)  6 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   stages[STAGE_0_START_MST_CALCULATION]->setTaskHandler([this](std::weak_ptr<Graph> graph) -> void
1,703 ( 0.06%) 509 ( 0.07%) 296 ( 0.11%) 28 ( 0.47%) 2 ( 0.02%) 0          17 ( 0.53%) 1 ( 0.01%) .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/ActiveObject.cpp:ActiveObject::setTaskHandler(std::function<void (std::weak_ptr<Graph>)>) (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObject, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 23 ( 0.00%)  7 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::~function() (1x)
125 ( 0.00%) 41 ( 0.01%) 44 ( 0.02%) 7 ( 0.12%) 0          0          7 ( 0.22%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::function<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#1}, void>(Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#1}&&) (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::operator[](unsigned long) (1x)
  .           .           .          .          .          .          .          .          .                   {
  .           .           .          .          .          .          .          .          .                       // Lock the weak_ptr to get a shared_ptr (to be able to access the graph methods)
  .           .           .          .          .          .          .          .          .                       std::shared_ptr<Graph> sharedGraph = graph.lock();
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                       // Check if the shared_ptr is valid
  .           .           .          .          .          .          .          .          .                       if (sharedGraph) {
  .           .           .          .          .          .          .          .          .                           sharedGraph->setMSTDataCalculationNextStatus();  // Access the method  (next set status is progress = 0 previous is none = -1)
  .           .           .          .          .          .          .          .          .                       } else {   // Handle the case where the managed object no longer exists
  .           .           .          .          .          .          .          .          .                           std::cerr << "Graph object no longer exists." << std::endl;
  .           .           .          .          .          .          .          .          .                       }
  .           .           .          .          .          .          .          .          .                   });
  .           .           .          .          .          .          .          .          .           
 21 ( 0.00%)  2 ( 0.00%)  6 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   stages[STAGE_1_TOTAL_WEIGHT_MST]->setTaskHandler([this](std::weak_ptr<Graph> graph) -> void
1,711 ( 0.06%) 511 ( 0.07%) 298 ( 0.11%) 8 ( 0.14%) .          .          .          .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/ActiveObject.cpp:ActiveObject::setTaskHandler(std::function<void (std::weak_ptr<Graph>)>) (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObject, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 23 ( 0.00%)  7 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::~function() (1x)
125 ( 0.00%) 41 ( 0.01%) 44 ( 0.02%) 6 ( 0.10%) 0          0          6 ( 0.19%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::function<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#2}, void>(Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#2}&&) (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::operator[](unsigned long) (1x)
  .           .           .          .          .          .          .          .          .                                                                    {
  .           .           .          .          .          .          .          .          .                       // Lock the weak_ptr to get a shared_ptr (to be able to access the graph methods)
  .           .           .          .          .          .          .          .          .                       std::shared_ptr<Graph> sharedGraph = graph.lock();
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                       // Check if the shared_ptr is valid
  .           .           .          .          .          .          .          .          .                       if (sharedGraph) {
  .           .           .          .          .          .          .          .          .                           sharedGraph->setMSTTotalWeight();  // Access the method
  .           .           .          .          .          .          .          .          .                       } else {   // Handle the case where the managed object no longer exists
  .           .           .          .          .          .          .          .          .                           std::cerr << "Graph object no longer exists." << std::endl;
  .           .           .          .          .          .          .          .          .                       } });
  .           .           .          .          .          .          .          .          .           
 21 ( 0.00%)  2 ( 0.00%)  6 ( 0.00%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .                   stages[STAGE_2_LON_DIS_BET_TWO_VER_MST]->setTaskHandler([this](std::weak_ptr<Graph> graph) -> void
1,700 ( 0.06%) 509 ( 0.07%) 296 ( 0.11%) 9 ( 0.15%) .          .          .          .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/ActiveObject.cpp:ActiveObject::setTaskHandler(std::function<void (std::weak_ptr<Graph>)>) (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObject, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 23 ( 0.00%)  7 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::~function() (1x)
125 ( 0.00%) 41 ( 0.01%) 44 ( 0.02%) 8 ( 0.14%) 0          0          8 ( 0.25%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::function<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#3}, void>(Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#3}&&) (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::operator[](unsigned long) (1x)
  .           .           .          .          .          .          .          .          .                                                                           {
  .           .           .          .          .          .          .          .          .                       // Lock the weak_ptr to get a shared_ptr (to be able to access the graph methods)
  .           .           .          .          .          .          .          .          .                       std::shared_ptr<Graph> sharedGraph = graph.lock();
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                       // Check if the shared_ptr is valid
  .           .           .          .          .          .          .          .          .                       if (sharedGraph) {
  .           .           .          .          .          .          .          .          .                           sharedGraph->setMSTLongestDistance();  // Access the method
  .           .           .          .          .          .          .          .          .                       } else {   // Handle the case where the managed object no longer exists
  .           .           .          .          .          .          .          .          .                           std::cerr << "Graph object no longer exists." << std::endl;
  .           .           .          .          .          .          .          .          .                       } });
  .           .           .          .          .          .          .          .          .           
 21 ( 0.00%)  2 ( 0.00%)  6 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   stages[STAGE_3_SHO_DIS_BET_TWO_VER_MST]->setTaskHandler([this](std::weak_ptr<Graph> graph) -> void
1,711 ( 0.06%) 511 ( 0.07%) 298 ( 0.11%) 7 ( 0.12%) .          .          .          .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/ActiveObject.cpp:ActiveObject::setTaskHandler(std::function<void (std::weak_ptr<Graph>)>) (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObject, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 23 ( 0.00%)  7 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::~function() (1x)
125 ( 0.00%) 41 ( 0.01%) 44 ( 0.02%) 7 ( 0.12%) 0          0          7 ( 0.22%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::function<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#4}, void>(Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#4}&&) (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::operator[](unsigned long) (1x)
  .           .           .          .          .          .          .          .          .                                                                           {
  .           .           .          .          .          .          .          .          .                       // Lock the weak_ptr to get a shared_ptr (to be able to access the graph methods)
  .           .           .          .          .          .          .          .          .                       std::shared_ptr<Graph> sharedGraph = graph.lock();
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                       // Check if the shared_ptr is valid
  .           .           .          .          .          .          .          .          .                       if (sharedGraph) {
  .           .           .          .          .          .          .          .          .                           sharedGraph->setMSTShortestDistance();  // Access the method
  .           .           .          .          .          .          .          .          .                       } else {   // Handle the case where the managed object no longer exists
  .           .           .          .          .          .          .          .          .                           std::cerr << "Graph object no longer exists." << std::endl;
  .           .           .          .          .          .          .          .          .                       } });
  .           .           .          .          .          .          .          .          .           
 21 ( 0.00%)  2 ( 0.00%)  6 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   stages[STAGE_4_AVG_DIS_BET_TWO_EDG_MST]->setTaskHandler([this](std::weak_ptr<Graph> graph) -> void
1,700 ( 0.06%) 509 ( 0.07%) 296 ( 0.11%) 7 ( 0.12%) .          .          .          .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/ActiveObject.cpp:ActiveObject::setTaskHandler(std::function<void (std::weak_ptr<Graph>)>) (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObject, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 23 ( 0.00%)  7 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::~function() (1x)
125 ( 0.00%) 41 ( 0.01%) 44 ( 0.02%) 6 ( 0.10%) 0          0          6 ( 0.19%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::function<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#5}, void>(Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#5}&&) (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::operator[](unsigned long) (1x)
  .           .           .          .          .          .          .          .          .                                                                           {
  .           .           .          .          .          .          .          .          .                       // Lock the weak_ptr to get a shared_ptr (to be able to access the graph methods)
  .           .           .          .          .          .          .          .          .                       std::shared_ptr<Graph> sharedGraph = graph.lock();
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                       // Check if the shared_ptr is valid
  .           .           .          .          .          .          .          .          .                       if (sharedGraph) {
  .           .           .          .          .          .          .          .          .                           sharedGraph->setMSTAvgEdgeWeight();  // Access the method
  .           .           .          .          .          .          .          .          .                       } else {   // Handle the case where the managed object no longer exists
  .           .           .          .          .          .          .          .          .                           std::cerr << "Graph object no longer exists." << std::endl;
  .           .           .          .          .          .          .          .          .                       } });
  .           .           .          .          .          .          .          .          .           
 21 ( 0.00%)  2 ( 0.00%)  6 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   stages[STAGE_5_FINISH_MST_CALCUATION]->setTaskHandler([this](std::weak_ptr<Graph> graph) -> void
1,711 ( 0.06%) 511 ( 0.07%) 298 ( 0.11%) 7 ( 0.12%) .          .          .          .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/ActiveObject.cpp:ActiveObject::setTaskHandler(std::function<void (std::weak_ptr<Graph>)>) (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObject, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 23 ( 0.00%)  7 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::~function() (1x)
125 ( 0.00%) 41 ( 0.01%) 44 ( 0.02%) 6 ( 0.10%) 0          0          6 ( 0.19%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::function<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#6}, void>(Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#6}&&) (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::operator[](unsigned long) (1x)
  .           .           .          .          .          .          .          .          .                                                                         {
  .           .           .          .          .          .          .          .          .                       // Lock the weak_ptr to get a shared_ptr (to be able to access the graph methods)
  .           .           .          .          .          .          .          .          .                       std::shared_ptr<Graph> sharedGraph = graph.lock();
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                       // Check if the shared_ptr is valid
  .           .           .          .          .          .          .          .          .                       if (sharedGraph) {
  .           .           .          .          .          .          .          .          .                           sharedGraph->setMSTDataCalculationNextStatus();  // Access the method (next set status is finish = 1, previous one is progress = 0)
  .           .           .          .          .          .          .          .          .                       } else {   // Handle the case where the managed object no longer exists
-- line 163 ----------------------------------------
-- line 164 ----------------------------------------
  .           .           .          .          .          .          .          .          .                           std::cerr << "Graph object no longer exists." << std::endl;
  .           .           .          .          .          .          .          .          .                       } });
  .           .           .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .               catch (const std::exception &e)
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                   std::cerr << "Set Next Active Object Failed: " << e.what() << std::endl;
  .           .           .          .          .          .          .          .          .                   throw;
  .           .           .          .          .          .          .          .          .               }
 30 ( 0.00%) 12 ( 0.00%)  5 ( 0.00%) 4 ( 0.07%) 0          0          4 ( 0.12%) .          .           }
127 ( 0.00%) 31 ( 0.00%) 27 ( 0.01%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => Pipeline.cpp:__static_initialization_and_destruction_0(int, int) (1x)
  .           .           .          .          .          .          .          .          .           

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/ext/aligned_buffer.h
--------------------------------------------------------------------------------
Ir          Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 94 ----------------------------------------
 .           .           .          .          .          .          .          .          .           	std::aligned_storage<sizeof(_Tp), __alignof__(_Tp)>::type _M_storage;
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 __aligned_buffer() = default;
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 // Can be used to avoid value-initialization
 .           .           .          .          .          .          .          .          .                 __aligned_buffer(std::nullptr_t) { }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 void*
72 ( 0.00%)  0          36 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 _M_addr() noexcept
 .           .           .          .          .          .          .          .          .                 {
18 ( 0.00%) 18 ( 0.00%)  .          .          .          .          .          .          .                   return static_cast<void*>(&_M_storage);
36 ( 0.00%) 36 ( 0.01%)  .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 const void*
 .           .           .          .          .          .          .          .          .                 _M_addr() const noexcept
 .           .           .          .          .          .          .          .          .                 {
 .           .           .          .          .          .          .          .          .                   return static_cast<const void*>(&_M_storage);
 .           .           .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 _Tp*
90 ( 0.00%)  0          36 ( 0.01%) 4 ( 0.07%) 0          0          1 ( 0.03%) .          .                 _M_ptr() noexcept
90 ( 0.00%) 54 ( 0.01%) 18 ( 0.01%) 2 ( 0.03%) 0          0          1 ( 0.03%) .          .                 { return static_cast<_Tp*>(_M_addr()); }
126 ( 0.00%) 54 ( 0.01%) 36 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<ActiveObject>::_M_addr() (18x)
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 const _Tp*
 .           .           .          .          .          .          .          .          .                 _M_ptr() const noexcept
 .           .           .          .          .          .          .          .          .                 { return static_cast<const _Tp*>(_M_addr()); }
 .           .           .          .          .          .          .          .          .               };
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           } // namespace
-- line 123 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/ext/atomicity.h
--------------------------------------------------------------------------------
Ir           Dr           Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 44 ----------------------------------------
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .             __attribute__((__always_inline__))
  .            .           .          .          .          .          .          .          .             inline bool
  .            .           .          .          .          .          .          .          .             __is_single_threaded() _GLIBCXX_NOTHROW
  .            .           .          .          .          .          .          .          .             {
  .            .           .          .          .          .          .          .          .           #ifndef __GTHREADS
  .            .           .          .          .          .          .          .          .               return true;
  .            .           .          .          .          .          .          .          .           #elif __has_include(<sys/single_threaded.h>)
177 ( 0.01%)  59 ( 0.01%)  0          3 ( 0.05%) 0          0          2 ( 0.06%) .          .               return ::__libc_single_threaded;
  .            .           .          .          .          .          .          .          .           #else
  .            .           .          .          .          .          .          .          .               return !__gthread_active_p();
  .            .           .          .          .          .          .          .          .           #endif
  .            .           .          .          .          .          .          .          .             }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .             // Functions for portable atomic access.
  .            .           .          .          .          .          .          .          .             // To abstract locking primitives across all thread policies, use:
  .            .           .          .          .          .          .          .          .             // __exchange_and_add_dispatch
  .            .           .          .          .          .          .          .          .             // __atomic_add_dispatch
  .            .           .          .          .          .          .          .          .           #ifdef _GLIBCXX_ATOMIC_BUILTINS
  .            .           .          .          .          .          .          .          .             inline _Atomic_word
  .            .           .          .          .          .          .          .          .             __attribute__((__always_inline__))
  .            .           .          .          .          .          .          .          .             __exchange_and_add(volatile _Atomic_word* __mem, int __val)
152 ( 0.01%) 114 ( 0.02%) 38 ( 0.01%) 0          4 ( 0.03%) .          .          .          .             { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .             inline void
  .            .           .          .          .          .          .          .          .             __attribute__((__always_inline__))
  .            .           .          .          .          .          .          .          .             __atomic_add(volatile _Atomic_word* __mem, int __val)
 84 ( 0.00%)  63 ( 0.01%) 21 ( 0.01%) 1 ( 0.02%) 3 ( 0.02%) 0          1 ( 0.03%) .          .             { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
  .            .           .          .          .          .          .          .          .           #else
  .            .           .          .          .          .          .          .          .             _Atomic_word
  .            .           .          .          .          .          .          .          .             __exchange_and_add(volatile _Atomic_word*, int) _GLIBCXX_NOTHROW;
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .             void
  .            .           .          .          .          .          .          .          .             __atomic_add(volatile _Atomic_word*, int) _GLIBCXX_NOTHROW;
  .            .           .          .          .          .          .          .          .           #endif
  .            .           .          .          .          .          .          .          .           
-- line 79 ----------------------------------------
-- line 84 ----------------------------------------
  .            .           .          .          .          .          .          .          .               _Atomic_word __result = *__mem;
  .            .           .          .          .          .          .          .          .               *__mem += __val;
  .            .           .          .          .          .          .          .          .               return __result;
  .            .           .          .          .          .          .          .          .             }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .             inline void
  .            .           .          .          .          .          .          .          .             __attribute__((__always_inline__))
  .            .           .          .          .          .          .          .          .             __atomic_add_single(_Atomic_word* __mem, int __val)
 84 ( 0.00%)  42 ( 0.01%) 42 ( 0.02%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .             { *__mem += __val; }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .             inline _Atomic_word
  .            .           .          .          .          .          .          .          .             __attribute__ ((__always_inline__))
  .            .           .          .          .          .          .          .          .             __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  .            .           .          .          .          .          .          .          .             {
 76 ( 0.00%)   .           .          .          .          .          .          .          .               if (__is_single_threaded())
152 ( 0.01%)  76 ( 0.01%) 76 ( 0.03%) 4 ( 0.07%) 0          0          3 ( 0.09%) .          .                 return __exchange_and_add_single(__mem, __val);
  .            .           .          .          .          .          .          .          .               else
 38 ( 0.00%)   .           .          .          .          .          .          .          .                 return __exchange_and_add(__mem, __val);
  .            .           .          .          .          .          .          .          .             }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .             inline void
  .            .           .          .          .          .          .          .          .             __attribute__ ((__always_inline__))
  .            .           .          .          .          .          .          .          .             __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  .            .           .          .          .          .          .          .          .             {
 42 ( 0.00%)   .           .          .          .          .          .          .          .               if (__is_single_threaded())
  .            .           .          .          .          .          .          .          .                 __atomic_add_single(__mem, __val);
  .            .           .          .          .          .          .          .          .               else
  .            .           .          .          .          .          .          .          .                 __atomic_add(__mem, __val);
 21 ( 0.00%)   .           .          .          .          .          .          .          .             }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .           _GLIBCXX_END_NAMESPACE_VERSION
  .            .           .          .          .          .          .          .          .           } // namespace
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .           // Even if the CPU doesn't need a memory barrier, we need to ensure
  .            .           .          .          .          .          .          .          .           // that the compiler doesn't reorder memory accesses across the
  .            .           .          .          .          .          .          .          .           // barriers.
  .            .           .          .          .          .          .          .          .           #ifndef _GLIBCXX_READ_MEM_BARRIER
-- line 120 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_deque.h
--------------------------------------------------------------------------------
Ir             Dr           Dw           I1mr        D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 89 ----------------------------------------
    .            .            .           .          .          .          .          .          .             */
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .           #ifndef _GLIBCXX_DEQUE_BUF_SIZE
    .            .            .           .          .          .          .          .          .           #define _GLIBCXX_DEQUE_BUF_SIZE 512
    .            .            .           .          .          .          .          .          .           #endif
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .             _GLIBCXX_CONSTEXPR inline size_t
    .            .            .           .          .          .          .          .          .             __deque_buf_size(size_t __size)
  384 ( 0.01%)   0          192 ( 0.07%)  3 ( 0.05%) 0          0          1 ( 0.03%) .          .             { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
  768 ( 0.03%) 384 ( 0.06%)   .           .          .          .          .          .          .           	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .             /**
    .            .            .           .          .          .          .          .          .              *  @brief A deque::iterator.
    .            .            .           .          .          .          .          .          .              *
    .            .            .           .          .          .          .          .          .              *  Quite a bit of intelligence here.  Much of the functionality of
    .            .            .           .          .          .          .          .          .              *  deque is actually passed off to this class.  A deque holds two
    .            .            .           .          .          .          .          .          .              *  of these internally, marking its valid range.  Access to
-- line 106 ----------------------------------------
-- line 123 ----------------------------------------
    .            .            .           .          .          .          .          .          .           	using __iter = _Deque_iterator<_Tp, _CvTp&, __ptr_rebind<_Ptr, _CvTp>>;
    .            .            .           .          .          .          .          .          .               public:
    .            .            .           .          .          .          .          .          .                 typedef __iter<_Tp>				   iterator;
    .            .            .           .          .          .          .          .          .                 typedef __iter<const _Tp>				   const_iterator;
    .            .            .           .          .          .          .          .          .                 typedef __ptr_rebind<_Ptr, _Tp>			   _Elt_pointer;
    .            .            .           .          .          .          .          .          .                 typedef __ptr_rebind<_Ptr, _Elt_pointer>		   _Map_pointer;
    .            .            .           .          .          .          .          .          .           #endif
    .            .            .           .          .          .          .          .          .           
  120 ( 0.00%)   0           40 ( 0.01%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .                 static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
  160 ( 0.01%)  80 ( 0.01%)  40 ( 0.01%)  .          .          .          .          .          .                 { return __deque_buf_size(sizeof(_Tp)); }
  456 ( 0.02%) 152 ( 0.02%)  76 ( 0.03%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long) (38x)
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 typedef std::random_access_iterator_tag	iterator_category;
    .            .            .           .          .          .          .          .          .                 typedef _Tp				value_type;
    .            .            .           .          .          .          .          .          .                 typedef _Ptr				pointer;
    .            .            .           .          .          .          .          .          .                 typedef _Ref				reference;
    .            .            .           .          .          .          .          .          .                 typedef size_t				size_type;
    .            .            .           .          .          .          .          .          .                 typedef ptrdiff_t				difference_type;
    .            .            .           .          .          .          .          .          .                 typedef _Deque_iterator			_Self;
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
    .            .            .           .          .          .          .          .          .                 _Elt_pointer _M_first;
    .            .            .           .          .          .          .          .          .                 _Elt_pointer _M_last;
    .            .            .           .          .          .          .          .          .                 _Map_pointer _M_node;
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 : _M_cur(__x), _M_first(*__y),
    .            .            .           .          .          .          .          .          .           	_M_last(*__y + _S_buffer_size()), _M_node(__y) { }
    .            .            .           .          .          .          .          .          .           
  160 ( 0.01%)   0           80 ( 0.03%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 _Deque_iterator() _GLIBCXX_NOEXCEPT
  440 ( 0.02%) 240 ( 0.03%) 160 ( 0.06%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .                 : _M_cur(), _M_first(), _M_last(), _M_node() { }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .           #if __cplusplus < 201103L
    .            .            .           .          .          .          .          .          .                 // Conversion from iterator to const_iterator.
    .            .            .           .          .          .          .          .          .                 _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 : _M_cur(__x._M_cur), _M_first(__x._M_first),
    .            .            .           .          .          .          .          .          .           	_M_last(__x._M_last), _M_node(__x._M_node) { }
    .            .            .           .          .          .          .          .          .           #else
    .            .            .           .          .          .          .          .          .                 // Conversion from iterator to const_iterator.
    .            .            .           .          .          .          .          .          .                 template<typename _Iter,
    .            .            .           .          .          .          .          .          .           	       typename = _Require<is_same<_Self, const_iterator>,
    .            .            .           .          .          .          .          .          .           				   is_same<_Iter, iterator>>>
    .            .            .           .          .          .          .          .          .                  _Deque_iterator(const _Iter& __x) noexcept
    .            .            .           .          .          .          .          .          .                  : _M_cur(__x._M_cur), _M_first(__x._M_first),
    .            .            .           .          .          .          .          .          .           	 _M_last(__x._M_last), _M_node(__x._M_node) { }
    .            .            .           .          .          .          .          .          .           
  530 ( 0.02%)   0          318 ( 0.11%)  3 ( 0.05%) 0          0          2 ( 0.06%) .          .                 _Deque_iterator(const _Deque_iterator& __x) noexcept
  848 ( 0.03%) 636 ( 0.09%) 212 ( 0.08%)  1 ( 0.02%) 1 ( 0.01%) 0          1 ( 0.03%) .          .                  : _M_cur(__x._M_cur), _M_first(__x._M_first),
1,166 ( 0.04%) 848 ( 0.12%) 212 ( 0.08%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	 _M_last(__x._M_last), _M_node(__x._M_node) { }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 _Deque_iterator& operator=(const _Deque_iterator&) = default;
    .            .            .           .          .          .          .          .          .           #endif
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 iterator
    .            .            .           .          .          .          .          .          .                 _M_const_cast() const _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 { return iterator(_M_cur, _M_node); }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 reference
   32 ( 0.00%)   0           16 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 operator*() const _GLIBCXX_NOEXCEPT
   32 ( 0.00%)  32 ( 0.00%)   .           .          .          .          .          .          .                 { return *_M_cur; }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 pointer
    .            .            .           .          .          .          .          .          .                 operator->() const _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 { return _M_cur; }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 _Self&
    .            .            .           .          .          .          .          .          .                 operator++() _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 {
-- line 189 ----------------------------------------
-- line 200 ----------------------------------------
    .            .            .           .          .          .          .          .          .                 operator++(int) _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 {
    .            .            .           .          .          .          .          .          .           	_Self __tmp = *this;
    .            .            .           .          .          .          .          .          .           	++*this;
    .            .            .           .          .          .          .          .          .           	return __tmp;
    .            .            .           .          .          .          .          .          .                 }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 _Self&
   20 ( 0.00%)   0            8 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 operator--() _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 {
   24 ( 0.00%)  16 ( 0.00%)   .           .          .          .          .          .          .           	if (_M_cur == _M_first)
    .            .            .           .          .          .          .          .          .           	  {
    .            .            .           .          .          .          .          .          .           	    _M_set_node(_M_node - 1);
    .            .            .           .          .          .          .          .          .           	    _M_cur = _M_last;
    .            .            .           .          .          .          .          .          .           	  }
   20 ( 0.00%)  12 ( 0.00%)   4 ( 0.00%)  .          .          .          .          .          .           	--_M_cur;
    4 ( 0.00%)   4 ( 0.00%)   .           .          .          .          .          .          .           	return *this;
    8 ( 0.00%)   8 ( 0.00%)   .           .          .          .          .          .          .                 }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 _Self
    .            .            .           .          .          .          .          .          .                 operator--(int) _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 {
    .            .            .           .          .          .          .          .          .           	_Self __tmp = *this;
    .            .            .           .          .          .          .          .          .           	--*this;
    .            .            .           .          .          .          .          .          .           	return __tmp;
    .            .            .           .          .          .          .          .          .                 }
-- line 225 ----------------------------------------
-- line 252 ----------------------------------------
    .            .            .           .          .          .          .          .          .                 { return *(*this + __n); }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 /**
    .            .            .           .          .          .          .          .          .                  *  Prepares to traverse new_node.  Sets everything except
    .            .            .           .          .          .          .          .          .                  *  _M_cur, which should therefore be set by the caller
    .            .            .           .          .          .          .          .          .                  *  immediately afterwards, based on _M_first and _M_last.
    .            .            .           .          .          .          .          .          .                  */
    .            .            .           .          .          .          .          .          .                 void
  196 ( 0.01%)   0          112 ( 0.04%)  .          .          .          .          .          .                 _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 {
   84 ( 0.00%)  56 ( 0.01%)  28 ( 0.01%)  .          .          .          .          .          .           	_M_node = __new_node;
  112 ( 0.00%)  84 ( 0.01%)  28 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	_M_first = *__new_node;
  196 ( 0.01%)  84 ( 0.01%)  56 ( 0.02%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	_M_last = _M_first + difference_type(_S_buffer_size());
  494 ( 0.02%) 156 ( 0.02%) 104 ( 0.04%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>::_S_buffer_size() (26x)
  112 ( 0.00%)  84 ( 0.01%)   .           .          .          .          .          .          .                 }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 friend bool
  190 ( 0.01%)   0          114 ( 0.04%)  4 ( 0.07%) 0          0          1 ( 0.03%) .          .                 operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
  304 ( 0.01%) 228 ( 0.03%)   0           1 ( 0.02%) 4 ( 0.03%) 0          1 ( 0.03%) .          .                 { return __x._M_cur == __y._M_cur; }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 // Note: we also provide overloads whose operands are of the same type in
    .            .            .           .          .          .          .          .          .                 // order to avoid ambiguous overload resolution when std::rel_ops
    .            .            .           .          .          .          .          .          .                 // operators are in scope (for additional details, see libstdc++/3628)
    .            .            .           .          .          .          .          .          .                 template<typename _RefR, typename _PtrR>
    .            .            .           .          .          .          .          .          .           	friend bool
    .            .            .           .          .          .          .          .          .           	operator==(const _Self& __x,
    .            .            .           .          .          .          .          .          .           		   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
-- line 277 ----------------------------------------
-- line 345 ----------------------------------------
    .            .            .           .          .          .          .          .          .           	friend bool
    .            .            .           .          .          .          .          .          .           	operator>=(const _Self& __x,
    .            .            .           .          .          .          .          .          .           		   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
    .            .            .           .          .          .          .          .          .           	_GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .           	{ return !(__x < __y); }
    .            .            .           .          .          .          .          .          .           #endif // three-way comparison
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 friend difference_type
   72 ( 0.00%)   0           36 ( 0.01%)  2 ( 0.03%) 0          0          1 ( 0.03%) .          .                 operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 {
   24 ( 0.00%)   0           12 ( 0.00%)  .          .          .          .          .          .           	return difference_type(_S_buffer_size())
  228 ( 0.01%)  72 ( 0.01%)  48 ( 0.02%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>::_S_buffer_size() (12x)
  204 ( 0.01%)  72 ( 0.01%)   0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	  * (__x._M_node - __y._M_node - bool(__x._M_node))
   96 ( 0.00%)  48 ( 0.01%)   .           .          .          .          .          .          .           	  + (__x._M_cur - __x._M_first)
   96 ( 0.00%)  48 ( 0.01%)   .           .          .          .          .          .          .           	  + (__y._M_last - __y._M_cur);
   24 ( 0.00%)  24 ( 0.00%)   .           .          .          .          .          .          .                 }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
    .            .            .           .          .          .          .          .          .                 // According to the resolution of DR179 not only the various comparison
    .            .            .           .          .          .          .          .          .                 // operators but also operator- must accept mixed iterator/const_iterator
    .            .            .           .          .          .          .          .          .                 // parameters.
    .            .            .           .          .          .          .          .          .                 template<typename _RefR, typename _PtrR>
    .            .            .           .          .          .          .          .          .           	friend difference_type
    .            .            .           .          .          .          .          .          .           	operator-(const _Self& __x,
-- line 367 ----------------------------------------
-- line 429 ----------------------------------------
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 allocator_type
    .            .            .           .          .          .          .          .          .                 get_allocator() const _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 { return allocator_type(_M_get_Tp_allocator()); }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 typedef _Deque_iterator<_Tp, _Tp&, _Ptr>	  iterator;
    .            .            .           .          .          .          .          .          .                 typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;
    .            .            .           .          .          .          .          .          .           
   84 ( 0.00%)   0           42 ( 0.02%)  4 ( 0.07%) 0          0          4 ( 0.12%) .          .                 _Deque_base()
   42 ( 0.00%)  14 ( 0.00%)  14 ( 0.01%)  .          .          .          .          .          .                 : _M_impl()
1,066 ( 0.04%) 351 ( 0.05%) 351 ( 0.13%)  7 ( 0.12%) 0          0          6 ( 0.19%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl::_Deque_impl() (13x)
  112 ( 0.00%)  56 ( 0.01%)  14 ( 0.01%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .                 { _M_initialize_map(0); }
9,615 ( 0.34%) 2,679 ( 0.39%) 2,057 ( 0.73%) 68 ( 1.15%) 3 ( 0.02%) 16 ( 0.53%) 29 ( 0.90%) 0          15 ( 0.63%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_initialize_map(unsigned long) (13x)
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 _Deque_base(size_t __num_elements)
    .            .            .           .          .          .          .          .          .                 : _M_impl()
    .            .            .           .          .          .          .          .          .                 { _M_initialize_map(__num_elements); }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 _Deque_base(const allocator_type& __a, size_t __num_elements)
    .            .            .           .          .          .          .          .          .                 : _M_impl(__a)
    .            .            .           .          .          .          .          .          .                 { _M_initialize_map(__num_elements); }
-- line 447 ----------------------------------------
-- line 487 ----------------------------------------
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 struct _Deque_impl_data
    .            .            .           .          .          .          .          .          .                 {
    .            .            .           .          .          .          .          .          .           	_Map_pointer _M_map;
    .            .            .           .          .          .          .          .          .           	size_t _M_map_size;
    .            .            .           .          .          .          .          .          .           	iterator _M_start;
    .            .            .           .          .          .          .          .          .           	iterator _M_finish;
    .            .            .           .          .          .          .          .          .           
  100 ( 0.00%)   0           40 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	_Deque_impl_data() _GLIBCXX_NOEXCEPT
  240 ( 0.01%)  80 ( 0.01%)  80 ( 0.03%)  3 ( 0.05%) 0          0          2 ( 0.06%) .          .           	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   30 ( 0.00%)  12 ( 0.00%)  12 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::unique_ptr<std::thread, std::default_delete<std::thread> >&, std::unique_ptr<std::thread, std::default_delete<std::thread> >*>::_Deque_iterator() (2x)
   60 ( 0.00%)  40 ( 0.01%)   .           .          .          .          .          .          .           	{ }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .           #if __cplusplus >= 201103L
  186 ( 0.01%)  72 ( 0.01%)  42 ( 0.02%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	_Deque_impl_data(const _Deque_impl_data&) = default;
  288 ( 0.01%) 168 ( 0.02%)  84 ( 0.03%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>::_Deque_iterator(std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*> const&) (12x)
    .            .            .           .          .          .          .          .          .           	_Deque_impl_data&
    .            .            .           .          .          .          .          .          .           	operator=(const _Deque_impl_data&) = default;
    .            .            .           .          .          .          .          .          .           
   60 ( 0.00%)   6 ( 0.00%)  30 ( 0.01%)  7 ( 0.12%) 0          0          2 ( 0.06%) .          .           	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
   30 ( 0.00%)  12 ( 0.00%)   6 ( 0.00%)  .          .          .          .          .          .           	: _Deque_impl_data(__x)
  474 ( 0.02%) 240 ( 0.03%) 126 ( 0.05%)  3 ( 0.05%) 0          0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data::_Deque_impl_data(std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data const&) (6x)
  186 ( 0.01%)  96 ( 0.01%)  66 ( 0.02%)  7 ( 0.12%) 0          0          2 ( 0.06%) .          .           	{ __x = _Deque_impl_data(); }
  300 ( 0.01%) 108 ( 0.02%) 108 ( 0.04%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data::_Deque_impl_data() (6x)
    .            .            .           .          .          .          .          .          .           #endif
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .           	void
   36 ( 0.00%)   0           18 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .           	{
    .            .            .           .          .          .          .          .          .           	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
    .            .            .           .          .          .          .          .          .           	  // information used by TBAA.
   30 ( 0.00%)  12 ( 0.00%)   6 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	  std::swap(*this, __x);
1,614 ( 0.06%) 696 ( 0.10%) 546 ( 0.20%) 41 ( 0.69%) 0          0          13 ( 0.40%) .          .           => /usr/include/c++/11/bits/move.h:std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data> >, std::is_move_constructible<std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data>, std::is_move_assignable<std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data> >::value, void>::type std::swap<std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data>(std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data&, std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data&) (6x)
   18 ( 0.00%)  12 ( 0.00%)   .           .          .          .          .          .          .           	}
    .            .            .           .          .          .          .          .          .                 };
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 // This struct encapsulates the implementation of the std::deque
    .            .            .           .          .          .          .          .          .                 // standard container and at the same time makes use of the EBO
    .            .            .           .          .          .          .          .          .                 // for empty allocators.
  154 ( 0.01%)  42 ( 0.01%)  42 ( 0.02%)  1 ( 0.02%) .          .          .          .          .                 struct _Deque_impl
  234 ( 0.01%)  65 ( 0.01%)  65 ( 0.02%) 12 ( 0.20%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<std::weak_ptr<Graph> >::~allocator() (13x)
    .            .            .           .          .          .          .          .          .                 : public _Tp_alloc_type, public _Deque_impl_data
    .            .            .           .          .          .          .          .          .                 {
   70 ( 0.00%)   0           28 ( 0.01%)  3 ( 0.05%) 0          0          3 ( 0.09%) .          .           	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
    .            .            .           .          .          .          .          .          .           	  is_nothrow_default_constructible<_Tp_alloc_type>::value)
   84 ( 0.00%)  28 ( 0.00%)  28 ( 0.01%)  .          .          .          .          .          .           	: _Tp_alloc_type()
  650 ( 0.02%) 234 ( 0.03%) 234 ( 0.08%)  5 ( 0.08%) 0          0          4 ( 0.12%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data::_Deque_impl_data() (13x)
  234 ( 0.01%)  65 ( 0.01%)  65 ( 0.02%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<std::weak_ptr<Graph> >::allocator() (13x)
   42 ( 0.00%)  28 ( 0.00%)   .           .          .          .          .          .          .           	{ }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .           	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .           	: _Tp_alloc_type(__a)
    .            .            .           .          .          .          .          .          .           	{ }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .           #if __cplusplus >= 201103L
    .            .            .           .          .          .          .          .          .           	_Deque_impl(_Deque_impl&&) = default;
    .            .            .           .          .          .          .          .          .           
-- line 535 ----------------------------------------
-- line 539 ----------------------------------------
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .           	_Deque_impl(_Deque_impl&& __d, _Tp_alloc_type&& __a)
    .            .            .           .          .          .          .          .          .           	: _Tp_alloc_type(std::move(__a)), _Deque_impl_data(std::move(__d))
    .            .            .           .          .          .          .          .          .           	{ }
    .            .            .           .          .          .          .          .          .           #endif
    .            .            .           .          .          .          .          .          .                 };
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 _Tp_alloc_type&
  224 ( 0.01%)   0          112 ( 0.04%)  3 ( 0.05%) 0          0          1 ( 0.03%) .          .                 _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
  168 ( 0.01%) 168 ( 0.02%)   .           .          .          .          .          .          .                 { return this->_M_impl; }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 const _Tp_alloc_type&
  112 ( 0.00%)   0           56 ( 0.02%) 10 ( 0.17%) 0          0          2 ( 0.06%) .          .                 _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   84 ( 0.00%)  84 ( 0.01%)   .           .          .          .          .          .          .                 { return this->_M_impl; }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 _Map_alloc_type
  168 ( 0.01%)   0           84 ( 0.03%)  7 ( 0.12%) 0          0          2 ( 0.06%) .          .                 _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
  308 ( 0.01%) 140 ( 0.02%)  56 ( 0.02%)  4 ( 0.07%) 0          0          2 ( 0.06%) .          .                 { return _Map_alloc_type(_M_get_Tp_allocator()); }
   38 ( 0.00%)  10 ( 0.00%)  12 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> >*>::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > >(std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > const&) (2x)
   14 ( 0.00%)   6 ( 0.00%)   4 ( 0.00%)  2 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::_M_get_Tp_allocator() const (2x)
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 _Ptr
   70 ( 0.00%)   0           28 ( 0.01%)  .          .          .          .          .          .                 _M_allocate_node()
    .            .            .           .          .          .          .          .          .                 {
    .            .            .           .          .          .          .          .          .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
   98 ( 0.00%)  14 ( 0.00%)  28 ( 0.01%)  .          .          .          .          .          .           	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
2,391 ( 0.08%) 507 ( 0.07%) 424 ( 0.15%)  8 ( 0.14%) 2 ( 0.02%) 8 ( 0.26%) 5 ( 0.15%) 0          7 ( 0.29%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::weak_ptr<Graph> > >::allocate(std::allocator<std::weak_ptr<Graph> >&, unsigned long) (13x)
  156 ( 0.01%)  52 ( 0.01%)  26 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long) (13x)
   28 ( 0.00%)  28 ( 0.00%)   .           .          .          .          .          .          .                 }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 void
   84 ( 0.00%)   0           42 ( 0.02%)  2 ( 0.03%) .          .          .          .          .                 _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 {
    .            .            .           .          .          .          .          .          .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
  112 ( 0.00%)  28 ( 0.00%)  28 ( 0.01%)  1 ( 0.02%) .          .          .          .          .           	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
  130 ( 0.00%)  40 ( 0.01%)  25 ( 0.01%)  2 ( 0.03%) .          .          .          .          .           => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::deallocate(std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > >&, std::unique_ptr<std::thread, std::default_delete<std::thread> >*, unsigned long) (1x)
   12 ( 0.00%)   4 ( 0.00%)   2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long) (1x)
   42 ( 0.00%)  28 ( 0.00%)   .           .          .          .          .          .          .                 }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 _Map_pointer
  140 ( 0.00%)  14 ( 0.00%)  70 ( 0.03%)  3 ( 0.05%) 0          0          2 ( 0.06%) .          .                 _M_allocate_map(size_t __n)
    .            .            .           .          .          .          .          .          .                 {
   70 ( 0.00%)  14 ( 0.00%)  14 ( 0.01%)  .          .          .          .          .          .           	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  559 ( 0.02%) 169 ( 0.02%) 169 ( 0.06%) 22 ( 0.37%) 0          0          5 ( 0.15%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_get_map_allocator() const (13x)
  112 ( 0.00%)  14 ( 0.00%)  14 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	return _Map_alloc_traits::allocate(__map_alloc, __n);
2,440 ( 0.09%) 521 ( 0.08%) 424 ( 0.15%) 13 ( 0.22%) 1 ( 0.01%) 7 ( 0.23%) 2 ( 0.06%) 0          7 ( 0.29%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::weak_ptr<Graph>*> >::allocate(std::allocator<std::weak_ptr<Graph>*>&, unsigned long) (13x)
  126 ( 0.00%)  70 ( 0.01%)  14 ( 0.01%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .                 }
  234 ( 0.01%)  65 ( 0.01%)  65 ( 0.02%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<std::weak_ptr<Graph>*>::~allocator() (13x)
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 void
  140 ( 0.00%)  14 ( 0.00%)  70 ( 0.03%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 {
   70 ( 0.00%)  14 ( 0.00%)  14 ( 0.01%)  2 ( 0.03%) 0          0          1 ( 0.03%) .          .           	_Map_alloc_type __map_alloc = _M_get_map_allocator();
   43 ( 0.00%)  13 ( 0.00%)  13 ( 0.00%)  2 ( 0.03%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::_M_get_map_allocator() const (1x)
   84 ( 0.00%)  28 ( 0.00%)  14 ( 0.01%)  .          .          .          .          .          .           	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
  158 ( 0.01%)  45 ( 0.01%)  24 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> >*> >::deallocate(std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> >*>&, std::unique_ptr<std::thread, std::default_delete<std::thread> >**, unsigned long) (1x)
  112 ( 0.00%)  56 ( 0.01%)  14 ( 0.01%)  .          .          .          .          .          .                 }
   18 ( 0.00%)   5 ( 0.00%)   5 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> >*>::~allocator() (1x)
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 void _M_initialize_map(size_t);
    .            .            .           .          .          .          .          .          .                 void _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish);
    .            .            .           .          .          .          .          .          .                 void _M_destroy_nodes(_Map_pointer __nstart,
    .            .            .           .          .          .          .          .          .           			    _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT;
    .            .            .           .          .          .          .          .          .                 enum { _S_initial_map_size = 8 };
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 _Deque_impl _M_impl;
    .            .            .           .          .          .          .          .          .               };
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .             template<typename _Tp, typename _Alloc>
   70 ( 0.00%)   0           28 ( 0.01%)  1 ( 0.02%) .          .          .          .          .               _Deque_base<_Tp, _Alloc>::
    .            .            .           .          .          .          .          .          .               ~_Deque_base() _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .               {
   56 ( 0.00%)  28 ( 0.00%)   .           .          .          .          .          .          .                 if (this->_M_impl._M_map)
    .            .            .           .          .          .          .          .          .           	{
   98 ( 0.00%)  42 ( 0.01%)  14 ( 0.01%)  .          .          .          .          .          .           	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
3,894 ( 0.14%) 1,239 ( 0.18%) 738 ( 0.26%) 41 ( 0.69%) 28 ( 0.21%) 12 ( 0.40%) 17 ( 0.53%) 7 ( 0.08%) 9 ( 0.38%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_destroy_nodes(std::weak_ptr<Graph>**, std::weak_ptr<Graph>**) (13x)
   28 ( 0.00%)  28 ( 0.00%)   .           .          .          .          .          .          .           			   this->_M_impl._M_finish._M_node + 1);
  112 ( 0.00%)  70 ( 0.01%)  14 ( 0.01%)  .          .          .          .          .          .           	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
2,890 ( 0.10%) 863 ( 0.12%) 662 ( 0.24%) 25 ( 0.42%) 2 ( 0.02%) 0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_deallocate_map(std::weak_ptr<Graph>**, unsigned long) (13x)
    .            .            .           .          .          .          .          .          .           	}
   84 ( 0.00%)  42 ( 0.01%)  14 ( 0.01%)  .          .          .          .          .          .               }
  377 ( 0.01%) 104 ( 0.02%) 104 ( 0.04%) 12 ( 0.20%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl::~_Deque_impl() (13x)
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .             /**
    .            .            .           .          .          .          .          .          .              *  @brief Layout storage.
    .            .            .           .          .          .          .          .          .              *  @param  __num_elements  The count of T's for which to allocate space
    .            .            .           .          .          .          .          .          .              *                          at first.
    .            .            .           .          .          .          .          .          .              *  @return   Nothing.
    .            .            .           .          .          .          .          .          .              *
    .            .            .           .          .          .          .          .          .              *  The initial underlying memory layout is a bit complicated...
    .            .            .           .          .          .          .          .          .             */
    .            .            .           .          .          .          .          .          .             template<typename _Tp, typename _Alloc>
    .            .            .           .          .          .          .          .          .               void
  140 ( 0.00%)  14 ( 0.00%)  70 ( 0.03%)  3 ( 0.05%) 0          0          2 ( 0.06%) .          .               _Deque_base<_Tp, _Alloc>::
    .            .            .           .          .          .          .          .          .               _M_initialize_map(size_t __num_elements)
    .            .            .           .          .          .          .          .          .               {
  112 ( 0.00%)  14 ( 0.00%)  28 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
  156 ( 0.01%)  52 ( 0.01%)  26 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long) (13x)
    .            .            .           .          .          .          .          .          .           				  + 1);
    .            .            .           .          .          .          .          .          .           
  126 ( 0.00%)  28 ( 0.00%)  42 ( 0.02%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .                 this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
  182 ( 0.01%)  91 ( 0.01%)  39 ( 0.01%)  8 ( 0.14%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) (13x)
   42 ( 0.00%)  14 ( 0.00%)  14 ( 0.01%)  .          .          .          .          .          .           					   size_t(__num_nodes + 2));
  112 ( 0.00%)  56 ( 0.01%)  28 ( 0.01%)  .          .          .          .          .          .                 this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
3,649 ( 0.13%) 859 ( 0.12%) 762 ( 0.27%) 39 ( 0.66%) 1 ( 0.01%) 7 ( 0.23%) 10 ( 0.31%) 0          7 ( 0.29%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_allocate_map(unsigned long) (13x)
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 // For "small" maps (needing less than _M_map_size nodes), allocation
    .            .            .           .          .          .          .          .          .                 // starts in the middle elements and grows outwards.  So nstart may be
    .            .            .           .          .          .          .          .          .                 // the beginning of _M_map, but for small maps it may be as far in as
    .            .            .           .          .          .          .          .          .                 // _M_map+3.
    .            .            .           .          .          .          .          .          .           
   56 ( 0.00%)  28 ( 0.00%)  14 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 _Map_pointer __nstart = (this->_M_impl._M_map
   70 ( 0.00%)  42 ( 0.01%)   0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .           			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   70 ( 0.00%)  28 ( 0.00%)  14 ( 0.01%)  .          .          .          .          .          .                 _Map_pointer __nfinish = __nstart + __num_nodes;
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 __try
   84 ( 0.00%)  42 ( 0.01%)  14 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	{ _M_create_nodes(__nstart, __nfinish); }
3,080 ( 0.11%) 728 ( 0.11%) 619 ( 0.22%) 10 ( 0.17%) 2 ( 0.02%) 9 ( 0.30%) 7 ( 0.22%) 0          8 ( 0.33%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_create_nodes(std::weak_ptr<Graph>**, std::weak_ptr<Graph>**) (13x)
    .            .            .           .          .          .          .          .          .                 __catch(...)
    .            .            .           .          .          .          .          .          .           	{
    .            .            .           .          .          .          .          .          .           	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
    .            .            .           .          .          .          .          .          .           	  this->_M_impl._M_map = _Map_pointer();
    .            .            .           .          .          .          .          .          .           	  this->_M_impl._M_map_size = 0;
    .            .            .           .          .          .          .          .          .           	  __throw_exception_again;
    .            .            .           .          .          .          .          .          .           	}
    .            .            .           .          .          .          .          .          .           
   84 ( 0.00%)  28 ( 0.00%)  14 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 this->_M_impl._M_start._M_set_node(__nstart);
  572 ( 0.02%) 221 ( 0.03%) 156 ( 0.06%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>::_M_set_node(std::weak_ptr<Graph>**) (13x)
   98 ( 0.00%)  28 ( 0.00%)  14 ( 0.01%)  .          .          .          .          .          .                 this->_M_impl._M_finish._M_set_node(__nfinish - 1);
  572 ( 0.02%) 221 ( 0.03%) 156 ( 0.06%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>::_M_set_node(std::weak_ptr<Graph>**) (13x)
   56 ( 0.00%)  42 ( 0.01%)  14 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   56 ( 0.00%)  42 ( 0.01%)  14 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   28 ( 0.00%)   .            .           .          .          .          .          .          .           					+ __num_elements
  112 ( 0.00%)  14 ( 0.00%)  14 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           					% __deque_buf_size(sizeof(_Tp)));
  156 ( 0.01%)  52 ( 0.01%)  26 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long) (13x)
   98 ( 0.00%)  70 ( 0.01%)   0           2 ( 0.03%) 0          0          2 ( 0.06%) .          .               }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .             template<typename _Tp, typename _Alloc>
    .            .            .           .          .          .          .          .          .               void
  112 ( 0.00%)   0           70 ( 0.03%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .               _Deque_base<_Tp, _Alloc>::
    .            .            .           .          .          .          .          .          .               _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
    .            .            .           .          .          .          .          .          .               {
    .            .            .           .          .          .          .          .          .                 _Map_pointer __cur;
    .            .            .           .          .          .          .          .          .                 __try
    .            .            .           .          .          .          .          .          .           	{
  140 ( 0.00%)  70 ( 0.01%)  28 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
   70 ( 0.00%)  28 ( 0.00%)  28 ( 0.01%)  0          0          1 ( 0.03%) 0          0          1 ( 0.04%)  	    *__cur = this->_M_allocate_node();
2,729 ( 0.10%) 598 ( 0.09%) 502 ( 0.18%)  8 ( 0.14%) 2 ( 0.02%) 8 ( 0.26%) 5 ( 0.15%) 0          7 ( 0.29%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_allocate_node() (13x)
    .            .            .           .          .          .          .          .          .           	}
    .            .            .           .          .          .          .          .          .                 __catch(...)
    .            .            .           .          .          .          .          .          .           	{
    .            .            .           .          .          .          .          .          .           	  _M_destroy_nodes(__nstart, __cur);
    .            .            .           .          .          .          .          .          .           	  __throw_exception_again;
    .            .            .           .          .          .          .          .          .           	}
   56 ( 0.00%)  42 ( 0.01%)   0           3 ( 0.05%) 0          0          3 ( 0.09%) .          .               }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .             template<typename _Tp, typename _Alloc>
    .            .            .           .          .          .          .          .          .               void
  140 ( 0.00%)   0           80 ( 0.03%)  5 ( 0.08%) 0          0          2 ( 0.06%) .          .               _Deque_base<_Tp, _Alloc>::
    .            .            .           .          .          .          .          .          .               _M_destroy_nodes(_Map_pointer __nstart,
    .            .            .           .          .          .          .          .          .           		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .               {
  176 ( 0.01%)  88 ( 0.01%)  34 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   84 ( 0.00%)  42 ( 0.01%)  14 ( 0.01%)  0          3 ( 0.02%) .          .          .          .           	_M_deallocate_node(*__n);
  159 ( 0.01%)  48 ( 0.01%)  32 ( 0.01%)  3 ( 0.05%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::_M_deallocate_node(std::unique_ptr<std::thread, std::default_delete<std::thread> >*) (1x)
   80 ( 0.00%)  40 ( 0.01%)   .           .          .          .          .          .          .               }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .             /**
    .            .            .           .          .          .          .          .          .              *  @brief  A standard container using fixed-size memory allocation and
    .            .            .           .          .          .          .          .          .              *  constant-time manipulation of elements at either end.
    .            .            .           .          .          .          .          .          .              *
    .            .            .           .          .          .          .          .          .              *  @ingroup sequences
    .            .            .           .          .          .          .          .          .              *
    .            .            .           .          .          .          .          .          .              *  @tparam _Tp  Type of element.
-- line 688 ----------------------------------------
-- line 826 ----------------------------------------
    .            .            .           .          .          .          .          .          .               public:
    .            .            .           .          .          .          .          .          .                 // [23.2.1.1] construct/copy/destroy
    .            .            .           .          .          .          .          .          .                 // (assign() and get_allocator() are also listed in this section)
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 /**
    .            .            .           .          .          .          .          .          .                  *  @brief  Creates a %deque with no elements.
    .            .            .           .          .          .          .          .          .                  */
    .            .            .           .          .          .          .          .          .           #if __cplusplus >= 201103L
  154 ( 0.01%)  42 ( 0.01%)  42 ( 0.02%)  .          .          .          .          .          .                 deque() = default;
10,902 ( 0.39%) 3,095 ( 0.45%) 2,473 ( 0.88%) 78 ( 1.32%) 3 ( 0.02%) 16 ( 0.53%) 38 ( 1.17%) 0          15 ( 0.63%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_base() (13x)
    .            .            .           .          .          .          .          .          .           #else
    .            .            .           .          .          .          .          .          .                 deque() { }
    .            .            .           .          .          .          .          .          .           #endif
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 /**
    .            .            .           .          .          .          .          .          .                  *  @brief  Creates a %deque with no elements.
    .            .            .           .          .          .          .          .          .                  *  @param  __a  An allocator object.
    .            .            .           .          .          .          .          .          .                  */
-- line 842 ----------------------------------------
-- line 998 ----------------------------------------
    .            .            .           .          .          .          .          .          .           	}
    .            .            .           .          .          .          .          .          .           #endif
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 /**
    .            .            .           .          .          .          .          .          .                  *  The dtor only erases the elements, and note that if the elements
    .            .            .           .          .          .          .          .          .                  *  themselves are pointers, the pointed-to memory is not touched in any
    .            .            .           .          .          .          .          .          .                  *  way.  Managing the pointer is the user's responsibility.
    .            .            .           .          .          .          .          .          .                  */
  126 ( 0.00%)  14 ( 0.00%)  56 ( 0.02%)  2 ( 0.03%) 0          0          1 ( 0.03%) .          .                 ~deque()
  420 ( 0.01%) 140 ( 0.02%)  70 ( 0.03%)  3 ( 0.05%) 0          0          1 ( 0.03%) .          .                 { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
7,577 ( 0.27%) 2,401 ( 0.35%) 1,569 ( 0.56%) 78 ( 1.32%) 30 ( 0.23%) 12 ( 0.40%) 21 ( 0.65%) 7 ( 0.08%) 9 ( 0.38%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::~_Deque_base() (13x)
2,236 ( 0.08%) 897 ( 0.13%) 598 ( 0.21%)  9 ( 0.15%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_destroy_data(std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>, std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>, std::allocator<std::weak_ptr<Graph> > const&) (13x)
  507 ( 0.02%) 247 ( 0.04%) 143 ( 0.05%)  1 ( 0.02%) 1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::end() (13x)
  507 ( 0.02%) 247 ( 0.04%) 143 ( 0.05%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::begin() (13x)
   91 ( 0.00%)  39 ( 0.01%)  26 ( 0.01%)  1 ( 0.02%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_get_Tp_allocator() (13x)
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 /**
    .            .            .           .          .          .          .          .          .                  *  @brief  %Deque assignment operator.
    .            .            .           .          .          .          .          .          .                  *  @param  __x  A %deque of identical element and allocator types.
    .            .            .           .          .          .          .          .          .                  *
    .            .            .           .          .          .          .          .          .                  *  All the elements of @a x are copied.
    .            .            .           .          .          .          .          .          .                  *
    .            .            .           .          .          .          .          .          .                  *  The newly-created %deque uses a copy of the allocator object used
-- line 1015 ----------------------------------------
-- line 1023 ----------------------------------------
    .            .            .           .          .          .          .          .          .                  *  @brief  %Deque move assignment operator.
    .            .            .           .          .          .          .          .          .                  *  @param  __x  A %deque of identical element and allocator types.
    .            .            .           .          .          .          .          .          .                  *
    .            .            .           .          .          .          .          .          .                  *  The contents of @a __x are moved into this deque (without copying,
    .            .            .           .          .          .          .          .          .                  *  if the allocators permit it).
    .            .            .           .          .          .          .          .          .                  *  @a __x is a valid, but unspecified %deque.
    .            .            .           .          .          .          .          .          .                  */
    .            .            .           .          .          .          .          .          .                 deque&
   36 ( 0.00%)   0           18 ( 0.01%)  .          .          .          .          .          .                 operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
    .            .            .           .          .          .          .          .          .                 {
    .            .            .           .          .          .          .          .          .           	using __always_equal = typename _Alloc_traits::is_always_equal;
   48 ( 0.00%)  12 ( 0.00%)  12 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	_M_move_assign1(std::move(__x), __always_equal{});
4,344 ( 0.15%) 1,782 ( 0.26%) 1,290 ( 0.46%) 77 ( 1.30%) 0          0          34 ( 1.05%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_move_assign1(std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >&&, std::integral_constant<bool, true>) (6x)
   42 ( 0.00%)  18 ( 0.00%)  12 ( 0.00%)  6 ( 0.10%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >&>::type&& std::move<std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >&>(std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >&) (6x)
    6 ( 0.00%)   6 ( 0.00%)   .           .          .          .          .          .          .           	return *this;
   12 ( 0.00%)  12 ( 0.00%)   .           .          .          .          .          .          .                 }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 /**
    .            .            .           .          .          .          .          .          .                  *  @brief  Assigns an initializer list to a %deque.
    .            .            .           .          .          .          .          .          .                  *  @param  __l  An initializer_list.
    .            .            .           .          .          .          .          .          .                  *
    .            .            .           .          .          .          .          .          .                  *  This function fills a %deque with copies of the elements in the
    .            .            .           .          .          .          .          .          .                  *  initializer_list @a __l.
    .            .            .           .          .          .          .          .          .                  *
-- line 1044 ----------------------------------------
-- line 1120 ----------------------------------------
    .            .            .           .          .          .          .          .          .                 { return _Base::get_allocator(); }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 // iterators
    .            .            .           .          .          .          .          .          .                 /**
    .            .            .           .          .          .          .          .          .                  *  Returns a read/write iterator that points to the first element in the
    .            .            .           .          .          .          .          .          .                  *  %deque.  Iteration is done in ordinary element order.
    .            .            .           .          .          .          .          .          .                  */
    .            .            .           .          .          .          .          .          .                 iterator
  144 ( 0.01%)   0           72 ( 0.03%)  3 ( 0.05%) 0          0          3 ( 0.09%) .          .                 begin() _GLIBCXX_NOEXCEPT
  216 ( 0.01%) 120 ( 0.02%)  24 ( 0.01%)  .          .          .          .          .          .                 { return this->_M_impl._M_start; }
  456 ( 0.02%) 266 ( 0.04%) 133 ( 0.05%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>::_Deque_iterator(std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*> const&) (19x)
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 /**
    .            .            .           .          .          .          .          .          .                  *  Returns a read-only (constant) iterator that points to the first
    .            .            .           .          .          .          .          .          .                  *  element in the %deque.  Iteration is done in ordinary element order.
    .            .            .           .          .          .          .          .          .                  */
    .            .            .           .          .          .          .          .          .                 const_iterator
    .            .            .           .          .          .          .          .          .                 begin() const _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 { return this->_M_impl._M_start; }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 /**
    .            .            .           .          .          .          .          .          .                  *  Returns a read/write iterator that points one past the last
    .            .            .           .          .          .          .          .          .                  *  element in the %deque.  Iteration is done in ordinary
    .            .            .           .          .          .          .          .          .                  *  element order.
    .            .            .           .          .          .          .          .          .                  */
    .            .            .           .          .          .          .          .          .                 iterator
  144 ( 0.01%)   0           72 ( 0.03%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 end() _GLIBCXX_NOEXCEPT
  216 ( 0.01%) 120 ( 0.02%)  24 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 { return this->_M_impl._M_finish; }
  120 ( 0.00%)  70 ( 0.01%)  35 ( 0.01%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::unique_ptr<std::thread, std::default_delete<std::thread> >&, std::unique_ptr<std::thread, std::default_delete<std::thread> >*>::_Deque_iterator(std::_Deque_iterator<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::unique_ptr<std::thread, std::default_delete<std::thread> >&, std::unique_ptr<std::thread, std::default_delete<std::thread> >*> const&) (5x)
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 /**
    .            .            .           .          .          .          .          .          .                  *  Returns a read-only (constant) iterator that points one past
    .            .            .           .          .          .          .          .          .                  *  the last element in the %deque.  Iteration is done in
    .            .            .           .          .          .          .          .          .                  *  ordinary element order.
    .            .            .           .          .          .          .          .          .                  */
    .            .            .           .          .          .          .          .          .                 const_iterator
    .            .            .           .          .          .          .          .          .                 end() const _GLIBCXX_NOEXCEPT
-- line 1154 ----------------------------------------
-- line 1225 ----------------------------------------
    .            .            .           .          .          .          .          .          .                 const_reverse_iterator
    .            .            .           .          .          .          .          .          .                 crend() const noexcept
    .            .            .           .          .          .          .          .          .                 { return const_reverse_iterator(this->_M_impl._M_start); }
    .            .            .           .          .          .          .          .          .           #endif
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 // [23.2.1.2] capacity
    .            .            .           .          .          .          .          .          .                 /**  Returns the number of elements in the %deque.  */
    .            .            .           .          .          .          .          .          .                 size_type
   60 ( 0.00%)   0           24 ( 0.01%)  1 ( 0.02%) .          .          .          .          .                 size() const _GLIBCXX_NOEXCEPT
  108 ( 0.00%)  48 ( 0.01%)  12 ( 0.00%)  .          .          .          .          .          .                 { return this->_M_impl._M_finish - this->_M_impl._M_start; }
  744 ( 0.03%) 264 ( 0.04%)  96 ( 0.03%)  3 ( 0.05%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::operator-(std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*> const&, std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*> const&) (12x)
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 /**  Returns the size() of the largest possible %deque.  */
    .            .            .           .          .          .          .          .          .                 size_type
    .            .            .           .          .          .          .          .          .                 max_size() const _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 { return _S_max_size(_M_get_Tp_allocator()); }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .           #if __cplusplus >= 201103L
    .            .            .           .          .          .          .          .          .                 /**
-- line 1242 ----------------------------------------
-- line 1303 ----------------------------------------
    .            .            .           .          .          .          .          .          .                 { _M_shrink_to_fit(); }
    .            .            .           .          .          .          .          .          .           #endif
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 /**
    .            .            .           .          .          .          .          .          .                  *  Returns true if the %deque is empty.  (Thus begin() would
    .            .            .           .          .          .          .          .          .                  *  equal end().)
    .            .            .           .          .          .          .          .          .                  */
    .            .            .           .          .          .          .          .          .                 _GLIBCXX_NODISCARD bool
  190 ( 0.01%)   0           76 ( 0.03%)  9 ( 0.15%) 0          0          1 ( 0.03%) .          .                 empty() const _GLIBCXX_NOEXCEPT
  342 ( 0.01%) 152 ( 0.02%)  38 ( 0.01%)  4 ( 0.07%) 0          0          1 ( 0.03%) .          .                 { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   65 ( 0.00%)  30 ( 0.00%)  15 ( 0.01%)  2 ( 0.03%) 1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::operator==(std::_Deque_iterator<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::unique_ptr<std::thread, std::default_delete<std::thread> >&, std::unique_ptr<std::thread, std::default_delete<std::thread> >*> const&, std::_Deque_iterator<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::unique_ptr<std::thread, std::default_delete<std::thread> >&, std::unique_ptr<std::thread, std::default_delete<std::thread> >*> const&) (5x)
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 // element access
    .            .            .           .          .          .          .          .          .                 /**
    .            .            .           .          .          .          .          .          .                  *  @brief Subscript access to the data contained in the %deque.
    .            .            .           .          .          .          .          .          .                  *  @param __n The index of the element for which data should be
    .            .            .           .          .          .          .          .          .                  *  accessed.
    .            .            .           .          .          .          .          .          .                  *  @return  Read/write reference to data.
    .            .            .           .          .          .          .          .          .                  *
-- line 1320 ----------------------------------------
-- line 1397 ----------------------------------------
    .            .            .           .          .          .          .          .          .           	return (*this)[__n];
    .            .            .           .          .          .          .          .          .                 }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 /**
    .            .            .           .          .          .          .          .          .                  *  Returns a read/write reference to the data at the first
    .            .            .           .          .          .          .          .          .                  *  element of the %deque.
    .            .            .           .          .          .          .          .          .                  */
    .            .            .           .          .          .          .          .          .                 reference
   32 ( 0.00%)   4 ( 0.00%)  12 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 front() _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 {
    .            .            .           .          .          .          .          .          .           	__glibcxx_requires_nonempty();
   32 ( 0.00%)   4 ( 0.00%)   8 ( 0.00%)  .          .          .          .          .          .           	return *begin();
  156 ( 0.01%)  76 ( 0.01%)  44 ( 0.02%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::begin() (4x)
   32 ( 0.00%)  16 ( 0.00%)   8 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::unique_ptr<std::thread, std::default_delete<std::thread> >&, std::unique_ptr<std::thread, std::default_delete<std::thread> >*>::operator*() const (4x)
   20 ( 0.00%)  16 ( 0.00%)   0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 /**
    .            .            .           .          .          .          .          .          .                  *  Returns a read-only (constant) reference to the data at the first
    .            .            .           .          .          .          .          .          .                  *  element of the %deque.
    .            .            .           .          .          .          .          .          .                  */
    .            .            .           .          .          .          .          .          .                 const_reference
    .            .            .           .          .          .          .          .          .                 front() const _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 {
-- line 1417 ----------------------------------------
-- line 1419 ----------------------------------------
    .            .            .           .          .          .          .          .          .           	return *begin();
    .            .            .           .          .          .          .          .          .                 }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 /**
    .            .            .           .          .          .          .          .          .                  *  Returns a read/write reference to the data at the last element of the
    .            .            .           .          .          .          .          .          .                  *  %deque.
    .            .            .           .          .          .          .          .          .                  */
    .            .            .           .          .          .          .          .          .                 reference
   32 ( 0.00%)   4 ( 0.00%)  12 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 back() _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 {
    .            .            .           .          .          .          .          .          .           	__glibcxx_requires_nonempty();
   20 ( 0.00%)   4 ( 0.00%)   4 ( 0.00%)  .          .          .          .          .          .           	iterator __tmp = end();
  156 ( 0.01%)  76 ( 0.01%)  44 ( 0.02%)  4 ( 0.07%) 0          0          4 ( 0.12%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::end() (4x)
   12 ( 0.00%)   0            4 ( 0.00%)  .          .          .          .          .          .           	--__tmp;
   76 ( 0.00%)  40 ( 0.01%)  12 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::unique_ptr<std::thread, std::default_delete<std::thread> >&, std::unique_ptr<std::thread, std::default_delete<std::thread> >*>::operator--() (4x)
   12 ( 0.00%)   0            4 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	return *__tmp;
   32 ( 0.00%)  16 ( 0.00%)   8 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::unique_ptr<std::thread, std::default_delete<std::thread> >&, std::unique_ptr<std::thread, std::default_delete<std::thread> >*>::operator*() const (4x)
   20 ( 0.00%)  16 ( 0.00%)   .           .          .          .          .          .          .                 }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 /**
    .            .            .           .          .          .          .          .          .                  *  Returns a read-only (constant) reference to the data at the last
    .            .            .           .          .          .          .          .          .                  *  element of the %deque.
    .            .            .           .          .          .          .          .          .                  */
    .            .            .           .          .          .          .          .          .                 const_reference
    .            .            .           .          .          .          .          .          .                 back() const _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 {
-- line 1441 ----------------------------------------
-- line 1503 ----------------------------------------
    .            .            .           .          .          .          .          .          .           	    ++this->_M_impl._M_finish._M_cur;
    .            .            .           .          .          .          .          .          .           	  }
    .            .            .           .          .          .          .          .          .           	else
    .            .            .           .          .          .          .          .          .           	  _M_push_back_aux(__x);
    .            .            .           .          .          .          .          .          .                 }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .           #if __cplusplus >= 201103L
    .            .            .           .          .          .          .          .          .                 void
   24 ( 0.00%)   0           12 ( 0.00%)  .          .          .          .          .          .                 push_back(value_type&& __x)
   44 ( 0.00%)  16 ( 0.00%)   8 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 { emplace_back(std::move(__x)); }
1,356 ( 0.05%) 480 ( 0.07%) 384 ( 0.14%) 19 ( 0.32%) 0          0          18 ( 0.56%) .          .           => /usr/include/c++/11/bits/deque.tcc:std::unique_ptr<std::thread, std::default_delete<std::thread> >& std::deque<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::emplace_back<std::unique_ptr<std::thread, std::default_delete<std::thread> > >(std::unique_ptr<std::thread, std::default_delete<std::thread> >&&) (4x)
   28 ( 0.00%)  12 ( 0.00%)   8 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::unique_ptr<std::thread, std::default_delete<std::thread> >&>::type&& std::move<std::unique_ptr<std::thread, std::default_delete<std::thread> >&>(std::unique_ptr<std::thread, std::default_delete<std::thread> >&) (4x)
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 template<typename... _Args>
    .            .            .           .          .          .          .          .          .           #if __cplusplus > 201402L
    .            .            .           .          .          .          .          .          .           	reference
    .            .            .           .          .          .          .          .          .           #else
    .            .            .           .          .          .          .          .          .           	void
    .            .            .           .          .          .          .          .          .           #endif
    .            .            .           .          .          .          .          .          .           	emplace_back(_Args&&... __args);
-- line 1520 ----------------------------------------
-- line 1524 ----------------------------------------
    .            .            .           .          .          .          .          .          .                  *  @brief  Removes first element.
    .            .            .           .          .          .          .          .          .                  *
    .            .            .           .          .          .          .          .          .                  *  This is a typical stack operation.  It shrinks the %deque by one.
    .            .            .           .          .          .          .          .          .                  *
    .            .            .           .          .          .          .          .          .                  *  Note that no data is returned, and if the first element's data is
    .            .            .           .          .          .          .          .          .                  *  needed, it should be retrieved before pop_front() is called.
    .            .            .           .          .          .          .          .          .                  */
    .            .            .           .          .          .          .          .          .                 void
   24 ( 0.00%)   0           12 ( 0.00%)  .          .          .          .          .          .                 pop_front() _GLIBCXX_NOEXCEPT
    .            .            .           .          .          .          .          .          .                 {
    .            .            .           .          .          .          .          .          .           	__glibcxx_requires_nonempty();
   16 ( 0.00%)   8 ( 0.00%)   .           .          .          .          .          .          .           	if (this->_M_impl._M_start._M_cur
   12 ( 0.00%)   8 ( 0.00%)   .           .          .          .          .          .          .           	    != this->_M_impl._M_start._M_last - 1)
    .            .            .           .          .          .          .          .          .           	  {
   32 ( 0.00%)  12 ( 0.00%)   8 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
1,452 ( 0.05%) 439 ( 0.06%) 337 ( 0.12%) 14 ( 0.24%) 1 ( 0.01%) 0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::destroy<std::unique_ptr<std::thread, std::default_delete<std::thread> > >(std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > >&, std::unique_ptr<std::thread, std::default_delete<std::thread> >*) (4x)
   28 ( 0.00%)  12 ( 0.00%)   8 ( 0.00%)  1 ( 0.02%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::_M_get_Tp_allocator() (4x)
    .            .            .           .          .          .          .          .          .           				   this->_M_impl._M_start._M_cur);
   20 ( 0.00%)  12 ( 0.00%)   4 ( 0.00%)  .          .          .          .          .          .           	    ++this->_M_impl._M_start._M_cur;
    .            .            .           .          .          .          .          .          .           	  }
    .            .            .           .          .          .          .          .          .           	else
    .            .            .           .          .          .          .          .          .           	  _M_pop_front_aux();
   20 ( 0.00%)  12 ( 0.00%)   .           .          .          .          .          .          .                 }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 /**
    .            .            .           .          .          .          .          .          .                  *  @brief  Removes last element.
    .            .            .           .          .          .          .          .          .                  *
    .            .            .           .          .          .          .          .          .                  *  This is a typical stack operation.  It shrinks the %deque by one.
    .            .            .           .          .          .          .          .          .                  *
    .            .            .           .          .          .          .          .          .                  *  Note that no data is returned, and if the last element's data is
    .            .            .           .          .          .          .          .          .                  *  needed, it should be retrieved before pop_back() is called.
-- line 1552 ----------------------------------------
-- line 1785 ----------------------------------------
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 /**
    .            .            .           .          .          .          .          .          .                  *  Erases all the elements.  Note that this function only erases the
    .            .            .           .          .          .          .          .          .                  *  elements, and that if the elements themselves are pointers, the
    .            .            .           .          .          .          .          .          .                  *  pointed-to memory is not touched in any way.  Managing the pointer is
    .            .            .           .          .          .          .          .          .                  *  the user's responsibility.
    .            .            .           .          .          .          .          .          .                  */
    .            .            .           .          .          .          .          .          .                 void
   48 ( 0.00%)   6 ( 0.00%)  18 ( 0.01%)  .          .          .          .          .          .                 clear() _GLIBCXX_NOEXCEPT
   96 ( 0.00%)  36 ( 0.01%)  12 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 { _M_erase_at_end(begin()); }
1,896 ( 0.07%) 786 ( 0.11%) 510 ( 0.18%) 23 ( 0.39%) 0          0          12 ( 0.37%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_erase_at_end(std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>) (6x)
  234 ( 0.01%) 114 ( 0.02%)  66 ( 0.02%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::begin() (6x)
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .               protected:
    .            .            .           .          .          .          .          .          .                 // Internal constructor functions follow.
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .           #if __cplusplus < 201103L
    .            .            .           .          .          .          .          .          .                 // called by the range constructor to implement [23.1.1]/9
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
-- line 1802 ----------------------------------------
-- line 2037 ----------------------------------------
    .            .            .           .          .          .          .          .          .                 // Called by ~deque().
    .            .            .           .          .          .          .          .          .                 // NB: Doesn't deallocate the nodes.
    .            .            .           .          .          .          .          .          .                 template<typename _Alloc1>
    .            .            .           .          .          .          .          .          .           	void
    .            .            .           .          .          .          .          .          .           	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
    .            .            .           .          .          .          .          .          .           	{ _M_destroy_data_aux(__first, __last); }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 void
  220 ( 0.01%)  20 ( 0.00%) 120 ( 0.04%)  3 ( 0.05%) 0          0          2 ( 0.06%) .          .                 _M_destroy_data(iterator __first, iterator __last,
    .            .            .           .          .          .          .          .          .           		      const std::allocator<_Tp>&)
    .            .            .           .          .          .          .          .          .                 {
    .            .            .           .          .          .          .          .          .           	if (!__has_trivial_destructor(value_type))
  320 ( 0.01%)  60 ( 0.01%)  60 ( 0.02%)  6 ( 0.10%) .          .          .          .          .           	  _M_destroy_data_aux(__first, __last);
   91 ( 0.00%)  33 ( 0.00%)  23 ( 0.01%) 11 ( 0.19%) 0          0          5 ( 0.15%) .          .           => /usr/include/c++/11/bits/deque.tcc:std::deque<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::_M_destroy_data_aux(std::_Deque_iterator<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::unique_ptr<std::thread, std::default_delete<std::thread> >&, std::unique_ptr<std::thread, std::default_delete<std::thread> >*>, std::_Deque_iterator<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::unique_ptr<std::thread, std::default_delete<std::thread> >&, std::unique_ptr<std::thread, std::default_delete<std::thread> >*>) (1x)
   48 ( 0.00%)  28 ( 0.00%)  14 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::unique_ptr<std::thread, std::default_delete<std::thread> >&, std::unique_ptr<std::thread, std::default_delete<std::thread> >*>::_Deque_iterator(std::_Deque_iterator<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::unique_ptr<std::thread, std::default_delete<std::thread> >&, std::unique_ptr<std::thread, std::default_delete<std::thread> >*> const&) (2x)
  120 ( 0.00%)  80 ( 0.01%)   .           .          .          .          .          .          .                 }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 // Called by erase(q1, q2).
    .            .            .           .          .          .          .          .          .                 void
    .            .            .           .          .          .          .          .          .                 _M_erase_at_begin(iterator __pos)
    .            .            .           .          .          .          .          .          .                 {
    .            .            .           .          .          .          .          .          .           	_M_destroy_data(begin(), __pos, _M_get_Tp_allocator());
    .            .            .           .          .          .          .          .          .           	_M_destroy_nodes(this->_M_impl._M_start._M_node, __pos._M_node);
    .            .            .           .          .          .          .          .          .           	this->_M_impl._M_start = __pos;
    .            .            .           .          .          .          .          .          .                 }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 // Called by erase(q1, q2), resize(), clear(), _M_assign_aux,
    .            .            .           .          .          .          .          .          .                 // _M_fill_assign, operator=.
    .            .            .           .          .          .          .          .          .                 void
   60 ( 0.00%)   6 ( 0.00%)  30 ( 0.01%)  .          .          .          .          .          .                 _M_erase_at_end(iterator __pos)
    .            .            .           .          .          .          .          .          .                 {
  120 ( 0.00%)  24 ( 0.00%)  24 ( 0.01%) 12 ( 0.20%) 0          0          2 ( 0.06%) .          .           	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
1,032 ( 0.04%) 414 ( 0.06%) 276 ( 0.10%)  6 ( 0.10%) 0          0          6 ( 0.19%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_destroy_data(std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>, std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>, std::allocator<std::weak_ptr<Graph> > const&) (6x)
  234 ( 0.01%) 114 ( 0.02%)  66 ( 0.02%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::end() (6x)
  144 ( 0.01%)  84 ( 0.01%)  42 ( 0.02%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*>::_Deque_iterator(std::_Deque_iterator<std::weak_ptr<Graph>, std::weak_ptr<Graph>&, std::weak_ptr<Graph>*> const&) (6x)
   42 ( 0.00%)  18 ( 0.00%)  12 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_get_Tp_allocator() (6x)
   48 ( 0.00%)  18 ( 0.00%)   6 ( 0.00%)  .          .          .          .          .          .           	_M_destroy_nodes(__pos._M_node + 1,
  102 ( 0.00%)  30 ( 0.00%)  30 ( 0.01%)  3 ( 0.05%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_destroy_nodes(std::weak_ptr<Graph>**, std::weak_ptr<Graph>**) (6x)
   12 ( 0.00%)  12 ( 0.00%)   .           .          .          .          .          .          .           			 this->_M_impl._M_finish._M_node + 1);
   60 ( 0.00%)  36 ( 0.01%)  24 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	this->_M_impl._M_finish = __pos;
   42 ( 0.00%)  30 ( 0.00%)   .           .          .          .          .          .          .                 }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 iterator
    .            .            .           .          .          .          .          .          .                 _M_erase(iterator __pos);
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 iterator
    .            .            .           .          .          .          .          .          .                 _M_erase(iterator __first, iterator __last);
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .           #if __cplusplus >= 201103L
-- line 2078 ----------------------------------------
-- line 2141 ----------------------------------------
    .            .            .           .          .          .          .          .          .                 void
    .            .            .           .          .          .          .          .          .                 _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front);
    .            .            .           .          .          .          .          .          .                 ///@}
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .           #if __cplusplus >= 201103L
    .            .            .           .          .          .          .          .          .                 // Constant-time, nothrow move assignment when source object's memory
    .            .            .           .          .          .          .          .          .                 // can be moved because the allocators are equal.
    .            .            .           .          .          .          .          .          .                 void
   42 ( 0.00%)   0           24 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
    .            .            .           .          .          .          .          .          .                 {
   30 ( 0.00%)  12 ( 0.00%)   6 ( 0.00%)  .          .          .          .          .          .           	this->_M_impl._M_swap_data(__x._M_impl);
1,698 ( 0.06%) 720 ( 0.10%) 570 ( 0.20%) 43 ( 0.73%) 0          0          15 ( 0.46%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data::_M_swap_data(std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Deque_impl_data&) (6x)
   18 ( 0.00%)   6 ( 0.00%)   6 ( 0.00%)  .          .          .          .          .          .           	__x.clear();
2,274 ( 0.08%) 942 ( 0.14%) 606 ( 0.22%) 26 ( 0.44%) 0          0          15 ( 0.46%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::clear() (6x)
   60 ( 0.00%)  12 ( 0.00%)  18 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
  114 ( 0.00%)  36 ( 0.01%)  36 ( 0.01%)  6 ( 0.10%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/alloc_traits.h:void std::__alloc_on_move<std::allocator<std::weak_ptr<Graph> > >(std::allocator<std::weak_ptr<Graph> >&, std::allocator<std::weak_ptr<Graph> >&) (6x)
   84 ( 0.00%)  36 ( 0.01%)  24 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_get_Tp_allocator() (12x)
   24 ( 0.00%)  18 ( 0.00%)   .           .          .          .          .          .          .                 }
    .            .            .           .          .          .          .          .          .           
    .            .            .           .          .          .          .          .          .                 // When the allocators are not equal the operation could throw, because
    .            .            .           .          .          .          .          .          .                 // we might need to allocate a new map for __x after moving from it
    .            .            .           .          .          .          .          .          .                 // or we might need to allocate new elements for *this.
    .            .            .           .          .          .          .          .          .                 void
    .            .            .           .          .          .          .          .          .                 _M_move_assign1(deque&& __x, /* always equal: */ false_type)
    .            .            .           .          .          .          .          .          .                 {
    .            .            .           .          .          .          .          .          .           	if (_M_get_Tp_allocator() == __x._M_get_Tp_allocator())
-- line 2162 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/shared_ptr.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr        D1mr       D1mw       ILmr       DLmr DLmw 

-- line 114 ----------------------------------------
  .           .           .           .          .          .          .          .          .              * can be retrieved by calling the `get()` member function.
  .           .           .           .          .          .          .          .          .              *
  .           .           .           .          .          .          .          .          .              * The equality and relational operators for `shared_ptr` only compare
  .           .           .           .          .          .          .          .          .              * the stored pointer returned by `get()`, not the owned pointer.
  .           .           .           .          .          .          .          .          .              * To test whether two `shared_ptr` objects share ownership of the same
  .           .           .           .          .          .          .          .          .              * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  .           .           .           .          .          .          .          .          .             */
  .           .           .           .          .          .          .          .          .             template<typename _Tp>
330 ( 0.01%) 90 ( 0.01%) 90 ( 0.03%) 11 ( 0.19%) 0          0          2 ( 0.06%) .          .               class shared_ptr : public __shared_ptr<_Tp>
91,983 ( 3.25%) 25,514 ( 3.69%) 13,526 ( 4.83%) 537 ( 9.09%) 95 ( 0.72%) 10 ( 0.33%) 113 ( 3.49%) 40 ( 0.44%) 1 ( 0.04%)  => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() (30x)
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                 template<typename... _Args>
  .           .           .           .          .          .          .          .          .           	using _Constructible = typename enable_if<
  .           .           .           .          .          .          .          .          .           	  is_constructible<__shared_ptr<_Tp>, _Args...>::value
  .           .           .           .          .          .          .          .          .           	>::type;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Arg>
  .           .           .           .          .          .          .          .          .           	using _Assignable = typename enable_if<
-- line 130 ----------------------------------------
-- line 142 ----------------------------------------
  .           .           .           .          .          .          .          .          .                 using weak_type = weak_ptr<_Tp>;
  .           .           .           .          .          .          .          .          .           #endif
  .           .           .           .          .          .          .          .          .                 /**
  .           .           .           .          .          .          .          .          .                  *  @brief  Construct an empty %shared_ptr.
  .           .           .           .          .          .          .          .          .                  *  @post   use_count()==0 && get()==0
  .           .           .           .          .          .          .          .          .                  */
  .           .           .           .          .          .          .          .          .                 constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
  .           .           .           .          .          .          .          .          .           
 84 ( 0.00%) 24 ( 0.00%) 24 ( 0.01%)  1 ( 0.02%) .          .          .          .          .                 shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
396 ( 0.01%) 150 ( 0.02%) 102 ( 0.04%) 12 ( 0.20%) 2 ( 0.02%) 0          5 ( 0.15%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2> const&) (6x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /**
  .           .           .           .          .          .          .          .          .                  *  @brief  Construct a %shared_ptr that owns the pointer @a __p.
  .           .           .           .          .          .          .          .          .                  *  @param  __p  A pointer that is convertible to element_type*.
  .           .           .           .          .          .          .          .          .                  *  @post   use_count() == 1 && get() == __p
  .           .           .           .          .          .          .          .          .                  *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
  .           .           .           .          .          .          .          .          .                  */
  .           .           .           .          .          .          .          .          .                 template<typename _Yp, typename = _Constructible<_Yp*>>
-- line 158 ----------------------------------------
-- line 296 ----------------------------------------
  .           .           .           .          .          .          .          .          .           	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
  .           .           .           .          .          .          .          .          .                   : __shared_ptr<_Tp>(__r) { }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /**
  .           .           .           .          .          .          .          .          .                  *  @brief  Move-constructs a %shared_ptr instance from @a __r.
  .           .           .           .          .          .          .          .          .                  *  @param  __r  A %shared_ptr rvalue.
  .           .           .           .          .          .          .          .          .                  *  @post   *this contains the old value of @a __r, @a __r is empty.
  .           .           .           .          .          .          .          .          .                  */
 91 ( 0.00%)  0          52 ( 0.02%)  0          0          1 ( 0.03%) .          .          .                 shared_ptr(shared_ptr&& __r) noexcept
143 ( 0.01%) 65 ( 0.01%) 26 ( 0.01%)  .          .          .          .          .          .                 : __shared_ptr<_Tp>(std::move(__r)) { }
689 ( 0.02%) 273 ( 0.04%) 208 ( 0.07%) 12 ( 0.20%) 0          1 ( 0.03%) 3 ( 0.09%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>&&) (13x)
 91 ( 0.00%) 39 ( 0.01%) 26 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::shared_ptr<ActiveObject>&>::type&& std::move<std::shared_ptr<ActiveObject>&>(std::shared_ptr<ActiveObject>&) (13x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /**
  .           .           .           .          .          .          .          .          .                  *  @brief  Move-constructs a %shared_ptr instance from @a __r.
  .           .           .           .          .          .          .          .          .                  *  @param  __r  A %shared_ptr rvalue.
  .           .           .           .          .          .          .          .          .                  *  @post   *this contains the old value of @a __r, @a __r is empty.
  .           .           .           .          .          .          .          .          .                  */
  .           .           .           .          .          .          .          .          .                 template<typename _Yp, typename = _Constructible<shared_ptr<_Yp>>>
  .           .           .           .          .          .          .          .          .           	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
-- line 313 ----------------------------------------
-- line 400 ----------------------------------------
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  this->__shared_ptr<_Tp>::operator=(std::move(__r));
  .           .           .           .          .          .          .          .          .           	  return *this;
  .           .           .           .          .          .          .          .          .           	}
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               private:
  .           .           .           .          .          .          .          .          .                 // This constructor is non-standard, it is used by allocate_shared.
  .           .           .           .          .          .          .          .          .                 template<typename _Alloc, typename... _Args>
 48 ( 0.00%)  0          30 ( 0.01%)  .          .          .          .          .          .           	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 54 ( 0.00%) 18 ( 0.00%) 12 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
71,233 ( 2.52%) 20,906 ( 3.03%) 15,028 ( 5.37%) 954 (16.14%) 111 ( 0.84%) 186 ( 6.14%) 362 (11.18%) 46 ( 0.51%) 180 ( 7.52%)  => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<ActiveObject>, int&>(std::_Sp_alloc_shared_tag<std::allocator<ActiveObject> >, int&) (6x)
 42 ( 0.00%) 18 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:int& std::forward<int&>(std::remove_reference<int&>::type&) (6x)
 24 ( 0.00%) 18 ( 0.00%)  0           6 ( 0.10%) .          .          .          .          .           	{ }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp, typename _Alloc, typename... _Args>
  .           .           .           .          .          .          .          .          .           	friend shared_ptr<_Yp>
  .           .           .           .          .          .          .          .          .           	allocate_shared(const _Alloc& __a, _Args&&... __args);
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // This constructor is non-standard, it is used by weak_ptr::lock().
 30 ( 0.00%)  0          15 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 shared_ptr(const weak_ptr<_Tp>& __r, std::nothrow_t) noexcept
 40 ( 0.00%) 20 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .                 : __shared_ptr<_Tp>(__r, std::nothrow) { }
630 ( 0.02%) 205 ( 0.03%) 120 ( 0.04%)  6 ( 0.10%) 0          0          6 ( 0.19%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__weak_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2> const&, std::nothrow_t) (5x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 friend class weak_ptr<_Tp>;
  .           .           .           .          .          .          .          .          .               };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           #if __cpp_deduction_guides >= 201606
  .           .           .           .          .          .          .          .          .             template<typename _Tp>
  .           .           .           .          .          .          .          .          .               shared_ptr(weak_ptr<_Tp>) ->  shared_ptr<_Tp>;
  .           .           .           .          .          .          .          .          .             template<typename _Tp, typename _Del>
-- line 426 ----------------------------------------
-- line 468 ----------------------------------------
  .           .           .           .          .          .          .          .          .             template<typename _Tp, typename _Up>
  .           .           .           .          .          .          .          .          .               _GLIBCXX_NODISCARD inline bool
  .           .           .           .          .          .          .          .          .               operator!=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
  .           .           .           .          .          .          .          .          .               { return __a.get() != __b.get(); }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             /// shared_ptr comparison with nullptr
  .           .           .           .          .          .          .          .          .             template<typename _Tp>
  .           .           .           .          .          .          .          .          .               _GLIBCXX_NODISCARD inline bool
 30 ( 0.00%)  0          15 ( 0.01%)  .          .          .          .          .          .               operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
 25 ( 0.00%) 15 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .               { return (bool)__a; }
 50 ( 0.00%) 20 ( 0.00%) 10 ( 0.00%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::operator bool() const (5x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             /// shared_ptr comparison with nullptr
  .           .           .           .          .          .          .          .          .             template<typename _Tp>
  .           .           .           .          .          .          .          .          .               _GLIBCXX_NODISCARD inline bool
  .           .           .           .          .          .          .          .          .               operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
  .           .           .           .          .          .          .          .          .               { return (bool)__a; }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             /// Relational operator for shared_ptr objects, compares the stored pointers
-- line 485 ----------------------------------------
-- line 678 ----------------------------------------
  .           .           .           .          .          .          .          .          .              *
  .           .           .           .          .          .          .          .          .              * Also unlike a raw pointer, a weak_ptr does not become "dangling" after
  .           .           .           .          .          .          .          .          .              * the object it points to has been destroyed. Instead, a weak_ptr
  .           .           .           .          .          .          .          .          .              * becomes _expired_ and can no longer be converted to a shared_ptr that
  .           .           .           .          .          .          .          .          .              * owns the freed pointer, so you cannot accidentally access the pointed-to
  .           .           .           .          .          .          .          .          .              * object after it has been destroyed.
  .           .           .           .          .          .          .          .          .              */
  .           .           .           .          .          .          .          .          .             template<typename _Tp>
132 ( 0.00%) 36 ( 0.01%) 36 ( 0.01%)  4 ( 0.07%) .          .          .          .          .               class weak_ptr : public __weak_ptr<_Tp>
662 ( 0.02%) 205 ( 0.03%) 148 ( 0.05%)  8 ( 0.14%) 2 ( 0.02%) 0          5 ( 0.15%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__weak_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::~__weak_ptr() (12x)
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                 template<typename _Arg>
  .           .           .           .          .          .          .          .          .           	using _Constructible = typename enable_if<
  .           .           .           .          .          .          .          .          .           	  is_constructible<__weak_ptr<_Tp>, _Arg>::value
  .           .           .           .          .          .          .          .          .           	>::type;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Arg>
  .           .           .           .          .          .          .          .          .           	using _Assignable = typename enable_if<
  .           .           .           .          .          .          .          .          .           	  is_assignable<__weak_ptr<_Tp>&, _Arg>::value, weak_ptr&
  .           .           .           .          .          .          .          .          .           	>::type;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               public:
 66 ( 0.00%) 18 ( 0.00%) 18 ( 0.01%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .                 constexpr weak_ptr() noexcept = default;
138 ( 0.00%) 42 ( 0.01%) 42 ( 0.02%)  2 ( 0.03%) 0          1 ( 0.03%) 2 ( 0.06%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/shared_ptr_base.h:std::__weak_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::__weak_ptr() (6x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp,
  .           .           .           .          .          .          .          .          .           	       typename = _Constructible<const shared_ptr<_Yp>&>>
  6 ( 0.00%)  0           3 ( 0.00%)  .          .          .          .          .          .           	weak_ptr(const shared_ptr<_Yp>& __r) noexcept
  8 ( 0.00%)  4 ( 0.00%)  1 ( 0.00%)  .          .          .          .          .          .           	: __weak_ptr<_Tp>(__r) { }
 66 ( 0.00%) 25 ( 0.00%) 17 ( 0.01%)  5 ( 0.08%) 0          0          5 ( 0.15%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__weak_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::__weak_ptr<ActiveObject, void>(std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2> const&) (1x)
  .           .           .           .          .          .          .          .          .           
 70 ( 0.00%) 20 ( 0.00%) 20 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 weak_ptr(const weak_ptr&) noexcept = default;
330 ( 0.01%) 125 ( 0.02%) 85 ( 0.03%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__weak_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::__weak_ptr(std::__weak_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2> const&) (5x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp, typename = _Constructible<const weak_ptr<_Yp>&>>
  .           .           .           .          .          .          .          .          .           	weak_ptr(const weak_ptr<_Yp>& __r) noexcept
  .           .           .           .          .          .          .          .          .           	: __weak_ptr<_Tp>(__r) { }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 weak_ptr(weak_ptr&&) noexcept = default;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp, typename = _Constructible<weak_ptr<_Yp>>>
  .           .           .           .          .          .          .          .          .           	weak_ptr(weak_ptr<_Yp>&& __r) noexcept
  .           .           .           .          .          .          .          .          .           	: __weak_ptr<_Tp>(std::move(__r)) { }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 weak_ptr&
 70 ( 0.00%) 25 ( 0.00%) 20 ( 0.01%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .                 operator=(const weak_ptr& __r) noexcept = default;
345 ( 0.01%) 140 ( 0.02%) 90 ( 0.03%)  2 ( 0.03%) 0          1 ( 0.03%) 2 ( 0.06%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__weak_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::operator=(std::__weak_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2> const&) (5x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp>
  .           .           .           .          .          .          .          .          .           	_Assignable<const weak_ptr<_Yp>&>
  .           .           .           .          .          .          .          .          .           	operator=(const weak_ptr<_Yp>& __r) noexcept
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  this->__weak_ptr<_Tp>::operator=(__r);
  .           .           .           .          .          .          .          .          .           	  return *this;
  .           .           .           .          .          .          .          .          .           	}
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp>
  .           .           .           .          .          .          .          .          .           	_Assignable<const shared_ptr<_Yp>&>
 24 ( 0.00%)  0          12 ( 0.00%)  .          .          .          .          .          .           	operator=(const shared_ptr<_Yp>& __r) noexcept
  .           .           .           .          .          .          .          .          .           	{
 20 ( 0.00%)  8 ( 0.00%)  4 ( 0.00%)  .          .          .          .          .          .           	  this->__weak_ptr<_Tp>::operator=(__r);
412 ( 0.01%) 156 ( 0.02%) 104 ( 0.04%)  2 ( 0.03%) 1 ( 0.01%) 0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::enable_if<std::__sp_compatible_with<ActiveObject*, ActiveObject*>::value, std::__weak_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>&>::type std::__weak_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::operator=<ActiveObject>(std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2> const&) (4x)
  4 ( 0.00%)  4 ( 0.00%)  .           .          .          .          .          .          .           	  return *this;
  8 ( 0.00%)  8 ( 0.00%)  .           .          .          .          .          .          .           	}
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 weak_ptr&
  .           .           .           .          .          .          .          .          .                 operator=(weak_ptr&& __r) noexcept = default;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp>
  .           .           .           .          .          .          .          .          .           	_Assignable<weak_ptr<_Yp>>
  .           .           .           .          .          .          .          .          .           	operator=(weak_ptr<_Yp>&& __r) noexcept
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  this->__weak_ptr<_Tp>::operator=(std::move(__r));
  .           .           .           .          .          .          .          .          .           	  return *this;
  .           .           .           .          .          .          .          .          .           	}
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 shared_ptr<_Tp>
 30 ( 0.00%)  0          15 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 lock() const noexcept
 40 ( 0.00%) 25 ( 0.00%)  5 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 { return shared_ptr<_Tp>(*this, std::nothrow); }
700 ( 0.02%) 225 ( 0.03%) 140 ( 0.05%)  7 ( 0.12%) 0          0          7 ( 0.22%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObject>::shared_ptr(std::weak_ptr<ActiveObject> const&, std::nothrow_t) (5x)
  .           .           .           .          .          .          .          .          .               };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           #if __cpp_deduction_guides >= 201606
  .           .           .           .          .          .          .          .          .             template<typename _Tp>
  .           .           .           .          .          .          .          .          .               weak_ptr(shared_ptr<_Tp>) ->  weak_ptr<_Tp>;
  .           .           .           .          .          .          .          .          .           #endif
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             // 20.7.2.3.6 weak_ptr specialized algorithms.
-- line 758 ----------------------------------------
-- line 850 ----------------------------------------
  .           .           .           .          .          .          .          .          .              *  @throw  An exception thrown from @a _Alloc::allocate or from the
  .           .           .           .          .          .          .          .          .              *          constructor of @a _Tp.
  .           .           .           .          .          .          .          .          .              *
  .           .           .           .          .          .          .          .          .              *  A copy of @a __a will be used to allocate memory for the shared_ptr
  .           .           .           .          .          .          .          .          .              *  and the new object.
  .           .           .           .          .          .          .          .          .              */
  .           .           .           .          .          .          .          .          .             template<typename _Tp, typename _Alloc, typename... _Args>
  .           .           .           .          .          .          .          .          .               inline shared_ptr<_Tp>
 42 ( 0.00%)  0          24 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .               allocate_shared(const _Alloc& __a, _Args&&... __args)
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                 static_assert(!is_array<_Tp>::value, "make_shared<T[]> not supported");
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
 54 ( 0.00%) 18 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .           			     std::forward<_Args>(__args)...);
71,401 ( 2.52%) 20,960 ( 3.03%) 15,082 ( 5.39%) 961 (16.26%) 111 ( 0.84%) 186 ( 6.14%) 363 (11.21%) 46 ( 0.51%) 180 ( 7.52%)  => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObject>::shared_ptr<std::allocator<ActiveObject>, int&>(std::_Sp_alloc_shared_tag<std::allocator<ActiveObject> >, int&) (6x)
 42 ( 0.00%) 18 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:int& std::forward<int&>(std::remove_reference<int&>::type&) (6x)
 18 ( 0.00%) 18 ( 0.00%)  .           .          .          .          .          .          .               }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             /**
  .           .           .           .          .          .          .          .          .              *  @brief  Create an object that is owned by a shared_ptr.
  .           .           .           .          .          .          .          .          .              *  @param  __args  Arguments for the @a _Tp object's constructor.
  .           .           .           .          .          .          .          .          .              *  @return A shared_ptr that owns the newly created object.
  .           .           .           .          .          .          .          .          .              *  @throw  std::bad_alloc, or an exception thrown from the
  .           .           .           .          .          .          .          .          .              *          constructor of @a _Tp.
  .           .           .           .          .          .          .          .          .              */
  .           .           .           .          .          .          .          .          .             template<typename _Tp, typename... _Args>
  .           .           .           .          .          .          .          .          .               inline shared_ptr<_Tp>
 60 ( 0.00%)  6 ( 0.00%) 30 ( 0.01%)  6 ( 0.10%) 0          0          1 ( 0.03%) .          .               make_shared(_Args&&... __args)
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                 typedef typename std::remove_cv<_Tp>::type _Tp_nc;
 36 ( 0.00%)  0          12 ( 0.00%)  2 ( 0.03%) 0          0          1 ( 0.03%) .          .                 return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
108 ( 0.00%) 30 ( 0.00%) 30 ( 0.01%)  4 ( 0.07%) 0          0          4 ( 0.12%) .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObject>::allocator() (6x)
108 ( 0.00%) 30 ( 0.00%) 30 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObject>::~allocator() (6x)
 72 ( 0.00%) 12 ( 0.00%) 12 ( 0.00%)  4 ( 0.07%) .          .          .          .          .           				       std::forward<_Args>(__args)...);
71,557 ( 2.53%) 21,014 ( 3.04%) 15,130 ( 5.40%) 962 (16.28%) 111 ( 0.84%) 186 ( 6.14%) 364 (11.24%) 46 ( 0.51%) 180 ( 7.52%)  => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObject> std::allocate_shared<ActiveObject, std::allocator<ActiveObject>, int&>(std::allocator<ActiveObject> const&, int&) (6x)
 42 ( 0.00%) 18 ( 0.00%) 12 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/move.h:int& std::forward<int&>(std::remove_reference<int&>::type&) (6x)
 42 ( 0.00%) 36 ( 0.01%)  0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .               }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             /// std::hash specialization for shared_ptr.
  .           .           .           .          .          .          .          .          .             template<typename _Tp>
  .           .           .           .          .          .          .          .          .               struct hash<shared_ptr<_Tp>>
  .           .           .           .          .          .          .          .          .               : public __hash_base<size_t, shared_ptr<_Tp>>
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                 size_t
  .           .           .           .          .          .          .          .          .                 operator()(const shared_ptr<_Tp>& __s) const noexcept
-- line 888 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/unique_ptr.h
--------------------------------------------------------------------------------
Ir           Dr           Dw           I1mr        D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 71 ----------------------------------------
  .            .            .           .          .          .          .          .          .                  * only if `_Up*` is convertible to `_Tp*`.
  .            .            .           .          .          .          .          .          .                  */
  .            .            .           .          .          .          .          .          .                 template<typename _Up,
  .            .            .           .          .          .          .          .          .           	       typename = _Require<is_convertible<_Up*, _Tp*>>>
  .            .            .           .          .          .          .          .          .                   default_delete(const default_delete<_Up>&) noexcept { }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Calls `delete __ptr`
  .            .            .           .          .          .          .          .          .                 void
 70 ( 0.00%)   0           40 ( 0.01%)  1 ( 0.02%) .          .          .          .          .                 operator()(_Tp* __ptr) const
  .            .            .           .          .          .          .          .          .                 {
  .            .            .           .          .          .          .          .          .           	static_assert(!is_void<_Tp>::value,
  .            .            .           .          .          .          .          .          .           		      "can't delete pointer to incomplete type");
  .            .            .           .          .          .          .          .          .           	static_assert(sizeof(_Tp)>0,
  .            .            .           .          .          .          .          .          .           		      "can't delete pointer to incomplete type");
 80 ( 0.00%)  10 ( 0.00%)  20 ( 0.01%)  .          .          .          .          .          .           	delete __ptr;
1,078 ( 0.04%) 325 ( 0.05%) 147 ( 0.05%)  9 ( 0.15%) 2 ( 0.02%) .          .          .          .           => ???:0x000000000010c8d0 (10x)
550 ( 0.02%) 180 ( 0.03%) 140 ( 0.05%)  8 ( 0.14%) .          .          .          .          .           => /usr/include/c++/11/bits/std_thread.h:std::thread::~thread() (10x)
 40 ( 0.00%)  30 ( 0.00%)   .           .          .          .          .          .          .                 }
  .            .            .           .          .          .          .          .          .               };
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .            .            .           .          .          .          .          .          .             // DR 740 - omit specialization for array objects with a compile time length
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             /// Specialization of default_delete for arrays, used by `unique_ptr<T[]>`
  .            .            .           .          .          .          .          .          .             template<typename _Tp>
  .            .            .           .          .          .          .          .          .               struct default_delete<_Tp[]>
-- line 94 ----------------------------------------
-- line 146 ----------------------------------------
  .            .            .           .          .          .          .          .          .           	       is_default_constructible<_Dp>>::value>;
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 using pointer = typename _Ptr<_Tp, _Dp>::type;
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 static_assert( !is_rvalue_reference<_Dp>::value,
  .            .            .           .          .          .          .          .          .           		     "unique_ptr's deleter type must be a function object type"
  .            .            .           .          .          .          .          .          .           		     " or an lvalue reference type" );
  .            .            .           .          .          .          .          .          .           
 66 ( 0.00%)  18 ( 0.00%)  18 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 __uniq_ptr_impl() = default;
312 ( 0.01%)  90 ( 0.01%)  90 ( 0.03%) 11 ( 0.19%) 0          0          7 ( 0.22%) .          .           => /usr/include/c++/11/tuple:std::tuple<std::thread*, std::default_delete<std::thread> >::tuple<true, true>() (6x)
380 ( 0.01%) 120 ( 0.02%) 140 ( 0.05%) 13 ( 0.22%) 0          0          3 ( 0.09%) .          .                 __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
520 ( 0.02%) 150 ( 0.02%) 150 ( 0.05%)  6 ( 0.10%) 0          0          5 ( 0.15%) .          .           => /usr/include/c++/11/tuple:std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<true, true>() (10x)
470 ( 0.02%) 150 ( 0.02%) 140 ( 0.05%)  5 ( 0.08%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr() (10x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 template<typename _Del>
  .            .            .           .          .          .          .          .          .                 __uniq_ptr_impl(pointer __p, _Del&& __d)
  .            .            .           .          .          .          .          .          .           	: _M_t(__p, std::forward<_Del>(__d)) { }
  .            .            .           .          .          .          .          .          .           
 28 ( 0.00%)   0           16 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 __uniq_ptr_impl(__uniq_ptr_impl&& __u) noexcept
 28 ( 0.00%)   8 ( 0.00%)   8 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 : _M_t(std::move(__u._M_t))
160 ( 0.01%)  52 ( 0.01%)  48 ( 0.02%)  .          .          .          .          .          .           => /usr/include/c++/11/tuple:std::tuple<std::thread*, std::default_delete<std::thread> >::tuple(std::tuple<std::thread*, std::default_delete<std::thread> >&&) (4x)
 28 ( 0.00%)  12 ( 0.00%)   8 ( 0.00%)  1 ( 0.02%) .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::tuple<std::thread*, std::default_delete<std::thread> >&>::type&& std::move<std::tuple<std::thread*, std::default_delete<std::thread> >&>(std::tuple<std::thread*, std::default_delete<std::thread> >&) (4x)
 32 ( 0.00%)  16 ( 0.00%)   8 ( 0.00%)  .          .          .          .          .          .                 { __u._M_ptr() = nullptr; }
188 ( 0.01%)  60 ( 0.01%)  56 ( 0.02%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::_M_ptr() (4x)
  .            .            .           .          .          .          .          .          .           
 36 ( 0.00%)   0           18 ( 0.01%)  .          .          .          .          .          .                 __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
  .            .            .           .          .          .          .          .          .                 {
 48 ( 0.00%)  12 ( 0.00%)  12 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	reset(__u.release());
702 ( 0.02%) 228 ( 0.03%) 216 ( 0.08%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::reset(std::thread*) (6x)
666 ( 0.02%) 216 ( 0.03%) 204 ( 0.07%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::release() (6x)
 48 ( 0.00%)  12 ( 0.00%)  18 ( 0.01%)  .          .          .          .          .          .           	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
564 ( 0.02%) 180 ( 0.03%) 168 ( 0.06%)  4 ( 0.07%) 0          0          4 ( 0.12%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::_M_deleter() (12x)
 42 ( 0.00%)  18 ( 0.00%)  12 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::default_delete<std::thread>&& std::forward<std::default_delete<std::thread> >(std::remove_reference<std::default_delete<std::thread> >::type&) (6x)
  6 ( 0.00%)   6 ( 0.00%)   .           .          .          .          .          .          .           	return *this;
 12 ( 0.00%)  12 ( 0.00%)   .           .          .          .          .          .          .                 }
  .            .            .           .          .          .          .          .          .           
900 ( 0.03%) 270 ( 0.04%) 270 ( 0.10%) 20 ( 0.34%) 0          0          2 ( 0.06%) .          .                 pointer&   _M_ptr() { return std::get<0>(_M_t); }
740 ( 0.03%) 240 ( 0.03%) 220 ( 0.08%)  .          .          .          .          .          .           => /usr/include/c++/11/tuple:std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&) (20x)
286 ( 0.01%) 104 ( 0.02%)  78 ( 0.03%)  1 ( 0.02%) 1 ( 0.01%) 0          1 ( 0.03%) .          .                 pointer    _M_ptr() const { return std::get<0>(_M_t); }
962 ( 0.03%) 312 ( 0.05%) 286 ( 0.10%) 28 ( 0.47%) 0          0          8 ( 0.25%) .          .           => /usr/include/c++/11/tuple:std::tuple_element<0ul, std::tuple<std::thread*, std::default_delete<std::thread> > >::type const& std::get<0ul, std::thread*, std::default_delete<std::thread> >(std::tuple<std::thread*, std::default_delete<std::thread> > const&) (26x)
220 ( 0.01%)  66 ( 0.01%)  66 ( 0.02%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 _Dp&       _M_deleter() { return std::get<1>(_M_t); }
814 ( 0.03%) 264 ( 0.04%) 242 ( 0.09%)  6 ( 0.10%) 0          0          3 ( 0.09%) .          .           => /usr/include/c++/11/tuple:std::tuple_element<1ul, std::tuple<std::thread*, std::default_delete<std::thread> > >::type& std::get<1ul, std::thread*, std::default_delete<std::thread> >(std::tuple<std::thread*, std::default_delete<std::thread> >&) (22x)
  .            .            .           .          .          .          .          .          .                 const _Dp& _M_deleter() const { return std::get<1>(_M_t); }
  .            .            .           .          .          .          .          .          .           
 84 ( 0.00%)   0           48 ( 0.02%)  1 ( 0.02%) .          .          .          .          .                 void reset(pointer __p) noexcept
  .            .            .           .          .          .          .          .          .                 {
 60 ( 0.00%)  24 ( 0.00%)  24 ( 0.01%)  .          .          .          .          .          .           	const pointer __old_p = _M_ptr();
564 ( 0.02%) 180 ( 0.03%) 168 ( 0.06%)  3 ( 0.05%) .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::_M_ptr() (12x)
 60 ( 0.00%)  24 ( 0.00%)  24 ( 0.01%)  .          .          .          .          .          .           	_M_ptr() = __p;
564 ( 0.02%) 180 ( 0.03%) 168 ( 0.06%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::_M_ptr() (12x)
 24 ( 0.00%)  12 ( 0.00%)   .           .          .          .          .          .          .           	if (__old_p)
 48 ( 0.00%)  12 ( 0.00%)  12 ( 0.00%)  .          .          .          .          .          .           	  _M_deleter()(__old_p);
1,038 ( 0.04%) 318 ( 0.05%) 210 ( 0.08%)  8 ( 0.14%) 1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::default_delete<std::thread>::operator()(std::thread*) const (6x)
282 ( 0.01%)  90 ( 0.01%)  84 ( 0.03%)  3 ( 0.05%) .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::_M_deleter() (6x)
 48 ( 0.00%)  36 ( 0.01%)   .           .          .          .          .          .          .                 }
  .            .            .           .          .          .          .          .          .           
 30 ( 0.00%)   0           12 ( 0.00%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .                 pointer release() noexcept
  .            .            .           .          .          .          .          .          .                 {
 30 ( 0.00%)  12 ( 0.00%)  12 ( 0.00%)  .          .          .          .          .          .           	pointer __p = _M_ptr();
282 ( 0.01%)  90 ( 0.01%)  84 ( 0.03%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::_M_ptr() (6x)
 24 ( 0.00%)   6 ( 0.00%)  12 ( 0.00%)  .          .          .          .          .          .           	_M_ptr() = nullptr;
282 ( 0.01%)  90 ( 0.01%)  84 ( 0.03%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::_M_ptr() (6x)
  6 ( 0.00%)   6 ( 0.00%)   .           .          .          .          .          .          .           	return __p;
 12 ( 0.00%)  12 ( 0.00%)   .           .          .          .          .          .          .                 }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 void
  .            .            .           .          .          .          .          .          .                 swap(__uniq_ptr_impl& __rhs) noexcept
  .            .            .           .          .          .          .          .          .                 {
  .            .            .           .          .          .          .          .          .           	using std::swap;
  .            .            .           .          .          .          .          .          .           	swap(this->_M_ptr(), __rhs._M_ptr());
  .            .            .           .          .          .          .          .          .           	swap(this->_M_deleter(), __rhs._M_deleter());
  .            .            .           .          .          .          .          .          .                 }
-- line 198 ----------------------------------------
-- line 202 ----------------------------------------
  .            .            .           .          .          .          .          .          .               };
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             // Defines move construction + assignment as either defaulted or deleted.
  .            .            .           .          .          .          .          .          .             template <typename _Tp, typename _Dp,
  .            .            .           .          .          .          .          .          .           	    bool = is_move_constructible<_Dp>::value,
  .            .            .           .          .          .          .          .          .           	    bool = is_move_assignable<_Dp>::value>
  .            .            .           .          .          .          .          .          .               struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
  .            .            .           .          .          .          .          .          .               {
346 ( 0.01%)  98 ( 0.01%)  98 ( 0.04%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
1,180 ( 0.04%) 360 ( 0.05%) 360 ( 0.13%) 23 ( 0.39%) 0          0          8 ( 0.25%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*) (10x)
 56 ( 0.00%)  16 ( 0.00%)  16 ( 0.01%)  .          .          .          .          .          .                 __uniq_ptr_data(__uniq_ptr_data&&) = default;
464 ( 0.02%) 148 ( 0.02%) 144 ( 0.05%)  3 ( 0.05%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::__uniq_ptr_impl(std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >&&) (4x)
 84 ( 0.00%)  30 ( 0.00%)  24 ( 0.01%)  .          .          .          .          .          .                 __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
2,124 ( 0.08%) 684 ( 0.10%) 648 ( 0.23%)  7 ( 0.12%) 0          0          7 ( 0.22%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::operator=(std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >&&) (6x)
  .            .            .           .          .          .          .          .          .               };
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             template <typename _Tp, typename _Dp>
  .            .            .           .          .          .          .          .          .               struct __uniq_ptr_data<_Tp, _Dp, true, false> : __uniq_ptr_impl<_Tp, _Dp>
  .            .            .           .          .          .          .          .          .               {
  .            .            .           .          .          .          .          .          .                 using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
  .            .            .           .          .          .          .          .          .                 __uniq_ptr_data(__uniq_ptr_data&&) = default;
  .            .            .           .          .          .          .          .          .                 __uniq_ptr_data& operator=(__uniq_ptr_data&&) = delete;
-- line 220 ----------------------------------------
-- line 261 ----------------------------------------
  .            .            .           .          .          .          .          .          .           	  __not_<is_array<_Up>>
  .            .            .           .          .          .          .          .          .                   >;
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .               public:
  .            .            .           .          .          .          .          .          .                 // Constructors.
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Default constructor, creates a unique_ptr that owns nothing.
  .            .            .           .          .          .          .          .          .                 template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 30 ( 0.00%)   0           12 ( 0.00%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .           	constexpr unique_ptr() noexcept
 30 ( 0.00%)  12 ( 0.00%)  12 ( 0.00%)  0          0          1 ( 0.03%) 0          0          1 ( 0.04%)  	: _M_t()
444 ( 0.02%) 126 ( 0.02%) 126 ( 0.05%) 12 ( 0.20%) 0          0          8 ( 0.25%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_data<std::thread, std::default_delete<std::thread>, true, true>::__uniq_ptr_impl() (6x)
 18 ( 0.00%)  12 ( 0.00%)   .           .          .          .          .          .          .           	{ }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /** Takes ownership of a pointer.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * @param __p  A pointer to an object of @c element_type
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * The deleter will be value-initialized.
  .            .            .           .          .          .          .          .          .                  */
  .            .            .           .          .          .          .          .          .                 template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
  .            .            .           .          .          .          .          .          .           	explicit
120 ( 0.00%)   0           60 ( 0.02%)  3 ( 0.05%) 0          0          2 ( 0.06%) .          .           	unique_ptr(pointer __p) noexcept
100 ( 0.00%)  40 ( 0.01%)  20 ( 0.01%)  .          .          .          .          .          .           	: _M_t(__p)
1,320 ( 0.05%) 400 ( 0.06%) 400 ( 0.14%)  6 ( 0.10%) 0          0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_data<std::thread, std::default_delete<std::thread>, true, true>::__uniq_ptr_impl(std::thread*) (10x)
 60 ( 0.00%)  40 ( 0.01%)   .           .          .          .          .          .          .                   { }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /** Takes ownership of a pointer.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * @param __p  A pointer to an object of @c element_type
  .            .            .           .          .          .          .          .          .                  * @param __d  A reference to a deleter.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * The deleter will be initialized with @p __d
  .            .            .           .          .          .          .          .          .                  */
-- line 291 ----------------------------------------
-- line 319 ----------------------------------------
  .            .            .           .          .          .          .          .          .                 template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
  .            .            .           .          .          .          .          .          .           	constexpr unique_ptr(nullptr_t) noexcept
  .            .            .           .          .          .          .          .          .           	: _M_t()
  .            .            .           .          .          .          .          .          .           	{ }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 // Move constructors.
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Move constructor.
 56 ( 0.00%)  16 ( 0.00%)  16 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 unique_ptr(unique_ptr&&) = default;
520 ( 0.02%) 164 ( 0.02%) 160 ( 0.06%)  3 ( 0.05%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_data<std::thread, std::default_delete<std::thread>, true, true>::__uniq_ptr_data(std::__uniq_ptr_data<std::thread, std::default_delete<std::thread>, true, true>&&) (4x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /** @brief Converting constructor from another type
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * Requires that the pointer owned by @p __u is convertible to the
  .            .            .           .          .          .          .          .          .                  * type of pointer owned by this object, @p __u does not own an array,
  .            .            .           .          .          .          .          .          .                  * and @p __u has a compatible deleter type.
  .            .            .           .          .          .          .          .          .                  */
  .            .            .           .          .          .          .          .          .                 template<typename _Up, typename _Ep, typename = _Require<
-- line 335 ----------------------------------------
-- line 347 ----------------------------------------
  .            .            .           .          .          .          .          .          .                 /// Converting constructor from @c auto_ptr
  .            .            .           .          .          .          .          .          .                 template<typename _Up, typename = _Require<
  .            .            .           .          .          .          .          .          .           	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
  .            .            .           .          .          .          .          .          .           	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
  .            .            .           .          .          .          .          .          .           #pragma GCC diagnostic pop
  .            .            .           .          .          .          .          .          .           #endif
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Destructor, invokes the deleter if the stored pointer is not null.
180 ( 0.01%)   0           90 ( 0.03%) 11 ( 0.19%) 0          0          1 ( 0.03%) .          .                 ~unique_ptr() noexcept
  .            .            .           .          .          .          .          .          .                 {
  .            .            .           .          .          .          .          .          .           	static_assert(__is_invocable<deleter_type&, pointer>::value,
  .            .            .           .          .          .          .          .          .           		      "unique_ptr's deleter must be invocable with a pointer");
120 ( 0.00%)  30 ( 0.00%)  60 ( 0.02%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	auto& __ptr = _M_t._M_ptr();
470 ( 0.02%) 150 ( 0.02%) 140 ( 0.05%) 13 ( 0.22%) .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr() (10x)
120 ( 0.00%)  60 ( 0.01%)   .           .          .          .          .          .          .           	if (__ptr != nullptr)
 44 ( 0.00%)  12 ( 0.00%)  12 ( 0.00%)  .          .          .          .          .          .           	  get_deleter()(std::move(__ptr));
780 ( 0.03%) 227 ( 0.03%) 137 ( 0.05%) 10 ( 0.17%) 1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::default_delete<std::thread>::operator()(std::thread*) const (4x)
228 ( 0.01%)  72 ( 0.01%)  68 ( 0.02%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::get_deleter() (4x)
 28 ( 0.00%)  12 ( 0.00%)   8 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::thread*&>::type&& std::move<std::thread*&>(std::thread*&) (4x)
 60 ( 0.00%)  30 ( 0.00%)  30 ( 0.01%)  8 ( 0.14%) 0          0          2 ( 0.06%) .          .           	__ptr = pointer();
120 ( 0.00%)  90 ( 0.01%)   .           .          .          .          .          .          .                 }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 // Assignment.
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /** @brief Move assignment operator.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * Invokes the deleter if this object owns a pointer.
  .            .            .           .          .          .          .          .          .                  */
 84 ( 0.00%)  30 ( 0.00%)  24 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 unique_ptr& operator=(unique_ptr&&) = default;
2,208 ( 0.08%) 714 ( 0.10%) 672 ( 0.24%)  7 ( 0.12%) 0          0          7 ( 0.22%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_data<std::thread, std::default_delete<std::thread>, true, true>::operator=(std::__uniq_ptr_data<std::thread, std::default_delete<std::thread>, true, true>&&) (6x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /** @brief Assignment from another type.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * @param __u  The object to transfer ownership from, which owns a
  .            .            .           .          .          .          .          .          .                  *             convertible pointer to a non-array object.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * Invokes the deleter if this object owns a pointer.
  .            .            .           .          .          .          .          .          .                  */
-- line 379 ----------------------------------------
-- line 405 ----------------------------------------
  .            .            .           .          .          .          .          .          .                 operator*() const
  .            .            .           .          .          .          .          .          .                 {
  .            .            .           .          .          .          .          .          .           	__glibcxx_assert(get() != pointer());
  .            .            .           .          .          .          .          .          .           	return *get();
  .            .            .           .          .          .          .          .          .                 }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Return the stored pointer.
  .            .            .           .          .          .          .          .          .                 pointer
100 ( 0.00%)   0           40 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 operator->() const noexcept
  .            .            .           .          .          .          .          .          .                 {
  .            .            .           .          .          .          .          .          .           	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
 60 ( 0.00%)  20 ( 0.00%)  20 ( 0.01%)  .          .          .          .          .          .           	return get();
1,160 ( 0.04%) 380 ( 0.05%) 340 ( 0.12%)  7 ( 0.12%) 1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::get() const (20x)
 40 ( 0.00%)  40 ( 0.01%)   .           .          .          .          .          .          .                 }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Return the stored pointer.
  .            .            .           .          .          .          .          .          .                 pointer
130 ( 0.00%)   0           52 ( 0.02%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .                 get() const noexcept
130 ( 0.00%)  78 ( 0.01%)  26 ( 0.01%)  .          .          .          .          .          .                 { return _M_t._M_ptr(); }
1,248 ( 0.04%) 416 ( 0.06%) 364 ( 0.13%) 29 ( 0.49%) 1 ( 0.01%) 0          9 ( 0.28%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::_M_ptr() const (26x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Return a reference to the stored deleter.
  .            .            .           .          .          .          .          .          .                 deleter_type&
 20 ( 0.00%)   0            8 ( 0.00%)  .          .          .          .          .          .                 get_deleter() noexcept
 20 ( 0.00%)  12 ( 0.00%)   4 ( 0.00%)  .          .          .          .          .          .                 { return _M_t._M_deleter(); }
188 ( 0.01%)  60 ( 0.01%)  56 ( 0.02%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::_M_deleter() (4x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Return a reference to the stored deleter.
  .            .            .           .          .          .          .          .          .                 const deleter_type&
  .            .            .           .          .          .          .          .          .                 get_deleter() const noexcept
  .            .            .           .          .          .          .          .          .                 { return _M_t._M_deleter(); }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Return @c true if the stored pointer is not null.
 30 ( 0.00%)   0           12 ( 0.00%)  2 ( 0.03%) 0          0          1 ( 0.03%) .          .                 explicit operator bool() const noexcept
 42 ( 0.00%)  18 ( 0.00%)   6 ( 0.00%)  .          .          .          .          .          .                 { return get() == pointer() ? false : true; }
348 ( 0.01%) 114 ( 0.02%) 102 ( 0.04%) 24 ( 0.41%) 0          0          11 ( 0.34%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::get() const (6x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 // Modifiers.
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Release ownership of any stored pointer.
  .            .            .           .          .          .          .          .          .                 pointer
  .            .            .           .          .          .          .          .          .                 release() noexcept
  .            .            .           .          .          .          .          .          .                 { return _M_t.release(); }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /** @brief Replace the stored pointer.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * @param __p  The new pointer to store.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * The deleter will be invoked if a pointer is already owned.
  .            .            .           .          .          .          .          .          .                  */
  .            .            .           .          .          .          .          .          .                 void
 42 ( 0.00%)   0           24 ( 0.01%)  .          .          .          .          .          .                 reset(pointer __p = pointer()) noexcept
  .            .            .           .          .          .          .          .          .                 {
  .            .            .           .          .          .          .          .          .           	static_assert(__is_invocable<deleter_type&, pointer>::value,
  .            .            .           .          .          .          .          .          .           		      "unique_ptr's deleter must be invocable with a pointer");
 48 ( 0.00%)  12 ( 0.00%)  12 ( 0.00%)  1 ( 0.02%) .          .          .          .          .           	_M_t.reset(std::move(__p));
2,070 ( 0.07%) 648 ( 0.09%) 522 ( 0.19%) 15 ( 0.25%) 1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::reset(std::thread*) (6x)
 42 ( 0.00%)  18 ( 0.00%)  12 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::thread*&>::type&& std::move<std::thread*&>(std::thread*&) (6x)
 24 ( 0.00%)  18 ( 0.00%)   .           .          .          .          .          .          .                 }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Exchange the pointer and deleter with another object.
  .            .            .           .          .          .          .          .          .                 void
  .            .            .           .          .          .          .          .          .                 swap(unique_ptr& __u) noexcept
  .            .            .           .          .          .          .          .          .                 {
  .            .            .           .          .          .          .          .          .           	static_assert(__is_swappable<_Dp>::value, "deleter must be swappable");
  .            .            .           .          .          .          .          .          .           	_M_t.swap(__u._M_t);
  .            .            .           .          .          .          .          .          .                 }
-- line 465 ----------------------------------------
-- line 953 ----------------------------------------
  .            .            .           .          .          .          .          .          .               struct _MakeUniq<_Tp[_Bound]>
  .            .            .           .          .          .          .          .          .               { struct __invalid_type { }; };
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             /// @endcond
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             /// std::make_unique for single objects
  .            .            .           .          .          .          .          .          .             template<typename _Tp, typename... _Args>
  .            .            .           .          .          .          .          .          .               inline typename _MakeUniq<_Tp>::__single_object
 90 ( 0.00%)   0           60 ( 0.02%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .               make_unique(_Args&&... __args)
260 ( 0.01%)  90 ( 0.01%)  60 ( 0.02%)  4 ( 0.07%) 0          0          4 ( 0.12%) .          .               { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
13,244 ( 0.47%) 3,414 ( 0.49%) 2,810 ( 1.00%) 347 ( 5.87%) 43 ( 0.32%) 131 ( 4.33%) 141 ( 4.36%) 19 ( 0.21%) 129 ( 5.39%)  => /usr/include/c++/11/bits/std_thread.h:std::thread::thread<void (ActiveObject::*)(), ActiveObject*, void>(void (ActiveObject::*&&)(), ActiveObject*&&) (6x)
1,104 ( 0.04%) 222 ( 0.03%) 166 ( 0.06%)  2 ( 0.03%) 0          2 ( 0.07%) 1 ( 0.03%) 0          2 ( 0.08%)  => ???:0x000000000010c8c0 (6x)
876 ( 0.03%) 264 ( 0.04%) 264 ( 0.09%)  4 ( 0.07%) 0          0          4 ( 0.12%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::unique_ptr<std::default_delete<std::thread>, void>(std::thread*) (6x)
 42 ( 0.00%)  18 ( 0.00%)  12 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:ActiveObject*&& std::forward<ActiveObject*>(std::remove_reference<ActiveObject*>::type&) (6x)
 42 ( 0.00%)  18 ( 0.00%)  12 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:void (ActiveObject::*&&std::forward<void (ActiveObject::*)()>(std::remove_reference<void (ActiveObject::*)()>::type&))() (6x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             /// std::make_unique for arrays of unknown bound
  .            .            .           .          .          .          .          .          .             template<typename _Tp>
  .            .            .           .          .          .          .          .          .               inline typename _MakeUniq<_Tp>::__array
  .            .            .           .          .          .          .          .          .               make_unique(size_t __num)
  .            .            .           .          .          .          .          .          .               { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             /// Disable std::make_unique for arrays of known bound
-- line 970 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/condition_variable
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr        D1mr       D1mw       ILmr       DLmr DLmw 

-- line 92 ----------------------------------------
  .           .           .           .          .          .          .          .          .               void
  .           .           .           .          .          .          .          .          .               notify_all() noexcept;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               void
  .           .           .           .          .          .          .          .          .               wait(unique_lock<mutex>& __lock) noexcept;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               template<typename _Predicate>
  .           .           .           .          .          .          .          .          .                 void
 60 ( 0.00%)  0          40 ( 0.01%) 11 ( 0.19%) 0          0          2 ( 0.06%) .          .                 wait(unique_lock<mutex>& __lock, _Predicate __p)
  .           .           .           .          .          .          .          .          .                 {
130 ( 0.00%)  0          20 ( 0.01%)  2 ( 0.03%) .          .          .          .          .           	while (!__p())
1,062 ( 0.04%) 348 ( 0.05%) 264 ( 0.09%)  4 ( 0.07%) 1 ( 0.01%) 0          1 ( 0.03%) .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/ActiveObject.cpp:ActiveObject::work()::{lambda()#1}::operator()() const (12x)
 50 ( 0.00%) 20 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .           	  wait(__lock);
2,525 ( 0.09%) 662 ( 0.10%) 422 ( 0.15%) 65 ( 1.10%) 20 ( 0.15%) 9 ( 0.30%) 26 ( 0.80%) 7 ( 0.08%) 5 ( 0.21%)  => ???:0x000000000010c670 (6x)
 40 ( 0.00%) 20 ( 0.00%)  0           1 ( 0.02%) .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           #ifdef _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT
  .           .           .           .          .          .          .          .          .               template<typename _Duration>
  .           .           .           .          .          .          .          .          .                 cv_status
  .           .           .           .          .          .          .          .          .                 wait_until(unique_lock<mutex>& __lock,
  .           .           .           .          .          .          .          .          .           		 const chrono::time_point<steady_clock, _Duration>& __atime)
  .           .           .           .          .          .          .          .          .                 { return __wait_until_impl(__lock, __atime); }
  .           .           .           .          .          .          .          .          .           #endif
-- line 112 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/new
--------------------------------------------------------------------------------
Ir           Dr           Dw           I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 167 ----------------------------------------
  .            .            .          .          .          .          .          .          .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
  .            .            .          .          .          .          .          .          .           void operator delete[](void*, std::size_t, std::align_val_t)
  .            .            .          .          .          .          .          .          .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
  .            .            .          .          .          .          .          .          .           #endif // __cpp_sized_deallocation
  .            .            .          .          .          .          .          .          .           #endif // __cpp_aligned_new
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .           // Default placement versions of operator new.
  .            .            .          .          .          .          .          .          .           _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
280 ( 0.01%) 105 ( 0.02%) 105 ( 0.04%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           { return __p; }
  .            .            .          .          .          .          .          .          .           _GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
  .            .            .          .          .          .          .          .          .           { return __p; }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .           // Default placement versions of operator delete.
  .            .            .          .          .          .          .          .          .           inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
  .            .            .          .          .          .          .          .          .           inline void operator delete[](void*, void*) _GLIBCXX_USE_NOEXCEPT { }
  .            .            .          .          .          .          .          .          .           //@}
  .            .            .          .          .          .          .          .          .           } // extern "C++"
-- line 183 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/move.h
--------------------------------------------------------------------------------
Ir             Dr           Dw           I1mr        D1mr       D1mw        ILmr       DLmr       DLmw        

-- line 41 ----------------------------------------
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .             // Used, in C++03 mode too, by allocators, etc.
    .            .            .           .          .           .          .          .           .             /**
    .            .            .           .          .           .          .          .           .              *  @brief Same as C++11 std::addressof
    .            .            .           .          .           .          .          .           .              *  @ingroup utilities
    .            .            .           .          .           .          .          .           .              */
    .            .            .           .          .           .          .          .           .             template<typename _Tp>
    .            .            .           .          .           .          .          .           .               inline _GLIBCXX_CONSTEXPR _Tp*
  220 ( 0.01%)   0          110 ( 0.04%)  .          .           .          .          .           .               __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  165 ( 0.01%) 165 ( 0.02%)   0           1 ( 0.02%) 0           0          1 ( 0.03%) .           .               { return __builtin_addressof(__r); }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .           #if __cplusplus >= 201103L
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .           _GLIBCXX_END_NAMESPACE_VERSION
    .            .            .           .          .           .          .          .           .           } // namespace
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .           #include <type_traits> // Brings in std::declval too.
    .            .            .           .          .           .          .          .           .           
-- line 58 ----------------------------------------
-- line 69 ----------------------------------------
    .            .            .           .          .           .          .          .           .              *  @brief  Forward an lvalue.
    .            .            .           .          .           .          .          .           .              *  @return The parameter cast to the specified type.
    .            .            .           .          .           .          .          .           .              *
    .            .            .           .          .           .          .          .           .              *  This function is used to implement "perfect forwarding".
    .            .            .           .          .           .          .          .           .              */
    .            .            .           .          .           .          .          .           .             template<typename _Tp>
    .            .            .           .          .           .          .          .           .               _GLIBCXX_NODISCARD
    .            .            .           .          .           .          .          .           .               constexpr _Tp&&
1,262 ( 0.04%)   0          640 ( 0.23%)  4 ( 0.07%) 0           0          4 ( 0.12%) .           .               forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  960 ( 0.03%) 960 ( 0.14%)   0           2 ( 0.03%) 0           0          2 ( 0.06%) .           .               { return static_cast<_Tp&&>(__t); }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .             /**
    .            .            .           .          .           .          .          .           .              *  @brief  Forward an rvalue.
    .            .            .           .          .           .          .          .           .              *  @return The parameter cast to the specified type.
    .            .            .           .          .           .          .          .           .              *
    .            .            .           .          .           .          .          .           .              *  This function is used to implement "perfect forwarding".
    .            .            .           .          .           .          .          .           .              */
    .            .            .           .          .           .          .          .           .             template<typename _Tp>
-- line 86 ----------------------------------------
-- line 96 ----------------------------------------
    .            .            .           .          .           .          .          .           .             /**
    .            .            .           .          .           .          .          .           .              *  @brief  Convert a value to an rvalue.
    .            .            .           .          .           .          .          .           .              *  @param  __t  A thing of arbitrary type.
    .            .            .           .          .           .          .          .           .              *  @return The parameter cast to an rvalue-reference to allow moving it.
    .            .            .           .          .           .          .          .           .             */
    .            .            .           .          .           .          .          .           .             template<typename _Tp>
    .            .            .           .          .           .          .          .           .               _GLIBCXX_NODISCARD
    .            .            .           .          .           .          .          .           .               constexpr typename std::remove_reference<_Tp>::type&&
  656 ( 0.02%)   0          328 ( 0.12%) 20 ( 0.34%) 0          10 ( 0.33%) 5 ( 0.15%) 0          10 ( 0.42%)      move(_Tp&& __t) noexcept
  492 ( 0.02%) 492 ( 0.07%)   0           5 ( 0.08%) 0           0          2 ( 0.06%) .           .               { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .             template<typename _Tp>
    .            .            .           .          .           .          .          .           .               struct __move_if_noexcept_cond
    .            .            .           .          .           .          .          .           .               : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
    .            .            .           .          .           .          .          .           .                               is_copy_constructible<_Tp>>::type { };
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .             /**
-- line 113 ----------------------------------------
-- line 188 ----------------------------------------
    .            .            .           .          .           .          .          .           .               inline
    .            .            .           .          .           .          .          .           .           #if __cplusplus >= 201103L
    .            .            .           .          .           .          .          .           .               typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
    .            .            .           .          .           .          .          .           .           			      is_move_constructible<_Tp>,
    .            .            .           .          .           .          .          .           .           			      is_move_assignable<_Tp>>::value>::type
    .            .            .           .          .           .          .          .           .           #else
    .            .            .           .          .           .          .          .           .               void
    .            .            .           .          .           .          .          .           .           #endif
  222 ( 0.01%)  24 ( 0.00%) 102 ( 0.04%)  8 ( 0.14%) 0           0          3 ( 0.09%) .           .               swap(_Tp& __a, _Tp& __b)
    .            .            .           .          .           .          .          .           .               _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
    .            .            .           .          .           .          .          .           .           				is_nothrow_move_assignable<_Tp>>::value)
    .            .            .           .          .           .          .          .           .               {
    .            .            .           .          .           .          .          .           .           #if __cplusplus < 201103L
    .            .            .           .          .           .          .          .           .                 // concept requirements
    .            .            .           .          .           .          .          .           .                 __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
    .            .            .           .          .           .          .          .           .           #endif
  150 ( 0.01%)  48 ( 0.01%)  54 ( 0.02%)  7 ( 0.12%) 0           0          3 ( 0.09%) .           .                 _Tp __tmp = _GLIBCXX_MOVE(__a);
   42 ( 0.00%)  18 ( 0.00%)  12 ( 0.00%)  .          .           .          .          .           .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&) (6x)
  264 ( 0.01%) 132 ( 0.02%) 108 ( 0.04%)  6 ( 0.10%) 1 ( 0.01%)  0          2 ( 0.06%) .           .                 __a = _GLIBCXX_MOVE(__b);
   42 ( 0.00%)  18 ( 0.00%)  12 ( 0.00%)  .          .           .          .          .           .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&) (6x)
  264 ( 0.01%) 108 ( 0.02%) 108 ( 0.04%)  7 ( 0.12%) 0           0          2 ( 0.06%) .           .                 __b = _GLIBCXX_MOVE(__tmp);
   42 ( 0.00%)  18 ( 0.00%)  12 ( 0.00%)  .          .           .          .          .           .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&) (6x)
  150 ( 0.01%) 102 ( 0.01%)   0           2 ( 0.03%) 0           0          2 ( 0.06%) .           .               }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .             // _GLIBCXX_RESOLVE_LIB_DEFECTS
    .            .            .           .          .           .          .          .           .             // DR 809. std::swap should be overloaded for array types.
    .            .            .           .          .           .          .          .           .             /// Swap the contents of two arrays.
    .            .            .           .          .           .          .          .           .             template<typename _Tp, size_t _Nm>
    .            .            .           .          .           .          .          .           .               _GLIBCXX20_CONSTEXPR
    .            .            .           .          .           .          .          .           .               inline
    .            .            .           .          .           .          .          .           .           #if __cplusplus >= 201103L
-- line 215 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/std_mutex.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 57 ----------------------------------------
  .           .           .          .          .          .          .          .          .             class __mutex_base
  .           .           .          .          .          .          .          .          .             {
  .           .           .          .          .          .          .          .          .             protected:
  .           .           .          .          .          .          .          .          .               typedef __gthread_mutex_t			__native_type;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #ifdef __GTHREAD_MUTEX_INIT
  .           .           .          .          .          .          .          .          .               __native_type  _M_mutex = __GTHREAD_MUTEX_INIT;
  .           .           .          .          .          .          .          .          .           
117 ( 0.00%) 27 ( 0.00%) 63 ( 0.02%) 0          0          6 ( 0.20%) 0          0          6 ( 0.25%)      constexpr __mutex_base() noexcept = default;
  .           .           .          .          .          .          .          .          .           #else
  .           .           .          .          .          .          .          .          .               __native_type  _M_mutex;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               __mutex_base() noexcept
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 // XXX EAGAIN, ENOMEM, EPERM, EBUSY(may), EINVAL(may)
  .           .           .          .          .          .          .          .          .                 __GTHREAD_MUTEX_INIT_FUNCTION(&_M_mutex);
  .           .           .          .          .          .          .          .          .               }
-- line 73 ----------------------------------------
-- line 83 ----------------------------------------
  .           .           .          .          .          .          .          .          .             class mutex : private __mutex_base
  .           .           .          .          .          .          .          .          .             {
  .           .           .          .          .          .          .          .          .             public:
  .           .           .          .          .          .          .          .          .               typedef __native_type* 			native_handle_type;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #ifdef __GTHREAD_MUTEX_INIT
  .           .           .          .          .          .          .          .          .               constexpr
  .           .           .          .          .          .          .          .          .           #endif
 99 ( 0.00%) 27 ( 0.00%) 27 ( 0.01%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .               mutex() noexcept = default;
117 ( 0.00%) 27 ( 0.00%) 63 ( 0.02%) 0          0          6 ( 0.20%) 0          0          6 ( 0.25%)  => /usr/include/c++/11/bits/std_mutex.h:std::__mutex_base::__mutex_base() (9x)
  .           .           .          .          .          .          .          .          .               ~mutex() = default;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               mutex(const mutex&) = delete;
  .           .           .          .          .          .          .          .          .               mutex& operator=(const mutex&) = delete;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               void
 85 ( 0.00%)  0          34 ( 0.01%) 6 ( 0.10%) 0          0          1 ( 0.03%) .          .               lock()
  .           .           .          .          .          .          .          .          .               {
 68 ( 0.00%) 17 ( 0.00%) 34 ( 0.01%) 0          0          4 ( 0.13%) 0          0          4 ( 0.17%)        int __e = __gthread_mutex_lock(&_M_mutex);
969 ( 0.03%) 238 ( 0.03%) 153 ( 0.05%) 42 ( 0.71%) 1 ( 0.01%) 6 ( 0.20%) 2 ( 0.06%) 0          6 ( 0.25%)  => /usr/include/x86_64-linux-gnu/c++/11/bits/gthr-default.h:__gthread_mutex_lock(pthread_mutex_t*) (17x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 // EINVAL, EAGAIN, EBUSY, EINVAL, EDEADLK(may)
 34 ( 0.00%) 17 ( 0.00%)  .          .          .          .          .          .          .                 if (__e)
  .           .           .          .          .          .          .          .          .           	__throw_system_error(__e);
 51 ( 0.00%) 34 ( 0.00%)  .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               bool
  .           .           .          .          .          .          .          .          .               try_lock() noexcept
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 // XXX EINVAL, EAGAIN, EBUSY
  .           .           .          .          .          .          .          .          .                 return !__gthread_mutex_trylock(&_M_mutex);
  .           .           .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               void
 85 ( 0.00%)  0          34 ( 0.01%) .          .          .          .          .          .               unlock()
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 // XXX EINVAL, EAGAIN, EPERM
 51 ( 0.00%) 17 ( 0.00%) 17 ( 0.01%) .          .          .          .          .          .                 __gthread_mutex_unlock(&_M_mutex);
912 ( 0.03%) 217 ( 0.03%) 166 ( 0.06%) 11 ( 0.19%) 1 ( 0.01%) 0          1 ( 0.03%) .          .           => /usr/include/x86_64-linux-gnu/c++/11/bits/gthr-default.h:__gthread_mutex_unlock(pthread_mutex_t*) (17x)
 51 ( 0.00%) 34 ( 0.00%)  .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               native_handle_type
  .           .           .          .          .          .          .          .          .               native_handle() noexcept
  .           .           .          .          .          .          .          .          .               { return &_M_mutex; }
  .           .           .          .          .          .          .          .          .             };
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             // Implementation details for std::condition_variable
  .           .           .          .          .          .          .          .          .             class __condvar
-- line 127 ----------------------------------------
-- line 220 ----------------------------------------
  .           .           .          .          .          .          .          .          .              * ownership in the destructor.
  .           .           .          .          .          .          .          .          .              */
  .           .           .          .          .          .          .          .          .             template<typename _Mutex>
  .           .           .          .          .          .          .          .          .               class lock_guard
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .               public:
  .           .           .          .          .          .          .          .          .                 typedef _Mutex mutex_type;
  .           .           .          .          .          .          .          .          .           
  9 ( 0.00%)  2 ( 0.00%)  4 ( 0.00%) 1 ( 0.02%) .          .          .          .          .                 explicit lock_guard(mutex_type& __m) : _M_device(__m)
  7 ( 0.00%)  4 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .                 { _M_device.lock(); }
 71 ( 0.00%) 18 ( 0.00%) 13 ( 0.00%) 2 ( 0.03%) .          .          .          .          .           => /usr/include/c++/11/bits/std_mutex.h:std::mutex::lock() (1x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
  .           .           .          .          .          .          .          .          .                 { } // calling thread owns mutex
  .           .           .          .          .          .          .          .          .           
  5 ( 0.00%)  0           2 ( 0.00%) 1 ( 0.02%) .          .          .          .          .                 ~lock_guard()
  7 ( 0.00%)  4 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .                 { _M_device.unlock(); }
 57 ( 0.00%) 14 ( 0.00%) 11 ( 0.00%) 2 ( 0.03%) 1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/std_mutex.h:std::mutex::unlock() (1x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 lock_guard(const lock_guard&) = delete;
  .           .           .          .          .          .          .          .          .                 lock_guard& operator=(const lock_guard&) = delete;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               private:
  .           .           .          .          .          .          .          .          .                 mutex_type&  _M_device;
  .           .           .          .          .          .          .          .          .               };
  .           .           .          .          .          .          .          .          .           
-- line 243 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/tuple
--------------------------------------------------------------------------------
Ir             Dr           Dw           I1mr        D1mr       D1mw        ILmr       DLmr       DLmw        

-- line 72 ----------------------------------------
    .            .            .           .          .           .          .          .           .             template<size_t _Idx, typename _Head,
    .            .            .           .          .           .          .          .           .           	   bool = __empty_not_final<_Head>::value>
    .            .            .           .          .           .          .          .           .               struct _Head_base;
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .           #if __has_cpp_attribute(__no_unique_address__)
    .            .            .           .          .           .          .          .           .             template<size_t _Idx, typename _Head>
    .            .            .           .          .           .          .          .           .               struct _Head_base<_Idx, _Head, true>
    .            .            .           .          .           .          .          .           .               {
  104 ( 0.00%)   0           52 ( 0.02%)  2 ( 0.03%) 0           0          2 ( 0.06%) .           .                 constexpr _Head_base()
   78 ( 0.00%)  52 ( 0.01%)   .           .          .           .          .          .           .                 : _M_head_impl() { }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 constexpr _Head_base(const _Head& __h)
    .            .            .           .          .           .          .          .           .                 : _M_head_impl(__h) { }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 constexpr _Head_base(const _Head_base&) = default;
    .            .            .           .          .           .          .          .           .                 constexpr _Head_base(_Head_base&&) = default;
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 template<typename _UHead>
-- line 89 ----------------------------------------
-- line 116 ----------------------------------------
    .            .            .           .          .           .          .          .           .           	{ }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 template<typename _Alloc, typename _UHead>
    .            .            .           .          .           .          .          .           .           	_GLIBCXX20_CONSTEXPR
    .            .            .           .          .           .          .          .           .           	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
    .            .            .           .          .           .          .          .           .           	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 static constexpr _Head&
  154 ( 0.01%)  66 ( 0.01%)  44 ( 0.02%)  2 ( 0.03%) .           .          .          .           .                 _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 static constexpr const _Head&
    .            .            .           .          .           .          .          .           .                 _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 [[__no_unique_address__]] _Head _M_head_impl;
    .            .            .           .          .           .          .          .           .               };
    .            .            .           .          .           .          .          .           .           #else
    .            .            .           .          .           .          .          .           .             template<size_t _Idx, typename _Head>
-- line 132 ----------------------------------------
-- line 181 ----------------------------------------
    .            .            .           .          .           .          .          .           .                 static constexpr const _Head&
    .            .            .           .          .           .          .          .           .                 _M_head(const _Head_base& __b) noexcept { return __b; }
    .            .            .           .          .           .          .          .           .               };
    .            .            .           .          .           .          .          .           .           #endif
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .             template<size_t _Idx, typename _Head>
    .            .            .           .          .           .          .          .           .               struct _Head_base<_Idx, _Head, false>
    .            .            .           .          .           .          .          .           .               {
  104 ( 0.00%)   0           52 ( 0.02%)  .          .           .          .          .           .                 constexpr _Head_base()
  130 ( 0.00%)  78 ( 0.01%)  26 ( 0.01%)  1 ( 0.02%) 0           0          1 ( 0.03%) .           .                 : _M_head_impl() { }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 constexpr _Head_base(const _Head& __h)
    .            .            .           .          .           .          .          .           .                 : _M_head_impl(__h) { }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 constexpr _Head_base(const _Head_base&) = default;
    .            .            .           .          .           .          .          .           .                 constexpr _Head_base(_Head_base&&) = default;
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 template<typename _UHead>
  120 ( 0.00%)   0           60 ( 0.02%)  8 ( 0.14%) 0           0          3 ( 0.09%) .           .                   constexpr _Head_base(_UHead&& __h)
  200 ( 0.01%) 110 ( 0.02%)  50 ( 0.02%)  7 ( 0.12%) 0           0          2 ( 0.06%) .           .           	: _M_head_impl(std::forward<_UHead>(__h)) { }
   28 ( 0.00%)  12 ( 0.00%)   8 ( 0.00%)  .          .           .          .          .           .           => /usr/include/c++/11/bits/move.h:LeaderFollower*&& std::forward<LeaderFollower*>(std::remove_reference<LeaderFollower*>::type&) (4x)
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 _GLIBCXX20_CONSTEXPR
    .            .            .           .          .           .          .          .           .                 _Head_base(allocator_arg_t, __uses_alloc0)
    .            .            .           .          .           .          .          .           .                 : _M_head_impl() { }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 template<typename _Alloc>
    .            .            .           .          .           .          .          .           .           	_GLIBCXX20_CONSTEXPR
    .            .            .           .          .           .          .          .           .           	_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
-- line 208 ----------------------------------------
-- line 225 ----------------------------------------
    .            .            .           .          .           .          .          .           .           	{ }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 template<typename _Alloc, typename _UHead>
    .            .            .           .          .           .          .          .           .           	_GLIBCXX20_CONSTEXPR
    .            .            .           .          .           .          .          .           .           	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
    .            .            .           .          .           .          .          .           .           	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 static constexpr _Head&
  770 ( 0.03%) 330 ( 0.05%) 220 ( 0.08%)  2 ( 0.03%) 0           0          2 ( 0.06%) .           .                 _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 static constexpr const _Head&
  182 ( 0.01%)  78 ( 0.01%)  52 ( 0.02%)  3 ( 0.05%) 0           0          2 ( 0.06%) .           .                 _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 _Head _M_head_impl;
    .            .            .           .          .           .          .          .           .               };
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .             /**
    .            .            .           .          .           .          .          .           .              * Contains the actual implementation of the @c tuple template, stored
    .            .            .           .          .           .          .          .           .              * as a recursive inheritance hierarchy from the first element (most
    .            .            .           .          .           .          .          .           .              * derived class) to the last (least derived class). The @c Idx
-- line 244 ----------------------------------------
-- line 260 ----------------------------------------
    .            .            .           .          .           .          .          .           .                 private _Head_base<_Idx, _Head>
    .            .            .           .          .           .          .          .           .               {
    .            .            .           .          .           .          .          .           .                 template<size_t, typename...> friend struct _Tuple_impl;
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
    .            .            .           .          .           .          .          .           .                 typedef _Head_base<_Idx, _Head> _Base;
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 static constexpr _Head&
1,010 ( 0.04%) 300 ( 0.04%) 300 ( 0.11%)  3 ( 0.05%) 0           0          1 ( 0.03%) .           .                 _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  140 ( 0.00%)  60 ( 0.01%)  40 ( 0.01%)  .          .           .          .          .           .           => /usr/include/c++/11/tuple:std::_Head_base<0ul, std::thread::_State*, false>::_M_head(std::_Head_base<0ul, std::thread::_State*, false>&) (20x)
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 static constexpr const _Head&
  260 ( 0.01%)  78 ( 0.01%)  78 ( 0.03%)  2 ( 0.03%) 0           0          2 ( 0.06%) .           .                 _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  182 ( 0.01%)  78 ( 0.01%)  52 ( 0.02%)  3 ( 0.05%) 0           0          2 ( 0.06%) .           .           => /usr/include/c++/11/tuple:std::_Head_base<0ul, std::thread*, false>::_M_head(std::_Head_base<0ul, std::thread*, false> const&) (26x)
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 static constexpr _Inherited&
    .            .            .           .          .           .          .          .           .                 _M_tail(_Tuple_impl& __t) noexcept { return __t; }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 static constexpr const _Inherited&
    .            .            .           .          .           .          .          .           .                 _M_tail(const _Tuple_impl& __t) noexcept { return __t; }
    .            .            .           .          .           .          .          .           .           
  130 ( 0.00%)   0           52 ( 0.02%)  2 ( 0.03%) 0           0          2 ( 0.06%) .           .                 constexpr _Tuple_impl()
  234 ( 0.01%) 104 ( 0.02%)  52 ( 0.02%)  1 ( 0.02%) 0           0          1 ( 0.03%) .           .                 : _Inherited(), _Base() { }
  180 ( 0.01%)  50 ( 0.01%)  50 ( 0.02%)  2 ( 0.03%) 0           0          2 ( 0.06%) .           .           => /usr/include/c++/11/tuple:std::_Tuple_impl<1ul, std::default_delete<std::thread::_State> >::_Tuple_impl() (10x)
   90 ( 0.00%)  30 ( 0.00%)  30 ( 0.01%)  1 ( 0.02%) 0           0          1 ( 0.03%) .           .           => /usr/include/c++/11/tuple:std::_Head_base<0ul, std::thread::_State*, false>::_Head_base() (10x)
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 explicit constexpr
    .            .            .           .          .           .          .          .           .                 _Tuple_impl(const _Head& __head, const _Tail&... __tail)
    .            .            .           .          .           .          .          .           .                 : _Inherited(__tail...), _Base(__head)
    .            .            .           .          .           .          .          .           .                 { }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 template<typename _UHead, typename... _UTail,
    .            .            .           .          .           .          .          .           .           	       typename = __enable_if_t<sizeof...(_Tail) == sizeof...(_UTail)>>
    .            .            .           .          .           .          .          .           .           	explicit constexpr
   80 ( 0.00%)   0           50 ( 0.02%)  1 ( 0.02%) 0           0          1 ( 0.03%) .           .           	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
    .            .            .           .          .           .          .          .           .           	: _Inherited(std::forward<_UTail>(__tail)...),
  150 ( 0.01%)  40 ( 0.01%)  40 ( 0.01%)  7 ( 0.12%) 0           0          2 ( 0.06%) .           .           	  _Base(std::forward<_UHead>(__head))
  282 ( 0.01%)  96 ( 0.01%)  90 ( 0.03%) 14 ( 0.24%) 0           0          4 ( 0.12%) .           .           => /usr/include/c++/11/tuple:std::_Tuple_impl<1ul, ActiveObject*>::_Tuple_impl<ActiveObject*>(ActiveObject*&&) (6x)
  144 ( 0.01%)  54 ( 0.01%)  48 ( 0.02%)  .          .           .          .          .           .           => /usr/include/c++/11/tuple:std::_Head_base<0ul, void (ActiveObject::*)(), false>::_Head_base<void (ActiveObject::*)()>(void (ActiveObject::*&&)()) (6x)
   42 ( 0.00%)  18 ( 0.00%)  12 ( 0.00%)  .          .           .          .          .           .           => /usr/include/c++/11/bits/move.h:void (ActiveObject::*&&std::forward<void (ActiveObject::*)()>(std::remove_reference<void (ActiveObject::*)()>::type&))() (6x)
   42 ( 0.00%)  18 ( 0.00%)  12 ( 0.00%)  .          .           .          .          .           .           => /usr/include/c++/11/bits/move.h:ActiveObject*&& std::forward<ActiveObject*>(std::remove_reference<ActiveObject*>::type&) (6x)
   40 ( 0.00%)  30 ( 0.00%)   .           .          .           .          .          .           .           	{ }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 constexpr _Tuple_impl(const _Tuple_impl&) = default;
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
    .            .            .           .          .           .          .          .           .                 // 2729. Missing SFINAE on std::pair::operator=
    .            .            .           .          .           .          .          .           .                 _Tuple_impl& operator=(const _Tuple_impl&) = delete;
    .            .            .           .          .           .          .          .           .           
   72 ( 0.00%)  28 ( 0.00%)  20 ( 0.01%)  .          .           .          .          .           .                 _Tuple_impl(_Tuple_impl&&) = default;
   32 ( 0.00%)   8 ( 0.00%)  12 ( 0.00%)  .          .           .          .          .           .           => /usr/include/c++/11/tuple:std::_Tuple_impl<1ul, std::default_delete<std::thread> >::_Tuple_impl(std::_Tuple_impl<1ul, std::default_delete<std::thread> >&&) (4x)
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 template<typename... _UElements>
    .            .            .           .          .           .          .          .           .           	constexpr
    .            .            .           .          .           .          .          .           .           	_Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
    .            .            .           .          .           .          .          .           .           	: _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
    .            .            .           .          .           .          .          .           .           	  _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in))
    .            .            .           .          .           .          .          .           .           	{ }
    .            .            .           .          .           .          .          .           .           
-- line 309 ----------------------------------------
-- line 416 ----------------------------------------
    .            .            .           .          .           .          .          .           .               struct _Tuple_impl<_Idx, _Head>
    .            .            .           .          .           .          .          .           .               : private _Head_base<_Idx, _Head>
    .            .            .           .          .           .          .          .           .               {
    .            .            .           .          .           .          .          .           .                 template<size_t, typename...> friend struct _Tuple_impl;
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 typedef _Head_base<_Idx, _Head> _Base;
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 static constexpr _Head&
  320 ( 0.01%)  96 ( 0.01%)  96 ( 0.03%)  3 ( 0.05%) 0          10 ( 0.33%) 3 ( 0.09%) 0          10 ( 0.42%)        _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   42 ( 0.00%)  18 ( 0.00%)  12 ( 0.00%)  1 ( 0.02%) 0           0          1 ( 0.03%) .           .           => /usr/include/c++/11/tuple:std::_Head_base<1ul, ActiveObject*, false>::_M_head(std::_Head_base<1ul, ActiveObject*, false>&) (6x)
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 static constexpr const _Head&
    .            .            .           .          .           .          .          .           .                 _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 constexpr
  130 ( 0.00%)   0           52 ( 0.02%)  2 ( 0.03%) 0           0          2 ( 0.06%) .           .                 _Tuple_impl()
  156 ( 0.01%)  78 ( 0.01%)  26 ( 0.01%)  2 ( 0.03%) 0           0          1 ( 0.03%) .           .                 : _Base() { }
  112 ( 0.00%)  32 ( 0.00%)  32 ( 0.01%)  1 ( 0.02%) 0           0          1 ( 0.03%) .           .           => /usr/include/c++/11/tuple:std::_Head_base<1ul, std::default_delete<std::thread>, true>::_Head_base() (16x)
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 explicit constexpr
    .            .            .           .          .           .          .          .           .                 _Tuple_impl(const _Head& __head)
    .            .            .           .          .           .          .          .           .                 : _Base(__head)
    .            .            .           .          .           .          .          .           .                 { }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 template<typename _UHead>
    .            .            .           .          .           .          .          .           .           	explicit constexpr
   70 ( 0.00%)   0           40 ( 0.01%)  2 ( 0.03%) 0           0          2 ( 0.06%) .           .           	_Tuple_impl(_UHead&& __head)
   70 ( 0.00%)  20 ( 0.00%)  20 ( 0.01%)  .          .           .          .          .           .           	: _Base(std::forward<_UHead>(__head))
   88 ( 0.00%)  32 ( 0.00%)  28 ( 0.01%)  2 ( 0.03%) 0           0          2 ( 0.06%) .           .           => /usr/include/c++/11/tuple:std::_Head_base<1ul, LeaderFollower*, false>::_Head_base<LeaderFollower*>(LeaderFollower*&&) (4x)
   28 ( 0.00%)  12 ( 0.00%)   8 ( 0.00%)  .          .           .          .          .           .           => /usr/include/c++/11/bits/move.h:LeaderFollower*&& std::forward<LeaderFollower*>(std::remove_reference<LeaderFollower*>::type&) (4x)
   40 ( 0.00%)  30 ( 0.00%)   0           1 ( 0.02%) 0           0          1 ( 0.03%) .           .           	{ }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 constexpr _Tuple_impl(const _Tuple_impl&) = default;
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
    .            .            .           .          .           .          .          .           .                 // 2729. Missing SFINAE on std::pair::operator=
    .            .            .           .          .           .          .          .           .                 _Tuple_impl& operator=(const _Tuple_impl&) = delete;
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .           #if _GLIBCXX_INLINE_VERSION
    .            .            .           .          .           .          .          .           .                 _Tuple_impl(_Tuple_impl&&) = default;
    .            .            .           .          .           .          .          .           .           #else
    .            .            .           .          .           .          .          .           .                 constexpr
   20 ( 0.00%)   0           12 ( 0.00%)  .          .           .          .          .           .                 _Tuple_impl(_Tuple_impl&& __in)
    .            .            .           .          .           .          .          .           .                 noexcept(is_nothrow_move_constructible<_Head>::value)
    .            .            .           .          .           .          .          .           .                 : _Base(static_cast<_Base&&>(__in))
   12 ( 0.00%)   8 ( 0.00%)   .           .          .           .          .          .           .                 { }
    .            .            .           .          .           .          .          .           .           #endif
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 template<typename _UHead>
    .            .            .           .          .           .          .          .           .           	constexpr
    .            .            .           .          .           .          .          .           .           	_Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
    .            .            .           .          .           .          .          .           .           	: _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in))
    .            .            .           .          .           .          .          .           .           	{ }
    .            .            .           .          .           .          .          .           .           
-- line 465 ----------------------------------------
-- line 1041 ----------------------------------------
    .            .            .           .          .           .          .          .           .                 template<typename _U1>
    .            .            .           .          .           .          .          .           .           	static constexpr bool __is_alloc_arg()
    .            .            .           .          .           .          .          .           .           	{ return is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value; }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .               public:
    .            .            .           .          .           .          .          .           .                 template<bool _Dummy = true,
    .            .            .           .          .           .          .          .           .           	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
    .            .            .           .          .           .          .          .           .           	constexpr
  130 ( 0.00%)   0           52 ( 0.02%)  9 ( 0.15%) 0           0          3 ( 0.09%) .           .           	tuple()
    .            .            .           .          .           .          .          .           .           	noexcept(__nothrow_default_constructible())
  156 ( 0.01%)  78 ( 0.01%)  26 ( 0.01%)  .          .           .          .          .           .           	: _Inherited() { }
  410 ( 0.01%) 120 ( 0.02%) 120 ( 0.04%)  4 ( 0.07%) 0           0          4 ( 0.12%) .           .           => /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl() (10x)
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 template<bool _Dummy = true,
    .            .            .           .          .           .          .          .           .           	       _ExplicitDefaultCtor<_Dummy, _T1, _T2> = false>
    .            .            .           .          .           .          .          .           .           	explicit constexpr
    .            .            .           .          .           .          .          .           .           	tuple()
    .            .            .           .          .           .          .          .           .           	noexcept(__nothrow_default_constructible())
    .            .            .           .          .           .          .          .           .           	: _Inherited() { }
    .            .            .           .          .           .          .          .           .           
-- line 1059 ----------------------------------------
-- line 1069 ----------------------------------------
    .            .            .           .          .           .          .          .           .           	explicit constexpr
    .            .            .           .          .           .          .          .           .           	tuple(const _T1& __a1, const _T2& __a2)
    .            .            .           .          .           .          .          .           .           	noexcept(__nothrow_constructible<const _T1&, const _T2&>())
    .            .            .           .          .           .          .          .           .           	: _Inherited(__a1, __a2) { }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 template<typename _U1, typename _U2,
    .            .            .           .          .           .          .          .           .           	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
    .            .            .           .          .           .          .          .           .           	constexpr
   90 ( 0.00%)   0           60 ( 0.02%)  2 ( 0.03%) 0           0          2 ( 0.06%) .           .           	tuple(_U1&& __a1, _U2&& __a2)
    .            .            .           .          .           .          .          .           .           	noexcept(__nothrow_constructible<_U1, _U2>())
  180 ( 0.01%)  70 ( 0.01%)  30 ( 0.01%)  1 ( 0.02%) 0           0          1 ( 0.03%) .           .           	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
  448 ( 0.02%) 152 ( 0.02%) 144 ( 0.05%)  6 ( 0.10%) 0           0          6 ( 0.19%) .           .           => /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, void (LeaderFollower::*)(), LeaderFollower*>::_Tuple_impl<void (LeaderFollower::*)(), LeaderFollower*, void>(void (LeaderFollower::*&&)(), LeaderFollower*&&) (4x)
   28 ( 0.00%)  12 ( 0.00%)   8 ( 0.00%)  .          .           .          .          .           .           => /usr/include/c++/11/bits/move.h:void (LeaderFollower::*&&std::forward<void (LeaderFollower::*)()>(std::remove_reference<void (LeaderFollower::*)()>::type&))() (4x)
   28 ( 0.00%)  12 ( 0.00%)   8 ( 0.00%)  .          .           .          .          .           .           => /usr/include/c++/11/bits/move.h:LeaderFollower*&& std::forward<LeaderFollower*>(std::remove_reference<LeaderFollower*>::type&) (4x)
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 template<typename _U1, typename _U2,
    .            .            .           .          .           .          .          .           .           	       _ExplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = false>
    .            .            .           .          .           .          .          .           .           	explicit constexpr
    .            .            .           .          .           .          .          .           .           	tuple(_U1&& __a1, _U2&& __a2)
    .            .            .           .          .           .          .          .           .           	noexcept(__nothrow_constructible<_U1, _U2>())
    .            .            .           .          .           .          .          .           .           	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 constexpr tuple(const tuple&) = default;
    .            .            .           .          .           .          .          .           .           
   56 ( 0.00%)  16 ( 0.00%)  16 ( 0.01%)  .          .           .          .          .           .                 constexpr tuple(tuple&&) = default;
  104 ( 0.00%)  36 ( 0.01%)  32 ( 0.01%)  .          .           .          .          .           .           => /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, std::thread*, std::default_delete<std::thread> >::_Tuple_impl(std::_Tuple_impl<0ul, std::thread*, std::default_delete<std::thread> >&&) (4x)
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .                 template<typename _U1, typename _U2,
    .            .            .           .          .           .          .          .           .           	       _ImplicitCtor<true, const _U1&, const _U2&> = true>
    .            .            .           .          .           .          .          .           .           	constexpr
    .            .            .           .          .           .          .          .           .           	tuple(const tuple<_U1, _U2>& __in)
    .            .            .           .          .           .          .          .           .           	noexcept(__nothrow_constructible<const _U1&, const _U2&>())
    .            .            .           .          .           .          .          .           .           	: _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }
    .            .            .           .          .           .          .          .           .           
-- line 1098 ----------------------------------------
-- line 1369 ----------------------------------------
    .            .            .           .          .           .          .          .           .               struct tuple_element<__i, tuple<>>
    .            .            .           .          .           .          .          .           .               {
    .            .            .           .          .           .          .          .           .                 static_assert(__i < tuple_size<tuple<>>::value,
    .            .            .           .          .           .          .          .           .           	  "tuple index must be in range");
    .            .            .           .          .           .          .          .           .               };
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .             template<size_t __i, typename _Head, typename... _Tail>
    .            .            .           .          .           .          .          .           .               constexpr _Head&
  660 ( 0.02%)   0          264 ( 0.09%)  6 ( 0.10%) 0           0          3 ( 0.09%) .           .               __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  660 ( 0.02%) 396 ( 0.06%) 132 ( 0.05%)  3 ( 0.05%) 0           0          2 ( 0.06%) .           .               { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
   68 ( 0.00%)  24 ( 0.00%)  20 ( 0.01%)  2 ( 0.03%) 0           4 ( 0.13%) 2 ( 0.06%) 0           4 ( 0.17%)  => /usr/include/c++/11/tuple:std::_Tuple_impl<1ul, LeaderFollower*>::_M_head(std::_Tuple_impl<1ul, LeaderFollower*>&) (4x)
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .             template<size_t __i, typename _Head, typename... _Tail>
    .            .            .           .          .           .          .          .           .               constexpr const _Head&
  130 ( 0.00%)   0           52 ( 0.02%) 14 ( 0.24%) 0           0          2 ( 0.06%) .           .               __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  130 ( 0.00%)  78 ( 0.01%)  26 ( 0.01%)  .          .           .          .          .           .               { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  442 ( 0.02%) 156 ( 0.02%) 130 ( 0.05%)  5 ( 0.08%) 0           0          4 ( 0.12%) .           .           => /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, std::thread*, std::default_delete<std::thread> >::_M_head(std::_Tuple_impl<0ul, std::thread*, std::default_delete<std::thread> > const&) (26x)
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .             // Deleted overload to improve diagnostics for invalid indices
    .            .            .           .          .           .          .          .           .             template<size_t __i, typename... _Types>
    .            .            .           .          .           .          .          .           .               __enable_if_t<(__i >= sizeof...(_Types))>
    .            .            .           .          .           .          .          .           .               __get_helper(const tuple<_Types...>&) = delete;
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .             /// Return a reference to the ith element of a tuple.
    .            .            .           .          .           .          .          .           .             template<size_t __i, typename... _Elements>
    .            .            .           .          .           .          .          .           .               constexpr __tuple_element_t<__i, tuple<_Elements...>>&
  560 ( 0.02%)   0          224 ( 0.08%)  1 ( 0.02%) 0           0          1 ( 0.03%) .           .               get(tuple<_Elements...>& __t) noexcept
  560 ( 0.02%) 336 ( 0.05%) 112 ( 0.04%)  .          .           .          .          .           .               { return std::__get_helper<__i>(__t); }
  540 ( 0.02%) 180 ( 0.03%) 160 ( 0.06%)  .          .           .          .          .           .           => /usr/include/c++/11/tuple:std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) (20x)
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .             /// Return a const reference to the ith element of a const tuple.
    .            .            .           .          .           .          .          .           .             template<size_t __i, typename... _Elements>
    .            .            .           .          .           .          .          .           .               constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
  130 ( 0.00%)   0           52 ( 0.02%)  9 ( 0.15%) 0           0          2 ( 0.06%) .           .               get(const tuple<_Elements...>& __t) noexcept
  130 ( 0.00%)  78 ( 0.01%)  26 ( 0.01%)  .          .           .          .          .           .               { return std::__get_helper<__i>(__t); }
  702 ( 0.02%) 234 ( 0.03%) 208 ( 0.07%) 19 ( 0.32%) 0           0          6 ( 0.19%) .           .           => /usr/include/c++/11/tuple:std::thread* const& std::__get_helper<0ul, std::thread*, std::default_delete<std::thread> >(std::_Tuple_impl<0ul, std::thread*, std::default_delete<std::thread> > const&) (26x)
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .             /// Return an rvalue reference to the ith element of a tuple rvalue.
    .            .            .           .          .           .          .          .           .             template<size_t __i, typename... _Elements>
    .            .            .           .          .           .          .          .           .               constexpr __tuple_element_t<__i, tuple<_Elements...>>&&
  100 ( 0.00%)   0           40 ( 0.01%)  6 ( 0.10%) 0           0          2 ( 0.06%) .           .               get(tuple<_Elements...>&& __t) noexcept
    .            .            .           .          .           .          .          .           .               {
    .            .            .           .          .           .          .          .           .                 typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
  100 ( 0.00%)  20 ( 0.00%)  40 ( 0.01%)  6 ( 0.10%) 0           0          1 ( 0.03%) .           .                 return std::forward<__element_type>(std::__get_helper<__i>(__t));
  162 ( 0.01%)  54 ( 0.01%)  48 ( 0.02%)  4 ( 0.07%) 0           6 ( 0.20%) 4 ( 0.12%) 0           6 ( 0.25%)  => /usr/include/c++/11/tuple:ActiveObject*& std::__get_helper<1ul, ActiveObject*>(std::_Tuple_impl<1ul, ActiveObject*>&) (6x)
   42 ( 0.00%)  18 ( 0.00%)  12 ( 0.00%)  .          .           .          .          .           .           => /usr/include/c++/11/bits/move.h:ActiveObject*&& std::forward<ActiveObject*>(std::remove_reference<ActiveObject*>::type&) (6x)
   40 ( 0.00%)  40 ( 0.01%)   .           .          .           .          .          .           .               }
    .            .            .           .          .           .          .          .           .           
    .            .            .           .          .           .          .          .           .             /// Return a const rvalue reference to the ith element of a const tuple rvalue.
    .            .            .           .          .           .          .          .           .             template<size_t __i, typename... _Elements>
    .            .            .           .          .           .          .          .           .               constexpr const __tuple_element_t<__i, tuple<_Elements...>>&&
    .            .            .           .          .           .          .          .           .               get(const tuple<_Elements...>&& __t) noexcept
    .            .            .           .          .           .          .          .           .               {
    .            .            .           .          .           .          .          .           .                 typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
    .            .            .           .          .           .          .          .           .                 return std::forward<const __element_type>(std::__get_helper<__i>(__t));
-- line 1417 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_vector.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 89 ----------------------------------------
  .           .           .          .          .          .          .          .          .                  	pointer;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 struct _Vector_impl_data
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	pointer _M_start;
  .           .           .          .          .          .          .          .          .           	pointer _M_finish;
  .           .           .          .          .          .          .          .          .           	pointer _M_end_of_storage;
  .           .           .          .          .          .          .          .          .           
 16 ( 0.00%)  0           8 ( 0.00%) .          .          .          .          .          .           	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 24 ( 0.00%) 12 ( 0.00%) 12 ( 0.00%) 2 ( 0.03%) 0          1 ( 0.03%) 2 ( 0.06%) 0          1 ( 0.04%)  	: _M_start(), _M_finish(), _M_end_of_storage()
 12 ( 0.00%)  8 ( 0.00%)  .          .          .          .          .          .          .           	{ }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
  .           .           .          .          .          .          .          .          .           	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
  .           .           .          .          .          .          .          .          .           	: _M_start(__x._M_start), _M_finish(__x._M_finish),
  .           .           .          .          .          .          .          .          .           	  _M_end_of_storage(__x._M_end_of_storage)
  .           .           .          .          .          .          .          .          .           	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           
-- line 107 ----------------------------------------
-- line 120 ----------------------------------------
  .           .           .          .          .          .          .          .          .           	  // information used by TBAA.
  .           .           .          .          .          .          .          .          .           	  _Vector_impl_data __tmp;
  .           .           .          .          .          .          .          .          .           	  __tmp._M_copy_data(*this);
  .           .           .          .          .          .          .          .          .           	  _M_copy_data(__x);
  .           .           .          .          .          .          .          .          .           	  __x._M_copy_data(__tmp);
  .           .           .          .          .          .          .          .          .           	}
  .           .           .          .          .          .          .          .          .                 };
  .           .           .          .          .          .          .          .          .           
 44 ( 0.00%) 12 ( 0.00%) 12 ( 0.00%) 5 ( 0.08%) .          .          .          .          .                 struct _Vector_impl
 18 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<std::shared_ptr<Graph> >::~allocator() (1x)
  .           .           .          .          .          .          .          .          .           	: public _Tp_alloc_type, public _Vector_impl_data
  .           .           .          .          .          .          .          .          .                 {
 20 ( 0.00%)  0           8 ( 0.00%) 5 ( 0.08%) 0          0          5 ( 0.15%) .          .           	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
  .           .           .          .          .          .          .          .          .           	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 24 ( 0.00%)  8 ( 0.00%)  8 ( 0.00%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .           	: _Tp_alloc_type()
 18 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) 3 ( 0.05%) 0          0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::allocator() (1x)
 13 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >, std::allocator<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > > > >::_Vector_impl_data::_Vector_impl_data() (1x)
 12 ( 0.00%)  8 ( 0.00%)  0          1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	{ }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
  .           .           .          .          .          .          .          .          .           	: _Tp_alloc_type(__a)
  .           .           .          .          .          .          .          .          .           	{ }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
  .           .           .          .          .          .          .          .          .           	// Not defaulted, to enforce noexcept(true) even when
  .           .           .          .          .          .          .          .          .           	// !is_nothrow_move_constructible<_Tp_alloc_type>.
-- line 142 ----------------------------------------
-- line 268 ----------------------------------------
  .           .           .          .          .          .          .          .          .           #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
  .           .           .          .          .          .          .          .          .           #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  .           .           .          .          .          .          .          .          .                 };
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               public:
  .           .           .          .          .          .          .          .          .                 typedef _Alloc allocator_type;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 _Tp_alloc_type&
 52 ( 0.00%)  0          26 ( 0.01%) 3 ( 0.05%) 0          0          3 ( 0.09%) .          .                 _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 39 ( 0.00%) 39 ( 0.01%)  .          .          .          .          .          .          .                 { return this->_M_impl; }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 const _Tp_alloc_type&
 32 ( 0.00%)  0          16 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 24 ( 0.00%) 24 ( 0.00%)  0          1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 { return this->_M_impl; }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 allocator_type
  .           .           .          .          .          .          .          .          .                 get_allocator() const _GLIBCXX_NOEXCEPT
  .           .           .          .          .          .          .          .          .                 { return allocator_type(_M_get_Tp_allocator()); }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
 44 ( 0.00%) 12 ( 0.00%) 12 ( 0.00%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .                 _Vector_base() = default;
 45 ( 0.00%) 14 ( 0.00%) 14 ( 0.01%) 5 ( 0.08%) 0          0          5 ( 0.15%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >, std::allocator<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > > > >::_Vector_impl::_Vector_impl() (1x)
  .           .           .          .          .          .          .          .          .           #else
  .           .           .          .          .          .          .          .          .                 _Vector_base() { }
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
  .           .           .          .          .          .          .          .          .                 : _M_impl(__a) { }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 // Kept for ABI compatibility.
-- line 296 ----------------------------------------
-- line 325 ----------------------------------------
  .           .           .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           # endif
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 _Vector_base(const allocator_type& __a, _Vector_base&& __x)
  .           .           .          .          .          .          .          .          .                 : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
  .           .           .          .          .          .          .          .          .                 { }
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           
 20 ( 0.00%)  0           8 ( 0.00%) 4 ( 0.07%) 0          0          3 ( 0.09%) .          .                 ~_Vector_base() _GLIBCXX_NOEXCEPT
  .           .           .          .          .          .          .          .          .                 {
 28 ( 0.00%) 12 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .           	_M_deallocate(_M_impl._M_start,
 12 ( 0.00%)  3 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_deallocate(std::weak_ptr<Graph>*, unsigned long) (1x)
 28 ( 0.00%) 16 ( 0.00%)  .          .          .          .          .          .          .           		      _M_impl._M_end_of_storage - _M_impl._M_start);
 24 ( 0.00%) 12 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .                 }
 29 ( 0.00%)  8 ( 0.00%)  8 ( 0.00%) 2 ( 0.03%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_Vector_impl::~_Vector_impl() (1x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               public:
  .           .           .          .          .          .          .          .          .                 _Vector_impl _M_impl;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 pointer
 24 ( 0.00%)  0          12 ( 0.00%) .          .          .          .          .          .                 _M_allocate(size_t __n)
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 32 ( 0.00%) 12 ( 0.00%)  4 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
892 ( 0.03%) 184 ( 0.03%) 152 ( 0.05%) 34 ( 0.58%) 3 ( 0.02%) 2 ( 0.07%) 4 ( 0.12%) 1 ( 0.01%) 2 ( 0.08%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::shared_ptr<ActiveObject> > >::allocate(std::allocator<std::shared_ptr<ActiveObject> >&, unsigned long) (4x)
  8 ( 0.00%)  8 ( 0.00%)  .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 void
 56 ( 0.00%)  0          32 ( 0.01%) 2 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _M_deallocate(pointer __p, size_t __n)
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 16 ( 0.00%)  8 ( 0.00%)  .          .          .          .          .          .          .           	if (__p)
 24 ( 0.00%) 12 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .           	  _Tr::deallocate(_M_impl, __p, __n);
524 ( 0.02%) 160 ( 0.02%) 100 ( 0.04%) 15 ( 0.25%) 1 ( 0.01%) 0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::shared_ptr<ActiveObject> > >::deallocate(std::allocator<std::shared_ptr<ActiveObject> >&, std::shared_ptr<ActiveObject>*, unsigned long) (4x)
 24 ( 0.00%) 16 ( 0.00%)  .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               protected:
  .           .           .          .          .          .          .          .          .                 void
  .           .           .          .          .          .          .          .          .                 _M_create_storage(size_t __n)
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	this->_M_impl._M_start = this->_M_allocate(__n);
  .           .           .          .          .          .          .          .          .           	this->_M_impl._M_finish = this->_M_impl._M_start;
  .           .           .          .          .          .          .          .          .           	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
-- line 363 ----------------------------------------
-- line 445 ----------------------------------------
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	// Instantiating std::__relocate_a might cause an error outside the
  .           .           .          .          .          .          .          .          .           	// immediate context (in __relocate_object_a's noexcept-specifier),
  .           .           .          .          .          .          .          .          .           	// so only do it if we know the type can be move-inserted into *this.
  .           .           .          .          .          .          .          .          .           	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
  .           .           .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 static pointer
 64 ( 0.00%)  0          40 ( 0.01%) .          .          .          .          .          .                 _S_do_relocate(pointer __first, pointer __last, pointer __result,
  .           .           .          .          .          .          .          .          .           		     _Tp_alloc_type& __alloc, true_type) noexcept
  .           .           .          .          .          .          .          .          .                 {
 48 ( 0.00%) 32 ( 0.00%)  8 ( 0.00%) 1 ( 0.02%) .          .          .          .          .           	return std::__relocate_a(__first, __last, __result, __alloc);
2,508 ( 0.09%) 815 ( 0.12%) 766 ( 0.27%) 10 ( 0.17%) 0          1 ( 0.03%) 2 ( 0.06%) .          .           => /usr/include/c++/11/bits/stl_uninitialized.h:std::shared_ptr<ActiveObject>* std::__relocate_a<std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::allocator<std::shared_ptr<ActiveObject> > >(std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::allocator<std::shared_ptr<ActiveObject> >&) (8x)
 16 ( 0.00%) 16 ( 0.00%)  .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 static pointer
  .           .           .          .          .          .          .          .          .                 _S_do_relocate(pointer, pointer, pointer __result,
  .           .           .          .          .          .          .          .          .           		     _Tp_alloc_type&, false_type) noexcept
  .           .           .          .          .          .          .          .          .                 { return __result; }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 static pointer
 64 ( 0.00%)  0          40 ( 0.01%) .          .          .          .          .          .                 _S_relocate(pointer __first, pointer __last, pointer __result,
  .           .           .          .          .          .          .          .          .           		  _Tp_alloc_type& __alloc) noexcept
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	using __do_it = __bool_constant<_S_use_relocate()>;
 48 ( 0.00%) 32 ( 0.00%)  8 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
2,636 ( 0.09%) 863 ( 0.12%) 814 ( 0.29%) 11 ( 0.19%) 0          1 ( 0.03%) 2 ( 0.06%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::_S_do_relocate(std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::allocator<std::shared_ptr<ActiveObject> >&, std::integral_constant<bool, true>) (8x)
 16 ( 0.00%) 16 ( 0.00%)  .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           #endif // C++11
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               protected:
  .           .           .          .          .          .          .          .          .                 using _Base::_M_allocate;
  .           .           .          .          .          .          .          .          .                 using _Base::_M_deallocate;
  .           .           .          .          .          .          .          .          .                 using _Base::_M_impl;
  .           .           .          .          .          .          .          .          .                 using _Base::_M_get_Tp_allocator;
  .           .           .          .          .          .          .          .          .           
-- line 478 ----------------------------------------
-- line 479 ----------------------------------------
  .           .           .          .          .          .          .          .          .               public:
  .           .           .          .          .          .          .          .          .                 // [23.2.4.1] construct/copy/destroy
  .           .           .          .          .          .          .          .          .                 // (assign() and get_allocator() are also listed in this section)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief  Creates a %vector with no elements.
  .           .           .          .          .          .          .          .          .                  */
  .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
 44 ( 0.00%) 12 ( 0.00%) 12 ( 0.00%) 5 ( 0.08%) 0          0          5 ( 0.15%) .          .                 vector() = default;
 56 ( 0.00%) 17 ( 0.00%) 17 ( 0.01%) 5 ( 0.08%) 0          0          5 ( 0.15%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >, std::allocator<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > > > >::_Vector_base() (1x)
  .           .           .          .          .          .          .          .          .           #else
  .           .           .          .          .          .          .          .          .                 vector() { }
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief  Creates a %vector with no elements.
  .           .           .          .          .          .          .          .          .                  *  @param  __a  An allocator object.
  .           .           .          .          .          .          .          .          .                  */
-- line 495 ----------------------------------------
-- line 670 ----------------------------------------
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  The dtor only erases the elements, and note that if the
  .           .           .          .          .          .          .          .          .                  *  elements themselves are pointers, the pointed-to memory is
  .           .           .          .          .          .          .          .          .                  *  not touched in any way.  Managing the pointer is the user's
  .           .           .          .          .          .          .          .          .                  *  responsibility.
  .           .           .          .          .          .          .          .          .                  */
 20 ( 0.00%)  0           8 ( 0.00%) 6 ( 0.10%) 0          0          5 ( 0.15%) .          .                 ~vector() _GLIBCXX_NOEXCEPT
  .           .           .          .          .          .          .          .          .                 {
 28 ( 0.00%) 16 ( 0.00%)  4 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 43 ( 0.00%) 12 ( 0.00%) 12 ( 0.00%) 1 ( 0.02%) .          .          .          .          .           => /usr/include/c++/11/bits/alloc_traits.h:void std::_Destroy<std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject> >(std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::allocator<std::shared_ptr<ActiveObject> >&) (1x)
 16 ( 0.00%)  4 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .           		      _M_get_Tp_allocator());
  7 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::_M_get_Tp_allocator() (1x)
  .           .           .          .          .          .          .          .          .           	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 24 ( 0.00%) 12 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .                 }
203 ( 0.01%) 64 ( 0.01%) 42 ( 0.02%) 2 ( 0.03%) 1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::~_Vector_base() (1x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief  %Vector assignment operator.
  .           .           .          .          .          .          .          .          .                  *  @param  __x  A %vector of identical element and allocator types.
  .           .           .          .          .          .          .          .          .                  *
  .           .           .          .          .          .          .          .          .                  *  All the elements of @a __x are copied, but any unused capacity in
  .           .           .          .          .          .          .          .          .                  *  @a __x will not be copied.
  .           .           .          .          .          .          .          .          .                  *
-- line 691 ----------------------------------------
-- line 803 ----------------------------------------
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 // iterators
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  Returns a read/write iterator that points to the first
  .           .           .          .          .          .          .          .          .                  *  element in the %vector.  Iteration is done in ordinary
  .           .           .          .          .          .          .          .          .                  *  element order.
  .           .           .          .          .          .          .          .          .                  */
  .           .           .          .          .          .          .          .          .                 iterator
 48 ( 0.00%)  6 ( 0.00%) 18 ( 0.01%) 3 ( 0.05%) 0          0          3 ( 0.09%) .          .                 begin() _GLIBCXX_NOEXCEPT
 66 ( 0.00%) 36 ( 0.01%)  6 ( 0.00%) .          .          .          .          .          .                 { return iterator(this->_M_impl._M_start); }
 60 ( 0.00%) 25 ( 0.00%) 20 ( 0.01%) 1 ( 0.02%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >::__normal_iterator(std::shared_ptr<ActiveObject>* const&) (5x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  Returns a read-only (constant) iterator that points to the
  .           .           .          .          .          .          .          .          .                  *  first element in the %vector.  Iteration is done in ordinary
  .           .           .          .          .          .          .          .          .                  *  element order.
  .           .           .          .          .          .          .          .          .                  */
  .           .           .          .          .          .          .          .          .                 const_iterator
  .           .           .          .          .          .          .          .          .                 begin() const _GLIBCXX_NOEXCEPT
-- line 820 ----------------------------------------
-- line 821 ----------------------------------------
  .           .           .          .          .          .          .          .          .                 { return const_iterator(this->_M_impl._M_start); }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  Returns a read/write iterator that points one past the last
  .           .           .          .          .          .          .          .          .                  *  element in the %vector.  Iteration is done in ordinary
  .           .           .          .          .          .          .          .          .                  *  element order.
  .           .           .          .          .          .          .          .          .                  */
  .           .           .          .          .          .          .          .          .                 iterator
 96 ( 0.00%) 12 ( 0.00%) 36 ( 0.01%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .                 end() _GLIBCXX_NOEXCEPT
144 ( 0.01%) 72 ( 0.01%) 12 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 { return iterator(this->_M_impl._M_finish); }
132 ( 0.00%) 55 ( 0.01%) 44 ( 0.02%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >::__normal_iterator(std::shared_ptr<ActiveObject>* const&) (11x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  Returns a read-only (constant) iterator that points one past
  .           .           .          .          .          .          .          .          .                  *  the last element in the %vector.  Iteration is done in
  .           .           .          .          .          .          .          .          .                  *  ordinary element order.
  .           .           .          .          .          .          .          .          .                  */
  .           .           .          .          .          .          .          .          .                 const_iterator
  .           .           .          .          .          .          .          .          .                 end() const _GLIBCXX_NOEXCEPT
-- line 838 ----------------------------------------
-- line 910 ----------------------------------------
  .           .           .          .          .          .          .          .          .                 const_reverse_iterator
  .           .           .          .          .          .          .          .          .                 crend() const noexcept
  .           .           .          .          .          .          .          .          .                 { return const_reverse_iterator(begin()); }
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 // [23.2.4.2] capacity
  .           .           .          .          .          .          .          .          .                 /**  Returns the number of elements in the %vector.  */
  .           .           .          .          .          .          .          .          .                 size_type
 64 ( 0.00%)  0          32 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 size() const _GLIBCXX_NOEXCEPT
144 ( 0.01%) 96 ( 0.01%)  .          .          .          .          .          .          .                 { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**  Returns the size() of the largest possible %vector.  */
  .           .           .          .          .          .          .          .          .                 size_type
 40 ( 0.00%)  0          16 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 max_size() const _GLIBCXX_NOEXCEPT
 56 ( 0.00%) 24 ( 0.00%) 16 ( 0.01%) .          .          .          .          .          .                 { return _S_max_size(_M_get_Tp_allocator()); }
528 ( 0.02%) 176 ( 0.03%) 144 ( 0.05%) 6 ( 0.10%) 0          0          4 ( 0.12%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::_S_max_size(std::allocator<std::shared_ptr<ActiveObject> > const&) (8x)
 56 ( 0.00%) 24 ( 0.00%) 16 ( 0.01%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::_M_get_Tp_allocator() const (8x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief  Resizes the %vector to the specified number of elements.
  .           .           .          .          .          .          .          .          .                  *  @param  __new_size  Number of elements the %vector should contain.
  .           .           .          .          .          .          .          .          .                  *
  .           .           .          .          .          .          .          .          .                  *  This function will %resize the %vector to the specified
  .           .           .          .          .          .          .          .          .                  *  number of elements.  If the number is smaller than the
-- line 932 ----------------------------------------
-- line 1035 ----------------------------------------
  .           .           .          .          .          .          .          .          .                  *  @return  Read/write reference to data.
  .           .           .          .          .          .          .          .          .                  *
  .           .           .          .          .          .          .          .          .                  *  This operator allows for easy, array-style, data access.
  .           .           .          .          .          .          .          .          .                  *  Note that data access with this operator is unchecked and
  .           .           .          .          .          .          .          .          .                  *  out_of_range lookups are not defined. (For checked lookups
  .           .           .          .          .          .          .          .          .                  *  see at().)
  .           .           .          .          .          .          .          .          .                  */
  .           .           .          .          .          .          .          .          .                 reference
 80 ( 0.00%)  0          48 ( 0.02%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 operator[](size_type __n) _GLIBCXX_NOEXCEPT
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	__glibcxx_requires_subscript(__n);
 80 ( 0.00%) 48 ( 0.01%)  0          1 ( 0.02%) .          .          .          .          .           	return *(this->_M_impl._M_start + __n);
 32 ( 0.00%) 32 ( 0.00%)  .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief  Subscript access to the data contained in the %vector.
  .           .           .          .          .          .          .          .          .                  *  @param __n The index of the element for which data should be
  .           .           .          .          .          .          .          .          .                  *  accessed.
  .           .           .          .          .          .          .          .          .                  *  @return  Read-only (constant) reference to data.
  .           .           .          .          .          .          .          .          .                  *
  .           .           .          .          .          .          .          .          .                  *  This operator allows for easy, array-style, data access.
-- line 1055 ----------------------------------------
-- line 1135 ----------------------------------------
  .           .           .          .          .          .          .          .          .           	return *begin();
  .           .           .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  Returns a read/write reference to the data at the last
  .           .           .          .          .          .          .          .          .                  *  element of the %vector.
  .           .           .          .          .          .          .          .          .                  */
  .           .           .          .          .          .          .          .          .                 reference
 48 ( 0.00%)  6 ( 0.00%) 18 ( 0.01%) .          .          .          .          .          .                 back() _GLIBCXX_NOEXCEPT
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	__glibcxx_requires_nonempty();
 72 ( 0.00%)  6 ( 0.00%) 30 ( 0.01%) 6 ( 0.10%) 0          0          1 ( 0.03%) .          .           	return *(end() - 1);
234 ( 0.01%) 84 ( 0.01%) 60 ( 0.02%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >::operator-(long) const (6x)
192 ( 0.01%) 72 ( 0.01%) 48 ( 0.02%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::end() (6x)
 48 ( 0.00%) 24 ( 0.00%) 12 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >::operator*() const (6x)
 30 ( 0.00%) 24 ( 0.00%)  0          6 ( 0.10%) 0          0          1 ( 0.03%) .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  Returns a read-only (constant) reference to the data at the
  .           .           .          .          .          .          .          .          .                  *  last element of the %vector.
  .           .           .          .          .          .          .          .          .                  */
  .           .           .          .          .          .          .          .          .                 const_reference
  .           .           .          .          .          .          .          .          .                 back() const _GLIBCXX_NOEXCEPT
  .           .           .          .          .          .          .          .          .                 {
-- line 1155 ----------------------------------------
-- line 1195 ----------------------------------------
  .           .           .          .          .          .          .          .          .           	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
  .           .           .          .          .          .          .          .          .           	  }
  .           .           .          .          .          .          .          .          .           	else
  .           .           .          .          .          .          .          .          .           	  _M_realloc_insert(end(), __x);
  .           .           .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
  .           .           .          .          .          .          .          .          .                 void
 36 ( 0.00%)  0          18 ( 0.01%) .          .          .          .          .          .                 push_back(value_type&& __x)
 66 ( 0.00%) 24 ( 0.00%) 12 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 { emplace_back(std::move(__x)); }
8,056 ( 0.28%) 2,632 ( 0.38%) 2,194 ( 0.78%) 149 ( 2.52%) 3 ( 0.02%) 4 ( 0.13%) 46 ( 1.42%) 1 ( 0.01%) 3 ( 0.13%)  => /usr/include/c++/11/bits/vector.tcc:std::shared_ptr<ActiveObject>& std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::emplace_back<std::shared_ptr<ActiveObject> >(std::shared_ptr<ActiveObject>&&) (6x)
 42 ( 0.00%) 18 ( 0.00%) 12 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::shared_ptr<ActiveObject>&>::type&& std::move<std::shared_ptr<ActiveObject>&>(std::shared_ptr<ActiveObject>&) (6x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 template<typename... _Args>
  .           .           .          .          .          .          .          .          .           #if __cplusplus > 201402L
  .           .           .          .          .          .          .          .          .           	reference
  .           .           .          .          .          .          .          .          .           #else
  .           .           .          .          .          .          .          .          .           	void
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           	emplace_back(_Args&&... __args);
-- line 1212 ----------------------------------------
-- line 1490 ----------------------------------------
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  Erases all the elements.  Note that this function only erases the
  .           .           .          .          .          .          .          .          .                  *  elements, and that if the elements themselves are pointers, the
  .           .           .          .          .          .          .          .          .                  *  pointed-to memory is not touched in any way.  Managing the pointer is
  .           .           .          .          .          .          .          .          .                  *  the user's responsibility.
  .           .           .          .          .          .          .          .          .                  */
  .           .           .          .          .          .          .          .          .                 void
 10 ( 0.00%)  0           4 ( 0.00%) 1 ( 0.02%) .          .          .          .          .                 clear() _GLIBCXX_NOEXCEPT
 18 ( 0.00%) 10 ( 0.00%)  2 ( 0.00%) 1 ( 0.02%) .          .          .          .          .                 { _M_erase_at_end(this->_M_impl._M_start); }
 16 ( 0.00%)  6 ( 0.00%)  4 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >, std::allocator<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > > > >::_M_erase_at_end(std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >*) (1x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               protected:
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  Memory expansion handler.  Uses the member allocation function to
  .           .           .          .          .          .          .          .          .                  *  obtain @a n bytes of memory, and then copies [first,last) into it.
  .           .           .          .          .          .          .          .          .                  */
  .           .           .          .          .          .          .          .          .                 template<typename _ForwardIterator>
  .           .           .          .          .          .          .          .          .           	pointer
-- line 1507 ----------------------------------------
-- line 1748 ----------------------------------------
  .           .           .          .          .          .          .          .          .                 // Emplacing an rvalue of the correct type can use _M_insert_rval.
  .           .           .          .          .          .          .          .          .                 iterator
  .           .           .          .          .          .          .          .          .                 _M_emplace_aux(const_iterator __position, value_type&& __v)
  .           .           .          .          .          .          .          .          .                 { return _M_insert_rval(__position, std::move(__v)); }
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 // Called by _M_fill_insert, _M_insert_aux etc.
  .           .           .          .          .          .          .          .          .                 size_type
 44 ( 0.00%)  4 ( 0.00%) 24 ( 0.01%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .                 _M_check_len(size_type __n, const char* __s) const
  .           .           .          .          .          .          .          .          .                 {
 56 ( 0.00%) 12 ( 0.00%)  8 ( 0.00%) 3 ( 0.05%) 0          0          1 ( 0.03%) .          .           	if (max_size() - size() < __n)
340 ( 0.01%) 112 ( 0.02%) 96 ( 0.03%) 9 ( 0.15%) 0          0          7 ( 0.22%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::max_size() const (4x)
 52 ( 0.00%) 24 ( 0.00%)  8 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::size() const (4x)
  .           .           .          .          .          .          .          .          .           	  __throw_length_error(__N(__s));
  .           .           .          .          .          .          .          .          .           
 64 ( 0.00%) 12 ( 0.00%) 20 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	const size_type __len = size() + (std::max)(size(), __n);
104 ( 0.00%) 48 ( 0.01%) 16 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::size() const (8x)
 57 ( 0.00%) 28 ( 0.00%) 12 ( 0.00%) 4 ( 0.07%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) (4x)
 44 ( 0.00%) 20 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           	return (__len < size() || __len > max_size()) ? max_size() : __len;
340 ( 0.01%) 112 ( 0.02%) 96 ( 0.03%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::max_size() const (4x)
 52 ( 0.00%) 24 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::size() const (4x)
 24 ( 0.00%) 20 ( 0.00%)  0          1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 // Called by constructors to check initial size.
  .           .           .          .          .          .          .          .          .                 static size_type
  .           .           .          .          .          .          .          .          .                 _S_check_init_len(size_type __n, const allocator_type& __a)
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	if (__n > _S_max_size(_Tp_alloc_type(__a)))
  .           .           .          .          .          .          .          .          .           	  __throw_length_error(
  .           .           .          .          .          .          .          .          .           	      __N("cannot create std::vector larger than max_size()"));
  .           .           .          .          .          .          .          .          .           	return __n;
  .           .           .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 static size_type
 64 ( 0.00%)  8 ( 0.00%) 24 ( 0.01%) 3 ( 0.05%) 0          0          1 ( 0.03%) .          .                 _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
  .           .           .          .          .          .          .          .          .           	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
  .           .           .          .          .          .          .          .          .           	// (even if std::allocator_traits::max_size says we can).
 16 ( 0.00%)  0           8 ( 0.00%) .          .          .          .          .          .           	const size_t __diffmax
  .           .           .          .          .          .          .          .          .           	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
 32 ( 0.00%)  8 ( 0.00%) 16 ( 0.01%) .          .          .          .          .          .           	const size_t __allocmax = _Alloc_traits::max_size(__a);
216 ( 0.01%) 64 ( 0.01%) 64 ( 0.02%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::shared_ptr<ActiveObject> > >::max_size(std::allocator<std::shared_ptr<ActiveObject> > const&) (8x)
 48 ( 0.00%)  8 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           	return (std::min)(__diffmax, __allocmax);
112 ( 0.00%) 56 ( 0.01%) 24 ( 0.01%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) (8x)
 40 ( 0.00%) 32 ( 0.00%)  .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 // Internal erase functions follow.
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
  .           .           .          .          .          .          .          .          .                 // _M_assign_aux.
  .           .           .          .          .          .          .          .          .                 void
 12 ( 0.00%)  0           6 ( 0.00%) .          .          .          .          .          .                 _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
  .           .           .          .          .          .          .          .          .                 {
 14 ( 0.00%)  8 ( 0.00%)  2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	if (size_type __n = this->_M_impl._M_finish - __pos)
  .           .           .          .          .          .          .          .          .           	  {
  6 ( 0.00%)  3 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .           	    std::_Destroy(__pos, this->_M_impl._M_finish,
91,304 ( 3.23%) 25,309 ( 3.66%) 13,396 ( 4.78%) 521 ( 8.82%) 95 ( 0.72%) 10 ( 0.33%) 105 ( 3.24%) 40 ( 0.44%) 1 ( 0.04%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::_Destroy<std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject> >(std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::allocator<std::shared_ptr<ActiveObject> >&) (1x)
  4 ( 0.00%)  1 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .           			  _M_get_Tp_allocator());
  7 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::_M_get_Tp_allocator() (1x)
  3 ( 0.00%)  2 ( 0.00%)  1 ( 0.00%) 1 ( 0.02%) .          .          .          .          .           	    this->_M_impl._M_finish = __pos;
  .           .           .          .          .          .          .          .          .           	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
  .           .           .          .          .          .          .          .          .           	  }
  6 ( 0.00%)  4 ( 0.00%)  .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 iterator
  .           .           .          .          .          .          .          .          .                 _M_erase(iterator __position);
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 iterator
  .           .           .          .          .          .          .          .          .                 _M_erase(iterator __first, iterator __last);
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
-- line 1809 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/vector.tcc
--------------------------------------------------------------------------------
Ir          Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 101 ----------------------------------------
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
 .           .           .          .          .          .          .          .          .             template<typename _Tp, typename _Alloc>
 .           .           .          .          .          .          .          .          .               template<typename... _Args>
 .           .           .          .          .          .          .          .          .           #if __cplusplus > 201402L
 .           .           .          .          .          .          .          .          .                 typename vector<_Tp, _Alloc>::reference
 .           .           .          .          .          .          .          .          .           #else
 .           .           .          .          .          .          .          .          .                 void
 .           .           .          .          .          .          .          .          .           #endif
42 ( 0.00%)  0          24 ( 0.01%) .          .          .          .          .          .                 vector<_Tp, _Alloc>::
 .           .           .          .          .          .          .          .          .                 emplace_back(_Args&&... __args)
 .           .           .          .          .          .          .          .          .                 {
36 ( 0.00%) 24 ( 0.00%)  .          .          .          .          .          .          .           	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 .           .           .          .          .          .          .          .          .           	  {
 .           .           .          .          .          .          .          .          .           	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
20 ( 0.00%)  8 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .           	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
284 ( 0.01%) 96 ( 0.01%) 90 ( 0.03%) 6 ( 0.10%) .          .          .          .          .           => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::shared_ptr<ActiveObject> > >::construct<std::shared_ptr<ActiveObject>, std::shared_ptr<ActiveObject> >(std::allocator<std::shared_ptr<ActiveObject> >&, std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>&&) (2x)
14 ( 0.00%)  6 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::shared_ptr<ActiveObject>&& std::forward<std::shared_ptr<ActiveObject> >(std::remove_reference<std::shared_ptr<ActiveObject> >::type&) (2x)
 .           .           .          .          .          .          .          .          .           				     std::forward<_Args>(__args)...);
12 ( 0.00%)  6 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           	    ++this->_M_impl._M_finish;
 .           .           .          .          .          .          .          .          .           	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 .           .           .          .          .          .          .          .          .           	  }
 .           .           .          .          .          .          .          .          .           	else
52 ( 0.00%) 12 ( 0.00%) 12 ( 0.00%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .           	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
6,780 ( 0.24%) 2,180 ( 0.32%) 1,844 ( 0.66%) 123 ( 2.08%) 3 ( 0.02%) 4 ( 0.13%) 36 ( 1.11%) 1 ( 0.01%) 3 ( 0.13%)  => /usr/include/c++/11/bits/vector.tcc:void std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::_M_realloc_insert<std::shared_ptr<ActiveObject> >(__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >, std::shared_ptr<ActiveObject>&&) (4x)
128 ( 0.00%) 48 ( 0.01%) 32 ( 0.01%) 3 ( 0.05%) 0          0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::end() (4x)
28 ( 0.00%) 12 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::shared_ptr<ActiveObject>&& std::forward<std::shared_ptr<ActiveObject> >(std::remove_reference<std::shared_ptr<ActiveObject> >::type&) (4x)
 .           .           .          .          .          .          .          .          .           #if __cplusplus > 201402L
18 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%) .          .          .          .          .          .           	return back();
624 ( 0.02%) 216 ( 0.03%) 168 ( 0.06%) 15 ( 0.25%) 0          0          5 ( 0.15%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::back() (6x)
 .           .           .          .          .          .          .          .          .           #endif
18 ( 0.00%) 18 ( 0.00%)  .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             template<typename _Tp, typename _Alloc>
 .           .           .          .          .          .          .          .          .               typename vector<_Tp, _Alloc>::iterator
 .           .           .          .          .          .          .          .          .               vector<_Tp, _Alloc>::
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
 .           .           .          .          .          .          .          .          .               insert(const_iterator __position, const value_type& __x)
 .           .           .          .          .          .          .          .          .           #else
-- line 133 ----------------------------------------
-- line 418 ----------------------------------------
 .           .           .          .          .          .          .          .          .                 *__position = std::forward<_Arg>(__arg);
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .               }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
 .           .           .          .          .          .          .          .          .             template<typename _Tp, typename _Alloc>
 .           .           .          .          .          .          .          .          .               template<typename... _Args>
 .           .           .          .          .          .          .          .          .                 void
44 ( 0.00%)  4 ( 0.00%) 24 ( 0.01%) 8 ( 0.14%) 0          0          2 ( 0.06%) .          .                 vector<_Tp, _Alloc>::
 .           .           .          .          .          .          .          .          .                 _M_realloc_insert(iterator __position, _Args&&... __args)
 .           .           .          .          .          .          .          .          .           #else
 .           .           .          .          .          .          .          .          .             template<typename _Tp, typename _Alloc>
 .           .           .          .          .          .          .          .          .               void
 .           .           .          .          .          .          .          .          .               vector<_Tp, _Alloc>::
 .           .           .          .          .          .          .          .          .               _M_realloc_insert(iterator __position, const _Tp& __x)
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .               {
 .           .           .          .          .          .          .          .          .                 const size_type __len =
24 ( 0.00%)  4 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           	_M_check_len(size_type(1), "vector::_M_realloc_insert");
1,177 ( 0.04%) 416 ( 0.06%) 296 ( 0.11%) 21 ( 0.36%) 0          0          13 ( 0.40%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::_M_check_len(unsigned long, char const*) const (4x)
12 ( 0.00%)  8 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .                 pointer __old_start = this->_M_impl._M_start;
12 ( 0.00%)  8 ( 0.00%)  4 ( 0.00%) 4 ( 0.07%) 0          0          1 ( 0.03%) .          .                 pointer __old_finish = this->_M_impl._M_finish;
40 ( 0.00%)  4 ( 0.00%) 16 ( 0.01%) .          .          .          .          .          .                 const size_type __elems_before = __position - begin();
140 ( 0.00%) 52 ( 0.01%) 40 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >::difference_type __gnu_cxx::operator-<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >(__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > > const&, __gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > > const&) (4x)
124 ( 0.00%) 48 ( 0.01%) 32 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::begin() (4x)
24 ( 0.00%)  8 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .                 pointer __new_start(this->_M_allocate(__len));
956 ( 0.03%) 204 ( 0.03%) 168 ( 0.06%) 35 ( 0.59%) 3 ( 0.02%) 2 ( 0.07%) 5 ( 0.15%) 1 ( 0.01%) 2 ( 0.08%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::_M_allocate(unsigned long) (4x)
 8 ( 0.00%)  4 ( 0.00%)  4 ( 0.00%) 4 ( 0.07%) 0          0          1 ( 0.03%) .          .                 pointer __new_finish(__new_start);
 .           .           .          .          .          .          .          .          .                 __try
 .           .           .          .          .          .          .          .          .           	{
 .           .           .          .          .          .          .          .          .           	  // The order of the three operations is dictated by the C++11
 .           .           .          .          .          .          .          .          .           	  // case, where the moves could alter a new element belonging
 .           .           .          .          .          .          .          .          .           	  // to the existing vector.  This is an issue only for callers
 .           .           .          .          .          .          .          .          .           	  // taking the element by lvalue ref (see last bullet of C++11
 .           .           .          .          .          .          .          .          .           	  // [res.on.arguments]).
40 ( 0.00%) 12 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           	  _Alloc_traits::construct(this->_M_impl,
568 ( 0.02%) 192 ( 0.03%) 180 ( 0.06%) 8 ( 0.14%) 0          1 ( 0.03%) 3 ( 0.09%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::shared_ptr<ActiveObject> > >::construct<std::shared_ptr<ActiveObject>, std::shared_ptr<ActiveObject> >(std::allocator<std::shared_ptr<ActiveObject> >&, std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>&&) (4x)
28 ( 0.00%) 12 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::shared_ptr<ActiveObject>&& std::forward<std::shared_ptr<ActiveObject> >(std::remove_reference<std::shared_ptr<ActiveObject> >::type&) (4x)
12 ( 0.00%)  4 ( 0.00%)  .          .          .          .          .          .          .           				   __new_start + __elems_before,
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
 .           .           .          .          .          .          .          .          .           				   std::forward<_Args>(__args)...);
 .           .           .          .          .          .          .          .          .           #else
 .           .           .          .          .          .          .          .          .           				   __x);
 .           .           .          .          .          .          .          .          .           #endif
 4 ( 0.00%)  0           4 ( 0.00%) .          .          .          .          .          .           	  __new_finish = pointer();
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
 .           .           .          .          .          .          .          .          .           	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 .           .           .          .          .          .          .          .          .           	    {
40 ( 0.00%) 12 ( 0.00%) 12 ( 0.00%) .          .          .          .          .          .           	      __new_finish = _S_relocate(__old_start, __position.base(),
2,348 ( 0.08%) 767 ( 0.11%) 718 ( 0.26%) 12 ( 0.20%) 0          1 ( 0.03%) 3 ( 0.09%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::_S_relocate(std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::allocator<std::shared_ptr<ActiveObject> >&) (4x)
28 ( 0.00%) 12 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >::base() const (4x)
16 ( 0.00%)  4 ( 0.00%)  4 ( 0.00%) 4 ( 0.07%) 0          0          1 ( 0.03%) .          .           					 __new_start, _M_get_Tp_allocator());
28 ( 0.00%) 12 ( 0.00%)  8 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::_M_get_Tp_allocator() (4x)
 .           .           .          .          .          .          .          .          .           
 4 ( 0.00%)  0           4 ( 0.00%) .          .          .          .          .          .           	      ++__new_finish;
 .           .           .          .          .          .          .          .          .           
40 ( 0.00%) 12 ( 0.00%) 12 ( 0.00%) .          .          .          .          .          .           	      __new_finish = _S_relocate(__position.base(), __old_finish,
416 ( 0.01%) 144 ( 0.02%) 144 ( 0.05%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::_S_relocate(std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::allocator<std::shared_ptr<ActiveObject> >&) (4x)
28 ( 0.00%) 12 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >::base() const (4x)
16 ( 0.00%)  4 ( 0.00%)  4 ( 0.00%) 4 ( 0.07%) 0          0          1 ( 0.03%) .          .           					 __new_finish, _M_get_Tp_allocator());
28 ( 0.00%) 12 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::_M_get_Tp_allocator() (4x)
 .           .           .          .          .          .          .          .          .           	    }
 .           .           .          .          .          .          .          .          .           	  else
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           	    {
 .           .           .          .          .          .          .          .          .           	      __new_finish
 .           .           .          .          .          .          .          .          .           		= std::__uninitialized_move_if_noexcept_a
 .           .           .          .          .          .          .          .          .           		(__old_start, __position.base(),
 .           .           .          .          .          .          .          .          .           		 __new_start, _M_get_Tp_allocator());
-- line 475 ----------------------------------------
-- line 492 ----------------------------------------
 .           .           .          .          .          .          .          .          .           	  _M_deallocate(__new_start, __len);
 .           .           .          .          .          .          .          .          .           	  __throw_exception_again;
 .           .           .          .          .          .          .          .          .           	}
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
 .           .           .          .          .          .          .          .          .                 if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 .           .           .          .          .          .          .          .          .                 _GLIBCXX_ASAN_ANNOTATE_REINIT;
20 ( 0.00%)  8 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .                 _M_deallocate(__old_start,
459 ( 0.02%) 141 ( 0.02%) 94 ( 0.03%) 15 ( 0.25%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >::_M_deallocate(std::shared_ptr<ActiveObject>*, unsigned long) (4x)
16 ( 0.00%) 12 ( 0.00%)  0          4 ( 0.07%) 0          0          1 ( 0.03%) .          .           		    this->_M_impl._M_end_of_storage - __old_start);
12 ( 0.00%)  8 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .                 this->_M_impl._M_start = __new_start;
12 ( 0.00%)  8 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .                 this->_M_impl._M_finish = __new_finish;
28 ( 0.00%) 12 ( 0.00%)  4 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 this->_M_impl._M_end_of_storage = __new_start + __len;
28 ( 0.00%) 20 ( 0.00%)  .          .          .          .          .          .          .               }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             template<typename _Tp, typename _Alloc>
 .           .           .          .          .          .          .          .          .               void
 .           .           .          .          .          .          .          .          .               vector<_Tp, _Alloc>::
 .           .           .          .          .          .          .          .          .               _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
 .           .           .          .          .          .          .          .          .               {
 .           .           .          .          .          .          .          .          .                 if (__n != 0)
 .           .           .          .          .          .          .          .          .           	{
-- line 513 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/shared_ptr_base.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr        D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 118 ----------------------------------------
  .           .           .           .          .          .          .          .          .                 enum { _S_need_barriers = 1 };
  .           .           .           .          .          .          .          .          .               };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             template<_Lock_policy _Lp = __default_lock_policy>
  .           .           .           .          .          .          .          .          .               class _Sp_counted_base
  .           .           .           .          .          .          .          .          .               : public _Mutex_base<_Lp>
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .               public:
 24 ( 0.00%)  0          12 ( 0.00%)  2 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _Sp_counted_base() noexcept
 60 ( 0.00%) 30 ( 0.00%) 18 ( 0.01%)  2 ( 0.03%) 0          1 ( 0.03%) 1 ( 0.03%) 0          1 ( 0.04%)        : _M_use_count(1), _M_weak_count(1) { }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 virtual
 24 ( 0.00%)  0          12 ( 0.00%)  1 ( 0.02%) .          .          .          .          .                 ~_Sp_counted_base() noexcept
 36 ( 0.00%) 18 ( 0.00%)  6 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 { }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // Called when _M_use_count drops to zero, to release the resources
  .           .           .           .          .          .          .          .          .                 // managed by *this.
  .           .           .           .          .          .          .          .          .                 virtual void
  .           .           .           .          .          .          .          .          .                 _M_dispose() noexcept = 0;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // Called when _M_weak_count drops to zero.
  .           .           .           .          .          .          .          .          .                 virtual void
  .           .           .           .          .          .          .          .          .                 _M_destroy() noexcept
  .           .           .           .          .          .          .          .          .                 { delete this; }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 virtual void*
  .           .           .           .          .          .          .          .          .                 _M_get_deleter(const std::type_info&) noexcept = 0;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 void
 24 ( 0.00%)  0          12 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 _M_add_ref_copy()
 42 ( 0.00%) 18 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .                 { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 void
  .           .           .           .          .          .          .          .          .                 _M_add_ref_lock()
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .           	if (!_M_add_ref_lock_nothrow())
  .           .           .           .          .          .          .          .          .           	  __throw_bad_weak_ptr();
  .           .           .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 bool
  .           .           .           .          .          .          .          .          .                 _M_add_ref_lock_nothrow() noexcept;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 void
 85 ( 0.00%)  0          34 ( 0.01%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .                 _M_release() noexcept
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .                   // Be race-detector-friendly.  For more info see bits/c++config.
  .           .           .           .          .          .          .          .          .                   _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_use_count);
136 ( 0.00%) 17 ( 0.00%) 34 ( 0.01%)  2 ( 0.03%) 0          0          1 ( 0.03%) .          .           	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
  .           .           .           .          .          .          .          .          .           	  {
  .           .           .           .          .          .          .          .          .                       _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&_M_use_count);
 42 ( 0.00%) 24 ( 0.00%)  6 ( 0.00%)  0          1 ( 0.01%) 0          0          1 ( 0.01%) .           	    _M_dispose();
88,459 ( 3.13%) 24,427 ( 3.53%) 12,712 ( 4.54%) 478 ( 8.09%) 91 ( 0.69%) 10 ( 0.33%) 100 ( 3.09%) 39 ( 0.43%) 1 ( 0.04%)  => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>::_M_dispose() (6x)
  .           .           .           .          .          .          .          .          .           	    // There must be a memory barrier between dispose() and destroy()
  .           .           .           .          .          .          .          .          .           	    // to ensure that the effects of dispose() are observed in the
  .           .           .           .          .          .          .          .          .           	    // thread that runs destroy().
  .           .           .           .          .          .          .          .          .           	    // See http://gcc.gnu.org/ml/libstdc++/2005-11/msg00136.html
  .           .           .           .          .          .          .          .          .           	    if (_Mutex_base<_Lp>::_S_need_barriers)
  .           .           .           .          .          .          .          .          .           	      {
  .           .           .           .          .          .          .          .          .           		__atomic_thread_fence (__ATOMIC_ACQ_REL);
  .           .           .           .          .          .          .          .          .           	      }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                       // Be race-detector-friendly.  For more info see bits/c++config.
  .           .           .           .          .          .          .          .          .                       _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_weak_count);
 36 ( 0.00%)  6 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .           	    if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
 12 ( 0.00%)  .           .           .          .          .          .          .          .           						       -1) == 1)
  .           .           .           .          .          .          .          .          .                         {
  .           .           .           .          .          .          .          .          .                           _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&_M_weak_count);
 42 ( 0.00%) 24 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .           	        _M_destroy();
2,010 ( 0.07%) 600 ( 0.09%) 486 ( 0.17%) 28 ( 0.47%) 1 ( 0.01%) 0          4 ( 0.12%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>::_M_destroy() (6x)
  .           .           .           .          .          .          .          .          .                         }
  .           .           .           .          .          .          .          .          .           	  }
 51 ( 0.00%) 34 ( 0.00%)  0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 void
 60 ( 0.00%)  0          30 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 _M_weak_add_ref() noexcept
105 ( 0.00%) 45 ( 0.01%) 30 ( 0.01%)  .          .          .          .          .          .                 { __gnu_cxx::__atomic_add_dispatch(&_M_weak_count, 1); }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 void
 75 ( 0.00%)  0          30 ( 0.01%)  2 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _M_weak_release() noexcept
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .                   // Be race-detector-friendly. For more info see bits/c++config.
  .           .           .           .          .          .          .          .          .                   _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_weak_count);
120 ( 0.00%) 15 ( 0.00%) 30 ( 0.01%)  .          .          .          .          .          .           	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count, -1) == 1)
  .           .           .           .          .          .          .          .          .           	  {
  .           .           .           .          .          .          .          .          .                       _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&_M_weak_count);
  .           .           .           .          .          .          .          .          .           	    if (_Mutex_base<_Lp>::_S_need_barriers)
  .           .           .           .          .          .          .          .          .           	      {
  .           .           .           .          .          .          .          .          .           	        // See _M_release(),
  .           .           .           .          .          .          .          .          .           	        // destroy() must observe results of dispose()
  .           .           .           .          .          .          .          .          .           		__atomic_thread_fence (__ATOMIC_ACQ_REL);
  .           .           .           .          .          .          .          .          .           	      }
  .           .           .           .          .          .          .          .          .           	    _M_destroy();
  .           .           .           .          .          .          .          .          .           	  }
 45 ( 0.00%) 30 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 long
 40 ( 0.00%)  0          20 ( 0.01%)  .          .          .          .          .          .                 _M_get_use_count() const noexcept
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .                   // No memory barrier is used here so there is no synchronization
  .           .           .           .          .          .          .          .          .                   // with other threads.
 40 ( 0.00%) 20 ( 0.00%)  .           .          .          .          .          .          .                   return __atomic_load_n(&_M_use_count, __ATOMIC_RELAXED);
 20 ( 0.00%) 20 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               private:
  .           .           .           .          .          .          .          .          .                 _Sp_counted_base(_Sp_counted_base const&) = delete;
  .           .           .           .          .          .          .          .          .                 _Sp_counted_base& operator=(_Sp_counted_base const&) = delete;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 _Atomic_word  _M_use_count;     // #shared
  .           .           .           .          .          .          .          .          .                 _Atomic_word  _M_weak_count;    // #weak + (#shared != 0)
  .           .           .           .          .          .          .          .          .               };
-- line 225 ----------------------------------------
-- line 248 ----------------------------------------
  .           .           .           .          .          .          .          .          .           	}
  .           .           .           .          .          .          .          .          .                 return true;
  .           .           .           .          .          .          .          .          .               }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             template<>
  .           .           .           .          .          .          .          .          .               inline bool
  .           .           .           .          .          .          .          .          .               _Sp_counted_base<_S_atomic>::
  .           .           .           .          .          .          .          .          .               _M_add_ref_lock_nothrow() noexcept
 40 ( 0.00%)  5 ( 0.00%) 15 ( 0.01%)  .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                 // Perform lock-free add-if-not-zero operation.
 20 ( 0.00%)  5 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .                 _Atomic_word __count = _M_get_use_count();
 50 ( 0.00%) 20 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_get_use_count() const (5x)
  .           .           .           .          .          .          .          .          .                 do
  .           .           .           .          .          .          .          .          .           	{
 15 ( 0.00%)  5 ( 0.00%)  .           .          .          .          .          .          .           	  if (__count == 0)
  .           .           .           .          .          .          .          .          .           	    return false;
  .           .           .           .          .          .          .          .          .           	  // Replace the current counter value with the old value + 1, as
  .           .           .           .          .          .          .          .          .           	  // long as it's not changed meanwhile.
  .           .           .           .          .          .          .          .          .           	}
 75 ( 0.00%) 15 ( 0.00%)  5 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,
  .           .           .           .          .          .          .          .          .           					  true, __ATOMIC_ACQ_REL,
  .           .           .           .          .          .          .          .          .           					  __ATOMIC_RELAXED));
  5 ( 0.00%)  .           .           .          .          .          .          .          .                 return true;
 25 ( 0.00%) 20 ( 0.00%)  .           .          .          .          .          .          .               }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             template<>
  .           .           .           .          .          .          .          .          .               inline void
  .           .           .           .          .          .          .          .          .               _Sp_counted_base<_S_single>::_M_add_ref_copy()
  .           .           .           .          .          .          .          .          .               { ++_M_use_count; }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             template<>
  .           .           .           .          .          .          .          .          .               inline void
-- line 278 ----------------------------------------
-- line 375 ----------------------------------------
  .           .           .           .          .          .          .          .          .               _Sp_counted_ptr<nullptr_t, _S_atomic>::_M_dispose() noexcept { }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             template<int _Nm, typename _Tp,
  .           .           .           .          .          .          .          .          .           	   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
  .           .           .           .          .          .          .          .          .               struct _Sp_ebo_helper;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             /// Specialization using EBO.
  .           .           .           .          .          .          .          .          .             template<int _Nm, typename _Tp>
 66 ( 0.00%) 18 ( 0.00%) 18 ( 0.01%)  1 ( 0.02%) .          .          .          .          .               struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
108 ( 0.00%) 30 ( 0.00%) 30 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObject>::~allocator() (6x)
  .           .           .           .          .          .          .          .          .               {
 84 ( 0.00%) 24 ( 0.00%) 24 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
132 ( 0.00%) 36 ( 0.01%) 42 ( 0.02%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObject>::allocator(std::allocator<ActiveObject> const&) (6x)
  .           .           .           .          .          .          .          .          .                 explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 static _Tp&
 84 ( 0.00%) 36 ( 0.01%) 24 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
  .           .           .           .          .          .          .          .          .               };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             /// Specialization not using EBO.
  .           .           .           .          .          .          .          .          .             template<int _Nm, typename _Tp>
  .           .           .           .          .          .          .          .          .               struct _Sp_ebo_helper<_Nm, _Tp, false>
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                 explicit _Sp_ebo_helper(const _Tp& __tp) : _M_tp(__tp) { }
  .           .           .           .          .          .          .          .          .                 explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
-- line 397 ----------------------------------------
-- line 489 ----------------------------------------
  .           .           .           .          .          .          .          .          .               struct _Sp_alloc_shared_tag
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                 const _Alloc& _M_a;
  .           .           .           .          .          .          .          .          .               };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
  .           .           .           .          .          .          .          .          .               class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>
  .           .           .           .          .          .          .          .          .               {
 66 ( 0.00%) 18 ( 0.00%) 18 ( 0.01%)  1 ( 0.02%) .          .          .          .          .                 class _Impl : _Sp_ebo_helper<0, _Alloc>
174 ( 0.01%) 48 ( 0.01%) 48 ( 0.02%)  1 ( 0.02%) .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_ebo_helper<0, std::allocator<ActiveObject>, true>::~_Sp_ebo_helper() (6x)
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .           	typedef _Sp_ebo_helper<0, _Alloc>	_A_base;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 public:
 84 ( 0.00%) 24 ( 0.00%) 24 ( 0.01%)  .          .          .          .          .          .           	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
216 ( 0.01%) 60 ( 0.01%) 66 ( 0.02%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_ebo_helper<0, std::allocator<ActiveObject>, true>::_Sp_ebo_helper(std::allocator<ActiveObject> const&) (6x)
  .           .           .           .          .          .          .          .          .           
120 ( 0.00%) 36 ( 0.01%) 36 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 84 ( 0.00%) 36 ( 0.01%) 24 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_ebo_helper<0, std::allocator<ActiveObject>, true>::_S_get(std::_Sp_ebo_helper<0, std::allocator<ActiveObject>, true>&) (12x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           	__gnu_cxx::__aligned_buffer<_Tp> _M_storage;
  .           .           .           .          .          .          .          .          .                 };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               public:
  .           .           .           .          .          .          .          .          .                 using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_ptr_inplace>;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // Alloc parameter is not a reference so doesn't alias anything in __args
  .           .           .           .          .          .          .          .          .                 template<typename... _Args>
 66 ( 0.00%)  6 ( 0.00%) 36 ( 0.01%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .           	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
120 ( 0.00%) 24 ( 0.00%) 30 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	: _M_impl(__a)
300 ( 0.01%) 84 ( 0.01%) 90 ( 0.03%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<ActiveObject>) (6x)
132 ( 0.00%) 36 ( 0.01%) 42 ( 0.02%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObject>::allocator(std::allocator<ActiveObject> const&) (6x)
108 ( 0.00%) 30 ( 0.00%) 30 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObject>::~allocator() (6x)
 84 ( 0.00%) 30 ( 0.00%) 30 ( 0.01%)  4 ( 0.07%) 0          1 ( 0.03%) 2 ( 0.06%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base() (6x)
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .           .           .           .          .          .          .          .          .           	  // 2070.  allocate_shared should use allocator_traits<A>::construct
 78 ( 0.00%) 18 ( 0.00%) 18 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
66,563 ( 2.35%) 19,673 ( 2.85%) 13,824 ( 4.94%) 858 (14.52%) 106 ( 0.80%) 179 ( 5.91%) 325 (10.04%) 46 ( 0.51%) 173 ( 7.23%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<ActiveObject> >::construct<ActiveObject, int&>(std::allocator<ActiveObject>&, ActiveObject*, int&) (6x)
168 ( 0.01%) 54 ( 0.01%) 48 ( 0.02%)  6 ( 0.10%) 0          0          4 ( 0.12%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>::_M_ptr() (6x)
 42 ( 0.00%) 18 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:int& std::forward<int&>(std::remove_reference<int&>::type&) (6x)
  .           .           .           .          .          .          .          .          .           	      std::forward<_Args>(__args)...); // might throw
 42 ( 0.00%) 30 ( 0.00%)  0           6 ( 0.10%) 0          0          1 ( 0.03%) .          .           	}
  .           .           .           .          .          .          .          .          .           
108 ( 0.00%) 30 ( 0.00%) 30 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 ~_Sp_counted_ptr_inplace() noexcept { }
240 ( 0.01%) 66 ( 0.01%) 66 ( 0.02%)  2 ( 0.03%) .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl() (6x)
 60 ( 0.00%) 18 ( 0.00%) 18 ( 0.01%)  2 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base() (6x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 virtual void
 36 ( 0.00%)  0          18 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 _M_dispose() noexcept
  .           .           .           .          .          .          .          .          .                 {
 66 ( 0.00%) 12 ( 0.00%) 18 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
88,063 ( 3.11%) 24,307 ( 3.52%) 12,598 ( 4.50%) 467 ( 7.90%) 91 ( 0.69%) 10 ( 0.33%) 96 ( 2.97%) 39 ( 0.43%) 1 ( 0.04%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<ActiveObject> >::destroy<ActiveObject>(std::allocator<ActiveObject>&, ActiveObject*) (6x)
168 ( 0.01%) 54 ( 0.01%) 48 ( 0.02%)  7 ( 0.12%) .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>::_M_ptr() (6x)
102 ( 0.00%) 36 ( 0.01%) 30 ( 0.01%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>::_Impl::_M_alloc() (6x)
 24 ( 0.00%) 18 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // Override because the allocator needs to know the dynamic type
  .           .           .           .          .          .          .          .          .                 virtual void
 48 ( 0.00%)  6 ( 0.00%) 18 ( 0.01%)  .          .          .          .          .          .                 _M_destroy() noexcept
  .           .           .           .          .          .          .          .          .                 {
 54 ( 0.00%)  6 ( 0.00%) 12 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	__allocator_type __a(_M_impl._M_alloc());
114 ( 0.00%) 30 ( 0.00%) 36 ( 0.01%) 10 ( 0.17%) .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >::allocator<ActiveObject>(std::allocator<ActiveObject> const&) (6x)
102 ( 0.00%) 36 ( 0.01%) 30 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>::_Impl::_M_alloc() (6x)
 36 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .           	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
150 ( 0.01%) 54 ( 0.01%) 54 ( 0.02%)  6 ( 0.10%) .          .          .          .          .           => /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> > >::__allocated_ptr(std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>*) (6x)
 18 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .           	this->~_Sp_counted_ptr_inplace();
408 ( 0.01%) 114 ( 0.02%) 114 ( 0.04%)  5 ( 0.08%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() (6x)
 66 ( 0.00%) 24 ( 0.00%) 12 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 }
906 ( 0.03%) 288 ( 0.04%) 168 ( 0.06%)  5 ( 0.08%) 1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr() (6x)
108 ( 0.00%) 30 ( 0.00%) 30 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >::~allocator() (6x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               private:
  .           .           .           .          .          .          .          .          .                 friend class __shared_count<_Lp>; // To be able to call _M_ptr().
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // No longer used, but code compiled against old libstdc++ headers
  .           .           .           .          .          .          .          .          .                 // might still call it from __shared_ptr ctor to get the pointer out.
  .           .           .           .          .          .          .          .          .                 virtual void*
  .           .           .           .          .          .          .          .          .                 _M_get_deleter(const std::type_info& __ti) noexcept override
-- line 546 ----------------------------------------
-- line 557 ----------------------------------------
  .           .           .           .          .          .          .          .          .           #else
  .           .           .           .          .          .          .          .          .           	    _Sp_make_shared_tag::_S_eq(__ti)
  .           .           .           .          .          .          .          .          .           #endif
  .           .           .           .          .          .          .          .          .           	   )
  .           .           .           .          .          .          .          .          .           	  return __ptr;
  .           .           .           .          .          .          .          .          .           	return nullptr;
  .           .           .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
198 ( 0.01%) 54 ( 0.01%) 54 ( 0.02%)  6 ( 0.10%) 0          0          1 ( 0.03%) .          .                 _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
306 ( 0.01%) 108 ( 0.02%) 90 ( 0.03%)  7 ( 0.12%) 0          0          3 ( 0.09%) .          .           => /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<ActiveObject>::_M_ptr() (18x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 _Impl _M_impl;
  .           .           .           .          .          .          .          .          .               };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             // The default deleter for shared_ptr<T[]> and shared_ptr<T[N]>.
  .           .           .           .          .          .          .          .          .             struct __sp_array_delete
  .           .           .           .          .          .          .          .          .             {
  .           .           .           .          .          .          .          .          .               template<typename _Yp>
-- line 573 ----------------------------------------
-- line 579 ----------------------------------------
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                 template<typename _Tp>
  .           .           .           .          .          .          .          .          .           	struct __not_alloc_shared_tag { using type = void; };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Tp>
  .           .           .           .          .          .          .          .          .           	struct __not_alloc_shared_tag<_Sp_alloc_shared_tag<_Tp>> { };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               public:
 78 ( 0.00%) 13 ( 0.00%) 39 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 constexpr __shared_count() noexcept : _M_pi(0)
 39 ( 0.00%) 26 ( 0.00%)  .           .          .          .          .          .          .                 { }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Ptr>
  .           .           .           .          .          .          .          .          .                   explicit
  .           .           .           .          .          .          .          .          .           	__shared_count(_Ptr __p) : _M_pi(0)
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  __try
  .           .           .           .          .          .          .          .          .           	    {
  .           .           .           .          .          .          .          .          .           	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
-- line 596 ----------------------------------------
-- line 635 ----------------------------------------
  .           .           .           .          .          .          .          .          .           	  __catch(...)
  .           .           .           .          .          .          .          .          .           	    {
  .           .           .           .          .          .          .          .          .           	      __d(__p); // Call _Deleter on __p.
  .           .           .           .          .          .          .          .          .           	      __throw_exception_again;
  .           .           .           .          .          .          .          .          .           	    }
  .           .           .           .          .          .          .          .          .           	}
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Tp, typename _Alloc, typename... _Args>
 90 ( 0.00%)  6 ( 0.00%) 60 ( 0.02%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
  .           .           .           .          .          .          .          .          .           		       _Args&&... __args)
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;
 30 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
114 ( 0.00%) 30 ( 0.00%) 36 ( 0.01%)  4 ( 0.07%) 0          0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >::allocator<ActiveObject>(std::allocator<ActiveObject> const&) (6x)
 30 ( 0.00%)  0           6 ( 0.00%)  .          .          .          .          .          .           	  auto __guard = std::__allocate_guarded(__a2);
1,808 ( 0.06%) 399 ( 0.06%) 346 ( 0.12%) 38 ( 0.64%) 5 ( 0.04%) 6 ( 0.20%) 7 ( 0.22%) 0          6 ( 0.25%)  => /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> > > std::__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >&) (6x)
 24 ( 0.00%)  0          12 ( 0.00%)  .          .          .          .          .          .           	  _Sp_cp_type* __mem = __guard.get();
108 ( 0.00%) 42 ( 0.01%) 30 ( 0.01%)  7 ( 0.12%) 0          0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> > >::get() (6x)
114 ( 0.00%) 12 ( 0.00%) 30 ( 0.01%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .           	  auto __pi = ::new (__mem)
67,703 ( 2.39%) 20,003 ( 2.89%) 14,160 ( 5.06%) 879 (14.88%) 106 ( 0.80%) 180 ( 5.94%) 337 (10.41%) 46 ( 0.51%) 174 ( 7.27%)  => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<int&>(std::allocator<ActiveObject>, int&) (6x)
132 ( 0.00%) 36 ( 0.01%) 42 ( 0.02%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObject>::allocator(std::allocator<ActiveObject> const&) (6x)
108 ( 0.00%) 30 ( 0.00%) 30 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObject>::~allocator() (6x)
 48 ( 0.00%) 18 ( 0.00%) 18 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/new:operator new(unsigned long, void*) (6x)
 24 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .           	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 42 ( 0.00%) 18 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:int& std::forward<int&>(std::remove_reference<int&>::type&) (6x)
 24 ( 0.00%)  0           6 ( 0.00%)  .          .          .          .          .          .           	  __guard = nullptr;
 60 ( 0.00%) 24 ( 0.00%) 24 ( 0.01%)  4 ( 0.07%) .          .          .          .          .           => /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> > >::operator=(decltype(nullptr)) (6x)
 18 ( 0.00%) 12 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .           	  _M_pi = __pi;
 30 ( 0.00%) 12 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .           	  __p = __pi->_M_ptr();
168 ( 0.01%) 54 ( 0.01%) 48 ( 0.02%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>::_M_ptr() (6x)
102 ( 0.00%) 48 ( 0.01%) 12 ( 0.00%)  3 ( 0.05%) 0          0          3 ( 0.09%) .          .           	}
108 ( 0.00%) 30 ( 0.00%) 30 ( 0.01%)  3 ( 0.05%) .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >::~allocator() (6x)
 72 ( 0.00%) 24 ( 0.00%) 12 ( 0.00%)  3 ( 0.05%) .          .          .          .          .           => /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr() (6x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           #if _GLIBCXX_USE_DEPRECATED
  .           .           .           .          .          .          .          .          .           #pragma GCC diagnostic push
  .           .           .           .          .          .          .          .          .           #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  .           .           .           .          .          .          .          .          .                 // Special case for auto_ptr<_Tp> to provide the strong guarantee.
  .           .           .           .          .          .          .          .          .                 template<typename _Tp>
  .           .           .           .          .          .          .          .          .                   explicit
  .           .           .           .          .          .          .          .          .           	__shared_count(std::auto_ptr<_Tp>&& __r);
-- line 663 ----------------------------------------
-- line 694 ----------------------------------------
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // Throw bad_weak_ptr when __r._M_get_use_count() == 0.
  .           .           .           .          .          .          .          .          .                 explicit __shared_count(const __weak_count<_Lp>& __r);
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // Does not throw if __r._M_get_use_count() == 0, caller must check.
  .           .           .           .          .          .          .          .          .                 explicit
  .           .           .           .          .          .          .          .          .                 __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) noexcept;
  .           .           .           .          .          .          .          .          .           
150 ( 0.01%)  0          60 ( 0.02%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 ~__shared_count() noexcept
  .           .           .           .          .          .          .          .          .                 {
120 ( 0.00%) 60 ( 0.01%)  .           .          .          .          .          .          .           	if (_M_pi != nullptr)
 68 ( 0.00%) 34 ( 0.00%) 17 ( 0.01%)  .          .          .          .          .          .           	  _M_pi->_M_release();
91,195 ( 3.22%) 25,270 ( 3.66%) 13,359 ( 4.77%) 513 ( 8.68%) 95 ( 0.72%) 10 ( 0.33%) 110 ( 3.40%) 40 ( 0.44%) 1 ( 0.04%)  => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() (17x)
 90 ( 0.00%) 60 ( 0.01%)  0           5 ( 0.08%) 0          0          1 ( 0.03%) .          .                 }
  .           .           .           .          .          .          .          .          .           
 36 ( 0.00%)  0          18 ( 0.01%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .                 __shared_count(const __shared_count& __r) noexcept
 24 ( 0.00%) 18 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .                 : _M_pi(__r._M_pi)
  .           .           .           .          .          .          .          .          .                 {
 24 ( 0.00%) 12 ( 0.00%)  .           .          .          .          .          .          .           	if (_M_pi != nullptr)
 24 ( 0.00%) 12 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .           	  _M_pi->_M_add_ref_copy();
150 ( 0.01%) 54 ( 0.01%) 42 ( 0.02%)  3 ( 0.05%) 2 ( 0.02%) 0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_add_ref_copy() (6x)
 18 ( 0.00%) 12 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 __shared_count&
  .           .           .           .          .          .          .          .          .                 operator=(const __shared_count& __r) noexcept
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .           	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
  .           .           .           .          .          .          .          .          .           	if (__tmp != _M_pi)
  .           .           .           .          .          .          .          .          .           	  {
  .           .           .           .          .          .          .          .          .           	    if (__tmp != nullptr)
-- line 721 ----------------------------------------
-- line 723 ----------------------------------------
  .           .           .           .          .          .          .          .          .           	    if (_M_pi != nullptr)
  .           .           .           .          .          .          .          .          .           	      _M_pi->_M_release();
  .           .           .           .          .          .          .          .          .           	    _M_pi = __tmp;
  .           .           .           .          .          .          .          .          .           	  }
  .           .           .           .          .          .          .          .          .           	return *this;
  .           .           .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 void
 65 ( 0.00%)  0          39 ( 0.01%)  6 ( 0.10%) 0          0          1 ( 0.03%) .          .                 _M_swap(__shared_count& __r) noexcept
  .           .           .           .          .          .          .          .          .                 {
 39 ( 0.00%) 26 ( 0.00%) 13 ( 0.00%)  .          .          .          .          .          .           	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 52 ( 0.00%) 39 ( 0.01%) 13 ( 0.00%)  .          .          .          .          .          .           	__r._M_pi = _M_pi;
 39 ( 0.00%) 26 ( 0.00%) 13 ( 0.00%)  .          .          .          .          .          .           	_M_pi = __tmp;
 39 ( 0.00%) 26 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 long
 25 ( 0.00%)  0          10 ( 0.00%)  .          .          .          .          .          .                 _M_get_use_count() const noexcept
 55 ( 0.00%) 30 ( 0.00%)  5 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 { return _M_pi ? _M_pi->_M_get_use_count() : 0; }
 50 ( 0.00%) 20 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_get_use_count() const (5x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 bool
  .           .           .           .          .          .          .          .          .                 _M_unique() const noexcept
  .           .           .           .          .          .          .          .          .                 { return this->_M_get_use_count() == 1; }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 void*
  .           .           .           .          .          .          .          .          .                 _M_get_deleter(const std::type_info& __ti) const noexcept
  .           .           .           .          .          .          .          .          .                 { return _M_pi ? _M_pi->_M_get_deleter(__ti) : nullptr; }
-- line 748 ----------------------------------------
-- line 766 ----------------------------------------
  .           .           .           .          .          .          .          .          .                 _Sp_counted_base<_Lp>*  _M_pi;
  .           .           .           .          .          .          .          .          .               };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             template<_Lock_policy _Lp>
  .           .           .           .          .          .          .          .          .               class __weak_count
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .               public:
 36 ( 0.00%)  6 ( 0.00%) 18 ( 0.01%)  1 ( 0.02%) 0          1 ( 0.03%) 1 ( 0.03%) 0          1 ( 0.04%)        constexpr __weak_count() noexcept : _M_pi(nullptr)
 18 ( 0.00%) 12 ( 0.00%)  .           .          .          .          .          .          .                 { }
  .           .           .           .          .          .          .          .          .           
  6 ( 0.00%)  0           3 ( 0.00%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .                 __weak_count(const __shared_count<_Lp>& __r) noexcept
  4 ( 0.00%)  3 ( 0.00%)  1 ( 0.00%)  .          .          .          .          .          .                 : _M_pi(__r._M_pi)
  .           .           .           .          .          .          .          .          .                 {
  4 ( 0.00%)  2 ( 0.00%)  .           .          .          .          .          .          .           	if (_M_pi != nullptr)
  4 ( 0.00%)  2 ( 0.00%)  1 ( 0.00%)  .          .          .          .          .          .           	  _M_pi->_M_weak_add_ref();
 25 ( 0.00%)  9 ( 0.00%)  7 ( 0.00%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_weak_add_ref() (1x)
  3 ( 0.00%)  2 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
 30 ( 0.00%)  0          15 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 __weak_count(const __weak_count& __r) noexcept
 20 ( 0.00%) 15 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .                 : _M_pi(__r._M_pi)
  .           .           .           .          .          .          .          .          .                 {
 20 ( 0.00%) 10 ( 0.00%)  .           .          .          .          .          .          .           	if (_M_pi != nullptr)
 20 ( 0.00%) 10 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .           	  _M_pi->_M_weak_add_ref();
125 ( 0.00%) 45 ( 0.01%) 35 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_weak_add_ref() (5x)
 15 ( 0.00%) 10 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 __weak_count(__weak_count&& __r) noexcept
  .           .           .           .          .          .          .          .          .                 : _M_pi(__r._M_pi)
  .           .           .           .          .          .          .          .          .                 { __r._M_pi = nullptr; }
  .           .           .           .          .          .          .          .          .           
 60 ( 0.00%)  0          24 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 ~__weak_count() noexcept
  .           .           .           .          .          .          .          .          .                 {
 48 ( 0.00%) 24 ( 0.00%)  0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	if (_M_pi != nullptr)
 44 ( 0.00%) 22 ( 0.00%) 11 ( 0.00%)  .          .          .          .          .          .           	  _M_pi->_M_weak_release();
330 ( 0.01%) 99 ( 0.01%) 77 ( 0.03%)  6 ( 0.10%) 2 ( 0.02%) 0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_weak_release() (11x)
 36 ( 0.00%) 24 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 __weak_count&
 24 ( 0.00%)  0          12 ( 0.00%)  1 ( 0.02%) .          .          .          .          .                 operator=(const __shared_count<_Lp>& __r) noexcept
  .           .           .           .          .          .          .          .          .                 {
 12 ( 0.00%)  8 ( 0.00%)  4 ( 0.00%)  .          .          .          .          .          .           	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
  8 ( 0.00%)  4 ( 0.00%)  .           .          .          .          .          .          .           	if (__tmp != nullptr)
 12 ( 0.00%)  4 ( 0.00%)  4 ( 0.00%)  .          .          .          .          .          .           	  __tmp->_M_weak_add_ref();
100 ( 0.00%) 36 ( 0.01%) 28 ( 0.01%)  0          1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_weak_add_ref() (4x)
 16 ( 0.00%)  8 ( 0.00%)  0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	if (_M_pi != nullptr)
 16 ( 0.00%)  8 ( 0.00%)  4 ( 0.00%)  .          .          .          .          .          .           	  _M_pi->_M_weak_release();
120 ( 0.00%) 36 ( 0.01%) 28 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_weak_release() (4x)
 12 ( 0.00%)  8 ( 0.00%)  4 ( 0.00%)  .          .          .          .          .          .           	_M_pi = __tmp;
  4 ( 0.00%)  4 ( 0.00%)  .           .          .          .          .          .          .           	return *this;
  8 ( 0.00%)  8 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 __weak_count&
 30 ( 0.00%)  0          15 ( 0.01%)  .          .          .          .          .          .                 operator=(const __weak_count& __r) noexcept
  .           .           .           .          .          .          .          .          .                 {
 15 ( 0.00%) 10 ( 0.00%)  5 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 10 ( 0.00%)  5 ( 0.00%)  .           .          .          .          .          .          .           	if (__tmp != nullptr)
 15 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .           	  __tmp->_M_weak_add_ref();
125 ( 0.00%) 45 ( 0.01%) 35 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_weak_add_ref() (5x)
 20 ( 0.00%) 10 ( 0.00%)  .           .          .          .          .          .          .           	if (_M_pi != nullptr)
  .           .           .           .          .          .          .          .          .           	  _M_pi->_M_weak_release();
 15 ( 0.00%) 10 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .           	_M_pi = __tmp;
  5 ( 0.00%)  5 ( 0.00%)  0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	return *this;
 10 ( 0.00%) 10 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 __weak_count&
  .           .           .           .          .          .          .          .          .                 operator=(__weak_count&& __r) noexcept
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .           	if (_M_pi != nullptr)
  .           .           .           .          .          .          .          .          .           	  _M_pi->_M_weak_release();
  .           .           .           .          .          .          .          .          .           	_M_pi = __r._M_pi;
  .           .           .           .          .          .          .          .          .                   __r._M_pi = nullptr;
-- line 831 ----------------------------------------
-- line 871 ----------------------------------------
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                 if (_M_pi == nullptr || !_M_pi->_M_add_ref_lock_nothrow())
  .           .           .           .          .          .          .          .          .           	__throw_bad_weak_ptr();
  .           .           .           .          .          .          .          .          .               }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             // Now that __weak_count is defined we can define this constructor:
  .           .           .           .          .          .          .          .          .             template<_Lock_policy _Lp>
  .           .           .           .          .          .          .          .          .               inline
 30 ( 0.00%)  0          15 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .               __shared_count<_Lp>::
  .           .           .           .          .          .          .          .          .               __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) noexcept
 20 ( 0.00%) 15 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .               : _M_pi(__r._M_pi)
  .           .           .           .          .          .          .          .          .               {
 70 ( 0.00%) 20 ( 0.00%)  5 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 if (_M_pi && !_M_pi->_M_add_ref_lock_nothrow())
230 ( 0.01%) 70 ( 0.01%) 40 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_add_ref_lock_nothrow() (5x)
  .           .           .           .          .          .          .          .          .           	_M_pi = nullptr;
 15 ( 0.00%) 10 ( 0.00%)  .           .          .          .          .          .          .               }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           #define __cpp_lib_shared_ptr_arrays 201611L
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             // Helper traits for shared_ptr of array:
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             // A pointer type Y* is said to be compatible with a pointer type T* when
  .           .           .           .          .          .          .          .          .             // either Y* is convertible to T* or Y is U[N] and T is U cv [].
  .           .           .           .          .          .          .          .          .             template<typename _Yp_ptr, typename _Tp_ptr>
-- line 893 ----------------------------------------
-- line 976 ----------------------------------------
  .           .           .           .          .          .          .          .          .                 element_type&
  .           .           .           .          .          .          .          .          .                 operator*() const noexcept
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .           	__glibcxx_assert(_M_get() != nullptr);
  .           .           .           .          .          .          .          .          .           	return *_M_get();
  .           .           .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 element_type*
 85 ( 0.00%)  0          34 ( 0.01%)  .          .          .          .          .          .                 operator->() const noexcept
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .           	_GLIBCXX_DEBUG_PEDASSERT(_M_get() != nullptr);
 51 ( 0.00%) 17 ( 0.00%) 17 ( 0.01%)  .          .          .          .          .          .           	return _M_get();
306 ( 0.01%) 119 ( 0.02%) 85 ( 0.03%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObject, (__gnu_cxx::_Lock_policy)2, false, false>::_M_get() const (17x)
 34 ( 0.00%) 34 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               private:
  .           .           .           .          .          .          .          .          .                 element_type*
 85 ( 0.00%)  0          34 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 _M_get() const noexcept
 85 ( 0.00%) 51 ( 0.01%) 17 ( 0.01%)  .          .          .          .          .          .                 { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
136 ( 0.00%) 68 ( 0.01%) 34 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::get() const (17x)
  .           .           .           .          .          .          .          .          .               };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             // Define operator-> for shared_ptr<cv void>.
  .           .           .           .          .          .          .          .          .             template<typename _Tp, _Lock_policy _Lp>
  .           .           .           .          .          .          .          .          .               class __shared_ptr_access<_Tp, _Lp, false, true>
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .               public:
  .           .           .           .          .          .          .          .          .                 using element_type = _Tp;
-- line 1001 ----------------------------------------
-- line 1144 ----------------------------------------
  .           .           .           .          .          .          .          .          .           	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r,
  .           .           .           .          .          .          .          .          .           		     element_type* __p) noexcept
  .           .           .           .          .          .          .          .          .           	: _M_ptr(__p), _M_refcount()
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  _M_refcount._M_swap(__r._M_refcount);
  .           .           .           .          .          .          .          .          .           	  __r._M_ptr = nullptr;
  .           .           .           .          .          .          .          .          .           	}
  .           .           .           .          .          .          .          .          .           
120 ( 0.00%) 42 ( 0.01%) 30 ( 0.01%)  7 ( 0.12%) .          .          .          .          .                 __shared_ptr(const __shared_ptr&) noexcept = default;
276 ( 0.01%) 108 ( 0.02%) 72 ( 0.03%)  5 ( 0.08%) 2 ( 0.02%) 0          5 ( 0.15%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&) (6x)
  .           .           .           .          .          .          .          .          .                 __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
360 ( 0.01%) 90 ( 0.01%) 90 ( 0.03%) 18 ( 0.30%) 0          0          1 ( 0.03%) .          .                 ~__shared_ptr() = default;
91,623 ( 3.24%) 25,424 ( 3.68%) 13,436 ( 4.80%) 519 ( 8.78%) 95 ( 0.72%) 10 ( 0.33%) 112 ( 3.46%) 40 ( 0.44%) 1 ( 0.04%)  => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() (30x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp, typename = _Compatible<_Yp>>
  .           .           .           .          .          .          .          .          .           	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
  .           .           .           .          .          .          .          .          .           	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
  .           .           .           .          .          .          .          .          .           	{ }
  .           .           .           .          .          .          .          .          .           
 78 ( 0.00%)  0          39 ( 0.01%)  4 ( 0.07%) 0          0          1 ( 0.03%) .          .                 __shared_ptr(__shared_ptr&& __r) noexcept
104 ( 0.00%) 52 ( 0.01%) 26 ( 0.01%)  0          0          1 ( 0.03%) 0          0          1 ( 0.04%)        : _M_ptr(__r._M_ptr), _M_refcount()
117 ( 0.00%) 39 ( 0.01%) 39 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() (13x)
  .           .           .           .          .          .          .          .          .                 {
 91 ( 0.00%) 26 ( 0.00%) 13 ( 0.00%)  .          .          .          .          .          .           	_M_refcount._M_swap(__r._M_refcount);
234 ( 0.01%) 117 ( 0.02%) 78 ( 0.03%)  6 ( 0.10%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&) (13x)
 26 ( 0.00%) 13 ( 0.00%) 13 ( 0.00%)  1 ( 0.02%) .          .          .          .          .           	__r._M_ptr = nullptr;
 39 ( 0.00%) 26 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp, typename = _Compatible<_Yp>>
  .           .           .           .          .          .          .          .          .           	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
  .           .           .           .          .          .          .          .          .           	: _M_ptr(__r._M_ptr), _M_refcount()
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  _M_refcount._M_swap(__r._M_refcount);
  .           .           .           .          .          .          .          .          .           	  __r._M_ptr = nullptr;
  .           .           .           .          .          .          .          .          .           	}
-- line 1174 ----------------------------------------
-- line 1287 ----------------------------------------
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp, typename _Deleter, typename _Alloc>
  .           .           .           .          .          .          .          .          .           	_SafeConv<_Yp>
  .           .           .           .          .          .          .          .          .           	reset(_Yp* __p, _Deleter __d, _Alloc __a)
  .           .           .           .          .          .          .          .          .                   { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /// Return the stored pointer.
  .           .           .           .          .          .          .          .          .                 element_type*
 68 ( 0.00%)  0          34 ( 0.01%)  .          .          .          .          .          .                 get() const noexcept
 68 ( 0.00%) 68 ( 0.01%)  .           .          .          .          .          .          .                 { return _M_ptr; }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /// Return true if the stored pointer is not null.
 20 ( 0.00%)  0          10 ( 0.00%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .                 explicit operator bool() const noexcept
 30 ( 0.00%) 20 ( 0.00%)  .           .          .          .          .          .          .                 { return _M_ptr != nullptr; }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /// Return true if use_count() == 1.
  .           .           .           .          .          .          .          .          .                 bool
  .           .           .           .          .          .          .          .          .                 unique() const noexcept
  .           .           .           .          .          .          .          .          .                 { return _M_refcount._M_unique(); }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /// If *this owns a pointer, return the number of owners, otherwise zero.
  .           .           .           .          .          .          .          .          .                 long
-- line 1308 ----------------------------------------
-- line 1333 ----------------------------------------
  .           .           .           .          .          .          .          .          .           	bool
  .           .           .           .          .          .          .          .          .           	owner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const noexcept
  .           .           .           .          .          .          .          .          .           	{ return _M_refcount._M_less(__rhs._M_refcount); }
  .           .           .           .          .          .          .          .          .                 /// @}
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               protected:
  .           .           .           .          .          .          .          .          .                 // This constructor is non-standard, it is used by allocate_shared.
  .           .           .           .          .          .          .          .          .                 template<typename _Alloc, typename... _Args>
 48 ( 0.00%)  0          30 ( 0.01%)  6 ( 0.10%) 0          0          2 ( 0.06%) .          .           	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 78 ( 0.00%) 30 ( 0.00%) 18 ( 0.01%)  .          .          .          .          .          .           	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
70,957 ( 2.51%) 20,810 ( 3.01%) 14,944 ( 5.34%) 947 (16.03%) 111 ( 0.84%) 186 ( 6.14%) 359 (11.09%) 46 ( 0.51%) 180 ( 7.52%)  => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<ActiveObject, std::allocator<ActiveObject>, int&>(ActiveObject*&, std::_Sp_alloc_shared_tag<std::allocator<ActiveObject> >, int&) (6x)
 42 ( 0.00%) 18 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:int& std::forward<int&>(std::remove_reference<int&>::type&) (6x)
 60 ( 0.00%) 36 ( 0.01%)  6 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	{ _M_enable_shared_from_this_with(_M_ptr); }
 48 ( 0.00%) 12 ( 0.00%) 18 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::enable_if<!std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::__has_esft_base<ActiveObject, void>::value, void>::type std::__shared_ptr<ActiveObject, (__gnu_cxx::_Lock_policy)2>::_M_enable_shared_from_this_with<ActiveObject, ActiveObject>(ActiveObject*) (6x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Tp1, _Lock_policy _Lp1, typename _Alloc,
  .           .           .           .          .          .          .          .          .           	       typename... _Args>
  .           .           .           .          .          .          .          .          .           	friend __shared_ptr<_Tp1, _Lp1>
  .           .           .           .          .          .          .          .          .           	__allocate_shared(const _Alloc& __a, _Args&&... __args);
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // This constructor is used by __weak_ptr::lock() and
  .           .           .           .          .          .          .          .          .                 // shared_ptr::shared_ptr(const weak_ptr&, std::nothrow_t).
 30 ( 0.00%)  0          15 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 __shared_ptr(const __weak_ptr<_Tp, _Lp>& __r, std::nothrow_t) noexcept
 35 ( 0.00%) 10 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .                 : _M_refcount(__r._M_refcount, std::nothrow)
365 ( 0.01%) 115 ( 0.02%) 65 ( 0.02%)  3 ( 0.05%) 0          0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count(std::__weak_count<(__gnu_cxx::_Lock_policy)2> const&, std::nothrow_t) (5x)
  .           .           .           .          .          .          .          .          .                 {
 55 ( 0.00%) 20 ( 0.00%) 10 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	_M_ptr = _M_refcount._M_get_use_count() ? __r._M_ptr : nullptr;
130 ( 0.00%) 50 ( 0.01%) 25 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_get_use_count() const (5x)
 15 ( 0.00%) 10 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 friend class __weak_ptr<_Tp, _Lp>;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               private:
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp>
  .           .           .           .          .          .          .          .          .           	using __esft_base_t = decltype(__enable_shared_from_this_base(
  .           .           .           .          .          .          .          .          .           	      std::declval<const __shared_count<_Lp>&>(),
-- line 1364 ----------------------------------------
-- line 1378 ----------------------------------------
  .           .           .           .          .          .          .          .          .           	_M_enable_shared_from_this_with(_Yp* __p) noexcept
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
  .           .           .           .          .          .          .          .          .           	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
  .           .           .           .          .          .          .          .          .           	}
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
  .           .           .           .          .          .          .          .          .           	typename enable_if<!__has_esft_base<_Yp2>::value>::type
 30 ( 0.00%)  0          18 ( 0.01%)  .          .          .          .          .          .           	_M_enable_shared_from_this_with(_Yp*) noexcept
 18 ( 0.00%) 12 ( 0.00%)  .           .          .          .          .          .          .           	{ }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 void*
  .           .           .           .          .          .          .          .          .                 _M_get_deleter(const std::type_info& __ti) const noexcept
  .           .           .           .          .          .          .          .          .                 { return _M_refcount._M_get_deleter(__ti); }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
  .           .           .           .          .          .          .          .          .                 template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;
  .           .           .           .          .          .          .          .          .           
-- line 1395 ----------------------------------------
-- line 1596 ----------------------------------------
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // Constraint for assignment from shared_ptr and weak_ptr:
  .           .           .           .          .          .          .          .          .                 template<typename _Yp>
  .           .           .           .          .          .          .          .          .           	using _Assignable = _Compatible<_Yp, __weak_ptr&>;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               public:
  .           .           .           .          .          .          .          .          .                 using element_type = typename remove_extent<_Tp>::type;
  .           .           .           .          .          .          .          .          .           
 30 ( 0.00%)  0          12 ( 0.00%)  .          .          .          .          .          .                 constexpr __weak_ptr() noexcept
 36 ( 0.00%) 12 ( 0.00%) 12 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 : _M_ptr(nullptr), _M_refcount()
 54 ( 0.00%) 18 ( 0.00%) 18 ( 0.01%)  1 ( 0.02%) 0          1 ( 0.03%) 1 ( 0.03%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/shared_ptr_base.h:std::__weak_count<(__gnu_cxx::_Lock_policy)2>::__weak_count() (6x)
 18 ( 0.00%) 12 ( 0.00%)  .           .          .          .          .          .          .                 { }
  .           .           .           .          .          .          .          .          .           
100 ( 0.00%) 35 ( 0.01%) 25 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 __weak_ptr(const __weak_ptr&) noexcept = default;
230 ( 0.01%) 90 ( 0.01%) 60 ( 0.02%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__weak_count<(__gnu_cxx::_Lock_policy)2>::__weak_count(std::__weak_count<(__gnu_cxx::_Lock_policy)2> const&) (5x)
  .           .           .           .          .          .          .          .          .           
144 ( 0.01%) 36 ( 0.01%) 36 ( 0.01%)  .          .          .          .          .          .                 ~__weak_ptr() = default;
518 ( 0.02%) 169 ( 0.02%) 112 ( 0.04%)  8 ( 0.14%) 2 ( 0.02%) 0          5 ( 0.15%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__weak_count<(__gnu_cxx::_Lock_policy)2>::~__weak_count() (12x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // The "obvious" converting constructor implementation:
  .           .           .           .          .          .          .          .          .                 //
  .           .           .           .          .          .          .          .          .                 //  template<typename _Tp1>
  .           .           .           .          .          .          .          .          .                 //    __weak_ptr(const __weak_ptr<_Tp1, _Lp>& __r)
  .           .           .           .          .          .          .          .          .                 //    : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount) // never throws
  .           .           .           .          .          .          .          .          .                 //    { }
  .           .           .           .          .          .          .          .          .                 //
-- line 1618 ----------------------------------------
-- line 1624 ----------------------------------------
  .           .           .           .          .          .          .          .          .                 // It is not possible to avoid spurious access violations since
  .           .           .           .          .          .          .          .          .                 // in multithreaded programs __r._M_ptr may be invalidated at any point.
  .           .           .           .          .          .          .          .          .                 template<typename _Yp, typename = _Compatible<_Yp>>
  .           .           .           .          .          .          .          .          .           	__weak_ptr(const __weak_ptr<_Yp, _Lp>& __r) noexcept
  .           .           .           .          .          .          .          .          .           	: _M_refcount(__r._M_refcount)
  .           .           .           .          .          .          .          .          .                   { _M_ptr = __r.lock().get(); }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp, typename = _Compatible<_Yp>>
  6 ( 0.00%)  0           3 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	__weak_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 11 ( 0.00%)  5 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .           	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 46 ( 0.00%) 18 ( 0.00%) 12 ( 0.00%)  4 ( 0.07%) 0          0          4 ( 0.12%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__weak_count<(__gnu_cxx::_Lock_policy)2>::__weak_count(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&) (1x)
  3 ( 0.00%)  2 ( 0.00%)  .           .          .          .          .          .          .           	{ }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 __weak_ptr(__weak_ptr&& __r) noexcept
  .           .           .           .          .          .          .          .          .                 : _M_ptr(__r._M_ptr), _M_refcount(std::move(__r._M_refcount))
  .           .           .           .          .          .          .          .          .                 { __r._M_ptr = nullptr; }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp, typename = _Compatible<_Yp>>
  .           .           .           .          .          .          .          .          .           	__weak_ptr(__weak_ptr<_Yp, _Lp>&& __r) noexcept
  .           .           .           .          .          .          .          .          .           	: _M_ptr(__r.lock().get()), _M_refcount(std::move(__r._M_refcount))
  .           .           .           .          .          .          .          .          .                   { __r._M_ptr = nullptr; }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 __weak_ptr&
100 ( 0.00%) 40 ( 0.01%) 25 ( 0.01%)  0          0          1 ( 0.03%) .          .          .                 operator=(const __weak_ptr& __r) noexcept = default;
245 ( 0.01%) 100 ( 0.01%) 65 ( 0.02%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__weak_count<(__gnu_cxx::_Lock_policy)2>::operator=(std::__weak_count<(__gnu_cxx::_Lock_policy)2> const&) (5x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp>
  .           .           .           .          .          .          .          .          .           	_Assignable<_Yp>
  .           .           .           .          .          .          .          .          .           	operator=(const __weak_ptr<_Yp, _Lp>& __r) noexcept
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  _M_ptr = __r.lock().get();
  .           .           .           .          .          .          .          .          .           	  _M_refcount = __r._M_refcount;
  .           .           .           .          .          .          .          .          .           	  return *this;
  .           .           .           .          .          .          .          .          .           	}
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp>
  .           .           .           .          .          .          .          .          .           	_Assignable<_Yp>
 24 ( 0.00%)  0          12 ( 0.00%)  .          .          .          .          .          .           	operator=(const __shared_ptr<_Yp, _Lp>& __r) noexcept
  .           .           .           .          .          .          .          .          .           	{
 16 ( 0.00%) 12 ( 0.00%)  4 ( 0.00%)  .          .          .          .          .          .           	  _M_ptr = __r._M_ptr;
 28 ( 0.00%)  8 ( 0.00%)  4 ( 0.00%)  .          .          .          .          .          .           	  _M_refcount = __r._M_refcount;
332 ( 0.01%) 124 ( 0.02%) 84 ( 0.03%)  2 ( 0.03%) 1 ( 0.01%) 0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__weak_count<(__gnu_cxx::_Lock_policy)2>::operator=(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&) (4x)
  4 ( 0.00%)  4 ( 0.00%)  .           .          .          .          .          .          .           	  return *this;
  8 ( 0.00%)  8 ( 0.00%)  .           .          .          .          .          .          .           	}
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 __weak_ptr&
  .           .           .           .          .          .          .          .          .                 operator=(__weak_ptr&& __r) noexcept
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .           	__weak_ptr(std::move(__r)).swap(*this);
  .           .           .           .          .          .          .          .          .           	return *this;
  .           .           .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
-- line 1672 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/char_traits.h
--------------------------------------------------------------------------------
Ir          Dr          Dw          I1mr       D1mr D1mw ILmr DLmr DLmw 

-- line 282 ----------------------------------------
 .           .           .          .          .          .          .          .          .              */
 .           .           .          .          .          .          .          .          .             template<typename _CharT>
 .           .           .          .          .          .          .          .          .               _GLIBCXX_ALWAYS_INLINE constexpr bool
 .           .           .          .          .          .          .          .          .               __constant_string_p(const _CharT* __s)
 .           .           .          .          .          .          .          .          .               {
 .           .           .          .          .          .          .          .          .           #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 .           .           .          .          .          .          .          .          .                 (void) __s;
 .           .           .          .          .          .          .          .          .                 // In constexpr contexts all strings should be constant.
12 ( 0.00%)  .           .          .          .          .          .          .          .                 return __builtin_is_constant_evaluated();
 .           .           .          .          .          .          .          .          .           #else
 .           .           .          .          .          .          .          .          .                 while (__builtin_constant_p(*__s) && *__s)
 .           .           .          .          .          .          .          .          .           	__s++;
 .           .           .          .          .          .          .          .          .                 return __builtin_constant_p(*__s);
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .               }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             /**
-- line 298 ----------------------------------------
-- line 385 ----------------------------------------
 .           .           .          .          .          .          .          .          .           		return 1;
 .           .           .          .          .          .          .          .          .           	    return 0;
 .           .           .          .          .          .          .          .          .           	  }
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           	return __builtin_memcmp(__s1, __s2, __n);
 .           .           .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 static _GLIBCXX17_CONSTEXPR size_t
84 ( 0.00%) 12 ( 0.00%) 36 ( 0.01%) 7 ( 0.12%) .          .          .          .          .                 length(const char_type* __s)
 .           .           .          .          .          .          .          .          .                 {
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201703L
24 ( 0.00%)  .           .          .          .          .          .          .          .           	if (__constant_string_p(__s))
 .           .           .          .          .          .          .          .          .           	  return __gnu_cxx::char_traits<char_type>::length(__s);
 .           .           .          .          .          .          .          .          .           #endif
48 ( 0.00%) 12 ( 0.00%) 12 ( 0.00%) .          .          .          .          .          .           	return __builtin_strlen(__s);
228 ( 0.01%) 36 ( 0.01%)  0          12 ( 0.20%) 1 ( 0.01%) 0          1 ( 0.03%) 1 ( 0.01%) .           => ???:0x000000000010c6f0 (12x)
24 ( 0.00%) 24 ( 0.00%)  .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 static _GLIBCXX17_CONSTEXPR const char_type*
 .           .           .          .          .          .          .          .          .                 find(const char_type* __s, size_t __n, const char_type& __a)
 .           .           .          .          .          .          .          .          .                 {
 .           .           .          .          .          .          .          .          .           	if (__n == 0)
 .           .           .          .          .          .          .          .          .           	  return 0;
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201703L
 .           .           .          .          .          .          .          .          .           	if (__builtin_constant_p(__n)
-- line 408 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/basic_string.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 525 ----------------------------------------
  .           .           .          .          .          .          .          .          .                  *  @param  __s  Source C string.
  .           .           .          .          .          .          .          .          .                  *  @param  __a  Allocator to use (default is default allocator).
  .           .           .          .          .          .          .          .          .                  */
  .           .           .          .          .          .          .          .          .           #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
  .           .           .          .          .          .          .          .          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .           .           .          .          .          .          .          .          .                 // 3076. basic_string CTAD ambiguity
  .           .           .          .          .          .          .          .          .                 template<typename = _RequireAllocator<_Alloc>>
  .           .           .          .          .          .          .          .          .           #endif
132 ( 0.00%) 12 ( 0.00%) 72 ( 0.03%) 7 ( 0.12%) 0          0          1 ( 0.03%) .          .                 basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
120 ( 0.00%) 36 ( 0.01%) 24 ( 0.01%) 7 ( 0.12%) 0          0          1 ( 0.03%) .          .                 : _M_dataplus(_M_local_data(), __a)
 60 ( 0.00%) 24 ( 0.00%) 12 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => ???:0x000000000010c8f0 (12x)
 60 ( 0.00%) 24 ( 0.00%)  0          13 ( 0.22%) 0          0          2 ( 0.06%) .          .           => ???:0x000000000010c820 (12x)
  .           .           .          .          .          .          .          .          .                 {
108 ( 0.00%) 36 ( 0.01%) 24 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	const _CharT* __end = __s ? __s + traits_type::length(__s)
420 ( 0.01%) 84 ( 0.01%) 48 ( 0.02%) 19 ( 0.32%) 1 ( 0.01%) 0          1 ( 0.03%) 1 ( 0.01%) .           => /usr/include/c++/11/bits/char_traits.h:std::char_traits<char>::length(char const*) (12x)
  .           .           .          .          .          .          .          .          .           	  // We just need a non-null pointer here to get an exception:
  .           .           .          .          .          .          .          .          .           	  : reinterpret_cast<const _CharT*>(__alignof__(_CharT));
 72 ( 0.00%) 36 ( 0.01%) 12 ( 0.00%) .          .          .          .          .          .           	_M_construct(__s, __end, random_access_iterator_tag());
2,497 ( 0.09%) 785 ( 0.11%) 476 ( 0.17%) 44 ( 0.74%) 25 ( 0.19%) 0          17 ( 0.53%) 15 ( 0.17%) .           => /usr/include/c++/11/bits/basic_string.tcc:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) (12x)
 84 ( 0.00%) 60 ( 0.01%)  0          1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief  Construct string as multiple characters.
  .           .           .          .          .          .          .          .          .                  *  @param  __n  Number of characters.
  .           .           .          .          .          .          .          .          .                  *  @param  __c  Character to use.
  .           .           .          .          .          .          .          .          .                  *  @param  __a  Allocator to use (default is default allocator).
  .           .           .          .          .          .          .          .          .                  */
  .           .           .          .          .          .          .          .          .           #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
-- line 548 ----------------------------------------
-- line 6240 ----------------------------------------
  .           .           .          .          .          .          .          .          .             /**
  .           .           .          .          .          .          .          .          .              *  @brief  Test equivalence of string and C string.
  .           .           .          .          .          .          .          .          .              *  @param __lhs  String.
  .           .           .          .          .          .          .          .          .              *  @param __rhs  C string.
  .           .           .          .          .          .          .          .          .              *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
  .           .           .          .          .          .          .          .          .              */
  .           .           .          .          .          .          .          .          .             template<typename _CharT, typename _Traits, typename _Alloc>
  .           .           .          .          .          .          .          .          .               inline bool
 18 ( 0.00%)  0           9 ( 0.00%) .          .          .          .          .          .               operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
  .           .           .          .          .          .          .          .          .           	       const _CharT* __rhs)
 27 ( 0.00%) 12 ( 0.00%)  3 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               { return __lhs.compare(__rhs) == 0; }
215 ( 0.01%) 44 ( 0.01%) 17 ( 0.01%) 6 ( 0.10%) 1 ( 0.01%) 0          2 ( 0.06%) .          .           => ???:0x000000000010c660 (3x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #if __cpp_lib_three_way_comparison
  .           .           .          .          .          .          .          .          .             /**
  .           .           .          .          .          .          .          .          .              *  @brief  Three-way comparison of a string and a C string.
  .           .           .          .          .          .          .          .          .              *  @param __lhs  A string.
  .           .           .          .          .          .          .          .          .              *  @param __rhs  A null-terminated string.
  .           .           .          .          .          .          .          .          .              *  @return  A value indicating whether `__lhs` is less than, equal to,
  .           .           .          .          .          .          .          .          .              *	       greater than, or incomparable with `__rhs`.
-- line 6258 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/unique_lock.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr        D1mr       D1mw       ILmr       DLmr DLmw 

-- line 58 ----------------------------------------
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .               public:
  .           .           .           .          .          .          .          .          .                 typedef _Mutex mutex_type;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 unique_lock() noexcept
  .           .           .           .          .          .          .          .          .                 : _M_device(0), _M_owns(false)
  .           .           .           .          .          .          .          .          .                 { }
  .           .           .           .          .          .          .          .          .           
 96 ( 0.00%)  0          48 ( 0.02%)  .          .          .          .          .          .                 explicit unique_lock(mutex_type& __m)
112 ( 0.00%) 48 ( 0.01%) 48 ( 0.02%)  5 ( 0.08%) 0          0          1 ( 0.03%) .          .                 : _M_device(std::__addressof(__m)), _M_owns(false)
112 ( 0.00%) 48 ( 0.01%) 32 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::mutex* std::__addressof<std::mutex>(std::mutex&) (16x)
  .           .           .           .          .          .          .          .          .                 {
 48 ( 0.00%) 16 ( 0.00%) 16 ( 0.01%)  .          .          .          .          .          .           	lock();
1,488 ( 0.05%) 432 ( 0.06%) 272 ( 0.10%) 47 ( 0.80%) 1 ( 0.01%) 10 ( 0.33%) 4 ( 0.12%) 0          10 ( 0.42%)  => /usr/include/c++/11/bits/unique_lock.h:std::unique_lock<std::mutex>::lock() (16x)
 32 ( 0.00%) 16 ( 0.00%) 16 ( 0.01%)  .          .          .          .          .          .           	_M_owns = true;
 48 ( 0.00%) 32 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 unique_lock(mutex_type& __m, defer_lock_t) noexcept
  .           .           .           .          .          .          .          .          .                 : _M_device(std::__addressof(__m)), _M_owns(false)
  .           .           .           .          .          .          .          .          .                 { }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 unique_lock(mutex_type& __m, try_to_lock_t)
  .           .           .           .          .          .          .          .          .                 : _M_device(std::__addressof(__m)), _M_owns(_M_device->try_lock())
  .           .           .           .          .          .          .          .          .                 { }
-- line 79 ----------------------------------------
-- line 93 ----------------------------------------
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Rep, typename _Period>
  .           .           .           .          .          .          .          .          .           	unique_lock(mutex_type& __m,
  .           .           .           .          .          .          .          .          .           		    const chrono::duration<_Rep, _Period>& __rtime)
  .           .           .           .          .          .          .          .          .           	: _M_device(std::__addressof(__m)),
  .           .           .           .          .          .          .          .          .           	  _M_owns(_M_device->try_lock_for(__rtime))
  .           .           .           .          .          .          .          .          .           	{ }
  .           .           .           .          .          .          .          .          .           
 80 ( 0.00%)  0          32 ( 0.01%)  5 ( 0.08%) .          .          .          .          .                 ~unique_lock()
  .           .           .           .          .          .          .          .          .                 {
 64 ( 0.00%) 32 ( 0.00%)  0           0          5 ( 0.04%) .          .          .          .           	if (_M_owns)
 48 ( 0.00%) 16 ( 0.00%) 16 ( 0.01%)  .          .          .          .          .          .           	  unlock();
1,410 ( 0.05%) 398 ( 0.06%) 270 ( 0.10%) 23 ( 0.39%) 0          0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/unique_lock.h:std::unique_lock<std::mutex>::unlock() (16x)
 48 ( 0.00%) 32 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 unique_lock(const unique_lock&) = delete;
  .           .           .           .          .          .          .          .          .                 unique_lock& operator=(const unique_lock&) = delete;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 unique_lock(unique_lock&& __u) noexcept
  .           .           .           .          .          .          .          .          .                 : _M_device(__u._M_device), _M_owns(__u._M_owns)
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .           	__u._M_device = 0;
-- line 113 ----------------------------------------
-- line 123 ----------------------------------------
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           	__u._M_device = 0;
  .           .           .           .          .          .          .          .          .           	__u._M_owns = false;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           	return *this;
  .           .           .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 void
 80 ( 0.00%)  0          32 ( 0.01%)  .          .          .          .          .          .                 lock()
  .           .           .           .          .          .          .          .          .                 {
 64 ( 0.00%) 32 ( 0.00%)  .           .          .          .          .          .          .           	if (!_M_device)
  .           .           .           .          .          .          .          .          .           	  __throw_system_error(int(errc::operation_not_permitted));
 64 ( 0.00%) 32 ( 0.00%)  0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	else if (_M_owns)
  .           .           .           .          .          .          .          .          .           	  __throw_system_error(int(errc::resource_deadlock_would_occur));
  .           .           .           .          .          .          .          .          .           	else
  .           .           .           .          .          .          .          .          .           	  {
 64 ( 0.00%) 32 ( 0.00%) 16 ( 0.01%)  .          .          .          .          .          .           	    _M_device->lock();
1,136 ( 0.04%) 288 ( 0.04%) 208 ( 0.07%) 46 ( 0.78%) 1 ( 0.01%) 10 ( 0.33%) 3 ( 0.09%) 0          10 ( 0.42%)  => /usr/include/c++/11/bits/std_mutex.h:std::mutex::lock() (16x)
 32 ( 0.00%) 16 ( 0.00%) 16 ( 0.01%)  .          .          .          .          .          .           	    _M_owns = true;
  .           .           .           .          .          .          .          .          .           	  }
 48 ( 0.00%) 32 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 bool
  .           .           .           .          .          .          .          .          .                 try_lock()
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .           	if (!_M_device)
  .           .           .           .          .          .          .          .          .           	  __throw_system_error(int(errc::operation_not_permitted));
  .           .           .           .          .          .          .          .          .           	else if (_M_owns)
  .           .           .           .          .          .          .          .          .           	  __throw_system_error(int(errc::resource_deadlock_would_occur));
-- line 150 ----------------------------------------
-- line 181 ----------------------------------------
  .           .           .           .          .          .          .          .          .           	  else
  .           .           .           .          .          .          .          .          .           	    {
  .           .           .           .          .          .          .          .          .           	      _M_owns = _M_device->try_lock_for(__rtime);
  .           .           .           .          .          .          .          .          .           	      return _M_owns;
  .           .           .           .          .          .          .          .          .           	    }
  .           .           .           .          .          .          .          .          .           	 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 void
 80 ( 0.00%)  0          32 ( 0.01%) 13 ( 0.22%) 0          0          1 ( 0.03%) .          .                 unlock()
  .           .           .           .          .          .          .          .          .                 {
 80 ( 0.00%) 32 ( 0.00%)  .           .          .          .          .          .          .           	if (!_M_owns)
  .           .           .           .          .          .          .          .          .           	  __throw_system_error(int(errc::operation_not_permitted));
 64 ( 0.00%) 32 ( 0.00%)  .           .          .          .          .          .          .           	else if (_M_device)
  .           .           .           .          .          .          .          .          .           	  {
 64 ( 0.00%) 32 ( 0.00%) 16 ( 0.01%)  .          .          .          .          .          .           	    _M_device->unlock();
1,042 ( 0.04%) 254 ( 0.04%) 206 ( 0.07%)  9 ( 0.15%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_mutex.h:std::mutex::unlock() (16x)
 32 ( 0.00%) 16 ( 0.00%) 16 ( 0.01%)  .          .          .          .          .          .           	    _M_owns = false;
  .           .           .           .          .          .          .          .          .           	  }
 48 ( 0.00%) 32 ( 0.00%)  0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 void
  .           .           .           .          .          .          .          .          .                 swap(unique_lock& __u) noexcept
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .           	std::swap(_M_device, __u._M_device);
  .           .           .           .          .          .          .          .          .           	std::swap(_M_owns, __u._M_owns);
  .           .           .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
-- line 206 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/allocated_ptr.h
--------------------------------------------------------------------------------
Ir          Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 45 ----------------------------------------
 .           .           .          .          .          .          .          .          .             /// Non-standard RAII type for managing pointers obtained from allocators.
 .           .           .          .          .          .          .          .          .             template<typename _Alloc>
 .           .           .          .          .          .          .          .          .               struct __allocated_ptr
 .           .           .          .          .          .          .          .          .               {
 .           .           .          .          .          .          .          .          .                 using pointer = typename allocator_traits<_Alloc>::pointer;
 .           .           .          .          .          .          .          .          .                 using value_type = typename allocator_traits<_Alloc>::value_type;
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /// Take ownership of __ptr
84 ( 0.00%)  0          48 ( 0.02%) 7 ( 0.12%) 0          0          1 ( 0.03%) .          .                 __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
96 ( 0.00%) 48 ( 0.01%) 36 ( 0.01%) .          .          .          .          .          .                 : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
84 ( 0.00%) 36 ( 0.01%) 24 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/move.h:std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >&) (12x)
36 ( 0.00%) 24 ( 0.00%)  .          .          .          .          .          .          .                 { }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /// Convert __ptr to allocator's pointer type and take ownership of it
 .           .           .          .          .          .          .          .          .                 template<typename _Ptr,
 .           .           .          .          .          .          .          .          .           	       typename _Req = _Require<is_same<_Ptr, value_type*>>>
 .           .           .          .          .          .          .          .          .                 __allocated_ptr(_Alloc& __a, _Ptr __ptr)
 .           .           .          .          .          .          .          .          .                 : _M_alloc(std::__addressof(__a)),
 .           .           .          .          .          .          .          .          .           	_M_ptr(pointer_traits<pointer>::pointer_to(*__ptr))
 .           .           .          .          .          .          .          .          .                 { }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /// Transfer ownership of the owned pointer
 .           .           .          .          .          .          .          .          .                 __allocated_ptr(__allocated_ptr&& __gd) noexcept
 .           .           .          .          .          .          .          .          .                 : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
 .           .           .          .          .          .          .          .          .                 { __gd._M_ptr = nullptr; }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /// Deallocate the owned pointer
60 ( 0.00%)  0          24 ( 0.01%) 5 ( 0.08%) .          .          .          .          .                 ~__allocated_ptr()
 .           .           .          .          .          .          .          .          .                 {
48 ( 0.00%) 24 ( 0.00%)  0          2 ( 0.03%) .          .          .          .          .           	if (_M_ptr != nullptr)
48 ( 0.00%) 24 ( 0.00%)  6 ( 0.00%) .          .          .          .          .          .           	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
786 ( 0.03%) 240 ( 0.03%) 150 ( 0.05%) 1 ( 0.02%) 1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> > >::deallocate(std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>*, unsigned long) (6x)
36 ( 0.00%) 24 ( 0.00%)  .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /// Release ownership of the owned pointer
 .           .           .          .          .          .          .          .          .                 __allocated_ptr&
30 ( 0.00%)  0          18 ( 0.01%) .          .          .          .          .          .                 operator=(std::nullptr_t) noexcept
 .           .           .          .          .          .          .          .          .                 {
12 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%) 4 ( 0.07%) .          .          .          .          .           	_M_ptr = nullptr;
 6 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .          .           	return *this;
12 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /// Get the address that the owned pointer refers to.
66 ( 0.00%) 24 ( 0.00%) 18 ( 0.01%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .                 value_type* get() { return std::__to_address(_M_ptr); }
42 ( 0.00%) 18 ( 0.00%) 12 ( 0.00%) 5 ( 0.08%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/ptr_traits.h:std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>* std::__to_address<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >(std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>*) (6x)
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .               private:
 .           .           .          .          .          .          .          .          .                 _Alloc* _M_alloc;
 .           .           .          .          .          .          .          .          .                 pointer _M_ptr;
 .           .           .          .          .          .          .          .          .               };
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             /// Allocate space for a single object using __a
 .           .           .          .          .          .          .          .          .             template<typename _Alloc>
 .           .           .          .          .          .          .          .          .               __allocated_ptr<_Alloc>
36 ( 0.00%)  0          18 ( 0.01%) .          .          .          .          .          .               __allocate_guarded(_Alloc& __a)
 .           .           .          .          .          .          .          .          .               {
60 ( 0.00%) 18 ( 0.00%) 12 ( 0.00%) 2 ( 0.03%) 0          0          1 ( 0.03%) .          .                 return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
1,544 ( 0.05%) 309 ( 0.04%) 262 ( 0.09%) 34 ( 0.58%) 5 ( 0.04%) 6 ( 0.20%) 4 ( 0.12%) 0          6 ( 0.25%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >&, unsigned long) (6x)
150 ( 0.01%) 54 ( 0.01%) 54 ( 0.02%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> > >::__allocated_ptr(std::allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>*) (6x)
18 ( 0.00%) 18 ( 0.00%)  .          .          .          .          .          .          .               }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           /// @endcond
 .           .           .          .          .          .          .          .          .           _GLIBCXX_END_NAMESPACE_VERSION
 .           .           .          .          .          .          .          .          .           } // namespace std
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/alloc_traits.h
--------------------------------------------------------------------------------
Ir           Dr           Dw           I1mr        D1mr       D1mw       ILmr       DLmr       DLmw 

-- line 455 ----------------------------------------
  .            .            .           .          .          .          .          .          .                 /**
  .            .            .           .          .          .          .          .          .                  *  @brief  Allocate memory.
  .            .            .           .          .          .          .          .          .                  *  @param  __a  An allocator.
  .            .            .           .          .          .          .          .          .                  *  @param  __n  The number of objects to allocate space for.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  *  Calls @c a.allocate(n)
  .            .            .           .          .          .          .          .          .                 */
  .            .            .           .          .          .          .          .          .                 _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
228 ( 0.01%)   0          114 ( 0.04%)  3 ( 0.05%) 0          0          2 ( 0.06%) .          .                 allocate(allocator_type& __a, size_type __n)
304 ( 0.01%) 152 ( 0.02%)  38 ( 0.01%)  5 ( 0.08%) 0          0          4 ( 0.12%) .          .                 { return __a.allocate(__n); }
836 ( 0.03%) 168 ( 0.02%) 136 ( 0.05%) 33 ( 0.56%) 3 ( 0.02%) 2 ( 0.07%) 3 ( 0.09%) 1 ( 0.01%) 2 ( 0.08%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::shared_ptr<ActiveObject> >::allocate(unsigned long, void const*) (4x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /**
  .            .            .           .          .          .          .          .          .                  *  @brief  Allocate memory.
  .            .            .           .          .          .          .          .          .                  *  @param  __a  An allocator.
  .            .            .           .          .          .          .          .          .                  *  @param  __n  The number of objects to allocate space for.
  .            .            .           .          .          .          .          .          .                  *  @param  __hint Aid to locality.
  .            .            .           .          .          .          .          .          .                  *  @return Memory of suitable size and alignment for @a n objects
  .            .            .           .          .          .          .          .          .                  *          of type @c value_type
-- line 472 ----------------------------------------
-- line 487 ----------------------------------------
  .            .            .           .          .          .          .          .          .                  *  @brief  Deallocate memory.
  .            .            .           .          .          .          .          .          .                  *  @param  __a  An allocator.
  .            .            .           .          .          .          .          .          .                  *  @param  __p  Pointer to the memory to deallocate.
  .            .            .           .          .          .          .          .          .                  *  @param  __n  The number of objects space was allocated for.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  *  Calls <tt> a.deallocate(p, n) </tt>
  .            .            .           .          .          .          .          .          .                 */
  .            .            .           .          .          .          .          .          .                 static _GLIBCXX20_CONSTEXPR void
266 ( 0.01%)   0          152 ( 0.05%) 15 ( 0.25%) 0          0          2 ( 0.06%) .          .                 deallocate(allocator_type& __a, pointer __p, size_type __n)
342 ( 0.01%) 190 ( 0.03%)  38 ( 0.01%)  .          .          .          .          .          .                 { __a.deallocate(__p, __n); }
690 ( 0.02%) 210 ( 0.03%) 120 ( 0.04%)  0          1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<ActiveObject, std::allocator<ActiveObject>, (__gnu_cxx::_Lock_policy)2>*, unsigned long) (6x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /**
  .            .            .           .          .          .          .          .          .                  *  @brief  Construct an object of type `_Up`
  .            .            .           .          .          .          .          .          .                  *  @param  __a  An allocator.
  .            .            .           .          .          .          .          .          .                  *  @param  __p  Pointer to memory of suitable size and alignment for
  .            .            .           .          .          .          .          .          .                  *	       an object of type `_Up`.
  .            .            .           .          .          .          .          .          .                  *  @param  __args Constructor arguments.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
  .            .            .           .          .          .          .          .          .                  *  in C++11, C++14 and C++17. Changed in C++20 to call
  .            .            .           .          .          .          .          .          .                  *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
  .            .            .           .          .          .          .          .          .                 */
  .            .            .           .          .          .          .          .          .                 template<typename _Up, typename... _Args>
  .            .            .           .          .          .          .          .          .           	static _GLIBCXX20_CONSTEXPR void
161 ( 0.01%)   0           92 ( 0.03%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
  .            .            .           .          .          .          .          .          .           		  _Args&&... __args)
  .            .            .           .          .          .          .          .          .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
  .            .            .           .          .          .          .          .          .           	{
  .            .            .           .          .          .          .          .          .           #if __cplusplus <= 201703L
207 ( 0.01%)  69 ( 0.01%)  46 ( 0.02%)  2 ( 0.03%) .          .          .          .          .           	  __a.construct(__p, std::forward<_Args>(__args)...);
1,508 ( 0.05%) 520 ( 0.08%) 481 ( 0.17%) 12 ( 0.20%) 0          2 ( 0.07%) 3 ( 0.09%) 0          1 ( 0.04%)  => /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::shared_ptr<ActiveObject> >::construct<std::shared_ptr<ActiveObject>, std::shared_ptr<ActiveObject> >(std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>&&) (13x)
 91 ( 0.00%)  39 ( 0.01%)  26 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::shared_ptr<ActiveObject>&& std::forward<std::shared_ptr<ActiveObject> >(std::remove_reference<std::shared_ptr<ActiveObject> >::type&) (13x)
  .            .            .           .          .          .          .          .          .           #else
  .            .            .           .          .          .          .          .          .           	  std::construct_at(__p, std::forward<_Args>(__args)...);
  .            .            .           .          .          .          .          .          .           #endif
 69 ( 0.00%)  46 ( 0.01%)   0           0          1 ( 0.01%) 0          0          1 ( 0.01%) .           	}
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /**
  .            .            .           .          .          .          .          .          .                  *  @brief  Destroy an object of type @a _Up
  .            .            .           .          .          .          .          .          .                  *  @param  __a  An allocator.
  .            .            .           .          .          .          .          .          .                  *  @param  __p  Pointer to the object to destroy
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  *  Calls @c __a.destroy(__p).
  .            .            .           .          .          .          .          .          .                 */
  .            .            .           .          .          .          .          .          .                 template<typename _Up>
  .            .            .           .          .          .          .          .          .           	static _GLIBCXX20_CONSTEXPR void
102 ( 0.00%)   0           51 ( 0.02%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
  .            .            .           .          .          .          .          .          .           	noexcept(is_nothrow_destructible<_Up>::value)
  .            .            .           .          .          .          .          .          .           	{
  .            .            .           .          .          .          .          .          .           #if __cplusplus <= 201703L
 85 ( 0.00%)  34 ( 0.00%)  17 ( 0.01%)  .          .          .          .          .          .           	  __a.destroy(__p);
329 ( 0.01%)  91 ( 0.01%)  84 ( 0.03%)  8 ( 0.14%) .          .          .          .          .           => /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::shared_ptr<ActiveObject> >::destroy<std::shared_ptr<ActiveObject> >(std::shared_ptr<ActiveObject>*) (7x)
  .            .            .           .          .          .          .          .          .           #else
  .            .            .           .          .          .          .          .          .           	  std::destroy_at(__p);
  .            .            .           .          .          .          .          .          .           #endif
 51 ( 0.00%)  34 ( 0.00%)   0           2 ( 0.03%) .          .          .          .          .           	}
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /**
  .            .            .           .          .          .          .          .          .                  *  @brief  The maximum supported allocation size
  .            .            .           .          .          .          .          .          .                  *  @param  __a  An allocator.
  .            .            .           .          .          .          .          .          .                  *  @return @c __a.max_size()
  .            .            .           .          .          .          .          .          .                 */
  .            .            .           .          .          .          .          .          .                 static _GLIBCXX20_CONSTEXPR size_type
 40 ( 0.00%)   0           16 ( 0.01%)  .          .          .          .          .          .                 max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
  .            .            .           .          .          .          .          .          .                 {
  .            .            .           .          .          .          .          .          .           #if __cplusplus <= 201703L
 24 ( 0.00%)   8 ( 0.00%)   8 ( 0.00%)  .          .          .          .          .          .           	return __a.max_size();
136 ( 0.00%)  40 ( 0.01%)  40 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::shared_ptr<ActiveObject> >::max_size() const (8x)
  .            .            .           .          .          .          .          .          .           #else
  .            .            .           .          .          .          .          .          .           	return size_t(-1) / sizeof(value_type);
  .            .            .           .          .          .          .          .          .           #endif
 16 ( 0.00%)  16 ( 0.00%)   .           .          .          .          .          .          .                 }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /**
  .            .            .           .          .          .          .          .          .                  *  @brief  Obtain an allocator to use when copying a container.
  .            .            .           .          .          .          .          .          .                  *  @param  __rhs  An allocator.
  .            .            .           .          .          .          .          .          .                  *  @return @c __rhs
  .            .            .           .          .          .          .          .          .                 */
  .            .            .           .          .          .          .          .          .                 static _GLIBCXX20_CONSTEXPR allocator_type
  .            .            .           .          .          .          .          .          .                 select_on_container_copy_construction(const allocator_type& __rhs)
-- line 562 ----------------------------------------
-- line 702 ----------------------------------------
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             template<typename _Alloc>
  .            .            .           .          .          .          .          .          .               inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
  .            .            .           .          .          .          .          .          .               { }
  .            .            .           .          .          .          .          .          .           #endif
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             template<typename _Alloc>
  .            .            .           .          .          .          .          .          .               _GLIBCXX14_CONSTEXPR inline void
 36 ( 0.00%)   0           18 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .               __alloc_on_move(_Alloc& __one, _Alloc& __two)
  .            .            .           .          .          .          .          .          .               {
  .            .            .           .          .          .          .          .          .                 typedef allocator_traits<_Alloc> __traits;
  .            .            .           .          .          .          .          .          .                 typedef typename __traits::propagate_on_container_move_assignment __pocma;
  .            .            .           .          .          .          .          .          .           #if __cplusplus >= 201703L
  .            .            .           .          .          .          .          .          .                 if constexpr (__pocma::value)
 18 ( 0.00%)   6 ( 0.00%)   6 ( 0.00%)  .          .          .          .          .          .           	__one = std::move(__two);
 42 ( 0.00%)  18 ( 0.00%)  12 ( 0.00%)  5 ( 0.08%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::allocator<std::weak_ptr<Graph> >&>::type&& std::move<std::allocator<std::weak_ptr<Graph> >&>(std::allocator<std::weak_ptr<Graph> >&) (6x)
  .            .            .           .          .          .          .          .          .           #else
  .            .            .           .          .          .          .          .          .                 __do_alloc_on_move(__one, __two, __pocma());
  .            .            .           .          .          .          .          .          .           #endif
 18 ( 0.00%)  12 ( 0.00%)   .           .          .          .          .          .          .               }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .           #if __cplusplus < 201703L
  .            .            .           .          .          .          .          .          .             template<typename _Alloc>
  .            .            .           .          .          .          .          .          .               inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
  .            .            .           .          .          .          .          .          .               {
  .            .            .           .          .          .          .          .          .                 using std::swap;
  .            .            .           .          .          .          .          .          .                 swap(__one, __two);
  .            .            .           .          .          .          .          .          .               }
-- line 728 ----------------------------------------
-- line 837 ----------------------------------------
  .            .            .           .          .          .          .          .          .           #else
  .            .            .           .          .          .          .          .          .           	allocator_traits<_Allocator>::destroy(__alloc,
  .            .            .           .          .          .          .          .          .           					      std::__addressof(*__first));
  .            .            .           .          .          .          .          .          .           #endif
  .            .            .           .          .          .          .          .          .               }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             template<typename _ForwardIterator, typename _Tp>
  .            .            .           .          .          .          .          .          .               inline void
175 ( 0.01%)   0          100 ( 0.04%)  3 ( 0.05%) 0          0          2 ( 0.06%) .          .               _Destroy(_ForwardIterator __first, _ForwardIterator __last,
  .            .            .           .          .          .          .          .          .           	     allocator<_Tp>&)
  .            .            .           .          .          .          .          .          .               {
125 ( 0.00%)  50 ( 0.01%)  25 ( 0.01%)  .          .          .          .          .          .                 _Destroy(__first, __last);
 28 ( 0.00%)   8 ( 0.00%)   7 ( 0.00%)  4 ( 0.07%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_construct.h:void std::_Destroy<std::unique_ptr<std::thread, std::default_delete<std::thread> >*>(std::unique_ptr<std::thread, std::default_delete<std::thread> >*, std::unique_ptr<std::thread, std::default_delete<std::thread> >*) (1x)
 75 ( 0.00%)  50 ( 0.01%)   .           .          .          .          .          .          .               }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .           _GLIBCXX_END_NAMESPACE_VERSION
  .            .            .           .          .          .          .          .          .           } // namespace std
  .            .            .           .          .          .          .          .          .           #endif // _ALLOC_TRAITS_H

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/std_thread.h
--------------------------------------------------------------------------------
Ir           Dr           Dw           I1mr        D1mr       D1mw        ILmr       DLmr       DLmw        

-- line 60 ----------------------------------------
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .             /// thread
  .            .            .           .          .           .          .          .           .             class thread
  .            .            .           .          .           .          .          .           .             {
  .            .            .           .          .           .          .          .           .             public:
  .            .            .           .          .           .          .          .           .           #ifdef _GLIBCXX_HAS_GTHREADS
  .            .            .           .          .           .          .          .           .               // Abstract base class for types that wrap arbitrary functors to be
  .            .            .           .          .           .          .          .           .               // invoked in the new thread of execution.
100 ( 0.00%)  30 ( 0.00%)  30 ( 0.01%)  1 ( 0.02%) 0           0          1 ( 0.03%) .           .               struct _State
  .            .            .           .          .           .          .          .           .               {
  .            .            .           .          .           .          .          .           .                 virtual ~_State();
  .            .            .           .          .           .          .          .           .                 virtual void _M_run() = 0;
  .            .            .           .          .           .          .          .           .               };
  .            .            .           .          .           .          .          .           .               using _State_ptr = unique_ptr<_State>;
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .               using native_handle_type = __gthread_t;
  .            .            .           .          .           .          .          .           .           #else
-- line 76 ----------------------------------------
-- line 78 ----------------------------------------
  .            .            .           .          .           .          .          .           .           #endif
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .               /// thread::id
  .            .            .           .          .           .          .          .           .               class id
  .            .            .           .          .           .          .          .           .               {
  .            .            .           .          .           .          .          .           .                 native_handle_type	_M_thread;
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .               public:
387 ( 0.01%) 129 ( 0.02%) 129 ( 0.05%) 15 ( 0.25%) 0           0          2 ( 0.06%) .           .                 id() noexcept : _M_thread() { }
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .                 explicit
132 ( 0.00%)  48 ( 0.01%)  48 ( 0.02%)  2 ( 0.03%) .           .          .          .           .                 id(native_handle_type __id) : _M_thread(__id) { }
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .               private:
  .            .            .           .          .           .          .          .           .                 friend class thread;
  .            .            .           .          .           .          .          .           .                 friend struct hash<id>;
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .                 friend bool
  .            .            .           .          .           .          .          .           .                 operator==(id __x, id __y) noexcept;
  .            .            .           .          .           .          .          .           .           
-- line 97 ----------------------------------------
-- line 119 ----------------------------------------
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .             public:
  .            .            .           .          .           .          .          .           .               thread() noexcept = default;
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .           #ifdef _GLIBCXX_HAS_GTHREADS
  .            .            .           .          .           .          .          .           .               template<typename _Callable, typename... _Args,
  .            .            .           .          .           .          .          .           .           	     typename = _Require<__not_same<_Callable>>>
  .            .            .           .          .           .          .          .           .                 explicit
120 ( 0.00%)  10 ( 0.00%)  70 ( 0.03%)  6 ( 0.10%) 0           0          1 ( 0.03%) .           .                 thread(_Callable&& __f, _Args&&... __args)
 30 ( 0.00%)  10 ( 0.00%)  10 ( 0.00%)  1 ( 0.02%) 0           0          1 ( 0.03%) .           .                 {
 54 ( 0.00%)  18 ( 0.00%)  18 ( 0.01%)  6 ( 0.10%) 0           0          2 ( 0.06%) .           .           => /usr/include/c++/11/bits/std_thread.h:std::thread::id::id() (6x)
  .            .            .           .          .           .          .          .           .           	static_assert( __is_invocable<typename decay<_Callable>::type,
  .            .            .           .          .           .          .          .           .           				      typename decay<_Args>::type...>::value,
  .            .            .           .          .           .          .          .           .           	  "std::thread arguments must be invocable after conversion to rvalues"
  .            .            .           .          .           .          .          .           .           	  );
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .           #ifdef GTHR_ACTIVE_PROXY
  .            .            .           .          .           .          .          .           .           	// Create a reference to pthread_create, not just the gthr weak symbol.
  .            .            .           .          .           .          .          .           .           	auto __depend = reinterpret_cast<void(*)()>(&pthread_create);
  .            .            .           .          .           .          .          .           .           #else
 10 ( 0.00%)   0           10 ( 0.00%)  .          .           .          .          .           .           	auto __depend = nullptr;
  .            .            .           .          .           .          .          .           .           #endif
  .            .            .           .          .           .          .          .           .           	using _Wrapper = _Call_wrapper<_Callable, _Args...>;
  .            .            .           .          .           .          .          .           .           	// Create a call wrapper with DECAY_COPY(__f) as its target object
  .            .            .           .          .           .          .          .           .           	// and DECAY_COPY(__args)... as its bound argument entities.
200 ( 0.01%)  20 ( 0.00%)  60 ( 0.02%)  2 ( 0.03%) 0           0          2 ( 0.06%) .           .           	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
8,860 ( 0.31%) 2,178 ( 0.32%) 1,636 ( 0.58%) 268 ( 4.54%) 43 ( 0.32%) 126 ( 4.16%) 113 ( 3.49%) 19 ( 0.21%) 124 ( 5.18%)  => ???:0x000000000010c880 (6x)
1,512 ( 0.05%) 492 ( 0.07%) 480 ( 0.17%) 30 ( 0.51%) 0           0          11 ( 0.34%) .           .           => /usr/include/c++/11/bits/std_thread.h:std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (ActiveObject::*)(), ActiveObject*> > >::_State_impl<void (ActiveObject::*)(), ActiveObject*>(void (ActiveObject::*&&)(), ActiveObject*&&) (6x)
1,138 ( 0.04%) 222 ( 0.03%) 166 ( 0.06%)  0          0           5 ( 0.17%) 0          0           5 ( 0.21%)  => ???:0x000000000010c8c0 (6x)
876 ( 0.03%) 264 ( 0.04%) 264 ( 0.09%) 23 ( 0.39%) 0           0          9 ( 0.28%) .           .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*) (6x)
402 ( 0.01%) 132 ( 0.02%) 120 ( 0.04%) 11 ( 0.19%) 0           0          2 ( 0.06%) .           .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr() (6x)
 80 ( 0.00%)  20 ( 0.00%)  20 ( 0.01%)  1 ( 0.02%) 0           0          1 ( 0.03%) .           .           	      std::forward<_Callable>(__f), std::forward<_Args>(__args)...)),
 42 ( 0.00%)  18 ( 0.00%)  12 ( 0.00%)  .          .           .          .          .           .           => /usr/include/c++/11/bits/move.h:void (ActiveObject::*&&std::forward<void (ActiveObject::*)()>(std::remove_reference<void (ActiveObject::*)()>::type&))() (6x)
 42 ( 0.00%)  18 ( 0.00%)  12 ( 0.00%)  .          .           .          .          .           .           => /usr/include/c++/11/bits/move.h:ActiveObject*&& std::forward<ActiveObject*>(std::remove_reference<ActiveObject*>::type&) (6x)
  .            .            .           .          .           .          .          .           .           	    __depend);
 90 ( 0.00%)  60 ( 0.01%)   0           3 ( 0.05%) 0           0          3 ( 0.09%) .           .                 }
  .            .            .           .          .           .          .          .           .           #endif // _GLIBCXX_HAS_GTHREADS
  .            .            .           .          .           .          .          .           .           
 50 ( 0.00%)   0           20 ( 0.01%)  2 ( 0.03%) .           .          .          .           .               ~thread()
  .            .            .           .          .           .          .          .           .               {
 50 ( 0.00%)  10 ( 0.00%)  10 ( 0.00%)  .          .           .          .          .           .                 if (joinable())
420 ( 0.01%) 150 ( 0.02%) 110 ( 0.04%)  6 ( 0.10%) .           .          .          .           .           => /usr/include/c++/11/bits/std_thread.h:std::thread::joinable() const (10x)
  .            .            .           .          .           .          .          .           .           	std::terminate();
 30 ( 0.00%)  20 ( 0.00%)   .           .          .           .          .          .           .               }
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .               thread(const thread&) = delete;
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .               thread(thread&& __t) noexcept
  .            .            .           .          .           .          .          .           .               { swap(__t); }
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .               thread& operator=(const thread&) = delete;
  .            .            .           .          .           .          .          .           .           
-- line 161 ----------------------------------------
-- line 167 ----------------------------------------
  .            .            .           .          .           .          .          .           .                 return *this;
  .            .            .           .          .           .          .          .           .               }
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .               void
  .            .            .           .          .           .          .          .           .               swap(thread& __t) noexcept
  .            .            .           .          .           .          .          .           .               { std::swap(_M_id, __t._M_id); }
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .               bool
160 ( 0.01%)  20 ( 0.00%)  60 ( 0.02%)  5 ( 0.08%) 0           0          1 ( 0.03%) .           .               joinable() const noexcept
280 ( 0.01%) 140 ( 0.02%)  40 ( 0.01%)  0          3 ( 0.02%)  .          .          .           .               { return !(_M_id == id()); }
220 ( 0.01%)  80 ( 0.01%)  60 ( 0.02%)  4 ( 0.07%) .           .          .          .           .           => /usr/include/c++/11/bits/std_thread.h:std::operator==(std::thread::id, std::thread::id) (20x)
180 ( 0.01%)  60 ( 0.01%)  60 ( 0.02%)  3 ( 0.05%) .           .          .          .           .           => /usr/include/c++/11/bits/std_thread.h:std::thread::id::id() (20x)
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .               void
  .            .            .           .          .           .          .          .           .               join();
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .               void
  .            .            .           .          .           .          .          .           .               detach();
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .               id
-- line 184 ----------------------------------------
-- line 193 ----------------------------------------
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .               // Returns a value that hints at the number of hardware thread contexts.
  .            .            .           .          .           .          .          .           .               static unsigned int
  .            .            .           .          .           .          .          .           .               hardware_concurrency() noexcept;
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .           #ifdef _GLIBCXX_HAS_GTHREADS
  .            .            .           .          .           .          .          .           .             private:
  .            .            .           .          .           .          .          .           .               template<typename _Callable>
280 ( 0.01%)  80 ( 0.01%)  80 ( 0.03%)  4 ( 0.07%) 0           0          4 ( 0.12%) .           .                 struct _State_impl : public _State
3,327 ( 0.12%) 483 ( 0.07%) 982 ( 0.35%) 97 ( 1.64%) 4 ( 0.03%) 45 ( 1.49%) 33 ( 1.02%) 0          45 ( 1.88%)  => ???:0x000000000010c8d0 (6x)
108 ( 0.00%)  36 ( 0.01%)  24 ( 0.01%)  3 ( 0.05%) 0           0          3 ( 0.09%) .           .           => /usr/include/c++/11/bits/std_thread.h:std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (ActiveObject::*)(), ActiveObject*> > >::~_State_impl()'2 (6x)
  .            .            .           .          .           .          .          .           .                 {
  .            .            .           .          .           .          .          .           .           	_Callable		_M_func;
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .           	template<typename... _Args>
 90 ( 0.00%)   0           60 ( 0.02%)  2 ( 0.03%) 0           0          2 ( 0.06%) .           .           	  _State_impl(_Args&&... __args)
190 ( 0.01%)  50 ( 0.01%)  50 ( 0.02%)  2 ( 0.03%) 0           0          2 ( 0.06%) .           .           	  : _M_func(std::forward<_Args>(__args)...)
776 ( 0.03%) 256 ( 0.04%) 248 ( 0.09%) 10 ( 0.17%) 0           0          10 ( 0.31%) .           .           => /usr/include/c++/11/bits/std_thread.h:std::thread::_Invoker<std::tuple<void (LeaderFollower::*)(), LeaderFollower*> >::_Invoker<void (LeaderFollower::*)(), LeaderFollower*>(void (LeaderFollower::*&&)(), LeaderFollower*&&) (4x)
 40 ( 0.00%)  12 ( 0.00%)  12 ( 0.00%)  .          .           .          .          .           .           => /usr/include/c++/11/bits/std_thread.h:std::thread::_State::_State() (4x)
 28 ( 0.00%)  12 ( 0.00%)   8 ( 0.00%)  .          .           .          .          .           .           => /usr/include/c++/11/bits/move.h:void (LeaderFollower::*&&std::forward<void (LeaderFollower::*)()>(std::remove_reference<void (LeaderFollower::*)()>::type&))() (4x)
 28 ( 0.00%)  12 ( 0.00%)   8 ( 0.00%)  .          .           .          .          .           .           => /usr/include/c++/11/bits/move.h:LeaderFollower*&& std::forward<LeaderFollower*>(std::remove_reference<LeaderFollower*>::type&) (4x)
 60 ( 0.00%)  40 ( 0.01%)   0           1 ( 0.02%) 0           0          1 ( 0.03%) .           .           	  { }
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .           	void
120 ( 0.00%)  30 ( 0.00%)  30 ( 0.01%)  4 ( 0.07%) 0           0          2 ( 0.06%) .           .           	_M_run() { _M_func(); }
78,673 ( 2.78%) 21,847 ( 3.16%) 12,179 ( 4.35%) 650 (11.00%) 62 ( 0.47%) 103 ( 3.40%) 100 ( 3.09%) 19 ( 0.21%) 96 ( 4.01%)  => /usr/include/c++/11/bits/std_thread.h:std::thread::_Invoker<std::tuple<void (ActiveObject::*)(), ActiveObject*> >::operator()() (6x)
  .            .            .           .          .           .          .          .           .                 };
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .               void
  .            .            .           .          .           .          .          .           .               _M_start_thread(_State_ptr, void (*)());
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .           #if _GLIBCXX_THREAD_ABI_COMPAT
  .            .            .           .          .           .          .          .           .             public:
  .            .            .           .          .           .          .          .           .               struct _Impl_base;
-- line 219 ----------------------------------------
-- line 235 ----------------------------------------
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .             private:
  .            .            .           .          .           .          .          .           .               // A call wrapper that does INVOKE(forwarded tuple elements...)
  .            .            .           .          .           .          .          .           .               template<typename _Tuple>
  .            .            .           .          .           .          .          .           .                 struct _Invoker
  .            .            .           .          .           .          .          .           .                 {
  .            .            .           .          .           .          .          .           .           	template<typename... _Args>
  .            .            .           .          .           .          .          .           .           	  explicit
 90 ( 0.00%)   0           60 ( 0.02%)  2 ( 0.03%) 0           0          2 ( 0.06%) .           .           	  _Invoker(_Args&&... __args)
120 ( 0.00%)  30 ( 0.00%)  30 ( 0.01%)  1 ( 0.02%) 0           0          1 ( 0.03%) .           .           	  : _M_t(std::forward<_Args>(__args)...)
918 ( 0.03%) 306 ( 0.04%) 294 ( 0.11%) 21 ( 0.36%) 0           0          6 ( 0.19%) .           .           => /usr/include/c++/11/tuple:std::tuple<void (ActiveObject::*)(), ActiveObject*>::tuple<void (ActiveObject::*)(), ActiveObject*, true>(void (ActiveObject::*&&)(), ActiveObject*&&) (6x)
 42 ( 0.00%)  18 ( 0.00%)  12 ( 0.00%)  .          .           .          .          .           .           => /usr/include/c++/11/bits/move.h:void (ActiveObject::*&&std::forward<void (ActiveObject::*)()>(std::remove_reference<void (ActiveObject::*)()>::type&))() (6x)
 42 ( 0.00%)  18 ( 0.00%)  12 ( 0.00%)  .          .           .          .          .           .           => /usr/include/c++/11/bits/move.h:ActiveObject*&& std::forward<ActiveObject*>(std::remove_reference<ActiveObject*>::type&) (6x)
 60 ( 0.00%)  40 ( 0.01%)   0           5 ( 0.08%) 0           0          1 ( 0.03%) .           .           	  { }
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .           	_Tuple _M_t;
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .           	template<typename>
  .            .            .           .          .           .          .          .           .           	  struct __result;
  .            .            .           .          .           .          .          .           .           	template<typename _Fn, typename... _Args>
  .            .            .           .          .           .          .          .           .           	  struct __result<tuple<_Fn, _Args...>>
  .            .            .           .          .           .          .          .           .           	  : __invoke_result<_Fn, _Args...>
  .            .            .           .          .           .          .          .           .           	  { };
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .           	template<size_t... _Ind>
  .            .            .           .          .           .          .          .           .           	  typename __result<_Tuple>::type
 60 ( 0.00%)   0           30 ( 0.01%)  .          .           .          .          .           .           	  _M_invoke(_Index_tuple<_Ind...>)
180 ( 0.01%)  50 ( 0.01%)  50 ( 0.02%)  4 ( 0.07%) .           .          .          .           .           	  { return std::__invoke(std::get<_Ind>(std::move(_M_t))...); }
77,821 ( 2.75%) 21,583 ( 3.12%) 11,921 ( 4.26%) 629 (10.64%) 59 ( 0.44%) 85 ( 2.81%) 91 ( 2.81%) 19 ( 0.21%) 78 ( 3.26%)  => /usr/include/c++/11/bits/invoke.h:std::__invoke_result<void (ActiveObject::*)(), ActiveObject*>::type std::__invoke<void (ActiveObject::*)(), ActiveObject*>(void (ActiveObject::*&&)(), ActiveObject*&&) (6x)
282 ( 0.01%)  90 ( 0.01%)  84 ( 0.03%)  1 ( 0.02%) 0           0          1 ( 0.03%) .           .           => /usr/include/c++/11/tuple:std::tuple_element<0ul, std::tuple<void (ActiveObject::*)(), ActiveObject*> >::type&& std::get<0ul, void (ActiveObject::*)(), ActiveObject*>(std::tuple<void (ActiveObject::*)(), ActiveObject*>&&) (6x)
276 ( 0.01%)  90 ( 0.01%)  84 ( 0.03%) 15 ( 0.25%) 0           6 ( 0.20%) 6 ( 0.19%) 0           6 ( 0.25%)  => /usr/include/c++/11/tuple:std::tuple_element<1ul, std::tuple<void (ActiveObject::*)(), ActiveObject*> >::type&& std::get<1ul, void (ActiveObject::*)(), ActiveObject*>(std::tuple<void (ActiveObject::*)(), ActiveObject*>&&) (6x)
 84 ( 0.00%)  36 ( 0.01%)  24 ( 0.01%)  2 ( 0.03%) 0           6 ( 0.20%) 1 ( 0.03%) 0           6 ( 0.25%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<std::tuple<void (ActiveObject::*)(), ActiveObject*>&>::type&& std::move<std::tuple<void (ActiveObject::*)(), ActiveObject*>&>(std::tuple<void (ActiveObject::*)(), ActiveObject*>&) (12x)
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .           	typename __result<_Tuple>::type
 50 ( 0.00%)   0           20 ( 0.01%)  2 ( 0.03%) 0           0          1 ( 0.03%) .           .           	operator()()
  .            .            .           .          .           .          .          .           .           	{
  .            .            .           .          .           .          .          .           .           	  using _Indices
  .            .            .           .          .           .          .          .           .           	    = typename _Build_index_tuple<tuple_size<_Tuple>::value>::__type;
 40 ( 0.00%)  10 ( 0.00%)  10 ( 0.00%)  4 ( 0.07%) 0          10 ( 0.33%) 1 ( 0.03%) 0          10 ( 0.42%)  	  return _M_invoke(_Indices());
4,008 ( 0.14%) 1,168 ( 0.17%) 940 ( 0.34%) 53 ( 0.90%) 19 ( 0.14%) 38 ( 1.25%) 14 ( 0.43%) 0          36 ( 1.50%)  => /usr/include/c++/11/bits/std_thread.h:void std::thread::_Invoker<std::tuple<void (LeaderFollower::*)(), LeaderFollower*> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (4x)
 20 ( 0.00%)  20 ( 0.00%)   0           0          5 ( 0.04%)  .          .          .           .           	}
  .            .            .           .          .           .          .          .           .                 };
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .             public:
  .            .            .           .          .           .          .          .           .               template<typename... _Tp>
  .            .            .           .          .           .          .          .           .                 using _Call_wrapper = _Invoker<tuple<typename decay<_Tp>::type...>>;
  .            .            .           .          .           .          .          .           .           #endif // _GLIBCXX_HAS_GTHREADS
  .            .            .           .          .           .          .          .           .             };
  .            .            .           .          .           .          .          .           .           
-- line 275 ----------------------------------------
-- line 280 ----------------------------------------
  .            .            .           .          .           .          .          .           .           #endif
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .             inline void
  .            .            .           .          .           .          .          .           .             swap(thread& __x, thread& __y) noexcept
  .            .            .           .          .           .          .          .           .             { __x.swap(__y); }
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .             inline bool
  .            .            .           .          .           .          .          .           .             operator==(thread::id __x, thread::id __y) noexcept
160 ( 0.01%)   0           96 ( 0.03%)  8 ( 0.14%) .           .          .          .           .             {
  .            .            .           .          .           .          .          .           .               // pthread_equal is undefined if either thread ID is not valid, so we
  .            .            .           .          .           .          .          .           .               // can't safely use __gthread_equal on default-constructed values (nor
  .            .            .           .          .           .          .          .           .               // the non-zero value returned by this_thread::get_id() for
  .            .            .           .          .           .          .          .           .               // single-threaded programs using GNU libc). Assume EqualityComparable.
128 ( 0.00%)  64 ( 0.01%)   .           .          .           .          .          .           .               return __x._M_thread == __y._M_thread;
 64 ( 0.00%)  64 ( 0.01%)   .           .          .           .          .          .           .             }
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .             // N.B. other comparison operators are defined in <thread>
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .             // DR 889.
  .            .            .           .          .           .          .          .           .             /// std::hash specialization for thread::id.
  .            .            .           .          .           .          .          .           .             template<>
  .            .            .           .          .           .          .          .           .               struct hash<thread::id>
  .            .            .           .          .           .          .          .           .               : public __hash_base<size_t, thread::id>
-- line 302 ----------------------------------------
-- line 306 ----------------------------------------
  .            .            .           .          .           .          .          .           .                 { return std::_Hash_impl::hash(__id._M_thread); }
  .            .            .           .          .           .          .          .           .               };
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .             namespace this_thread
  .            .            .           .          .           .          .          .           .             {
  .            .            .           .          .           .          .          .           .               /// this_thread::get_id
  .            .            .           .          .           .          .          .           .               inline thread::id
  .            .            .           .          .           .          .          .           .               get_id() noexcept
 84 ( 0.00%)  12 ( 0.00%)  24 ( 0.01%)  6 ( 0.10%) 0           0          1 ( 0.03%) .           .               {
  .            .            .           .          .           .          .          .           .           #ifndef _GLIBCXX_HAS_GTHREADS
  .            .            .           .          .           .          .          .           .                 return thread::id(1);
  .            .            .           .          .           .          .          .           .           #elif defined _GLIBCXX_NATIVE_THREAD_ID
 84 ( 0.00%)  12 ( 0.00%)  24 ( 0.01%)  .          .           .          .          .           .                 return thread::id(_GLIBCXX_NATIVE_THREAD_ID);
132 ( 0.00%)  48 ( 0.01%)  48 ( 0.02%)  2 ( 0.03%) .           .          .          .           .           => /usr/include/c++/11/bits/std_thread.h:std::thread::id::id(unsigned long) (12x)
 60 ( 0.00%)  36 ( 0.01%)   0           8 ( 0.14%) 0           0          1 ( 0.03%) .           .           => ???:0x000000000010c870 (12x)
  .            .            .           .          .           .          .          .           .           #else
  .            .            .           .          .           .          .          .           .                 return thread::id(__gthread_self());
  .            .            .           .          .           .          .          .           .           #endif
 60 ( 0.00%)  48 ( 0.01%)   0           5 ( 0.08%) .           .          .          .           .               }
  .            .            .           .          .           .          .          .           .           
  .            .            .           .          .           .          .          .           .               /// this_thread::yield
  .            .            .           .          .           .          .          .           .               inline void
  .            .            .           .          .           .          .          .           .               yield() noexcept
  .            .            .           .          .           .          .          .           .               {
  .            .            .           .          .           .          .          .           .           #if defined _GLIBCXX_HAS_GTHREADS && defined _GLIBCXX_USE_SCHED_YIELD
  .            .            .           .          .           .          .          .           .                 __gthread_yield();
  .            .            .           .          .           .          .          .           .           #endif
-- line 330 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_iterator.h
--------------------------------------------------------------------------------
Ir           Dr           Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 1019 ----------------------------------------
  .            .           .          .          .          .          .          .          .           #if __cplusplus > 201703L && __cpp_lib_concepts
  .            .           .          .          .          .          .          .          .                 using iterator_concept = std::__detail::__iter_concept<_Iterator>;
  .            .           .          .          .          .          .          .          .           #endif
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
  .            .           .          .          .          .          .          .          .                 : _M_current(_Iterator()) { }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 explicit _GLIBCXX20_CONSTEXPR
120 ( 0.00%)   0          72 ( 0.03%) 2 ( 0.03%) 0          0          1 ( 0.03%) .          .                 __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
168 ( 0.01%) 120 ( 0.02%) 24 ( 0.01%) 0          1 ( 0.01%) .          .          .          .                 : _M_current(__i) { }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 // Allow iterator to const_iterator conversion
  .            .           .          .          .          .          .          .          .                 template<typename _Iter>
  .            .           .          .          .          .          .          .          .                   _GLIBCXX20_CONSTEXPR
  .            .           .          .          .          .          .          .          .                   __normal_iterator(const __normal_iterator<_Iter,
  .            .           .          .          .          .          .          .          .           			  typename __enable_if<
  .            .           .          .          .          .          .          .          .                 	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
  .            .           .          .          .          .          .          .          .           		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
  .            .           .          .          .          .          .          .          .                   : _M_current(__i.base()) { }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 // Forward iterator requirements
  .            .           .          .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
  .            .           .          .          .          .          .          .          .                 reference
 48 ( 0.00%)   0          24 ( 0.01%) 2 ( 0.03%) 0          0          1 ( 0.03%) .          .                 operator*() const _GLIBCXX_NOEXCEPT
 48 ( 0.00%)  48 ( 0.01%)  .          .          .          .          .          .          .                 { return *_M_current; }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
  .            .           .          .          .          .          .          .          .                 pointer
  .            .           .          .          .          .          .          .          .                 operator->() const _GLIBCXX_NOEXCEPT
  .            .           .          .          .          .          .          .          .                 { return _M_current; }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
  .            .           .          .          .          .          .          .          .                 __normal_iterator&
 24 ( 0.00%)   0          12 ( 0.00%) .          .          .          .          .          .                 operator++() _GLIBCXX_NOEXCEPT
  .            .           .          .          .          .          .          .          .                 {
 30 ( 0.00%)  18 ( 0.00%)  6 ( 0.00%) .          .          .          .          .          .           	++_M_current;
  6 ( 0.00%)   6 ( 0.00%)  .          .          .          .          .          .          .           	return *this;
 12 ( 0.00%)  12 ( 0.00%)  0          3 ( 0.05%) .          .          .          .          .                 }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
  .            .           .          .          .          .          .          .          .                 __normal_iterator
  .            .           .          .          .          .          .          .          .                 operator++(int) _GLIBCXX_NOEXCEPT
  .            .           .          .          .          .          .          .          .                 { return __normal_iterator(_M_current++); }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 // Bidirectional iterator requirements
  .            .           .          .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
-- line 1064 ----------------------------------------
-- line 1092 ----------------------------------------
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
  .            .           .          .          .          .          .          .          .                 __normal_iterator&
  .            .           .          .          .          .          .          .          .                 operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
  .            .           .          .          .          .          .          .          .                 { _M_current -= __n; return *this; }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
  .            .           .          .          .          .          .          .          .                 __normal_iterator
 54 ( 0.00%)   6 ( 0.00%) 24 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
108 ( 0.00%)  48 ( 0.01%) 12 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 { return __normal_iterator(_M_current - __n); }
 72 ( 0.00%)  30 ( 0.00%) 24 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >::__normal_iterator(std::shared_ptr<ActiveObject>* const&) (6x)
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
  .            .           .          .          .          .          .          .          .                 const _Iterator&
128 ( 0.00%)   0          64 ( 0.02%) .          .          .          .          .          .                 base() const _GLIBCXX_NOEXCEPT
 96 ( 0.00%)  96 ( 0.01%)  .          .          .          .          .          .          .                 { return _M_current; }
  .            .           .          .          .          .          .          .          .               };
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .             // Note: In what follows, the left- and right-hand-side iterators are
  .            .           .          .          .          .          .          .          .             // allowed to vary in types (conceptually in cv-qualification) so that
  .            .           .          .          .          .          .          .          .             // comparison between cv-qualified and non-cv-qualified iterators be
  .            .           .          .          .          .          .          .          .             // valid.  However, the greedy and unfriendly operators in std::rel_ops
  .            .           .          .          .          .          .          .          .             // will make overload resolution ambiguous (when in scope) if we don't
  .            .           .          .          .          .          .          .          .             // provide overloads whose operands are of the same type.  Can someone
-- line 1114 ----------------------------------------
-- line 1171 ----------------------------------------
  .            .           .          .          .          .          .          .          .               operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
  .            .           .          .          .          .          .          .          .           	       const __normal_iterator<_IteratorR, _Container>& __rhs)
  .            .           .          .          .          .          .          .          .               _GLIBCXX_NOEXCEPT
  .            .           .          .          .          .          .          .          .               { return __lhs.base() != __rhs.base(); }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .             template<typename _Iterator, typename _Container>
  .            .           .          .          .          .          .          .          .               _GLIBCXX20_CONSTEXPR
  .            .           .          .          .          .          .          .          .               inline bool
 56 ( 0.00%)   0          32 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
  .            .           .          .          .          .          .          .          .           	       const __normal_iterator<_Iterator, _Container>& __rhs)
  .            .           .          .          .          .          .          .          .               _GLIBCXX_NOEXCEPT
104 ( 0.00%)  56 ( 0.01%) 16 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               { return __lhs.base() != __rhs.base(); }
 98 ( 0.00%)  42 ( 0.01%) 28 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >::base() const (14x)
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .             // Random access iterator requirements
  .            .           .          .          .          .          .          .          .             template<typename _IteratorL, typename _IteratorR, typename _Container>
  .            .           .          .          .          .          .          .          .               inline bool
  .            .           .          .          .          .          .          .          .               operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
  .            .           .          .          .          .          .          .          .           	      const __normal_iterator<_IteratorR, _Container>& __rhs)
  .            .           .          .          .          .          .          .          .               _GLIBCXX_NOEXCEPT
  .            .           .          .          .          .          .          .          .               { return __lhs.base() < __rhs.base(); }
-- line 1190 ----------------------------------------
-- line 1260 ----------------------------------------
  .            .           .          .          .          .          .          .          .               operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
  .            .           .          .          .          .          .          .          .           	      const __normal_iterator<_IteratorR, _Container>& __rhs)
  .            .           .          .          .          .          .          .          .           #endif
  .            .           .          .          .          .          .          .          .               { return __lhs.base() - __rhs.base(); }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .             template<typename _Iterator, typename _Container>
  .            .           .          .          .          .          .          .          .               _GLIBCXX20_CONSTEXPR
  .            .           .          .          .          .          .          .          .               inline typename __normal_iterator<_Iterator, _Container>::difference_type
 28 ( 0.00%)   0          16 ( 0.01%) .          .          .          .          .          .               operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
  .            .           .          .          .          .          .          .          .           	      const __normal_iterator<_Iterator, _Container>& __rhs)
  .            .           .          .          .          .          .          .          .               _GLIBCXX_NOEXCEPT
 56 ( 0.00%)  28 ( 0.00%)  8 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               { return __lhs.base() - __rhs.base(); }
 56 ( 0.00%)  24 ( 0.00%) 16 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObject>*, std::vector<std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > > >::base() const (8x)
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .             template<typename _Iterator, typename _Container>
  .            .           .          .          .          .          .          .          .               _GLIBCXX20_CONSTEXPR
  .            .           .          .          .          .          .          .          .               inline __normal_iterator<_Iterator, _Container>
  .            .           .          .          .          .          .          .          .               operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
  .            .           .          .          .          .          .          .          .           	      __n, const __normal_iterator<_Iterator, _Container>& __i)
  .            .           .          .          .          .          .          .          .               _GLIBCXX_NOEXCEPT
  .            .           .          .          .          .          .          .          .               { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
-- line 1279 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_iterator_base_funcs.h
--------------------------------------------------------------------------------
Ir          Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 90 ----------------------------------------
 .           .           .          .          .          .          .          .          .           	  ++__n;
 .           .           .          .          .          .          .          .          .           	}
 .           .           .          .          .          .          .          .          .                 return __n;
 .           .           .          .          .          .          .          .          .               }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             template<typename _RandomAccessIterator>
 .           .           .          .          .          .          .          .          .               inline _GLIBCXX14_CONSTEXPR
 .           .           .          .          .          .          .          .          .               typename iterator_traits<_RandomAccessIterator>::difference_type
60 ( 0.00%)  0          36 ( 0.01%) .          .          .          .          .          .               __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 .           .           .          .          .          .          .          .          .                          random_access_iterator_tag)
 .           .           .          .          .          .          .          .          .               {
 .           .           .          .          .          .          .          .          .                 // concept requirements
 .           .           .          .          .          .          .          .          .                 __glibcxx_function_requires(_RandomAccessIteratorConcept<
 .           .           .          .          .          .          .          .          .           				  _RandomAccessIterator>)
24 ( 0.00%) 24 ( 0.00%)  .          .          .          .          .          .          .                 return __last - __first;
24 ( 0.00%) 24 ( 0.00%)  .          .          .          .          .          .          .               }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           #if _GLIBCXX_USE_CXX11_ABI
 .           .           .          .          .          .          .          .          .             // Forward declaration because of the qualified call in distance.
 .           .           .          .          .          .          .          .          .             template<typename _Tp>
 .           .           .          .          .          .          .          .          .               ptrdiff_t
 .           .           .          .          .          .          .          .          .               __distance(_GLIBCXX_STD_C::_List_iterator<_Tp>,
 .           .           .          .          .          .          .          .          .           	       _GLIBCXX_STD_C::_List_iterator<_Tp>,
 .           .           .          .          .          .          .          .          .           	       input_iterator_tag);
-- line 113 ----------------------------------------
-- line 130 ----------------------------------------
 .           .           .          .          .          .          .          .          .              *  n may be negative.
 .           .           .          .          .          .          .          .          .              *
 .           .           .          .          .          .          .          .          .              *  For random access iterators, this uses their @c + and @c - operations
 .           .           .          .          .          .          .          .          .              *  and are constant time.  For other %iterator classes they are linear time.
 .           .           .          .          .          .          .          .          .             */
 .           .           .          .          .          .          .          .          .             template<typename _InputIterator>
 .           .           .          .          .          .          .          .          .               inline _GLIBCXX17_CONSTEXPR
 .           .           .          .          .          .          .          .          .               typename iterator_traits<_InputIterator>::difference_type
72 ( 0.00%)  0          36 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               distance(_InputIterator __first, _InputIterator __last)
 .           .           .          .          .          .          .          .          .               {
 .           .           .          .          .          .          .          .          .                 // concept requirements -- taken care of in __distance
60 ( 0.00%) 24 ( 0.00%) 12 ( 0.00%) .          .          .          .          .          .                 return std::__distance(__first, __last,
108 ( 0.00%) 48 ( 0.01%) 36 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_iterator_base_funcs.h:std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag) (12x)
36 ( 0.00%)  0          12 ( 0.00%) .          .          .          .          .          .           			     std::__iterator_category(__first));
72 ( 0.00%) 24 ( 0.00%) 24 ( 0.01%) 2 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_iterator_base_types.h:std::iterator_traits<char const*>::iterator_category std::__iterator_category<char const*>(char const* const&) (12x)
24 ( 0.00%) 24 ( 0.00%)  .          .          .          .          .          .          .               }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             template<typename _InputIterator, typename _Distance>
 .           .           .          .          .          .          .          .          .               inline _GLIBCXX14_CONSTEXPR void
 .           .           .          .          .          .          .          .          .               __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
 .           .           .          .          .          .          .          .          .               {
 .           .           .          .          .          .          .          .          .                 // concept requirements
 .           .           .          .          .          .          .          .          .                 __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 .           .           .          .          .          .          .          .          .                 __glibcxx_assert(__n >= 0);
-- line 151 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/x86_64-linux-gnu/c++/11/bits/gthr-default.h
--------------------------------------------------------------------------------
Ir          Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 293 ----------------------------------------
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             return __gthread_active_latest_value != 0;
 .           .           .          .          .          .          .          .          .           }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           #else /* not hppa-hpux */
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           static inline int
 .           .           .          .          .          .          .          .          .           __gthread_active_p (void)
68 ( 0.00%)  0          34 ( 0.01%) 3 ( 0.05%) .          .          .          .          .           {
34 ( 0.00%)  .           .          .          .          .          .          .          .             return 1;
68 ( 0.00%) 68 ( 0.01%)  .          .          .          .          .          .          .           }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           #endif /* hppa-hpux */
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           #endif /* __GXX_WEAK__ */
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           #ifdef _LIBOBJC
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           /* This is the config.h file in libobjc/ */
-- line 311 ----------------------------------------
-- line 739 ----------------------------------------
 .           .           .          .          .          .          .          .          .             if (__gthread_active_p ())
 .           .           .          .          .          .          .          .          .               return __gthrw_(pthread_mutex_destroy) (__mutex);
 .           .           .          .          .          .          .          .          .             else
 .           .           .          .          .          .          .          .          .               return 0;
 .           .           .          .          .          .          .          .          .           }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           static inline int
 .           .           .          .          .          .          .          .          .           __gthread_mutex_lock (__gthread_mutex_t *__mutex)
68 ( 0.00%)  0          34 ( 0.01%) 2 ( 0.03%) 0          6 ( 0.20%) 2 ( 0.06%) 0          6 ( 0.25%)  {
85 ( 0.00%)  0          17 ( 0.01%) .          .          .          .          .          .             if (__gthread_active_p ())
85 ( 0.00%) 34 ( 0.00%) 17 ( 0.01%) 3 ( 0.05%) .          .          .          .          .           => /usr/include/x86_64-linux-gnu/c++/11/bits/gthr-default.h:__gthread_active_p() (17x)
68 ( 0.00%) 17 ( 0.00%) 17 ( 0.01%) .          .          .          .          .          .               return __gthrw_(pthread_mutex_lock) (__mutex);
629 ( 0.02%) 153 ( 0.02%) 68 ( 0.02%) 37 ( 0.63%) 1 ( 0.01%) .          .          .          .           => ???:0x000000000010ca20 (17x)
 .           .           .          .          .          .          .          .          .             else
 .           .           .          .          .          .          .          .          .               return 0;
34 ( 0.00%) 34 ( 0.00%)  .          .          .          .          .          .          .           }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           static inline int
 .           .           .          .          .          .          .          .          .           __gthread_mutex_trylock (__gthread_mutex_t *__mutex)
 .           .           .          .          .          .          .          .          .           {
 .           .           .          .          .          .          .          .          .             if (__gthread_active_p ())
 .           .           .          .          .          .          .          .          .               return __gthrw_(pthread_mutex_trylock) (__mutex);
 .           .           .          .          .          .          .          .          .             else
 .           .           .          .          .          .          .          .          .               return 0;
-- line 760 ----------------------------------------
-- line 769 ----------------------------------------
 .           .           .          .          .          .          .          .          .               return __gthrw_(pthread_mutex_timedlock) (__mutex, __abs_timeout);
 .           .           .          .          .          .          .          .          .             else
 .           .           .          .          .          .          .          .          .               return 0;
 .           .           .          .          .          .          .          .          .           }
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           static inline int
 .           .           .          .          .          .          .          .          .           __gthread_mutex_unlock (__gthread_mutex_t *__mutex)
68 ( 0.00%)  0          34 ( 0.01%) .          .          .          .          .          .           {
85 ( 0.00%)  0          17 ( 0.01%) .          .          .          .          .          .             if (__gthread_active_p ())
85 ( 0.00%) 34 ( 0.00%) 17 ( 0.01%) .          .          .          .          .          .           => /usr/include/x86_64-linux-gnu/c++/11/bits/gthr-default.h:__gthread_active_p() (17x)
68 ( 0.00%) 17 ( 0.00%) 17 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               return __gthrw_(pthread_mutex_unlock) (__mutex);
572 ( 0.02%) 132 ( 0.02%) 81 ( 0.03%) 10 ( 0.17%) 1 ( 0.01%) .          .          .          .           => ???:0x000000000010c800 (17x)
 .           .           .          .          .          .          .          .          .             else
 .           .           .          .          .          .          .          .          .               return 0;
34 ( 0.00%) 34 ( 0.00%)  .          .          .          .          .          .          .           }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           #if !defined( PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP) \
 .           .           .          .          .          .          .          .          .             || defined(_GTHREAD_USE_RECURSIVE_MUTEX_INIT_FUNC)
 .           .           .          .          .          .          .          .          .           static inline int
 .           .           .          .          .          .          .          .          .           __gthread_recursive_mutex_init_function (__gthread_recursive_mutex_t *__mutex)
 .           .           .          .          .          .          .          .          .           {
 .           .           .          .          .          .          .          .          .             if (__gthread_active_p ())
 .           .           .          .          .          .          .          .          .               {
-- line 790 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: Server.cpp
--------------------------------------------------------------------------------
Ir           Dr           Dw           I1mr       D1mr       D1mw       ILmr       DLmr       DLmw 

  .            .            .          .          .          .          .          .          .           #include "Server.hpp"
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .           #define PORT 4040
  .            .            .          .          .          .          .          .          .           #define INVALID -1
  .            .            .          .          .          .          .          .          .           #define NO_MST_DATA_CALCULATION -1
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .           // Constructor
 33 ( 0.00%)   8 ( 0.00%)  12 ( 0.00%) 4 ( 0.07%) 0          0          3 ( 0.09%) .          .           Server::Server(): server_fd(INVALID), pipeline(nullptr), leaderfollower(nullptr), stopServer(false)
 67 ( 0.00%)  20 ( 0.00%)  20 ( 0.01%) 8 ( 0.14%) 0          1 ( 0.03%) 8 ( 0.25%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<Graph>, std::allocator<std::shared_ptr<Graph> > >::vector() (1x)
 67 ( 0.00%)  20 ( 0.00%)  20 ( 0.01%) 7 ( 0.12%) 0          0          7 ( 0.22%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::vector() (1x)
 67 ( 0.00%)  20 ( 0.00%)  20 ( 0.01%) 6 ( 0.10%) 0          0          6 ( 0.19%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >, std::allocator<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > > > >::vector() (1x)
 27 ( 0.00%)   8 ( 0.00%)   8 ( 0.00%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::atomic(bool) (1x)
 24 ( 0.00%)   6 ( 0.00%)  10 ( 0.00%) 2 ( 0.03%) 0          1 ( 0.03%) 2 ( 0.06%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/std_mutex.h:std::mutex::mutex() (1x)
  .            .            .          .          .          .          .          .          .           {
  9 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%) 0          1 ( 0.01%) 0          0          1 ( 0.01%) .               std::cout << "Start Building the Server..." << std::endl;
5,665 ( 0.20%) 1,633 ( 0.24%) 767 ( 0.27%) 66 ( 1.12%) 62 ( 0.47%) 3 ( 0.10%) 65 ( 2.01%) 32 ( 0.36%) .           => ???:0x000000000010c8e0 (1x)
5,599 ( 0.20%) 1,561 ( 0.23%) 718 ( 0.26%) 63 ( 1.07%) 48 ( 0.36%) 3 ( 0.10%) 58 ( 1.79%) 26 ( 0.29%) 3 ( 0.13%)  => ???:0x000000000010c8b0 (1x)
  9 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               std::cout << "Starting Pipeline Design Pattern" << std::endl;
425 ( 0.02%) 139 ( 0.02%)  63 ( 0.02%) .          .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
443 ( 0.02%) 110 ( 0.02%)  44 ( 0.02%) 5 ( 0.08%) 2 ( 0.02%) 0          4 ( 0.12%) 2 ( 0.02%) .           => ???:0x000000000010c8b0 (1x)
  7 ( 0.00%)   1 ( 0.00%)   3 ( 0.00%) 0          0          1 ( 0.03%) .          .          .               this->pipeline = new Pipeline();
118,498 ( 4.19%) 34,891 ( 5.05%) 23,916 ( 8.54%) 1,498 (25.35%) 140 ( 1.05%) 191 ( 6.31%) 588 (18.16%) 62 ( 0.69%) 183 ( 7.64%)  => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/Pipeline.cpp:Pipeline::Pipeline() (1x)
203 ( 0.01%)  39 ( 0.01%)  30 ( 0.01%) 4 ( 0.07%) 2 ( 0.02%) 1 ( 0.03%) 2 ( 0.06%) 0          1 ( 0.04%)  => ???:0x000000000010c8c0 (1x)
  9 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               std::cout << "Starting Leader Follower Design Pattern" << std::endl;
497 ( 0.02%) 162 ( 0.02%)  80 ( 0.03%) 3 ( 0.05%) .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
486 ( 0.02%) 119 ( 0.02%)  46 ( 0.02%) 5 ( 0.08%) 0          0          1 ( 0.03%) .          .           => ???:0x000000000010c8b0 (1x)
  7 ( 0.00%)   1 ( 0.00%)   3 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               this->leaderfollower = new LeaderFollower();
14,074 ( 0.50%) 3,785 ( 0.55%) 3,252 ( 1.16%) 229 ( 3.88%) 3 ( 0.02%) 91 ( 3.01%) 93 ( 2.87%) 2 ( 0.02%) 90 ( 3.76%)  => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/LeaderFollower.cpp:LeaderFollower::LeaderFollower() (1x)
215 ( 0.01%)  41 ( 0.01%)  32 ( 0.01%) 11 ( 0.19%) 3 ( 0.02%) 1 ( 0.03%) 0          0          1 ( 0.04%)  => ???:0x000000000010c8c0 (1x)
  3 ( 0.00%)   1 ( 0.00%)   1 ( 0.00%) .          .          .          .          .          .               startServer(); // Start the server
11,591 ( 0.41%) 3,474 ( 0.50%) 1,817 ( 0.65%) 177 ( 3.00%) 62 ( 0.47%) 2 ( 0.07%) 121 ( 3.74%) 36 ( 0.40%) 1 ( 0.04%)  => Server.cpp:Server::startServer() (1x)
  6 ( 0.00%)   4 ( 0.00%)   0          1 ( 0.02%) 0          0          1 ( 0.03%) .          .           }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .           // Destructor
  9 ( 0.00%)   1 ( 0.00%)   4 ( 0.00%) .          .          .          .          .          .           Server::~Server()
  .            .            .          .          .          .          .          .          .           {
  9 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               std::cout << "\n********* START Server Stop Process *********" << std::endl;
3,134 ( 0.11%) 809 ( 0.12%) 348 ( 0.12%) 5 ( 0.08%) 1 ( 0.01%) 0          1 ( 0.03%) 1 ( 0.01%) .           => ???:0x000000000010c8b0 (1x)
486 ( 0.02%) 160 ( 0.02%)  78 ( 0.03%) .          .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
  9 ( 0.00%)   2 ( 0.00%)   2 ( 0.00%) .          .          .          .          .          .               delete pipeline;       // Delete the pipeline object
128,074 ( 4.53%) 35,225 ( 5.10%) 18,285 ( 6.53%) 695 (11.76%) 127 ( 0.96%) 11 ( 0.36%) 143 ( 4.42%) 53 ( 0.59%) 2 ( 0.08%)  => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/Pipeline.cpp:Pipeline::~Pipeline() (1x)
 99 ( 0.00%)  31 ( 0.00%)  15 ( 0.01%) .          .          .          .          .          .           => ???:0x000000000010c8d0 (1x)
  9 ( 0.00%)   2 ( 0.00%)   2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               delete leaderfollower; // Delete the leaderfollower object
23,055 ( 0.81%) 6,540 ( 0.95%) 3,407 ( 1.22%) 115 ( 1.95%) 21 ( 0.16%) 1 ( 0.03%) 26 ( 0.80%) 3 ( 0.03%) .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/LeaderFollower.cpp:LeaderFollower::~LeaderFollower() (1x)
 99 ( 0.00%)  31 ( 0.00%)  15 ( 0.01%) .          .          .          .          .          .           => ???:0x000000000010c8d0 (1x)
  .            .            .          .          .          .          .          .          .           
 19 ( 0.00%)   3 ( 0.00%)   6 ( 0.00%) 3 ( 0.05%) 0          0          3 ( 0.09%) .          .               for (auto &client : clients_dataset)
 34 ( 0.00%)  13 ( 0.00%)  10 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >*, std::vector<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >, std::allocator<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > > > > >(__gnu_cxx::__normal_iterator<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >*, std::vector<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >, std::allocator<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > > > > > const&, __gnu_cxx::__normal_iterator<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >*, std::vector<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >, std::allocator<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > > > > > const&) (1x)
 32 ( 0.00%)  12 ( 0.00%)   8 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >, std::allocator<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > > > >::end() (1x)
 31 ( 0.00%)  12 ( 0.00%)   8 ( 0.00%) 2 ( 0.03%) 1 ( 0.01%) 0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >, std::allocator<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > > > >::begin() (1x)
  .            .            .          .          .          .          .          .          .               {
  .            .            .          .          .          .          .          .          .                   if (client.first >= 0)
  .            .            .          .          .          .          .          .          .                   {
  .            .            .          .          .          .          .          .          .                       close(client.first);
  .            .            .          .          .          .          .          .          .                   }
  .            .            .          .          .          .          .          .          .                   if (client.second->joinable())
  .            .            .          .          .          .          .          .          .                   {
  .            .            .          .          .          .          .          .          .                       client.second->join();
  .            .            .          .          .          .          .          .          .                   }
  .            .            .          .          .          .          .          .          .               }
  4 ( 0.00%)   1 ( 0.00%)   1 ( 0.00%) .          .          .          .          .          .               clients_dataset.clear();
 30 ( 0.00%)  11 ( 0.00%)   7 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >, std::allocator<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > > > >::clear() (1x)
  9 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               std::cout << "Server: All clients File Descriptor are CLOSED" << std::endl;
521 ( 0.02%) 126 ( 0.02%)  46 ( 0.02%) 4 ( 0.07%) 1 ( 0.01%) 0          0          1 ( 0.01%) .           => ???:0x000000000010c8b0 (1x)
486 ( 0.02%) 160 ( 0.02%)  78 ( 0.03%) 6 ( 0.10%) .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
  9 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%) .          .          .          .          .          .               std::cout << "Server: All clients Threads are JOINED" << std::endl;
481 ( 0.02%) 118 ( 0.02%)  46 ( 0.02%) 3 ( 0.05%) .          .          .          .          .           => ???:0x000000000010c8b0 (1x)
486 ( 0.02%) 160 ( 0.02%)  78 ( 0.03%) 3 ( 0.05%) .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
  4 ( 0.00%)   2 ( 0.00%)   0          1 ( 0.02%) 0          0          1 ( 0.03%) .          .               if (server_fd >= 0)
  .            .            .          .          .          .          .          .          .               {
  4 ( 0.00%)   2 ( 0.00%)   1 ( 0.00%) .          .          .          .          .          .                   close(server_fd);
 40 ( 0.00%)  12 ( 0.00%)   6 ( 0.00%) 3 ( 0.05%) 0          0          3 ( 0.09%) .          .           => ???:0x000000000010cb10 (1x)
  .            .            .          .          .          .          .          .          .               }
  9 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%) .          .          .          .          .          .               std::cout << "Server: Server File Descriptor CLOSE" << std::endl;
471 ( 0.02%) 116 ( 0.02%)  46 ( 0.02%) 3 ( 0.05%) 1 ( 0.01%) 0          0          1 ( 0.01%) .           => ???:0x000000000010c8b0 (1x)
486 ( 0.02%) 160 ( 0.02%)  78 ( 0.03%) 3 ( 0.05%) .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
  9 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               std::cout << "\n********* FINISH Server Stop Process *********" << std::endl;
3,192 ( 0.11%) 824 ( 0.12%) 354 ( 0.13%) 3 ( 0.05%) .          .          .          .          .           => ???:0x000000000010c8b0 (1x)
486 ( 0.02%) 160 ( 0.02%)  78 ( 0.03%) .          .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
 18 ( 0.00%)   8 ( 0.00%)   3 ( 0.00%) .          .          .          .          .          .           }
138 ( 0.00%)  44 ( 0.01%)  35 ( 0.01%) 9 ( 0.15%) 0          0          7 ( 0.22%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<Graph>, std::allocator<std::shared_ptr<Graph> > >::~vector() (1x)
138 ( 0.00%)  44 ( 0.01%)  35 ( 0.01%) 7 ( 0.12%) 0          0          5 ( 0.15%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >, std::allocator<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > > > >::~vector() (1x)
138 ( 0.00%)  44 ( 0.01%)  35 ( 0.01%) 4 ( 0.07%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::~vector() (1x)
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .           // Start the server
  .            .            .          .          .          .          .          .          .           void Server::startServer()
  8 ( 0.00%)   1 ( 0.00%)   3 ( 0.00%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .           {
  .            .            .          .          .          .          .          .          .               // Creating socket FD
 11 ( 0.00%)   3 ( 0.00%)   2 ( 0.00%) .          .          .          .          .          .               if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
  8 ( 0.00%)   2 ( 0.00%)   0          2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => ???:0x000000000010c630 (1x)
  .            .            .          .          .          .          .          .          .               {
  .            .            .          .          .          .          .          .          .                   perror("socket failed");
  .            .            .          .          .          .          .          .          .                   exit(EXIT_FAILURE);
  .            .            .          .          .          .          .          .          .               }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .               // Set the socket options
  1 ( 0.00%)   0            1 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               int opt = 1; // Enable the socket option
 13 ( 0.00%)   2 ( 0.00%)   1 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt)))
  9 ( 0.00%)   2 ( 0.00%)   0          2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => ???:0x000000000010cac0 (1x)
  .            .            .          .          .          .          .          .          .               {
  .            .            .          .          .          .          .          .          .                   perror("setsockopt");
  .            .            .          .          .          .          .          .          .                   exit(EXIT_FAILURE);
  .            .            .          .          .          .          .          .          .               }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .               // Set the address and port number
  2 ( 0.00%)   1 ( 0.00%)   1 ( 0.00%) .          .          .          .          .          .               address.sin_family = AF_INET;         // IPv4
  2 ( 0.00%)   1 ( 0.00%)   1 ( 0.00%) .          .          .          .          .          .               address.sin_addr.s_addr = INADDR_ANY; // Any IP address
  4 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               address.sin_port = htons(PORT);       // Port number
  6 ( 0.00%)   2 ( 0.00%)   0          2 ( 0.03%) 1 ( 0.01%) 0          2 ( 0.06%) 1 ( 0.01%) .           => ???:0x000000000010c5d0 (1x)
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .               // Bind the socket to the address and port number
 11 ( 0.00%)   3 ( 0.00%)   1 ( 0.00%) .          .          .          .          .          .               if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0)
  8 ( 0.00%)   2 ( 0.00%)   0          2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => ???:0x000000000010c5f0 (1x)
  .            .            .          .          .          .          .          .          .               { // Bind the socket to the address and port number
  .            .            .          .          .          .          .          .          .                   perror("bind failed");
  .            .            .          .          .          .          .          .          .                   exit(EXIT_FAILURE);
  .            .            .          .          .          .          .          .          .               }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .               // Listen for incoming connections
  8 ( 0.00%)   2 ( 0.00%)   1 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               if (listen(server_fd, 3) < 0)
  8 ( 0.00%)   2 ( 0.00%)   0          2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => ???:0x000000000010c950 (1x)
  .            .            .          .          .          .          .          .          .               {
  .            .            .          .          .          .          .          .          .                   perror("listen");
  .            .            .          .          .          .          .          .          .                   exit(EXIT_FAILURE);
  .            .            .          .          .          .          .          .          .               }
  .            .            .          .          .          .          .          .          .           
 12 ( 0.00%)   1 ( 0.00%)   3 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               std::cout << "Server started listening on port " << PORT << std::endl;
497 ( 0.02%) 162 ( 0.02%)  80 ( 0.03%) 3 ( 0.05%) .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
456 ( 0.02%) 113 ( 0.02%)  46 ( 0.02%) 3 ( 0.05%) 2 ( 0.02%) 0          0          2 ( 0.02%) .           => ???:0x000000000010c8b0 (1x)
454 ( 0.02%) 111 ( 0.02%)  65 ( 0.02%) 4 ( 0.07%) 2 ( 0.02%) .          .          .          .           => ???:0x000000000010ca90 (1x)
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .               // Handle incoming connections
  3 ( 0.00%)   1 ( 0.00%)   1 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               this->handleConnections();
10,064 ( 0.36%) 3,058 ( 0.44%) 1,609 ( 0.57%) 149 ( 2.52%) 57 ( 0.43%) 2 ( 0.07%) 103 ( 3.18%) 33 ( 0.37%) 1 ( 0.04%)  => Server.cpp:Server::handleConnections() (1x)
  6 ( 0.00%)   4 ( 0.00%)   .          .          .          .          .          .          .           }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .           // handle client connections
  .            .            .          .          .          .          .          .          .           void Server::handleConnections()
 11 ( 0.00%)   1 ( 0.00%)   6 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           {
  1 ( 0.00%)   0            1 ( 0.00%) .          .          .          .          .          .               int addrlen = sizeof(this->address);
  .            .            .          .          .          .          .          .          .               fd_set readfds;
  .            .            .          .          .          .          .          .          .               struct timeval timeout;
  4 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%) .          .          .          .          .          .               int stdin_fd = fileno(stdin);
  9 ( 0.00%)   4 ( 0.00%)   0          2 ( 0.03%) 1 ( 0.01%) 0          1 ( 0.03%) 1 ( 0.01%) .           => ???:0x000000000010c900 (1x)
  8 ( 0.00%)   2 ( 0.00%)   2 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               int max_fd = std::max(server_fd, stdin_fd);
 14 ( 0.00%)   7 ( 0.00%)   3 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_algobase.h:int const& std::max<int>(int const&, int const&) (1x)
  .            .            .          .          .          .          .          .          .           
 22 ( 0.00%)   3 ( 0.00%)   3 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               while (!stopServer)
 87 ( 0.00%)  30 ( 0.00%)  27 ( 0.01%) 1 ( 0.02%) .          .          .          .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::operator bool() const (3x)
  .            .            .          .          .          .          .          .          .               {                      // Loop until the server is stopped
306 ( 0.01%) 147 ( 0.02%) 102 ( 0.04%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   FD_ZERO(&readfds); // Clear the file descriptor set
 57 ( 0.00%)  15 ( 0.00%)   3 ( 0.00%) 2 ( 0.03%) 0          0          1 ( 0.03%) .          .                   FD_SET(server_fd, &readfds);
 51 ( 0.00%)   9 ( 0.00%)   3 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   FD_SET(stdin_fd, &readfds);
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .                   // Set timeout to 1 second
  3 ( 0.00%)   0            3 ( 0.00%) .          .          .          .          .          .                   timeout.tv_sec = 1;
  3 ( 0.00%)   0            3 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   timeout.tv_usec = 0;
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .                   // Check for activity on the sockets
 30 ( 0.00%)   3 ( 0.00%)   6 ( 0.00%) .          .          .          .          .          .                   int activity = select(max_fd + 1, &readfds, NULL, NULL, &timeout); // Check for activity on the sockets
339 ( 0.01%)  75 ( 0.01%)  48 ( 0.02%) 8 ( 0.14%) 0          0          7 ( 0.22%) .          .           => ???:0x000000000010c890 (3x)
  .            .            .          .          .          .          .          .          .           
  6 ( 0.00%)   3 ( 0.00%)   .          .          .          .          .          .          .                   if (activity < 0 && errno != EINTR)
  .            .            .          .          .          .          .          .          .                   { // Check for errors
  .            .            .          .          .          .          .          .          .                       perror("select error");
  .            .            .          .          .          .          .          .          .                       continue;
  .            .            .          .          .          .          .          .          .                   }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .                   // Check for keyboard input
 48 ( 0.00%)   9 ( 0.00%)   0          2 ( 0.03%) 0          0          2 ( 0.06%) .          .                   if (FD_ISSET(stdin_fd, &readfds))
  .            .            .          .          .          .          .          .          .                   { // Check if the file descriptor is set
  9 ( 0.00%)   0            3 ( 0.00%) .          .          .          .          .          .                       std::string command;
 24 ( 0.00%)   6 ( 0.00%)   9 ( 0.00%) 2 ( 0.03%) 0          0          1 ( 0.03%) .          .           => ???:0x000000000010c9c0 (3x)
 15 ( 0.00%)   0            3 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                       std::getline(std::cin, command); // Get the command from the user
7,530 ( 0.27%) 2,323 ( 0.34%) 1,164 ( 0.42%) 98 ( 1.66%) 54 ( 0.41%) 2 ( 0.07%) 74 ( 2.29%) 32 ( 0.36%) 1 ( 0.04%)  => ???:0x000000000010c610 (3x)
 21 ( 0.00%)   0            3 ( 0.00%) .          .          .          .          .          .                       if (command == "stop")
260 ( 0.01%)  56 ( 0.01%)  29 ( 0.01%) 7 ( 0.12%) 1 ( 0.01%) 0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/basic_string.h:bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) (3x)
  .            .            .          .          .          .          .          .          .                       {
 14 ( 0.00%)   1 ( 0.00%)   3 ( 0.00%) .          .          .          .          .          .                           std::cout << "Command: " << command << std::endl;
486 ( 0.02%) 160 ( 0.02%)  78 ( 0.03%) 4 ( 0.07%) .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
310 ( 0.01%)  84 ( 0.01%)  44 ( 0.02%) 6 ( 0.10%) .          .          .          .          .           => ???:0x000000000010c8b0 (1x)
253 ( 0.01%)  75 ( 0.01%)  40 ( 0.01%) .          .          .          .          .          .           => ???:0x000000000010c860 (1x)
  5 ( 0.00%)   1 ( 0.00%)   1 ( 0.00%) .          .          .          .          .          .                           stopServer = true;
 49 ( 0.00%)  17 ( 0.00%)  17 ( 0.01%) 3 ( 0.05%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::operator=(bool) (1x)
  2 ( 0.00%)   .            .          .          .          .          .          .          .                           break;
  .            .            .          .          .          .          .          .          .                       }
 17 ( 0.00%)   0            3 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   }
 24 ( 0.00%)   9 ( 0.00%)   0          2 ( 0.03%) 1 ( 0.01%) .          .          .          .           => ???:0x000000000010c780 (3x)
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .                   // Check for new connections
 36 ( 0.00%)  10 ( 0.00%)   0          1 ( 0.02%) 0          0          1 ( 0.03%) .          .                   if (FD_ISSET(server_fd, &readfds))
  .            .            .          .          .          .          .          .          .                   {                                                                                           // Check if the file descriptor is set
  .            .            .          .          .          .          .          .          .                       int new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t *)&addrlen); // Accept the connection
  .            .            .          .          .          .          .          .          .                       if (new_socket < 0)
  .            .            .          .          .          .          .          .          .                       {
  .            .            .          .          .          .          .          .          .                           perror("accept failed");
  .            .            .          .          .          .          .          .          .                           continue;
  .            .            .          .          .          .          .          .          .                       }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .                       std::lock_guard<std::mutex> lock(this->mtx); // Lock the mutex because we are modifying the clients vector
  .            .            .          .          .          .          .          .          .                       std::cout << "New client connected!" << std::endl;
  .            .            .          .          .          .          .          .          .                       auto client_thread = std::make_unique<std::thread>(&Server::handleRequest, this, new_socket);
  .            .            .          .          .          .          .          .          .                       clients_dataset.emplace_back(new_socket, std::move(client_thread)); // Add client to the list (unique ptr owner is being moved)
  .            .            .          .          .          .          .          .          .                       std::cout << "Client has Added to the Clients list!" << std::endl;
  .            .            .          .          .          .          .          .          .                   }
  .            .            .          .          .          .          .          .          .               }
 10 ( 0.00%)   7 ( 0.00%)   0          2 ( 0.03%) 0          0          2 ( 0.06%) .          .           }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .           void Server::handleRequest(int client_FD)
  .            .            .          .          .          .          .          .          .           {
  .            .            .          .          .          .          .          .          .               if (client_FD < 0)
  .            .            .          .          .          .          .          .          .               {
  .            .            .          .          .          .          .          .          .                   std::perror("Error: Invalid client file descriptor.");
  .            .            .          .          .          .          .          .          .                   return;
  .            .            .          .          .          .          .          .          .               }
-- line 156 ----------------------------------------
-- line 429 ----------------------------------------
  .            .            .          .          .          .          .          .          .           {
  .            .            .          .          .          .          .          .          .               char buffer[1024];
  .            .            .          .          .          .          .          .          .               memset(buffer, 0, sizeof(buffer));
  .            .            .          .          .          .          .          .          .               read(client_FD, buffer, sizeof(buffer));
  .            .            .          .          .          .          .          .          .               return std::string(buffer);
  .            .            .          .          .          .          .          .          .           }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .           int main(int argc, char *argv[])
  8 ( 0.00%)   0            5 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           {
  6 ( 0.00%)   0            3 ( 0.00%) 1 ( 0.02%) 0          1 ( 0.03%) .          .          .               Server *serverObj = new Server();
158,031 ( 5.58%) 46,046 ( 6.66%) 30,868 (11.02%) 2,094 (35.44%) 323 ( 2.43%) 295 ( 9.74%) 964 (29.78%) 161 ( 1.79%) 281 (11.74%)  => Server.cpp:Server::Server() (1x)
199 ( 0.01%)  38 ( 0.01%)  30 ( 0.01%) 12 ( 0.20%) 8 ( 0.06%) 1 ( 0.03%) 4 ( 0.12%) 0          1 ( 0.04%)  => ???:0x000000000010c8c0 (1x)
  8 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%) 1 ( 0.02%) .          .          .          .          .               delete serverObj;
162,258 ( 5.73%) 44,838 ( 6.49%) 23,125 ( 8.26%) 876 (14.82%) 152 ( 1.14%) 12 ( 0.40%) 199 ( 6.15%) 59 ( 0.66%) 2 ( 0.08%)  => Server.cpp:Server::~Server() (1x)
 99 ( 0.00%)  31 ( 0.00%)  15 ( 0.01%) .          .          .          .          .          .           => ???:0x000000000010c8d0 (1x)
  2 ( 0.00%)   .            .          .          .          .          .          .          .               return 0;
 26 ( 0.00%)  10 ( 0.00%)   5 ( 0.00%) 3 ( 0.05%) 1 ( 0.01%) 0          3 ( 0.09%) .          .           }103,060 ( 3.64%) 26,940 ( 3.90%) 12,033 ( 4.30%) 440 ( 7.45%) 533 ( 4.01%) 145 ( 4.79%) 436 (13.47%) 253 ( 2.81%) 128 ( 5.35%)  => Server.cpp:__static_initialization_and_destruction_0(int, int) (1x)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_uninitialized.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 978 ----------------------------------------
  .           .           .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           #endif // C++17
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
  .           .           .          .          .          .          .          .          .             /// @cond undocumented
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             template<typename _Tp, typename _Up, typename _Allocator>
  .           .           .          .          .          .          .          .          .               inline void
 49 ( 0.00%)  0          28 ( 0.01%) .          .          .          .          .          .               __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
  .           .           .          .          .          .          .          .          .           			_Allocator& __alloc)
  .           .           .          .          .          .          .          .          .               noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
  .           .           .          .          .          .          .          .          .           			 __dest, std::move(*__orig)))
  .           .           .          .          .          .          .          .          .           	     && noexcept(std::allocator_traits<_Allocator>::destroy(
  .           .           .          .          .          .          .          .          .           			    __alloc, std::__addressof(*__orig))))
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 typedef std::allocator_traits<_Allocator> __traits;
 63 ( 0.00%) 21 ( 0.00%) 14 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 __traits::construct(__alloc, __dest, std::move(*__orig));
994 ( 0.04%) 336 ( 0.05%) 315 ( 0.11%) 0          0          1 ( 0.03%) .          .          .           => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::shared_ptr<ActiveObject> > >::construct<std::shared_ptr<ActiveObject>, std::shared_ptr<ActiveObject> >(std::allocator<std::shared_ptr<ActiveObject> >&, std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>&&) (7x)
 49 ( 0.00%) 21 ( 0.00%) 14 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::shared_ptr<ActiveObject>&>::type&& std::move<std::shared_ptr<ActiveObject>&>(std::shared_ptr<ActiveObject>&) (7x)
 56 ( 0.00%) 14 ( 0.00%) 14 ( 0.01%) .          .          .          .          .          .                 __traits::destroy(__alloc, std::__addressof(*__orig));
427 ( 0.02%) 119 ( 0.02%) 112 ( 0.04%) 8 ( 0.14%) .          .          .          .          .           => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::shared_ptr<ActiveObject> > >::destroy<std::shared_ptr<ActiveObject> >(std::allocator<std::shared_ptr<ActiveObject> >&, std::shared_ptr<ActiveObject>*) (7x)
 49 ( 0.00%) 21 ( 0.00%) 14 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::shared_ptr<ActiveObject>* std::__addressof<std::shared_ptr<ActiveObject> >(std::shared_ptr<ActiveObject>&) (7x)
 21 ( 0.00%) 14 ( 0.00%)  .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             // This class may be specialized for specific types.
  .           .           .          .          .          .          .          .          .             // Also known as is_trivially_relocatable.
  .           .           .          .          .          .          .          .          .             template<typename _Tp, typename = void>
  .           .           .          .          .          .          .          .          .               struct __is_bitwise_relocatable
  .           .           .          .          .          .          .          .          .               : is_trivial<_Tp> { };
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             template <typename _Tp, typename _Up>
-- line 1004 ----------------------------------------
-- line 1010 ----------------------------------------
  .           .           .          .          .          .          .          .          .                 if (__count > 0)
  .           .           .          .          .          .          .          .          .           	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
  .           .           .          .          .          .          .          .          .                 return __result + __count;
  .           .           .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             template <typename _InputIterator, typename _ForwardIterator,
  .           .           .          .          .          .          .          .          .           	    typename _Allocator>
  .           .           .          .          .          .          .          .          .               inline _ForwardIterator
 72 ( 0.00%)  0          48 ( 0.02%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               __relocate_a_1(_InputIterator __first, _InputIterator __last,
  .           .           .          .          .          .          .          .          .           		   _ForwardIterator __result, _Allocator& __alloc)
  .           .           .          .          .          .          .          .          .               noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
  .           .           .          .          .          .          .          .          .           					       std::addressof(*__first),
  .           .           .          .          .          .          .          .          .           					       __alloc)))
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 typedef typename iterator_traits<_InputIterator>::value_type
  .           .           .          .          .          .          .          .          .           	_ValueType;
  .           .           .          .          .          .          .          .          .                 typedef typename iterator_traits<_ForwardIterator>::value_type
  .           .           .          .          .          .          .          .          .           	_ValueType2;
  .           .           .          .          .          .          .          .          .                 static_assert(std::is_same<_ValueType, _ValueType2>::value,
  .           .           .          .          .          .          .          .          .           	  "relocation is only possible for values of the same type");
 16 ( 0.00%)  8 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .                 _ForwardIterator __cur = __result;
 67 ( 0.00%) 30 ( 0.00%) 14 ( 0.01%) .          .          .          .          .          .                 for (; __first != __last; ++__first, (void)++__cur)
 91 ( 0.00%) 21 ( 0.00%) 21 ( 0.01%) .          .          .          .          .          .           	std::__relocate_object_a(std::__addressof(*__cur),
1,708 ( 0.06%) 546 ( 0.08%) 511 ( 0.18%) 9 ( 0.15%) 0          1 ( 0.03%) 1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_uninitialized.h:void std::__relocate_object_a<std::shared_ptr<ActiveObject>, std::shared_ptr<ActiveObject>, std::allocator<std::shared_ptr<ActiveObject> > >(std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::allocator<std::shared_ptr<ActiveObject> >&) (7x)
 98 ( 0.00%) 42 ( 0.01%) 28 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::shared_ptr<ActiveObject>* std::__addressof<std::shared_ptr<ActiveObject> >(std::shared_ptr<ActiveObject>&) (14x)
  .           .           .          .          .          .          .          .          .           				 std::__addressof(*__first), __alloc);
  8 ( 0.00%)  8 ( 0.00%)  .          .          .          .          .          .          .                 return __cur;
 24 ( 0.00%) 24 ( 0.00%)  .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             template <typename _InputIterator, typename _ForwardIterator,
  .           .           .          .          .          .          .          .          .           	    typename _Allocator>
  .           .           .          .          .          .          .          .          .               inline _ForwardIterator
 80 ( 0.00%)  0          56 ( 0.02%) .          .          .          .          .          .               __relocate_a(_InputIterator __first, _InputIterator __last,
  .           .           .          .          .          .          .          .          .           		 _ForwardIterator __result, _Allocator& __alloc)
  .           .           .          .          .          .          .          .          .               noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
  .           .           .          .          .          .          .          .          .           				     std::__niter_base(__last),
  .           .           .          .          .          .          .          .          .           				     std::__niter_base(__result), __alloc)))
  .           .           .          .          .          .          .          .          .               {
136 ( 0.00%) 32 ( 0.00%) 32 ( 0.01%) .          .          .          .          .          .                 return __relocate_a_1(std::__niter_base(__first),
2,084 ( 0.07%) 679 ( 0.10%) 630 ( 0.23%) 10 ( 0.17%) 0          1 ( 0.03%) 2 ( 0.06%) .          .           => /usr/include/c++/11/bits/stl_uninitialized.h:std::shared_ptr<ActiveObject>* std::__relocate_a_1<std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::allocator<std::shared_ptr<ActiveObject> > >(std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::shared_ptr<ActiveObject>*, std::allocator<std::shared_ptr<ActiveObject> >&) (8x)
168 ( 0.01%) 72 ( 0.01%) 48 ( 0.02%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_algobase.h:std::shared_ptr<ActiveObject>* std::__niter_base<std::shared_ptr<ActiveObject>*>(std::shared_ptr<ActiveObject>*) (24x)
  .           .           .          .          .          .          .          .          .           			    std::__niter_base(__last),
  .           .           .          .          .          .          .          .          .           			    std::__niter_base(__result), __alloc);
 40 ( 0.00%) 32 ( 0.00%)  .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             /// @endcond
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             /// @} group memory
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           _GLIBCXX_END_NAMESPACE_VERSION
  .           .           .          .          .          .          .          .          .           } // namespace
-- line 1057 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/deque.tcc
--------------------------------------------------------------------------------
Ir           Dr          Dw           I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 156 ----------------------------------------
  .           .            .          .          .          .          .          .          .           
  .           .            .          .          .          .          .          .          .             template<typename _Tp, typename _Alloc>
  .           .            .          .          .          .          .          .          .               template<typename... _Args>
  .           .            .          .          .          .          .          .          .           #if __cplusplus > 201402L
  .           .            .          .          .          .          .          .          .                 typename deque<_Tp, _Alloc>::reference
  .           .            .          .          .          .          .          .          .           #else
  .           .            .          .          .          .          .          .          .                 void
  .           .            .          .          .          .          .          .          .           #endif
 24 ( 0.00%)  0           12 ( 0.00%) .          .          .          .          .          .                 deque<_Tp, _Alloc>::
  .           .            .          .          .          .          .          .          .                 emplace_back(_Args&&... __args)
  .           .            .          .          .          .          .          .          .                 {
 16 ( 0.00%)  8 ( 0.00%)   .          .          .          .          .          .          .           	if (this->_M_impl._M_finish._M_cur
 12 ( 0.00%)  8 ( 0.00%)   0          1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	    != this->_M_impl._M_finish._M_last - 1)
  .           .            .          .          .          .          .          .          .           	  {
 40 ( 0.00%) 16 ( 0.00%)   8 ( 0.00%) .          .          .          .          .          .           	    _Alloc_traits::construct(this->_M_impl,
832 ( 0.03%) 256 ( 0.04%) 260 ( 0.09%) 7 ( 0.12%) 0          0          6 ( 0.19%) .          .           => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::construct<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::unique_ptr<std::thread, std::default_delete<std::thread> > >(std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > >&, std::unique_ptr<std::thread, std::default_delete<std::thread> >*, std::unique_ptr<std::thread, std::default_delete<std::thread> >&&) (4x)
 28 ( 0.00%) 12 ( 0.00%)   8 ( 0.00%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/move.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >&& std::forward<std::unique_ptr<std::thread, std::default_delete<std::thread> > >(std::remove_reference<std::unique_ptr<std::thread, std::default_delete<std::thread> > >::type&) (4x)
  .           .            .          .          .          .          .          .          .           				     this->_M_impl._M_finish._M_cur,
  .           .            .          .          .          .          .          .          .           				     std::forward<_Args>(__args)...);
 24 ( 0.00%) 12 ( 0.00%)   4 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	    ++this->_M_impl._M_finish._M_cur;
  .           .            .          .          .          .          .          .          .           	  }
  .           .            .          .          .          .          .          .          .           	else
  .           .            .          .          .          .          .          .          .           	  _M_push_back_aux(std::forward<_Args>(__args)...);
  .           .            .          .          .          .          .          .          .           #if __cplusplus > 201402L
 12 ( 0.00%)  4 ( 0.00%)   4 ( 0.00%) .          .          .          .          .          .           	return back();
360 ( 0.01%) 156 ( 0.02%)  88 ( 0.03%) 8 ( 0.14%) 0          0          8 ( 0.25%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<std::unique_ptr<std::thread, std::default_delete<std::thread> >, std::allocator<std::unique_ptr<std::thread, std::default_delete<std::thread> > > >::back() (4x)
  .           .            .          .          .          .          .          .          .           #endif
  8 ( 0.00%)  8 ( 0.00%)   .          .          .          .          .          .          .                 }
  .           .            .          .          .          .          .          .          .           #endif
  .           .            .          .          .          .          .          .          .           
  .           .            .          .          .          .          .          .          .           #if __cplusplus >= 201103L
  .           .            .          .          .          .          .          .          .             template<typename _Tp, typename _Alloc>
  .           .            .          .          .          .          .          .          .               template<typename... _Args>
  .           .            .          .          .          .          .          .          .                 typename deque<_Tp, _Alloc>::iterator
  .           .            .          .          .          .          .          .          .                 deque<_Tp, _Alloc>::
  .           .            .          .          .          .          .          .          .                 emplace(const_iterator __position, _Args&&... __args)
-- line 188 ----------------------------------------
-- line 851 ----------------------------------------
  .           .            .          .          .          .          .          .          .           			       __new_finish._M_node + 1);
  .           .            .          .          .          .          .          .          .           	      __throw_exception_again;
  .           .            .          .          .          .          .          .          .           	    }
  .           .            .          .          .          .          .          .          .           	}
  .           .            .          .          .          .          .          .          .                 }
  .           .            .          .          .          .          .          .          .           
  .           .            .          .          .          .          .          .          .              template<typename _Tp, typename _Alloc>
  .           .            .          .          .          .          .          .          .                void
180 ( 0.01%)  0          120 ( 0.04%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                deque<_Tp, _Alloc>::
  .           .            .          .          .          .          .          .          .                _M_destroy_data_aux(iterator __first, iterator __last)
  .           .            .          .          .          .          .          .          .                {
100 ( 0.00%) 40 ( 0.01%)  20 ( 0.01%) .          .          .          .          .          .                  for (_Map_pointer __node = __first._M_node + 1;
 80 ( 0.00%) 60 ( 0.01%)   0          3 ( 0.05%) 0          0          3 ( 0.09%) .          .           	    __node < __last._M_node; ++__node)
  .           .            .          .          .          .          .          .          .           	 std::_Destroy(*__node, *__node + _S_buffer_size(),
  .           .            .          .          .          .          .          .          .           		       _M_get_Tp_allocator());
  .           .            .          .          .          .          .          .          .           
120 ( 0.00%) 80 ( 0.01%)   0          1 ( 0.02%) 0          0          1 ( 0.03%) .          .                  if (__first._M_node != __last._M_node)
  .           .            .          .          .          .          .          .          .           	 {
  .           .            .          .          .          .          .          .          .           	   std::_Destroy(__first._M_cur, __first._M_last,
  .           .            .          .          .          .          .          .          .           			 _M_get_Tp_allocator());
  .           .            .          .          .          .          .          .          .           	   std::_Destroy(__last._M_first, __last._M_cur,
  .           .            .          .          .          .          .          .          .           			 _M_get_Tp_allocator());
  .           .            .          .          .          .          .          .          .           	 }
  .           .            .          .          .          .          .          .          .                  else
140 ( 0.00%) 80 ( 0.01%)  20 ( 0.01%) 1 ( 0.02%) .          .          .          .          .           	 std::_Destroy(__first._M_cur, __last._M_cur,
817 ( 0.03%) 228 ( 0.03%) 228 ( 0.08%) 4 ( 0.07%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/alloc_traits.h:void std::_Destroy<std::weak_ptr<Graph>*, std::weak_ptr<Graph> >(std::weak_ptr<Graph>*, std::weak_ptr<Graph>*, std::allocator<std::weak_ptr<Graph> >&) (19x)
 80 ( 0.00%) 20 ( 0.00%)  20 ( 0.01%) 2 ( 0.03%) 0          0          2 ( 0.06%) .          .           		       _M_get_Tp_allocator());
133 ( 0.00%) 57 ( 0.01%)  38 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::_M_get_Tp_allocator() (19x)
120 ( 0.00%) 80 ( 0.01%)   .          .          .          .          .          .          .                }
  .           .            .          .          .          .          .          .          .           
  .           .            .          .          .          .          .          .          .             template <typename _Tp, typename _Alloc>
  .           .            .          .          .          .          .          .          .               void
  .           .            .          .          .          .          .          .          .               deque<_Tp, _Alloc>::
  .           .            .          .          .          .          .          .          .               _M_new_elements_at_front(size_type __new_elems)
  .           .            .          .          .          .          .          .          .               {
  .           .            .          .          .          .          .          .          .                 if (this->max_size() - this->size() < __new_elems)
  .           .            .          .          .          .          .          .          .           	__throw_length_error(__N("deque::_M_new_elements_at_front"));
-- line 885 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_construct.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 138 ----------------------------------------
  .           .           .          .          .          .          .          .          .               _GLIBCXX20_CONSTEXPR void
  .           .           .          .          .          .          .          .          .               _Destroy(_ForwardIterator __first, _ForwardIterator __last);
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             /**
  .           .           .          .          .          .          .          .          .              * Destroy the object pointed to by a pointer type.
  .           .           .          .          .          .          .          .          .              */
  .           .           .          .          .          .          .          .          .             template<typename _Tp>
  .           .           .          .          .          .          .          .          .               _GLIBCXX14_CONSTEXPR inline void
 30 ( 0.00%)  0          12 ( 0.00%) .          .          .          .          .          .               _Destroy(_Tp* __pointer)
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .           #if __cplusplus > 201703L
  .           .           .          .          .          .          .          .          .                 std::destroy_at(__pointer);
  .           .           .          .          .          .          .          .          .           #else
 18 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%) 1 ( 0.02%) .          .          .          .          .                 __pointer->~_Tp();
91,099 ( 3.22%) 25,243 ( 3.65%) 13,336 ( 4.76%) 512 ( 8.66%) 95 ( 0.72%) 10 ( 0.33%) 105 ( 3.24%) 40 ( 0.44%) 1 ( 0.04%)  => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObject>::~shared_ptr() (6x)
  .           .           .          .          .          .          .          .          .           #endif
 18 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             template<bool>
  .           .           .          .          .          .          .          .          .               struct _Destroy_aux
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 template<typename _ForwardIterator>
  .           .           .          .          .          .          .          .          .           	static _GLIBCXX20_CONSTEXPR void
150 ( 0.01%)  0          75 ( 0.03%) 7 ( 0.12%) 0          0          3 ( 0.09%) .          .           	__destroy(_ForwardIterator __first, _ForwardIterator __last)
  .           .           .          .          .          .          .          .          .           	{
124 ( 0.00%) 62 ( 0.01%)  6 ( 0.00%) 7 ( 0.12%) .          .          .          .          .           	  for (; __first != __last; ++__first)
 30 ( 0.00%)  6 ( 0.00%) 12 ( 0.00%) .          .          .          .          .          .           	    std::_Destroy(std::__addressof(*__first));
91,165 ( 3.22%) 25,261 ( 3.66%) 13,354 ( 4.77%) 513 ( 8.68%) 95 ( 0.72%) 10 ( 0.33%) 105 ( 3.24%) 40 ( 0.44%) 1 ( 0.04%)  => /usr/include/c++/11/bits/stl_construct.h:void std::_Destroy<std::shared_ptr<ActiveObject> >(std::shared_ptr<ActiveObject>*) (6x)
 42 ( 0.00%) 18 ( 0.00%) 12 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::shared_ptr<ActiveObject>* std::__addressof<std::shared_ptr<ActiveObject> >(std::shared_ptr<ActiveObject>&) (6x)
100 ( 0.00%) 50 ( 0.01%)  .          .          .          .          .          .          .           	}
  .           .           .          .          .          .          .          .          .               };
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             template<>
  .           .           .          .          .          .          .          .          .               struct _Destroy_aux<true>
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 template<typename _ForwardIterator>
  .           .           .          .          .          .          .          .          .                   static void
  .           .           .          .          .          .          .          .          .                   __destroy(_ForwardIterator, _ForwardIterator) { }
-- line 172 ----------------------------------------
-- line 174 ----------------------------------------
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             /**
  .           .           .          .          .          .          .          .          .              * Destroy a range of objects.  If the value_type of the object has
  .           .           .          .          .          .          .          .          .              * a trivial destructor, the compiler should optimize all of this
  .           .           .          .          .          .          .          .          .              * away, otherwise the objects' destructors must be invoked.
  .           .           .          .          .          .          .          .          .              */
  .           .           .          .          .          .          .          .          .             template<typename _ForwardIterator>
  .           .           .          .          .          .          .          .          .               _GLIBCXX20_CONSTEXPR inline void
150 ( 0.01%)  0          75 ( 0.03%) 4 ( 0.07%) 0          0          1 ( 0.03%) .          .               _Destroy(_ForwardIterator __first, _ForwardIterator __last)
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 typedef typename iterator_traits<_ForwardIterator>::value_type
  .           .           .          .          .          .          .          .          .                                  _Value_type;
  .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
  .           .           .          .          .          .          .          .          .                 // A deleted destructor is trivial, this ensures we reject such types:
  .           .           .          .          .          .          .          .          .                 static_assert(is_destructible<_Value_type>::value,
  .           .           .          .          .          .          .          .          .           		    "value type is destructible");
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           #if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
  .           .           .          .          .          .          .          .          .                 if (std::is_constant_evaluated())
  .           .           .          .          .          .          .          .          .           	return _Destroy_aux<false>::__destroy(__first, __last);
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .                 std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
125 ( 0.00%) 50 ( 0.01%) 25 ( 0.01%) .          .          .          .          .          .           	__destroy(__first, __last);
 14 ( 0.00%)  4 ( 0.00%)  3 ( 0.00%) 2 ( 0.03%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_construct.h:void std::_Destroy_aux<false>::__destroy<std::unique_ptr<std::thread, std::default_delete<std::thread> >*>(std::unique_ptr<std::thread, std::default_delete<std::thread> >*, std::unique_ptr<std::thread, std::default_delete<std::thread> >*) (1x)
 75 ( 0.00%) 50 ( 0.01%)  0          1 ( 0.02%) .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             template<bool>
  .           .           .          .          .          .          .          .          .               struct _Destroy_n_aux
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 template<typename _ForwardIterator, typename _Size>
  .           .           .          .          .          .          .          .          .           	static _GLIBCXX20_CONSTEXPR _ForwardIterator
  .           .           .          .          .          .          .          .          .           	__destroy_n(_ForwardIterator __first, _Size __count)
  .           .           .          .          .          .          .          .          .           	{
-- line 205 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/thread
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 84 ----------------------------------------
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             inline bool
  .           .           .          .          .          .          .          .          .             operator>=(thread::id __x, thread::id __y) noexcept
  .           .           .          .          .          .          .          .          .             { return !(__x < __y); }
  .           .           .          .          .          .          .          .          .           #endif // __cpp_lib_three_way_comparison
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             template<class _CharT, class _Traits>
  .           .           .          .          .          .          .          .          .               inline basic_ostream<_CharT, _Traits>&
108 ( 0.00%) 12 ( 0.00%) 48 ( 0.02%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .               operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id)
  .           .           .          .          .          .          .          .          .               {
120 ( 0.00%) 24 ( 0.00%) 24 ( 0.01%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 if (__id == thread::id())
132 ( 0.00%) 48 ( 0.01%) 36 ( 0.01%) 4 ( 0.07%) .          .          .          .          .           => /usr/include/c++/11/bits/std_thread.h:std::operator==(std::thread::id, std::thread::id) (12x)
108 ( 0.00%) 36 ( 0.01%) 36 ( 0.01%) 5 ( 0.08%) .          .          .          .          .           => /usr/include/c++/11/bits/std_thread.h:std::thread::id::id() (12x)
  .           .           .          .          .          .          .          .          .           	return __out << "thread::id of a non-executing thread";
  .           .           .          .          .          .          .          .          .                 else
 72 ( 0.00%) 24 ( 0.00%) 12 ( 0.00%) 1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	return __out << __id._M_thread;
8,478 ( 0.30%) 1,944 ( 0.28%) 1,054 ( 0.38%) 48 ( 0.81%) 17 ( 0.13%) 20 ( 0.66%) 19 ( 0.59%) 8 ( 0.09%) 20 ( 0.84%)  => ???:0x000000000010c620 (12x)
 60 ( 0.00%) 48 ( 0.01%)  .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #ifdef __cpp_lib_jthread
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             /// A thread that can be requested to stop and automatically joined.
  .           .           .          .          .          .          .          .          .             class jthread
  .           .           .          .          .          .          .          .          .             {
  .           .           .          .          .          .          .          .          .             public:
  .           .           .          .          .          .          .          .          .               using id = thread::id;
-- line 106 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/std_function.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr        D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 77 ----------------------------------------
  .           .           .           .          .          .          .          .          .               void*       _M_object;
  .           .           .           .          .          .          .          .          .               const void* _M_const_object;
  .           .           .           .          .          .          .          .          .               void (*_M_function_pointer)();
  .           .           .           .          .          .          .          .          .               void (_Undefined_class::*_M_member_pointer)();
  .           .           .           .          .          .          .          .          .             };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             union [[gnu::may_alias]] _Any_data
  .           .           .           .          .          .          .          .          .             {
 84 ( 0.00%) 36 ( 0.01%) 24 ( 0.01%)  1 ( 0.02%) .          .          .          .          .               void*       _M_access()       { return &_M_pod_data[0]; }
  .           .           .           .          .          .          .          .          .               const void* _M_access() const { return &_M_pod_data[0]; }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               template<typename _Tp>
  .           .           .           .          .          .          .          .          .                 _Tp&
 24 ( 0.00%)  0          12 ( 0.00%)  6 ( 0.10%) 0          0          6 ( 0.19%) .          .                 _M_access()
 30 ( 0.00%) 18 ( 0.00%)  6 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 { return *static_cast<_Tp*>(_M_access()); }
  7 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::_Any_data::_M_access() (1x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               template<typename _Tp>
  .           .           .           .          .          .          .          .          .                 const _Tp&
  .           .           .           .          .          .          .          .          .                 _M_access() const
  .           .           .           .          .          .          .          .          .                 { return *static_cast<const _Tp*>(_M_access()); }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               _Nocopy_types _M_unused;
  .           .           .           .          .          .          .          .          .               char _M_pod_data[sizeof(_Nocopy_types)];
-- line 99 ----------------------------------------
-- line 142 ----------------------------------------
  .           .           .           .          .          .          .          .          .           	    return __source._M_access<_Functor*>();
  .           .           .           .          .          .          .          .          .           	}
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 private:
  .           .           .           .          .          .          .          .          .           	// Construct a location-invariant function object that fits within
  .           .           .           .          .          .          .          .          .           	// an _Any_data structure.
  .           .           .           .          .          .          .          .          .           	template<typename _Fn>
  .           .           .           .          .          .          .          .          .           	  static void
 36 ( 0.00%)  0          24 ( 0.01%)  7 ( 0.12%) 0          0          7 ( 0.22%) .          .           	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
  .           .           .           .          .          .          .          .          .           	  {
 72 ( 0.00%) 18 ( 0.00%) 24 ( 0.01%)  5 ( 0.08%) 0          0          5 ( 0.15%) .          .           	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
  8 ( 0.00%)  3 ( 0.00%)  3 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/new:operator new(unsigned long, void*) (1x)
  7 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::_Any_data::_M_access() (1x)
  6 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#1}&& std::forward<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#1}>(std::remove_reference<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#1}>::type&) (1x)
 24 ( 0.00%) 18 ( 0.00%)  0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	  }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           	// Construct a function object on the heap and store a pointer.
  .           .           .           .          .          .          .          .          .           	template<typename _Fn>
  .           .           .           .          .          .          .          .          .           	  static void
  .           .           .           .          .          .          .          .          .           	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
  .           .           .           .          .          .          .          .          .           	  {
  .           .           .           .          .          .          .          .          .           	    __dest._M_access<_Functor*>()
  .           .           .           .          .          .          .          .          .           	      = new _Functor(std::forward<_Fn>(__f));
  .           .           .           .          .          .          .          .          .           	  }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           	// Destroy an object stored in the internal buffer.
  .           .           .           .          .          .          .          .          .           	static void
 24 ( 0.00%)  0          12 ( 0.00%)  7 ( 0.12%) 0          0          7 ( 0.22%) .          .           	_M_destroy(_Any_data& __victim, true_type)
  .           .           .           .          .          .          .          .          .           	{
 18 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	  __victim._M_access<_Functor>().~_Functor();
 16 ( 0.00%)  6 ( 0.00%)  5 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_function.h:Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#3}& std::_Any_data::_M_access<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#3}>() (1x)
 18 ( 0.00%) 12 ( 0.00%)  0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	}
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           	// Destroy an object located on the heap.
  .           .           .           .          .          .          .          .          .           	static void
  .           .           .           .          .          .          .          .          .           	_M_destroy(_Any_data& __victim, false_type)
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  delete __victim._M_access<_Functor*>();
  .           .           .           .          .          .          .          .          .           	}
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 public:
  .           .           .           .          .          .          .          .          .           	static bool
 42 ( 0.00%)  0          30 ( 0.01%)  7 ( 0.12%) 0          0          7 ( 0.22%) .          .           	_M_manager(_Any_data& __dest, const _Any_data& __source,
  .           .           .           .          .          .          .          .          .           		   _Manager_operation __op)
  .           .           .           .          .          .          .          .          .           	{
 18 ( 0.00%)  6 ( 0.00%)  0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	  switch (__op)
  .           .           .           .          .          .          .          .          .           	    {
  .           .           .           .          .          .          .          .          .           	    case __get_type_info:
  .           .           .           .          .          .          .          .          .           #if __cpp_rtti
  .           .           .           .          .          .          .          .          .           	      __dest._M_access<const type_info*>() = &typeid(_Functor);
  .           .           .           .          .          .          .          .          .           #else
  .           .           .           .          .          .          .          .          .           	      __dest._M_access<const type_info*>() = nullptr;
  .           .           .           .          .          .          .          .          .           #endif
  .           .           .           .          .          .          .          .          .           	      break;
-- line 191 ----------------------------------------
-- line 195 ----------------------------------------
  .           .           .           .          .          .          .          .          .           	      break;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           	    case __clone_functor:
  .           .           .           .          .          .          .          .          .           	      _M_init_functor(__dest,
  .           .           .           .          .          .          .          .          .           		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
  .           .           .           .          .          .          .          .          .           	      break;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           	    case __destroy_functor:
 18 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  4 ( 0.07%) 0          0          3 ( 0.09%) .          .           	      _M_destroy(__dest, _Local_storage());
 26 ( 0.00%)  9 ( 0.00%)  8 ( 0.00%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_base::_Base_manager<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#3}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>) (1x)
  6 ( 0.00%)  .           .           .          .          .          .          .          .           	      break;
  .           .           .           .          .          .          .          .          .           	    }
  6 ( 0.00%)  0           0           1 ( 0.02%) .          .          .          .          .           	  return false;
 18 ( 0.00%) 18 ( 0.00%)  .           .          .          .          .          .          .           	}
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           	template<typename _Fn>
  .           .           .           .          .          .          .          .          .           	  static void
 30 ( 0.00%)  0          18 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
  .           .           .           .          .          .          .          .          .           	  noexcept(__and_<_Local_storage,
  .           .           .           .          .          .          .          .          .           			  is_nothrow_constructible<_Functor, _Fn>>::value)
  .           .           .           .          .          .          .          .          .           	  {
 48 ( 0.00%) 12 ( 0.00%) 12 ( 0.00%)  3 ( 0.05%) 0          0          3 ( 0.09%) .          .           	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 43 ( 0.00%) 15 ( 0.00%) 15 ( 0.01%)  3 ( 0.05%) 0          0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/std_function.h:void std::_Function_base::_Base_manager<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#3}>::_M_create<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#3}>(std::_Any_data&, Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#3}&&, std::integral_constant<bool, true>) (1x)
  6 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#3}&& std::forward<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#3}>(std::remove_reference<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#3}>::type&) (1x)
 18 ( 0.00%) 12 ( 0.00%)  0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	  }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           	template<typename _Signature>
  .           .           .           .          .          .          .          .          .           	  static bool
  .           .           .           .          .          .          .          .          .           	  _M_not_empty_function(const function<_Signature>& __f)
  .           .           .           .          .          .          .          .          .           	  { return static_cast<bool>(__f); }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           	template<typename _Tp>
  .           .           .           .          .          .          .          .          .           	  static bool
-- line 224 ----------------------------------------
-- line 227 ----------------------------------------
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           	template<typename _Class, typename _Tp>
  .           .           .           .          .          .          .          .          .           	  static bool
  .           .           .           .          .          .          .          .          .           	  _M_not_empty_function(_Tp _Class::* __mp)
  .           .           .           .          .          .          .          .          .           	  { return __mp != nullptr; }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           	template<typename _Tp>
  .           .           .           .          .          .          .          .          .           	  static bool
 18 ( 0.00%)  0          12 ( 0.00%)  6 ( 0.10%) 0          0          6 ( 0.19%) .          .           	  _M_not_empty_function(const _Tp&)
 18 ( 0.00%) 12 ( 0.00%)  0           1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	  { return true; }
  .           .           .           .          .          .          .          .          .                 };
  .           .           .           .          .          .          .          .          .           
216 ( 0.01%) 72 ( 0.01%) 90 ( 0.03%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .               _Function_base() = default;
  .           .           .           .          .          .          .          .          .           
 90 ( 0.00%)  0          36 ( 0.01%)  2 ( 0.03%) 0          0          1 ( 0.03%) .          .               ~_Function_base()
  .           .           .           .          .          .          .          .          .               {
 72 ( 0.00%) 36 ( 0.01%)  .           .          .          .          .          .          .                 if (_M_manager)
 48 ( 0.00%) 24 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .           	_M_manager(_M_functor, _M_functor, __destroy_functor);
 68 ( 0.00%) 21 ( 0.00%) 20 ( 0.01%) 10 ( 0.17%) 0          0          8 ( 0.25%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_handler<void (std::weak_ptr<Graph>), Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation) (1x)
 68 ( 0.00%) 21 ( 0.00%) 20 ( 0.01%)  9 ( 0.15%) 0          0          8 ( 0.25%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_handler<void (std::weak_ptr<Graph>), Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#4}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation) (1x)
 68 ( 0.00%) 21 ( 0.00%) 20 ( 0.01%)  7 ( 0.12%) 0          0          6 ( 0.19%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_handler<void (std::weak_ptr<Graph>), Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#5}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation) (1x)
 68 ( 0.00%) 21 ( 0.00%) 20 ( 0.01%)  7 ( 0.12%) 0          0          6 ( 0.19%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_handler<void (std::weak_ptr<Graph>), Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#2}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation) (1x)
 68 ( 0.00%) 21 ( 0.00%) 20 ( 0.01%)  6 ( 0.10%) 0          0          6 ( 0.19%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_handler<void (std::weak_ptr<Graph>), Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#6}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation) (1x)
 68 ( 0.00%) 21 ( 0.00%) 20 ( 0.01%)  6 ( 0.10%) 0          0          5 ( 0.15%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_handler<void (std::weak_ptr<Graph>), Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#3}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation) (1x)
 54 ( 0.00%) 36 ( 0.01%)  .           .          .          .          .          .          .               }
  .           .           .           .          .          .          .          .          .           
120 ( 0.00%) 48 ( 0.01%) 24 ( 0.01%)  .          .          .          .          .          .               bool _M_empty() const { return !_M_manager; }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               using _Manager_type
  .           .           .           .          .          .          .          .          .                 = bool (*)(_Any_data&, const _Any_data&, _Manager_operation);
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               _Any_data     _M_functor{};
  .           .           .           .          .          .          .          .          .               _Manager_type _M_manager{};
  .           .           .           .          .          .          .          .          .             };
  .           .           .           .          .          .          .          .          .           
-- line 255 ----------------------------------------
-- line 259 ----------------------------------------
  .           .           .           .          .          .          .          .          .             template<typename _Res, typename _Functor, typename... _ArgTypes>
  .           .           .           .          .          .          .          .          .               class _Function_handler<_Res(_ArgTypes...), _Functor>
  .           .           .           .          .          .          .          .          .               : public _Function_base::_Base_manager<_Functor>
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                 using _Base = _Function_base::_Base_manager<_Functor>;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               public:
  .           .           .           .          .          .          .          .          .                 static bool
 48 ( 0.00%)  0          30 ( 0.01%)  7 ( 0.12%) 0          0          7 ( 0.22%) .          .                 _M_manager(_Any_data& __dest, const _Any_data& __source,
  .           .           .           .          .          .          .          .          .           		 _Manager_operation __op)
  .           .           .           .          .          .          .          .          .                 {
 36 ( 0.00%)  6 ( 0.00%)  0           2 ( 0.03%) 0          0          2 ( 0.06%) .          .           	switch (__op)
  .           .           .           .          .          .          .          .          .           	  {
  .           .           .           .          .          .          .          .          .           #if __cpp_rtti
  .           .           .           .          .          .          .          .          .           	  case __get_type_info:
  .           .           .           .          .          .          .          .          .           	    __dest._M_access<const type_info*>() = &typeid(_Functor);
  .           .           .           .          .          .          .          .          .           	    break;
  .           .           .           .          .          .          .          .          .           #endif
  .           .           .           .          .          .          .          .          .           	  case __get_functor_ptr:
  .           .           .           .          .          .          .          .          .           	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
  .           .           .           .          .          .          .          .          .           	    break;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           	  default:
 36 ( 0.00%) 18 ( 0.00%)  6 ( 0.00%)  5 ( 0.08%) 0          0          3 ( 0.09%) .          .           	    _Base::_M_manager(__dest, __source, __op);
 44 ( 0.00%) 14 ( 0.00%) 14 ( 0.01%)  4 ( 0.07%) 0          0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_base::_Base_manager<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#3}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation) (1x)
  .           .           .           .          .          .          .          .          .           	  }
  6 ( 0.00%)  .           .           .          .          .          .          .          .           	return false;
 18 ( 0.00%) 18 ( 0.00%)  0           1 ( 0.02%) .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 static _Res
  .           .           .           .          .          .          .          .          .                 _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .           	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
  .           .           .           .          .          .          .          .          .           				     std::forward<_ArgTypes>(__args)...);
  .           .           .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
-- line 293 ----------------------------------------
-- line 326 ----------------------------------------
  .           .           .           .          .          .          .          .          .               { };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             /**
  .           .           .           .          .          .          .          .          .              *  @brief Polymorphic function wrapper.
  .           .           .           .          .          .          .          .          .              *  @ingroup functors
  .           .           .           .          .          .          .          .          .              *  @since C++11
  .           .           .           .          .          .          .          .          .              */
  .           .           .           .          .          .          .          .          .             template<typename _Res, typename... _ArgTypes>
198 ( 0.01%) 54 ( 0.01%) 54 ( 0.02%) 24 ( 0.41%) .          .          .          .          .               class function<_Res(_ArgTypes...)>
672 ( 0.02%) 222 ( 0.03%) 162 ( 0.06%) 47 ( 0.80%) 0          0          40 ( 1.24%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_base::~_Function_base() (18x)
  .           .           .           .          .          .          .          .          .               : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
  .           .           .           .          .          .          .          .          .                 private _Function_base
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                 // Equivalent to std::decay_t except that it produces an invalid type
  .           .           .           .          .          .          .          .          .                 // if the decayed type is the current specialization of std::function.
  .           .           .           .          .          .          .          .          .                 template<typename _Func,
  .           .           .           .          .          .          .          .          .           	       bool _Self = is_same<__remove_cvref_t<_Func>, function>::value>
  .           .           .           .          .          .          .          .          .           	using _Decay_t
-- line 342 ----------------------------------------
-- line 360 ----------------------------------------
  .           .           .           .          .          .          .          .          .                 typedef _Res result_type;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // [3.7.2.1] construct/copy/destroy
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /**
  .           .           .           .          .          .          .          .          .                  *  @brief Default construct creates an empty function call wrapper.
  .           .           .           .          .          .          .          .          .                  *  @post `!(bool)*this`
  .           .           .           .          .          .          .          .          .                  */
 30 ( 0.00%)  0          12 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 function() noexcept
 72 ( 0.00%) 30 ( 0.00%) 30 ( 0.01%)  1 ( 0.02%) 0          4 ( 0.13%) 1 ( 0.03%) 0          4 ( 0.17%)        : _Function_base() { }
 72 ( 0.00%) 24 ( 0.00%) 30 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_base::_Function_base() (6x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /**
  .           .           .           .          .          .          .          .          .                  *  @brief Creates an empty function call wrapper.
  .           .           .           .          .          .          .          .          .                  *  @post @c !(bool)*this
  .           .           .           .          .          .          .          .          .                  */
  .           .           .           .          .          .          .          .          .                 function(nullptr_t) noexcept
  .           .           .           .          .          .          .          .          .                 : _Function_base() { }
  .           .           .           .          .          .          .          .          .           
-- line 377 ----------------------------------------
-- line 396 ----------------------------------------
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /**
  .           .           .           .          .          .          .          .          .                  *  @brief %Function move constructor.
  .           .           .           .          .          .          .          .          .                  *  @param __x A %function object rvalue with identical call signature.
  .           .           .           .          .          .          .          .          .                  *
  .           .           .           .          .          .          .          .          .                  *  The newly-created %function contains the target of `__x`
  .           .           .           .          .          .          .          .          .                  *  (if it has one).
  .           .           .           .          .          .          .          .          .                  */
 36 ( 0.00%)  0          18 ( 0.01%)  .          .          .          .          .          .                 function(function&& __x) noexcept
 66 ( 0.00%) 30 ( 0.00%) 30 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 : _Function_base(), _M_invoker(__x._M_invoker)
 72 ( 0.00%) 24 ( 0.00%) 30 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_base::_Function_base() (6x)
  .           .           .           .          .          .          .          .          .                 {
 30 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	if (static_cast<bool>(__x))
126 ( 0.00%) 42 ( 0.01%) 30 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::operator bool() const (6x)
  .           .           .           .          .          .          .          .          .           	  {
 36 ( 0.00%) 24 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .           	    _M_functor = __x._M_functor;
 24 ( 0.00%) 18 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .           	    _M_manager = __x._M_manager;
 12 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .           	    __x._M_manager = nullptr;
 12 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	    __x._M_invoker = nullptr;
  .           .           .           .          .          .          .          .          .           	  }
 18 ( 0.00%) 12 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /**
  .           .           .           .          .          .          .          .          .                  *  @brief Builds a %function that targets a copy of the incoming
  .           .           .           .          .          .          .          .          .                  *  function object.
  .           .           .           .          .          .          .          .          .                  *  @param __f A %function object that is callable with parameters of
  .           .           .           .          .          .          .          .          .                  *  type `ArgTypes...` and returns a value convertible to `Res`.
  .           .           .           .          .          .          .          .          .                  *
  .           .           .           .          .          .          .          .          .                  *  The newly-created %function object will target a copy of
-- line 422 ----------------------------------------
-- line 427 ----------------------------------------
  .           .           .           .          .          .          .          .          .                  *
  .           .           .           .          .          .          .          .          .                  *  If `__f` is a non-null function pointer or an object of type
  .           .           .           .          .          .          .          .          .                  *  `reference_wrapper<F>`, this function will not throw.
  .           .           .           .          .          .          .          .          .                  */
  .           .           .           .          .          .          .          .          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .           .           .           .          .          .          .          .          .                 // 2774. std::function construction vs assignment
  .           .           .           .          .          .          .          .          .                 template<typename _Functor,
  .           .           .           .          .          .          .          .          .           	       typename _Constraints = _Requires<_Callable<_Functor>>>
 30 ( 0.00%)  0          18 ( 0.01%)  3 ( 0.05%) 0          0          3 ( 0.09%) .          .           	function(_Functor&& __f)
  .           .           .           .          .          .          .          .          .           	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
 54 ( 0.00%) 18 ( 0.00%) 30 ( 0.01%)  5 ( 0.08%) 0          0          5 ( 0.15%) .          .           	: _Function_base()
 12 ( 0.00%)  4 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_base::_Function_base() (1x)
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  static_assert(is_copy_constructible<__decay_t<_Functor>>::value,
  .           .           .           .          .          .          .          .          .           	      "std::function target must be copy-constructible");
  .           .           .           .          .          .          .          .          .           	  static_assert(is_constructible<__decay_t<_Functor>, _Functor>::value,
  .           .           .           .          .          .          .          .          .           	      "std::function target must be constructible from the "
  .           .           .           .          .          .          .          .          .           	      "constructor argument");
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           	  using _My_handler = _Handler<_Functor>;
  .           .           .           .          .          .          .          .          .           
 30 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .           	  if (_My_handler::_M_not_empty_function(__f))
  6 ( 0.00%)  2 ( 0.00%)  2 ( 0.00%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/std_function.h:bool std::_Function_base::_Base_manager<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#4}>::_M_not_empty_function<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#4}>(Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#4} const&) (1x)
  .           .           .           .          .          .          .          .          .           	    {
 48 ( 0.00%) 12 ( 0.00%) 12 ( 0.00%)  3 ( 0.05%) 0          0          3 ( 0.09%) .          .           	      _My_handler::_M_init_functor(_M_functor,
 65 ( 0.00%) 22 ( 0.00%) 22 ( 0.01%)  3 ( 0.05%) 0          0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/std_function.h:void std::_Function_base::_Base_manager<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#4}>::_M_init_functor<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#4}>(std::_Any_data&, Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#4}&&) (1x)
  6 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#4}&& std::forward<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#4}>(std::remove_reference<Pipeline::setTaskHandler()::{lambda(std::weak_ptr<Graph>)#4}>::type&) (1x)
  .           .           .           .          .          .          .          .          .           					   std::forward<_Functor>(__f));
 18 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .           	      _M_invoker = &_My_handler::_M_invoke;
 18 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	      _M_manager = &_My_handler::_M_manager;
  .           .           .           .          .          .          .          .          .           	    }
 18 ( 0.00%) 12 ( 0.00%)  .           .          .          .          .          .          .           	}
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /**
  .           .           .           .          .          .          .          .          .                  *  @brief %Function assignment operator.
  .           .           .           .          .          .          .          .          .                  *  @param __x A %function with identical call signature.
  .           .           .           .          .          .          .          .          .                  *  @post @c (bool)*this == (bool)x
  .           .           .           .          .          .          .          .          .                  *  @returns @c *this
  .           .           .           .          .          .          .          .          .                  *
  .           .           .           .          .          .          .          .          .                  *  The target of @a __x is copied to @c *this. If @a __x has no
-- line 462 ----------------------------------------
-- line 479 ----------------------------------------
  .           .           .           .          .          .          .          .          .                  *
  .           .           .           .          .          .          .          .          .                  *  The target of @a __x is moved to @c *this. If @a __x has no
  .           .           .           .          .          .          .          .          .                  *  target, then @c *this will be empty.
  .           .           .           .          .          .          .          .          .                  *
  .           .           .           .          .          .          .          .          .                  *  If @a __x targets a function pointer or a reference to a function
  .           .           .           .          .          .          .          .          .                  *  object, then this operation will not throw an %exception.
  .           .           .           .          .          .          .          .          .                  */
  .           .           .           .          .          .          .          .          .                 function&
 54 ( 0.00%)  6 ( 0.00%) 24 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .                 operator=(function&& __x) noexcept
  .           .           .           .          .          .          .          .          .                 {
 96 ( 0.00%) 12 ( 0.00%) 24 ( 0.01%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	function(std::move(__x)).swap(*this);
1,158 ( 0.04%) 444 ( 0.06%) 342 ( 0.12%)  8 ( 0.14%) 1 ( 0.01%) 0          8 ( 0.25%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::swap(std::function<void (std::weak_ptr<Graph>)>&) (6x)
432 ( 0.02%) 168 ( 0.02%) 144 ( 0.05%)  3 ( 0.05%) 0          0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::function(std::function<void (std::weak_ptr<Graph>)>&&) (6x)
138 ( 0.00%) 42 ( 0.01%) 30 ( 0.01%) 13 ( 0.22%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<void (std::weak_ptr<Graph>)>::~function() (6x)
 42 ( 0.00%) 18 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::function<void (std::weak_ptr<Graph>)>&>::type&& std::move<std::function<void (std::weak_ptr<Graph>)>&>(std::function<void (std::weak_ptr<Graph>)>&) (6x)
  6 ( 0.00%)  6 ( 0.00%)  .           .          .          .          .          .          .           	return *this;
 30 ( 0.00%) 24 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /**
  .           .           .           .          .          .          .          .          .                  *  @brief %Function assignment to zero.
  .           .           .           .          .          .          .          .          .                  *  @post @c !(bool)*this
  .           .           .           .          .          .          .          .          .                  *  @returns @c *this
  .           .           .           .          .          .          .          .          .                  *
  .           .           .           .          .          .          .          .          .                  *  The target of @c *this is deallocated, leaving it empty.
  .           .           .           .          .          .          .          .          .                  */
-- line 499 ----------------------------------------
-- line 547 ----------------------------------------
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /**
  .           .           .           .          .          .          .          .          .                  *  @brief Swap the targets of two %function objects.
  .           .           .           .          .          .          .          .          .                  *  @param __x A %function with identical call signature.
  .           .           .           .          .          .          .          .          .                  *
  .           .           .           .          .          .          .          .          .                  *  Swap the targets of @c this function object and @a __f. This
  .           .           .           .          .          .          .          .          .                  *  function will not throw an %exception.
  .           .           .           .          .          .          .          .          .                  */
 36 ( 0.00%)  0          18 ( 0.01%)  .          .          .          .          .          .                 void swap(function& __x) noexcept
  .           .           .           .          .          .          .          .          .                 {
 30 ( 0.00%) 12 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .           	std::swap(_M_functor, __x._M_functor);
354 ( 0.01%) 144 ( 0.02%) 114 ( 0.04%)  2 ( 0.03%) 1 ( 0.01%) 0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/move.h:std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&) (6x)
 42 ( 0.00%) 12 ( 0.00%)  6 ( 0.00%)  1 ( 0.02%) 0          0          1 ( 0.03%) .          .           	std::swap(_M_manager, __x._M_manager);
318 ( 0.01%) 126 ( 0.02%) 96 ( 0.03%)  3 ( 0.05%) 0          0          3 ( 0.09%) .          .           => /usr/include/c++/11/bits/move.h:std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)) (6x)
 42 ( 0.00%) 12 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .           	std::swap(_M_invoker, __x._M_invoker);
318 ( 0.01%) 126 ( 0.02%) 96 ( 0.03%)  2 ( 0.03%) 0          0          2 ( 0.06%) .          .           => /usr/include/c++/11/bits/move.h:std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&, std::weak_ptr<Graph>&&)> >, std::is_move_constructible<void (*)(std::_Any_data const&, std::weak_ptr<Graph>&&)>, std::is_move_assignable<void (*)(std::_Any_data const&, std::weak_ptr<Graph>&&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&, std::weak_ptr<Graph>&&)>(void (*&)(std::_Any_data const&, std::weak_ptr<Graph>&&), void (*&)(std::_Any_data const&, std::weak_ptr<Graph>&&)) (6x)
 18 ( 0.00%) 12 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // [3.7.2.3] function capacity
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /**
  .           .           .           .          .          .          .          .          .                  *  @brief Determine if the %function wrapper has a target.
  .           .           .           .          .          .          .          .          .                  *
  .           .           .           .          .          .          .          .          .                  *  @return @c true when this %function object contains a target,
  .           .           .           .          .          .          .          .          .                  *  or @c false when it is empty.
  .           .           .           .          .          .          .          .          .                  *
  .           .           .           .          .          .          .          .          .                  *  This function will not throw an %exception.
  .           .           .           .          .          .          .          .          .                  */
 60 ( 0.00%)  0          24 ( 0.01%)  .          .          .          .          .          .                 explicit operator bool() const noexcept
 72 ( 0.00%) 36 ( 0.01%) 12 ( 0.00%)  .          .          .          .          .          .                 { return !_M_empty(); }
120 ( 0.00%) 48 ( 0.01%) 24 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_base::_M_empty() const (12x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // [3.7.2.4] function invocation
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /**
  .           .           .           .          .          .          .          .          .                  *  @brief Invokes the function targeted by @c *this.
  .           .           .           .          .          .          .          .          .                  *  @returns the result of the target.
  .           .           .           .          .          .          .          .          .                  *  @throws bad_function_call when @c !(bool)*this
  .           .           .           .          .          .          .          .          .                  *
-- line 581 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./csu/../csu/libc-start.c
  ./ctype/./ctype/ctype-info.c
  ./elf/../bits/stdlib-bsearch.h
  ./elf/../elf/dl-sysdep.c
  ./elf/../elf/dl-tls.c
  ./elf/../include/rtld-malloc.h
  ./elf/../sysdeps/generic/dl-protected.h
  ./elf/../sysdeps/generic/ldsodefs.h
  ./elf/../sysdeps/nptl/dl-tls_init_tp.c
  ./elf/../sysdeps/posix/dl-fileid.h
  ./elf/../sysdeps/x86/cpu-features.c
  ./elf/../sysdeps/x86/dl-cacheinfo.h
  ./elf/../sysdeps/x86/dl-prop.h
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/../sysdeps/x86_64/dl-trampoline.h
  ./elf/./dl-find_object.h
  ./elf/./dl-load.h
  ./elf/./dl-map-segments.h
  ./elf/./elf/dl-cache.c
  ./elf/./elf/dl-deps.c
  ./elf/./elf/dl-environ.c
  ./elf/./elf/dl-error-skeleton.c
  ./elf/./elf/dl-find_object.c
  ./elf/./elf/dl-fini.c
  ./elf/./elf/dl-hwcaps.c
  ./elf/./elf/dl-hwcaps_split.c
  ./elf/./elf/dl-init.c
  ./elf/./elf/dl-load.c
  ./elf/./elf/dl-lookup-direct.c
  ./elf/./elf/dl-lookup.c
  ./elf/./elf/dl-minimal-malloc.c
  ./elf/./elf/dl-minimal.c
  ./elf/./elf/dl-misc.c
  ./elf/./elf/dl-object.c
  ./elf/./elf/dl-profstub.c
  ./elf/./elf/dl-reloc.c
  ./elf/./elf/dl-runtime.c
  ./elf/./elf/dl-setup_hash.c
  ./elf/./elf/dl-sort-maps.c
  ./elf/./elf/dl-tunables.c
  ./elf/./elf/dl-tunables.h
  ./elf/./elf/dl-version.c
  ./elf/./elf/do-rel.h
  ./elf/./elf/get-dynamic-info.h
  ./elf/./elf/rtld.c
  ./elf/./get-dynamic-info.h
  ./iconv/./iconv/gconv_simple.c
  ./io/../sysdeps/unix/sysv/linux/fstatat64.c
  ./io/../sysdeps/unix/sysv/linux/open64_nocancel.c
  ./io/../sysdeps/unix/sysv/linux/write.c
  ./libio/./libio/fileops.c
  ./libio/./libio/genops.c
  ./libio/./libio/getc.c
  ./libio/./libio/iofflush.c
  ./libio/./libio/iofwrite.c
  ./libio/./libio/ioungetc.c
  ./libio/./libio/libioP.h
  ./libio/./libio/putc.c
  ./malloc/./malloc/arena.c
  ./malloc/./malloc/malloc.c
  ./misc/../sysdeps/unix/syscall-template.S
  ./misc/../sysdeps/unix/sysv/linux/clone-internal.c
  ./misc/../sysdeps/unix/sysv/linux/getpagesize.c
  ./misc/../sysdeps/unix/sysv/linux/mmap64.c
  ./misc/../sysdeps/unix/sysv/linux/select.c
  ./misc/../sysdeps/unix/sysv/linux/x86_64/clone.S
  ./misc/../sysdeps/unix/sysv/linux/x86_64/clone3.S
  ./nptl/../nptl/pthread_mutex_lock.c
  ./nptl/../sysdeps/nptl/futex-internal.h
  ./nptl/../sysdeps/unix/sysv/linux/internal-signals.h
  ./nptl/./nptl/allocatestack.c
  ./nptl/./nptl/cancellation.c
  ./nptl/./nptl/cleanup_compat.c
  ./nptl/./nptl/futex-internal.c
  ./nptl/./nptl/lowlevellock.c
  ./nptl/./nptl/nptl-stack.c
  ./nptl/./nptl/nptl_free_tcb.c
  ./nptl/./nptl/pthread_attr_copy.c
  ./nptl/./nptl/pthread_cond_broadcast.c
  ./nptl/./nptl/pthread_cond_common.c
  ./nptl/./nptl/pthread_cond_destroy.c
  ./nptl/./nptl/pthread_cond_wait.c
  ./nptl/./nptl/pthread_create.c
  ./nptl/./nptl/pthread_getattr_default_np.c
  ./nptl/./nptl/pthread_join_common.c
  ./nptl/./nptl/pthread_mutex_lock.c
  ./nptl/./nptl/pthread_mutex_unlock.c
  ./resolv/./resolv/res-close.c
  ./resolv/./resolv/resolv_context.c
  ./setjmp/../sysdeps/x86_64/setjmp.S
  ./stdlib/./stdlib/cxa_atexit.c
  ./stdlib/./stdlib/cxa_finalize.c
  ./stdlib/./stdlib/cxa_thread_atexit_impl.c
  ./stdlib/./stdlib/exit.c
  ./string/../sysdeps/x86_64/multiarch/../strchr.S
  ./string/../sysdeps/x86_64/multiarch/memcmp-sse4.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strlen-vec.S
  ./string/../sysdeps/x86_64/strcmp.S
  ./string/../sysdeps/x86_64/strcspn.S
  ./sunrpc/./sunrpc/rpc_thread.c
  ./wcsmbs/./wcsmbs/btowc.c
  ./wcsmbs/./wcsmbs/wctob.c
  ./wcsmbs/./wcsmbsload.h
  ./wctype/./wctype/wctype_l.c

--------------------------------------------------------------------------------
Ir              Dr              Dw              I1mr           D1mr        D1mw        ILmr         DLmr       DLmw        
--------------------------------------------------------------------------------
83,838 ( 2.96%) 27,013 ( 3.91%) 23,292 ( 8.32%) 1,488 (25.18%) 57 ( 0.43%) 97 ( 3.20%) 774 (23.91%) 4 ( 0.04%) 92 ( 3.84%)  events annotated

