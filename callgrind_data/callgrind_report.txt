--------------------------------------------------------------------------------
Profile data file 'callgrind.out.24980' (creator: callgrind-3.18.1)
--------------------------------------------------------------------------------
I1 cache: 65536 B, 64 B, 2-way associative
D1 cache: 65536 B, 64 B, 2-way associative
LL cache: 262144 B, 64 B, 8-way associative
Timerange: Basic block 0 - 402438325
Trigger: Program termination
Profiled target:  ./graph (PID 24980, part 1)
Events recorded:  Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Events shown:     Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Event sort order: Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Thresholds:       99 0 0 0 0 0 0 0 0
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     Dr                   Dw                   I1mr           D1mr            D1mw           ILmr           DLmr           DLmw           
--------------------------------------------------------------------------------
2,428,063,892 (100.0%) 724,241,601 (100.0%) 451,399,071 (100.0%) 8,910 (100.0%) 13,308 (100.0%) 3,388 (100.0%) 4,380 (100.0%) 9,098 (100.0%) 2,740 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   Dr                   Dw                   I1mr         D1mr           D1mw           ILmr         DLmr           DLmw            file:function
--------------------------------------------------------------------------------
955,750,995 (39.36%) 303,696,572 (41.93%) 200,975,691 (44.52%)  36 ( 0.40%)     0              0           19 ( 0.43%)     .              .           Server.cpp:Server::handleConnections() [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
410,883,561 (16.92%)  75,924,131 (10.48%)  62,525,762 (13.85%)  61 ( 0.68%)     0              0            7 ( 0.16%)     .              .           ./misc/../sysdeps/unix/sysv/linux/select.c:select [/usr/lib/x86_64-linux-gnu/libc.so.6]
174,178,894 ( 7.17%)  62,525,758 ( 8.63%)  40,195,129 ( 8.90%)  22 ( 0.25%)     1 ( 0.01%)     0            6 ( 0.14%)     .              .           ???:std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
133,983,750 ( 5.52%)  26,796,750 ( 3.70%)  22,330,625 ( 4.95%)   3 ( 0.03%)     0              0            2 ( 0.05%)     .              .           ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
 98,254,764 ( 4.05%)  31,262,880 ( 4.32%)  22,330,627 ( 4.95%)  43 ( 0.48%)     0              0            3 ( 0.07%)     .              .           ???:std::istream::sentry::sentry(std::istream&, bool) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
 89,322,500 ( 3.68%)  35,729,000 ( 4.93%)  13,398,375 ( 2.97%)  46 ( 0.52%)     2 ( 0.02%)     0            2 ( 0.05%)     2 ( 0.02%)     .           ???:std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
 75,932,210 ( 3.13%)   8,933,352 ( 1.23%)           0          100 ( 1.12%)    50 ( 0.38%)     0            6 ( 0.14%)    48 ( 0.53%)     .           ./string/../sysdeps/x86_64/multiarch/strlen-vec.S:__strlen_sse2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
 66,991,875 ( 2.76%)  17,864,500 ( 2.47%)  17,864,500 ( 3.96%)   2 ( 0.02%)     0              0            1 ( 0.02%)     .              .           /usr/include/c++/11/bits/basic_string.h:bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
 62,525,743 ( 2.58%)  26,796,747 ( 3.70%)   8,932,249 ( 1.98%)   5 ( 0.06%)     0              0            1 ( 0.02%)     .              .           ???:std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
 58,061,640 ( 2.39%)  22,331,400 ( 3.08%)   4,466,280 ( 0.99%)  54 ( 0.61%)    10 ( 0.08%)     0            2 ( 0.05%)     3 ( 0.03%)     .           ./nptl/./nptl/cancellation.c:__pthread_enable_asynccancel [/usr/lib/x86_64-linux-gnu/libc.so.6]
 44,661,750 ( 1.84%)  17,864,700 ( 2.47%)  13,398,525 ( 2.97%)   1 ( 0.01%)     0              6 ( 0.18%)   0              0              6 ( 0.22%)  /usr/include/c++/11/bits/atomic_base.h:std::operator&(std::memory_order, std::__memory_order_modifier) [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
 44,661,700 ( 1.84%)  13,398,510 ( 1.85%)  17,864,680 ( 3.96%)  11 ( 0.12%)     0              0            1 ( 0.02%)     .              .           /usr/include/c++/11/atomic:std::atomic<bool>::operator bool() const [/home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/graph]
 40,195,530 ( 1.66%)  13,398,510 ( 1.85%)   8,932,340 ( 1.98%)   8 ( 0.09%)     1 ( 0.01%)     4 ( 0.12%)   0              0              4 ( 0.15%)  /usr/include/c++/11/bits/atomic_base.h:std::atomic<bool>::operator bool() const
 26,797,683 ( 1.10%)   8,932,469 ( 1.23%)           0            9 ( 0.10%)     0              0            2 ( 0.05%)     .              .           ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
 26,797,614 ( 1.10%)   8,932,538 ( 1.23%)   4,466,269 ( 0.99%)   6 ( 0.07%)     7 ( 0.05%)     7 ( 0.21%)   1 ( 0.02%)     1 ( 0.01%)     2 ( 0.07%)  ./nptl/./nptl/cancellation.c:__pthread_disable_asynccancel [/usr/lib/x86_64-linux-gnu/libc.so.6]
 26,796,750 ( 1.10%)   4,466,125 ( 0.62%)  13,398,375 ( 2.97%)  14 ( 0.16%)     0              0            1 ( 0.02%)     .              .           ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
 17,864,503 ( 0.74%)   8,932,251 ( 1.23%)           2 ( 0.00%)   2 ( 0.02%)     .              .            .              .              .           ???:0x00000000048f9d10 [???]
  8,932,691 ( 0.37%)   4,466,345 ( 0.62%)           2 ( 0.00%)   3 ( 0.03%)     1 ( 0.01%)     0            2 ( 0.05%)     .              .           ???:0x00000000048f7bb0 [???]
  8,932,538 ( 0.37%)   4,466,269 ( 0.62%)           0            1 ( 0.01%)     1 ( 0.01%)     0            1 ( 0.02%)     1 ( 0.01%)     .           ???:0x000000000010c780 [???]
  8,932,255 ( 0.37%)   4,466,127 ( 0.62%)           2 ( 0.00%)   4 ( 0.04%)     1 ( 0.01%)     0            2 ( 0.05%)     .              .           ???:0x00000000048f6870 [???]
  8,932,255 ( 0.37%)   4,466,127 ( 0.62%)           2 ( 0.00%)   2 ( 0.02%)     1 ( 0.01%)     0            2 ( 0.05%)     .              .           ???:0x00000000048f9990 [???]
  8,932,252 ( 0.37%)   4,466,126 ( 0.62%)           .            .              .              .            .              .              .           ???:0x000000000010c890 [???]
  8,932,250 ( 0.37%)   4,466,125 ( 0.62%)           0           18 ( 0.20%)     1 ( 0.01%)     .            .              .              .           ???:0x000000000010c9c0 [???]

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/atomic_base.h
--------------------------------------------------------------------------------
Ir                  Dr                 Dw                  I1mr       D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 97 ----------------------------------------
         .                  .                   .          .          .          .          .          .          .             constexpr memory_order
         .                  .                   .          .          .          .          .          .          .             operator|(memory_order __m, __memory_order_modifier __mod)
         .                  .                   .          .          .          .          .          .          .             {
         .                  .                   .          .          .          .          .          .          .               return memory_order(int(__m) | int(__mod));
         .                  .                   .          .          .          .          .          .          .             }
         .                  .                   .          .          .          .          .          .          .           
         .                  .                   .          .          .          .          .          .          .             constexpr memory_order
         .                  .                   .          .          .          .          .          .          .             operator&(memory_order __m, __memory_order_modifier __mod)
22,330,875 ( 0.92%)         0          13,398,525 ( 2.97%) 1 ( 0.01%) 0          6 ( 0.18%) 0          0          6 ( 0.22%)    {
13,398,525 ( 0.55%) 8,932,350 ( 1.23%)          .          .          .          .          .          .          .               return memory_order(int(__m) & int(__mod));
 8,932,350 ( 0.37%) 8,932,350 ( 1.23%)          .          .          .          .          .          .          .             }
         .                  .                   .          .          .          .          .          .          .           
         .                  .                   .          .          .          .          .          .          .             // Drop release ordering as per [atomics.types.operations.req]/21
         .                  .                   .          .          .          .          .          .          .             constexpr memory_order
         .                  .                   .          .          .          .          .          .          .             __cmpexch_failure_order2(memory_order __m) noexcept
         .                  .                   .          .          .          .          .          .          .             {
         .                  .                   .          .          .          .          .          .          .               return __m == memory_order_acq_rel ? memory_order_acquire
         .                  .                   .          .          .          .          .          .          .                 : __m == memory_order_release ? memory_order_relaxed : __m;
         .                  .                   .          .          .          .          .          .          .             }
-- line 115 ----------------------------------------
-- line 337 ----------------------------------------
         .                  .                   .          .          .          .          .          .          .               public:
         .                  .                   .          .          .          .          .          .          .                 __atomic_base() noexcept = default;
         .                  .                   .          .          .          .          .          .          .                 ~__atomic_base() noexcept = default;
         .                  .                   .          .          .          .          .          .          .                 __atomic_base(const __atomic_base&) = delete;
         .                  .                   .          .          .          .          .          .          .                 __atomic_base& operator=(const __atomic_base&) = delete;
         .                  .                   .          .          .          .          .          .          .                 __atomic_base& operator=(const __atomic_base&) volatile = delete;
         .                  .                   .          .          .          .          .          .          .           
         .                  .                   .          .          .          .          .          .          .                 // Requires __int_type convertible to _M_i.
       107 ( 0.00%)        36 ( 0.00%)         36 ( 0.00%) .          .          .          .          .          .                 constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
         .                  .                   .          .          .          .          .          .          .           
         .                  .                   .          .          .          .          .          .          .                 operator __int_type() const noexcept
         .                  .                   .          .          .          .          .          .          .                 { return load(); }
         .                  .                   .          .          .          .          .          .          .           
         .                  .                   .          .          .          .          .          .          .                 operator __int_type() const volatile noexcept
         .                  .                   .          .          .          .          .          .          .                 { return load(); }
         .                  .                   .          .          .          .          .          .          .           
         .                  .                   .          .          .          .          .          .          .                 __int_type
-- line 353 ----------------------------------------
-- line 476 ----------------------------------------
         .                  .                   .          .          .          .          .          .          .           
         .                  .                   .          .          .          .          .          .          .           	__atomic_store_n(&_M_i, __i, int(__m));
         .                  .                   .          .          .          .          .          .          .                 }
         .                  .                   .          .          .          .          .          .          .           
         .                  .                   .          .          .          .          .          .          .                 _GLIBCXX_ALWAYS_INLINE __int_type
         .                  .                   .          .          .          .          .          .          .                 load(memory_order __m = memory_order_seq_cst) const noexcept
         .                  .                   .          .          .          .          .          .          .                 {
         .                  .                   .          .          .          .          .          .          .           	memory_order __b __attribute__ ((__unused__))
22,330,875 ( 0.92%) 4,466,175 ( 0.62%)  8,932,350 ( 1.98%) 0          0          4 ( 0.12%) 0          0          4 ( 0.15%)  	  = __m & __memory_order_mask;
44,661,700 ( 1.84%) 17,864,680 ( 2.47%) 13,398,510 ( 2.97%) 1 ( 0.01%) 0          6 ( 0.18%) 0          0          6 ( 0.22%)  => /usr/include/c++/11/bits/atomic_base.h:std::operator&(std::memory_order, std::__memory_order_modifier) (4,466,170x)
         .                  .                   .          .          .          .          .          .          .           	__glibcxx_assert(__b != memory_order_release);
         .                  .                   .          .          .          .          .          .          .           	__glibcxx_assert(__b != memory_order_acq_rel);
         .                  .                   .          .          .          .          .          .          .           
17,864,690 ( 0.74%) 8,932,350 ( 1.23%)          0          8 ( 0.09%) 1 ( 0.01%) .          .          .          .           	return __atomic_load_n(&_M_i, int(__m));
         .                  .                   .          .          .          .          .          .          .                 }
         .                  .                   .          .          .          .          .          .          .           
         .                  .                   .          .          .          .          .          .          .                 _GLIBCXX_ALWAYS_INLINE __int_type
         .                  .                   .          .          .          .          .          .          .                 load(memory_order __m = memory_order_seq_cst) const volatile noexcept
         .                  .                   .          .          .          .          .          .          .                 {
         .                  .                   .          .          .          .          .          .          .           	memory_order __b __attribute__ ((__unused__))
         .                  .                   .          .          .          .          .          .          .           	  = __m & __memory_order_mask;
         .                  .                   .          .          .          .          .          .          .           	__glibcxx_assert(__b != memory_order_release);
-- line 496 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/basic_string.h
--------------------------------------------------------------------------------
Ir                  Dr                  Dw                  I1mr        D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 243 ----------------------------------------
         .                   .                   .           .          .          .          .          .          .                 void
         .                   .                   .           .          .          .          .          .          .                 _M_destroy(size_type __size) throw()
         .                   .                   .           .          .          .          .          .          .                 { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .                 // _M_construct_aux is used to implement the 21.3.1 para 15 which
         .                   .                   .           .          .          .          .          .          .                 // requires special behaviour if _InIterator is an integral type
         .                   .                   .           .          .          .          .          .          .                 template<typename _InIterator>
         .                   .                   .           .          .          .          .          .          .                   void
        40 ( 0.00%)          4 ( 0.00%)         20 ( 0.00%)  3 ( 0.03%) 0          0          1 ( 0.02%) .          .                   _M_construct_aux(_InIterator __beg, _InIterator __end,
         .                   .                   .           .          .          .          .          .          .           			 std::__false_type)
         .                   .                   .           .          .          .          .          .          .           	{
         .                   .                   .           .          .          .          .          .          .                     typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
        24 ( 0.00%)         12 ( 0.00%)          4 ( 0.00%)  .          .          .          .          .          .                     _M_construct(__beg, __end, _Tag());
       488 ( 0.00%)        156 ( 0.00%)        112 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/basic_string.tcc:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) (4x)
        24 ( 0.00%)         16 ( 0.00%)          0           3 ( 0.03%) .          .          .          .          .           	}
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .                   .                   .           .          .          .          .          .          .                 // 438. Ambiguity in the "do the right thing" clause
         .                   .                   .           .          .          .          .          .          .                 template<typename _Integer>
         .                   .                   .           .          .          .          .          .          .                   void
         .                   .                   .           .          .          .          .          .          .                   _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
         .                   .                   .           .          .          .          .          .          .           	{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .                 void
         .                   .                   .           .          .          .          .          .          .                 _M_construct_aux_2(size_type __req, _CharT __c)
         .                   .                   .           .          .          .          .          .          .                 { _M_construct(__req, __c); }
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .                 template<typename _InIterator>
         .                   .                   .           .          .          .          .          .          .                   void
        28 ( 0.00%)          0                  16 ( 0.00%)  1 ( 0.01%) .          .          .          .          .                   _M_construct(_InIterator __beg, _InIterator __end)
         .                   .                   .           .          .          .          .          .          .           	{
         .                   .                   .           .          .          .          .          .          .           	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
        24 ( 0.00%)         12 ( 0.00%)          4 ( 0.00%)  .          .          .          .          .          .           	  _M_construct_aux(__beg, __end, _Integral());
       576 ( 0.00%)        188 ( 0.00%)        136 ( 0.00%)  6 ( 0.07%) 0          0          1 ( 0.02%) .          .           => /usr/include/c++/11/bits/basic_string.h:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*>(char*, char*, std::__false_type) (4x)
        12 ( 0.00%)          8 ( 0.00%)          .           .          .          .          .          .          .                   }
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .                 // For Input Iterators, used in istreambuf_iterators, etc.
         .                   .                   .           .          .          .          .          .          .                 template<typename _InIterator>
         .                   .                   .           .          .          .          .          .          .                   void
         .                   .                   .           .          .          .          .          .          .                   _M_construct(_InIterator __beg, _InIterator __end,
         .                   .                   .           .          .          .          .          .          .           		     std::input_iterator_tag);
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .                 // For forward_iterators up to random_access_iterators, used for
-- line 283 ----------------------------------------
-- line 525 ----------------------------------------
         .                   .                   .           .          .          .          .          .          .                  *  @param  __s  Source C string.
         .                   .                   .           .          .          .          .          .          .                  *  @param  __a  Allocator to use (default is default allocator).
         .                   .                   .           .          .          .          .          .          .                  */
         .                   .                   .           .          .          .          .          .          .           #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
         .                   .                   .           .          .          .          .          .          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .                   .                   .           .          .          .          .          .          .                 // 3076. basic_string CTAD ambiguity
         .                   .                   .           .          .          .          .          .          .                 template<typename = _RequireAllocator<_Alloc>>
         .                   .                   .           .          .          .          .          .          .           #endif
       605 ( 0.00%)         55 ( 0.00%)        330 ( 0.00%)  4 ( 0.04%) 0          1 ( 0.03%) 1 ( 0.02%) 0          1 ( 0.04%)        basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
       550 ( 0.00%)        165 ( 0.00%)        110 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                 : _M_dataplus(_M_local_data(), __a)
       275 ( 0.00%)        110 ( 0.00%)         55 ( 0.00%)  1 ( 0.01%) 0          1 ( 0.03%) 1 ( 0.02%) .          .           => ???:0x000000000010c8f0 (55x)
       275 ( 0.00%)        110 ( 0.00%)          0           2 ( 0.02%) 0          0          1 ( 0.02%) .          .           => ???:0x000000000010c820 (55x)
         .                   .                   .           .          .          .          .          .          .                 {
       495 ( 0.00%)        165 ( 0.00%)        110 ( 0.00%)  .          .          .          .          .          .           	const _CharT* __end = __s ? __s + traits_type::length(__s)
     2,539 ( 0.00%)        511 ( 0.00%)        220 ( 0.00%) 15 ( 0.17%) 13 ( 0.10%) 3 ( 0.09%) 4 ( 0.09%) 11 ( 0.12%) 2 ( 0.07%)  => /usr/include/c++/11/bits/char_traits.h:std::char_traits<char>::length(char const*) (55x)
         .                   .                   .           .          .          .          .          .          .           	  // We just need a non-null pointer here to get an exception:
         .                   .                   .           .          .          .          .          .          .           	  : reinterpret_cast<const _CharT*>(__alignof__(_CharT));
       330 ( 0.00%)        165 ( 0.00%)         55 ( 0.00%)  4 ( 0.04%) 0          0          1 ( 0.02%) .          .           	_M_construct(__s, __end, random_access_iterator_tag());
    13,074 ( 0.00%)      3,541 ( 0.00%)      2,534 ( 0.00%) 128 ( 1.44%) 37 ( 0.28%) 73 ( 2.15%) 52 ( 1.19%) 21 ( 0.23%) 72 ( 2.63%)  => /usr/include/c++/11/bits/basic_string.tcc:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) (55x)
       385 ( 0.00%)        275 ( 0.00%)          0           1 ( 0.01%) 0          0          1 ( 0.02%) .          .                 }
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .                 /**
         .                   .                   .           .          .          .          .          .          .                  *  @brief  Construct string as multiple characters.
         .                   .                   .           .          .          .          .          .          .                  *  @param  __n  Number of characters.
         .                   .                   .           .          .          .          .          .          .                  *  @param  __c  Character to use.
         .                   .                   .           .          .          .          .          .          .                  *  @param  __a  Allocator to use (default is default allocator).
         .                   .                   .           .          .          .          .          .          .                  */
         .                   .                   .           .          .          .          .          .          .           #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
         .                   .                   .           .          .          .          .          .          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .                   .                   .           .          .          .          .          .          .                 // 3076. basic_string CTAD ambiguity
         .                   .                   .           .          .          .          .          .          .                 template<typename = _RequireAllocator<_Alloc>>
         .                   .                   .           .          .          .          .          .          .           #endif
       170 ( 0.00%)          0                 102 ( 0.00%)  4 ( 0.04%) 0          0          1 ( 0.02%) .          .                 basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
       170 ( 0.00%)         51 ( 0.00%)         34 ( 0.00%)  4 ( 0.04%) 0          0          1 ( 0.02%) .          .                 : _M_dataplus(_M_local_data(), __a)
        85 ( 0.00%)         34 ( 0.00%)         17 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c8f0 (17x)
        85 ( 0.00%)         34 ( 0.00%)          .           .          .          .          .          .          .           => ???:0x000000000010c820 (17x)
       170 ( 0.00%)        102 ( 0.00%)         17 ( 0.00%)  .          .          .          .          .          .                 { _M_construct(__n, __c); }
       442 ( 0.00%)        119 ( 0.00%)        102 ( 0.00%)  4 ( 0.04%) 0          0          3 ( 0.07%) .          .           => ???:0x000000000010c960 (17x)
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .           #if __cplusplus >= 201103L
         .                   .                   .           .          .          .          .          .          .                 /**
         .                   .                   .           .          .          .          .          .          .                  *  @brief  Move construct string.
         .                   .                   .           .          .          .          .          .          .                  *  @param  __str  Source string.
         .                   .                   .           .          .          .          .          .          .                  *
         .                   .                   .           .          .          .          .          .          .                  *  The newly-created string contains the exact contents of @a __str.
         .                   .                   .           .          .          .          .          .          .                  *  @a __str is a valid, but unspecified string.
-- line 563 ----------------------------------------
-- line 630 ----------------------------------------
         .                   .                   .           .          .          .          .          .          .                  *  @param  __a  Allocator to use (default is default allocator).
         .                   .                   .           .          .          .          .          .          .                  */
         .                   .                   .           .          .          .          .          .          .           #if __cplusplus >= 201103L
         .                   .                   .           .          .          .          .          .          .                 template<typename _InputIterator,
         .                   .                   .           .          .          .          .          .          .           	       typename = std::_RequireInputIter<_InputIterator>>
         .                   .                   .           .          .          .          .          .          .           #else
         .                   .                   .           .          .          .          .          .          .                 template<typename _InputIterator>
         .                   .                   .           .          .          .          .          .          .           #endif
        36 ( 0.00%)          0                  24 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                   basic_string(_InputIterator __beg, _InputIterator __end,
         .                   .                   .           .          .          .          .          .          .           		     const _Alloc& __a = _Alloc())
        40 ( 0.00%)         12 ( 0.00%)          8 ( 0.00%)  .          .          .          .          .          .           	: _M_dataplus(_M_local_data(), __a)
        20 ( 0.00%)          8 ( 0.00%)          4 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c8f0 (4x)
        20 ( 0.00%)          8 ( 0.00%)          .           .          .          .          .          .          .           => ???:0x000000000010c820 (4x)
        40 ( 0.00%)         24 ( 0.00%)          4 ( 0.00%)  .          .          .          .          .          .           	{ _M_construct(__beg, __end); }
       640 ( 0.00%)        208 ( 0.00%)        156 ( 0.00%)  7 ( 0.08%) 0          0          1 ( 0.02%) .          .           => /usr/include/c++/11/bits/basic_string.h:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*) (4x)
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .           #if __cplusplus >= 201703L
         .                   .                   .           .          .          .          .          .          .                 /**
         .                   .                   .           .          .          .          .          .          .                  *  @brief  Construct string from a substring of a string_view.
         .                   .                   .           .          .          .          .          .          .                  *  @param  __t   Source object convertible to string view.
         .                   .                   .           .          .          .          .          .          .                  *  @param  __pos The index of the first character to copy from __t.
         .                   .                   .           .          .          .          .          .          .                  *  @param  __n   The number of characters to copy from __t.
         .                   .                   .           .          .          .          .          .          .                  *  @param  __a   Allocator to use.
-- line 649 ----------------------------------------
-- line 6186 ----------------------------------------
         .                   .                   .           .          .          .          .          .          .           	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
         .                   .                   .           .          .          .          .          .          .           	    return std::move(__rhs.insert(0, __lhs));
         .                   .                   .           .          .          .          .          .          .           	}
         .                   .                   .           .          .          .          .          .          .                 return std::move(__lhs.append(__rhs));
         .                   .                   .           .          .          .          .          .          .               }
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .             template<typename _CharT, typename _Traits, typename _Alloc>
         .                   .                   .           .          .          .          .          .          .               inline basic_string<_CharT, _Traits, _Alloc>
       175 ( 0.00%)          0                 100 ( 0.00%)  7 ( 0.08%) 0          0          1 ( 0.02%) .          .               operator+(const _CharT* __lhs,
         .                   .                   .           .          .          .          .          .          .           	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
       375 ( 0.00%)        150 ( 0.00%)         75 ( 0.00%) 18 ( 0.20%) 0          0          1 ( 0.02%) .          .               { return std::move(__rhs.insert(0, __lhs)); }
    11,479 ( 0.00%)      2,736 ( 0.00%)      1,493 ( 0.00%) 99 ( 1.11%) 42 ( 0.32%) 6 ( 0.18%) 21 ( 0.48%) 32 ( 0.35%) 5 ( 0.18%)  => ???:0x000000000010c640 (25x)
       475 ( 0.00%)        125 ( 0.00%)        175 ( 0.00%)  3 ( 0.03%) 0          1 ( 0.03%) 1 ( 0.02%) .          .           => ???:0x000000000010c760 (25x)
       175 ( 0.00%)         75 ( 0.00%)         50 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (25x)
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .             template<typename _CharT, typename _Traits, typename _Alloc>
         .                   .                   .           .          .          .          .          .          .               inline basic_string<_CharT, _Traits, _Alloc>
         .                   .                   .           .          .          .          .          .          .               operator+(_CharT __lhs,
         .                   .                   .           .          .          .          .          .          .           	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
         .                   .                   .           .          .          .          .          .          .               { return std::move(__rhs.insert(0, 1, __lhs)); }
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .             template<typename _CharT, typename _Traits, typename _Alloc>
         .                   .                   .           .          .          .          .          .          .               inline basic_string<_CharT, _Traits, _Alloc>
       147 ( 0.00%)          0                  84 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .               operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
         .                   .                   .           .          .          .          .          .          .           	      const _CharT* __rhs)
       315 ( 0.00%)        126 ( 0.00%)         63 ( 0.00%)  .          .          .          .          .          .               { return std::move(__lhs.append(__rhs)); }
     8,193 ( 0.00%)      2,037 ( 0.00%)      1,145 ( 0.00%) 57 ( 0.64%) 15 ( 0.11%) 8 ( 0.24%) 7 ( 0.16%) 13 ( 0.14%) 7 ( 0.26%)  => ???:0x000000000010cb00 (21x)
       399 ( 0.00%)        105 ( 0.00%)        147 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c760 (21x)
       147 ( 0.00%)         63 ( 0.00%)         42 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (21x)
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .             template<typename _CharT, typename _Traits, typename _Alloc>
         .                   .                   .           .          .          .          .          .          .               inline basic_string<_CharT, _Traits, _Alloc>
         .                   .                   .           .          .          .          .          .          .               operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
         .                   .                   .           .          .          .          .          .          .           	      _CharT __rhs)
         .                   .                   .           .          .          .          .          .          .               { return std::move(__lhs.append(1, __rhs)); }
         .                   .                   .           .          .          .          .          .          .           #endif
         .                   .                   .           .          .          .          .          .          .           
-- line 6216 ----------------------------------------
-- line 6240 ----------------------------------------
         .                   .                   .           .          .          .          .          .          .             /**
         .                   .                   .           .          .          .          .          .          .              *  @brief  Test equivalence of string and C string.
         .                   .                   .           .          .          .          .          .          .              *  @param __lhs  String.
         .                   .                   .           .          .          .          .          .          .              *  @param __rhs  C string.
         .                   .                   .           .          .          .          .          .          .              *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
         .                   .                   .           .          .          .          .          .          .              */
         .                   .                   .           .          .          .          .          .          .             template<typename _CharT, typename _Traits, typename _Alloc>
         .                   .                   .           .          .          .          .          .          .               inline bool
26,796,750 ( 1.10%)          0          13,398,375 ( 2.97%)  1 ( 0.01%) .          .          .          .          .               operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
         .                   .                   .           .          .          .          .          .          .           	       const _CharT* __rhs)
40,195,125 ( 1.66%) 17,864,500 ( 2.47%)  4,466,125 ( 0.99%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .               { return __lhs.compare(__rhs) == 0; }
227,772,375 ( 9.38%) 44,661,250 ( 6.17%) 22,330,625 ( 4.95%)  8 ( 0.09%) 0          0          2 ( 0.05%) .          .           => ???:0x000000000010c660 (4,466,125x)
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .           #if __cpp_lib_three_way_comparison
         .                   .                   .           .          .          .          .          .          .             /**
         .                   .                   .           .          .          .          .          .          .              *  @brief  Three-way comparison of a string and a C string.
         .                   .                   .           .          .          .          .          .          .              *  @param __lhs  A string.
         .                   .                   .           .          .          .          .          .          .              *  @param __rhs  A null-terminated string.
         .                   .                   .           .          .          .          .          .          .              *  @return  A value indicating whether `__lhs` is less than, equal to,
         .                   .                   .           .          .          .          .          .          .              *	       greater than, or incomparable with `__rhs`.
-- line 6258 ----------------------------------------
-- line 6612 ----------------------------------------
         .                   .                   .           .          .          .          .          .          .           {
         .                   .                   .           .          .          .          .          .          .           _GLIBCXX_BEGIN_NAMESPACE_VERSION
         .                   .                   .           .          .          .          .          .          .           _GLIBCXX_BEGIN_NAMESPACE_CXX11
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .           #if _GLIBCXX_USE_C99_STDLIB
         .                   .                   .           .          .          .          .          .          .             // 21.4 Numeric Conversions [string.conversions].
         .                   .                   .           .          .          .          .          .          .             inline int
         .                   .                   .           .          .          .          .          .          .             stoi(const string& __str, size_t* __idx = 0, int __base = 10)
       580 ( 0.00%)        116 ( 0.00%)        174 ( 0.00%)  7 ( 0.08%) 0          0          1 ( 0.02%) .          .             { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     7,035 ( 0.00%)      2,001 ( 0.00%)      1,131 ( 0.00%) 75 ( 0.84%) 7 ( 0.05%) 0          21 ( 0.48%) 3 ( 0.03%) .           => /usr/include/c++/11/ext/string_conversions.h:int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) (29x)
       145 ( 0.00%)         87 ( 0.00%)          .           .          .          .          .          .          .           => ???:0x000000000010c6d0 (29x)
        58 ( 0.00%)         58 ( 0.00%)          .           .          .          .          .          .          .           					__idx, __base); }
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .             inline long
         .                   .                   .           .          .          .          .          .          .             stol(const string& __str, size_t* __idx = 0, int __base = 10)
         .                   .                   .           .          .          .          .          .          .             { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
         .                   .                   .           .          .          .          .          .          .           			     __idx, __base); }
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .             inline unsigned long
         .                   .                   .           .          .          .          .          .          .             stoul(const string& __str, size_t* __idx = 0, int __base = 10)
-- line 6629 ----------------------------------------
-- line 6653 ----------------------------------------
         .                   .                   .           .          .          .          .          .          .             stold(const string& __str, size_t* __idx = 0)
         .                   .                   .           .          .          .          .          .          .             { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }
         .                   .                   .           .          .          .          .          .          .           #endif // _GLIBCXX_USE_C99_STDLIB
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .             // DR 1261. Insufficent overloads for to_string / to_wstring
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .             inline string
         .                   .                   .           .          .          .          .          .          .             to_string(int __val)
       170 ( 0.00%)         17 ( 0.00%)         85 ( 0.00%)  6 ( 0.07%) 0          0          1 ( 0.02%) .          .             {
        51 ( 0.00%)         17 ( 0.00%)         17 ( 0.00%)  .          .          .          .          .          .               const bool __neg = __val < 0;
        68 ( 0.00%)         34 ( 0.00%)         17 ( 0.00%)  .          .          .          .          .          .               const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
        85 ( 0.00%)         17 ( 0.00%)         34 ( 0.00%)  .          .          .          .          .          .               const auto __len = __detail::__to_chars_len(__uval);
       408 ( 0.00%)        170 ( 0.00%)        119 ( 0.00%) 14 ( 0.16%) 0          0          3 ( 0.07%) .          .           => /usr/include/c++/11/bits/charconv.h:unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int) (17x)
       272 ( 0.00%)         51 ( 0.00%)         51 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .               string __str(__neg + __len, '-');
     1,122 ( 0.00%)        340 ( 0.00%)        272 ( 0.00%) 12 ( 0.13%) 0          0          5 ( 0.11%) .          .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(unsigned long, char, std::allocator<char> const&) (17x)
        68 ( 0.00%)         34 ( 0.00%)          .           .          .          .          .          .          .           => ???:0x000000000010c910 (17x)
        68 ( 0.00%)         34 ( 0.00%)          .           .          .          .          .          .          .           => ???:0x000000000010cab0 (17x)
       187 ( 0.00%)         68 ( 0.00%)         34 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .               __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
       374 ( 0.00%)        119 ( 0.00%)        102 ( 0.00%)  6 ( 0.07%) 0          0          3 ( 0.07%) .          .           => /usr/include/c++/11/bits/charconv.h:void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int) (17x)
       102 ( 0.00%)         51 ( 0.00%)          0           7 ( 0.08%) 0          0          1 ( 0.02%) .          .           => ???:0x000000000010cb30 (17x)
        17 ( 0.00%)          .                   .           .          .          .          .          .          .               return __str;
       119 ( 0.00%)        102 ( 0.00%)          .           .          .          .          .          .          .             }
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .             inline string
         .                   .                   .           .          .          .          .          .          .             to_string(unsigned __val)
         .                   .                   .           .          .          .          .          .          .             {
         .                   .                   .           .          .          .          .          .          .               string __str(__detail::__to_chars_len(__val), '\0');
         .                   .                   .           .          .          .          .          .          .               __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
         .                   .                   .           .          .          .          .          .          .               return __str;
         .                   .                   .           .          .          .          .          .          .             }
-- line 6676 ----------------------------------------
-- line 6723 ----------------------------------------
         .                   .                   .           .          .          .          .          .          .               const int __n = 
         .                   .                   .           .          .          .          .          .          .                 __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
         .                   .                   .           .          .          .          .          .          .               return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
         .                   .                   .           .          .          .          .          .          .           					   "%f", __val);
         .                   .                   .           .          .          .          .          .          .             }
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .             inline string
         .                   .                   .           .          .          .          .          .          .             to_string(double __val)
        36 ( 0.00%)          4 ( 0.00%)         16 ( 0.00%)  4 ( 0.04%) 0          0          1 ( 0.02%) .          .             {
         4 ( 0.00%)          0                   4 ( 0.00%)  .          .          .          .          .          .               const int __n = 
         .                   .                   .           .          .          .          .          .          .                 __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
         .                   .                   .           .          .          .          .          .          .               return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        40 ( 0.00%)         12 ( 0.00%)          4 ( 0.00%)  1 ( 0.01%) .          .          .          .          .           					   "%f", __val);
     7,800 ( 0.00%)      1,640 ( 0.00%)      1,320 ( 0.00%) 354 ( 3.97%) 17 ( 0.13%) 25 ( 0.74%) 124 ( 2.83%) 14 ( 0.15%) 15 ( 0.55%)  => /usr/include/c++/11/ext/string_conversions.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) (4x)
        24 ( 0.00%)         20 ( 0.00%)          .           .          .          .          .          .          .             }
         .                   .                   .           .          .          .          .          .          .           
         .                   .                   .           .          .          .          .          .          .             inline string
         .                   .                   .           .          .          .          .          .          .             to_string(long double __val)
         .                   .                   .           .          .          .          .          .          .             {
         .                   .                   .           .          .          .          .          .          .               const int __n = 
         .                   .                   .           .          .          .          .          .          .                 __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
         .                   .                   .           .          .          .          .          .          .               return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
         .                   .                   .           .          .          .          .          .          .           					   "%Lf", __val);
-- line 6744 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/atomic
--------------------------------------------------------------------------------
Ir                  Dr                  Dw                 I1mr        D1mr       D1mw       ILmr       DLmr DLmw 

-- line 68 ----------------------------------------
         .                   .                  .           .          .          .          .          .          .           
         .                   .                  .           .          .          .          .          .          .             public:
         .                   .                  .           .          .          .          .          .          .               atomic() noexcept = default;
         .                   .                  .           .          .          .          .          .          .               ~atomic() noexcept = default;
         .                   .                  .           .          .          .          .          .          .               atomic(const atomic&) = delete;
         .                   .                  .           .          .          .          .          .          .               atomic& operator=(const atomic&) = delete;
         .                   .                  .           .          .          .          .          .          .               atomic& operator=(const atomic&) volatile = delete;
         .                   .                  .           .          .          .          .          .          .           
       120 ( 0.00%)         32 ( 0.00%)        32 ( 0.00%)  9 ( 0.10%) 0          0          2 ( 0.05%) .          .               constexpr atomic(bool __i) noexcept : _M_base(__i) { }
        96 ( 0.00%)         32 ( 0.00%)        32 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/atomic_base.h:std::__atomic_base<bool>::__atomic_base(bool) (8x)
         .                   .                  .           .          .          .          .          .          .           
         .                   .                  .           .          .          .          .          .          .               bool
         .                   .                  .           .          .          .          .          .          .               operator=(bool __i) noexcept
         .                   .                  .           .          .          .          .          .          .               { return _M_base.operator=(__i); }
         .                   .                  .           .          .          .          .          .          .           
         .                   .                  .           .          .          .          .          .          .               bool
         .                   .                  .           .          .          .          .          .          .               operator=(bool __i) volatile noexcept
         .                   .                  .           .          .          .          .          .          .               { return _M_base.operator=(__i); }
         .                   .                  .           .          .          .          .          .          .           
22,330,850 ( 0.92%)          0          8,932,340 ( 1.98%) 11 ( 0.12%) 0          0          1 ( 0.02%) .          .               operator bool() const noexcept
22,330,850 ( 0.92%) 13,398,510 ( 1.85%) 8,932,340 ( 1.98%)  .          .          .          .          .          .               { return _M_base.load(); }
         .                   .                  .           .          .          .          .          .          .           
         .                   .                  .           .          .          .          .          .          .               operator bool() const volatile noexcept
         .                   .                  .           .          .          .          .          .          .               { return _M_base.load(); }
         .                   .                  .           .          .          .          .          .          .           
         .                   .                  .           .          .          .          .          .          .               bool
         .                   .                  .           .          .          .          .          .          .               is_lock_free() const noexcept { return _M_base.is_lock_free(); }
         .                   .                  .           .          .          .          .          .          .           
         .                   .                  .           .          .          .          .          .          .               bool
-- line 95 ----------------------------------------
-- line 217 ----------------------------------------
         .                   .                  .           .          .          .          .          .          .           #if __cplusplus > 201703L
         .                   .                  .           .          .          .          .          .          .                 static_assert(is_copy_constructible_v<_Tp>);
         .                   .                  .           .          .          .          .          .          .                 static_assert(is_move_constructible_v<_Tp>);
         .                   .                  .           .          .          .          .          .          .                 static_assert(is_copy_assignable_v<_Tp>);
         .                   .                  .           .          .          .          .          .          .                 static_assert(is_move_assignable_v<_Tp>);
         .                   .                  .           .          .          .          .          .          .           #endif
         .                   .                  .           .          .          .          .          .          .           
         .                   .                  .           .          .          .          .          .          .               public:
        11 ( 0.00%)          3 ( 0.00%)         3 ( 0.00%)  .          .          .          .          .          .                 atomic() = default;
         9 ( 0.00%)          3 ( 0.00%)         3 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/std_thread.h:std::thread::id::id() (1x)
         .                   .                  .           .          .          .          .          .          .                 ~atomic() noexcept = default;
         .                   .                  .           .          .          .          .          .          .                 atomic(const atomic&) = delete;
         .                   .                  .           .          .          .          .          .          .                 atomic& operator=(const atomic&) = delete;
         .                   .                  .           .          .          .          .          .          .                 atomic& operator=(const atomic&) volatile = delete;
         .                   .                  .           .          .          .          .          .          .           
         .                   .                  .           .          .          .          .          .          .                 constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
         .                   .                  .           .          .          .          .          .          .           
         .                   .                  .           .          .          .          .          .          .                 operator _Tp() const noexcept
-- line 233 ----------------------------------------
-- line 261 ----------------------------------------
         .                   .                  .           .          .          .          .          .          .                 }
         .                   .                  .           .          .          .          .          .          .           
         .                   .                  .           .          .          .          .          .          .           #if __cplusplus >= 201703L
         .                   .                  .           .          .          .          .          .          .                 static constexpr bool is_always_lock_free
         .                   .                  .           .          .          .          .          .          .           	= __atomic_always_lock_free(sizeof(_M_i), 0);
         .                   .                  .           .          .          .          .          .          .           #endif
         .                   .                  .           .          .          .          .          .          .           
         .                   .                  .           .          .          .          .          .          .                 void
        16 ( 0.00%)          0                 10 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                 store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
         .                   .                  .           .          .          .          .          .          .                 {
        16 ( 0.00%)          6 ( 0.00%)         6 ( 0.00%)  .          .          .          .          .          .           	__atomic_store(std::__addressof(_M_i), std::__addressof(__i), int(__m));
        28 ( 0.00%)         12 ( 0.00%)         8 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::thread::id* std::__addressof<std::thread::id>(std::thread::id&) (4x)
         8 ( 0.00%)          6 ( 0.00%)         .           .          .          .          .          .          .                 }
         .                   .                  .           .          .          .          .          .          .           
         .                   .                  .           .          .          .          .          .          .                 void
         .                   .                  .           .          .          .          .          .          .                 store(_Tp __i, memory_order __m = memory_order_seq_cst) volatile noexcept
         .                   .                  .           .          .          .          .          .          .                 {
         .                   .                  .           .          .          .          .          .          .           	__atomic_store(std::__addressof(_M_i), std::__addressof(__i), int(__m));
         .                   .                  .           .          .          .          .          .          .                 }
         .                   .                  .           .          .          .          .          .          .           
         .                   .                  .           .          .          .          .          .          .                 _Tp
        36 ( 0.00%)          4 ( 0.00%)        16 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                 load(memory_order __m = memory_order_seq_cst) const noexcept
         .                   .                  .           .          .          .          .          .          .                 {
         .                   .                  .           .          .          .          .          .          .           	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
         8 ( 0.00%)          0                  4 ( 0.00%)  .          .          .          .          .          .           	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
        24 ( 0.00%)         12 ( 0.00%)         8 ( 0.00%)  1 ( 0.01%) 1 ( 0.01%) 0          1 ( 0.02%) .          .           	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
        28 ( 0.00%)         12 ( 0.00%)         8 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::thread::id const* std::__addressof<std::thread::id const>(std::thread::id const&) (4x)
         8 ( 0.00%)          8 ( 0.00%)         .           .          .          .          .          .          .           	return *__ptr;
        20 ( 0.00%)         16 ( 0.00%)         .           .          .          .          .          .          .                 }
         .                   .                  .           .          .          .          .          .          .           
         .                   .                  .           .          .          .          .          .          .                 _Tp
         .                   .                  .           .          .          .          .          .          .                 load(memory_order __m = memory_order_seq_cst) const volatile noexcept
         .                   .                  .           .          .          .          .          .          .                 {
         .                   .                  .           .          .          .          .          .          .                   alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
         .                   .                  .           .          .          .          .          .          .           	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
         .                   .                  .           .          .          .          .          .          .           	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
         .                   .                  .           .          .          .          .          .          .           	return *__ptr;
-- line 295 ----------------------------------------
-- line 825 ----------------------------------------
         .                   .                  .           .          .          .          .          .          .                 typedef __atomic_base<int> 		__base_type;
         .                   .                  .           .          .          .          .          .          .           
         .                   .                  .           .          .          .          .          .          .                 atomic() noexcept = default;
         .                   .                  .           .          .          .          .          .          .                 ~atomic() noexcept = default;
         .                   .                  .           .          .          .          .          .          .                 atomic(const atomic&) = delete;
         .                   .                  .           .          .          .          .          .          .                 atomic& operator=(const atomic&) = delete;
         .                   .                  .           .          .          .          .          .          .                 atomic& operator=(const atomic&) volatile = delete;
         .                   .                  .           .          .          .          .          .          .           
        14 ( 0.00%)          4 ( 0.00%)         4 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                 constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }
        11 ( 0.00%)          4 ( 0.00%)         4 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/atomic_base.h:std::__atomic_base<int>::__atomic_base(int) (1x)
         .                   .                  .           .          .          .          .          .          .           
         .                   .                  .           .          .          .          .          .          .                 using __base_type::operator __integral_type;
         .                   .                  .           .          .          .          .          .          .                 using __base_type::operator=;
         .                   .                  .           .          .          .          .          .          .           
         .                   .                  .           .          .          .          .          .          .           #if __cplusplus >= 201703L
         .                   .                  .           .          .          .          .          .          .               static constexpr bool is_always_lock_free = ATOMIC_INT_LOCK_FREE == 2;
         .                   .                  .           .          .          .          .          .          .           #endif
         .                   .                  .           .          .          .          .          .          .               };
-- line 841 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: Server.cpp
--------------------------------------------------------------------------------
Ir                   Dr                   Dw                   I1mr        D1mr       D1mw       ILmr       DLmr       DLmw       

          .                    .                    .           .          .          .          .          .          .           #include "Server.hpp"
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .           #define PORT 4040
          .                    .                    .           .          .          .          .          .          .           #define INVALID -1
          .                    .                    .           .          .          .          .          .          .           #define NO_MST_DATA_CALCULATION -1
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .           // Constructor
         36 ( 0.00%)           9 ( 0.00%)          13 ( 0.00%)  4 ( 0.04%) 0          0          3 ( 0.07%) .          .           Server::Server(): server_fd(INVALID), pipeline(nullptr), leaderfollower(nullptr), stopServer(false)
         67 ( 0.00%)          20 ( 0.00%)          20 ( 0.00%)  7 ( 0.08%) 0          1 ( 0.03%) 7 ( 0.16%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<Graph>, std::allocator<std::shared_ptr<Graph> > >::vector() (1x)
         67 ( 0.00%)          20 ( 0.00%)          20 ( 0.00%)  7 ( 0.08%) 0          0          7 ( 0.16%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::vector() (1x)
         67 ( 0.00%)          20 ( 0.00%)          20 ( 0.00%)  6 ( 0.07%) 0          0          6 ( 0.14%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >, std::allocator<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > > > >::vector() (1x)
         27 ( 0.00%)           8 ( 0.00%)           8 ( 0.00%)  2 ( 0.02%) 0          0          2 ( 0.05%) .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::atomic(bool) (1x)
         24 ( 0.00%)           6 ( 0.00%)          10 ( 0.00%)  2 ( 0.02%) 0          1 ( 0.03%) 2 ( 0.05%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/std_mutex.h:std::mutex::mutex() (1x)
          .                    .                    .           .          .          .          .          .          .           {
          .                    .                    .           .          .          .          .          .          .               {
          6 ( 0.00%)           1 ( 0.00%)           1 ( 0.00%)  .          .          .          .          .          .                   std::lock_guard<std::mutex> lock(mtx);
         88 ( 0.00%)          25 ( 0.00%)          18 ( 0.00%)  8 ( 0.09%) 1 ( 0.01%) 0          8 ( 0.18%) .          .           => /usr/include/c++/11/bits/std_mutex.h:std::lock_guard<std::mutex>::lock_guard(std::mutex&) (1x)
          9 ( 0.00%)           1 ( 0.00%)           2 ( 0.00%)  1 ( 0.01%) 1 ( 0.01%) 0          1 ( 0.02%) 1 ( 0.01%) .                   std::cout << "Start Building the Server..." << std::endl;
      5,665 ( 0.00%)       1,633 ( 0.00%)         767 ( 0.00%) 66 ( 0.74%) 62 ( 0.47%) 2 ( 0.06%) 65 ( 1.48%) 33 ( 0.36%) .           => ???:0x000000000010c8e0 (1x)
      5,599 ( 0.00%)       1,561 ( 0.00%)         718 ( 0.00%) 63 ( 0.71%) 49 ( 0.37%) 4 ( 0.12%) 58 ( 1.32%) 26 ( 0.29%) 3 ( 0.11%)  => ???:0x000000000010c8b0 (1x)
          3 ( 0.00%)           0                    1 ( 0.00%)  .          .          .          .          .          .               }
         67 ( 0.00%)          17 ( 0.00%)          14 ( 0.00%)  6 ( 0.07%) 1 ( 0.01%) 1 ( 0.03%) 6 ( 0.14%) 1 ( 0.01%) .           => /usr/include/c++/11/bits/std_mutex.h:std::lock_guard<std::mutex>::~lock_guard() (1x)
          7 ( 0.00%)           1 ( 0.00%)           3 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .               this->pipeline = new Pipeline();
     96,556 ( 0.00%)      28,383 ( 0.00%)      20,504 ( 0.00%) 1,295 (14.53%) 109 ( 0.82%) 189 ( 5.58%) 553 (12.63%) 45 ( 0.49%) 185 ( 6.75%)  => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/Pipeline.cpp:Pipeline::Pipeline() (1x)
        203 ( 0.00%)          39 ( 0.00%)          30 ( 0.00%)  2 ( 0.02%) 2 ( 0.02%) 1 ( 0.03%) 2 ( 0.05%) 0          1 ( 0.04%)  => ???:0x000000000010c8c0 (1x)
          7 ( 0.00%)           1 ( 0.00%)           3 ( 0.00%)  0          1 ( 0.01%) 0          0          1 ( 0.01%) .               this->leaderfollower = new LeaderFollower();
     15,354 ( 0.00%)       4,133 ( 0.00%)       3,419 ( 0.00%) 204 ( 2.29%) 9 ( 0.07%) 95 ( 2.80%) 92 ( 2.10%) 3 ( 0.03%) 93 ( 3.39%)  => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/LeaderFollower.cpp:LeaderFollower::LeaderFollower() (1x)
        215 ( 0.00%)          41 ( 0.00%)          32 ( 0.00%)  9 ( 0.10%) 2 ( 0.02%) 1 ( 0.03%) 0          0          1 ( 0.04%)  => ???:0x000000000010c8c0 (1x)
          3 ( 0.00%)           1 ( 0.00%)           1 ( 0.00%)  .          .          .          .          .          .               startServer(); // Start the server
2,425,119,565 (99.88%) 723,516,060 (99.90%) 451,080,934 (99.93%) 516 ( 5.79%) 79 ( 0.59%) 25 ( 0.74%) 169 ( 3.86%) 44 ( 0.48%) 23 ( 0.84%)  => Server.cpp:Server::startServer() (1x)
          .                    .                    .           .          .          .          .          .          .           }
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .           // Destructor
          .                    .                    .           .          .          .          .          .          .           Server::~Server()
          .                    .                    .           .          .          .          .          .          .           {
          .                    .                    .           .          .          .          .          .          .               {
          .                    .                    .           .          .          .          .          .          .                   std::lock_guard<std::mutex> lock(mtx);
          .                    .                    .           .          .          .          .          .          .                   std::cout << "\n********* START Server Stop Process *********" << std::endl;
-- line 24 ----------------------------------------
-- line 57 ----------------------------------------
          .                    .                    .           .          .          .          .          .          .                   }
          .                    .                    .           .          .          .          .          .          .                   std::cout << "Server: Server File Descriptor CLOSE" << std::endl;
          .                    .                    .           .          .          .          .          .          .                   std::cout << "\n********* FINISH Server Stop Process *********" << std::endl;
          .                    .                    .           .          .          .          .          .          .               }
          .                    .                    .           .          .          .          .          .          .           }
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .           // Start the server
          .                    .                    .           .          .          .          .          .          .           void Server::startServer()
          9 ( 0.00%)           1 ( 0.00%)           4 ( 0.00%)  2 ( 0.02%) 0          0          2 ( 0.05%) .          .           {
          .                    .                    .           .          .          .          .          .          .               // Creating socket FD
         11 ( 0.00%)           3 ( 0.00%)           2 ( 0.00%)  .          .          .          .          .          .               if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
          8 ( 0.00%)           2 ( 0.00%)           0           2 ( 0.02%) 0          0          2 ( 0.05%) .          .           => ???:0x000000000010c630 (1x)
          .                    .                    .           .          .          .          .          .          .               {
          .                    .                    .           .          .          .          .          .          .                   perror("socket failed");
          .                    .                    .           .          .          .          .          .          .                   exit(EXIT_FAILURE);
          .                    .                    .           .          .          .          .          .          .               }
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .               // Set the socket options
          1 ( 0.00%)           0                    1 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .               int opt = 1; // Enable the socket option
         13 ( 0.00%)           2 ( 0.00%)           1 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .               if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt)))
          9 ( 0.00%)           2 ( 0.00%)           0           2 ( 0.02%) 1 ( 0.01%) 0          2 ( 0.05%) 1 ( 0.01%) .           => ???:0x000000000010cac0 (1x)
          .                    .                    .           .          .          .          .          .          .               {
          .                    .                    .           .          .          .          .          .          .                   perror("setsockopt");
          .                    .                    .           .          .          .          .          .          .                   exit(EXIT_FAILURE);
          .                    .                    .           .          .          .          .          .          .               }
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .               // Set the address and port number
          2 ( 0.00%)           1 ( 0.00%)           1 ( 0.00%)  .          .          .          .          .          .               address.sin_family = AF_INET;         // IPv4
          2 ( 0.00%)           1 ( 0.00%)           1 ( 0.00%)  .          .          .          .          .          .               address.sin_addr.s_addr = INADDR_ANY; // Any IP address
          4 ( 0.00%)           1 ( 0.00%)           2 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .               address.sin_port = htons(PORT);       // Port number
          6 ( 0.00%)           2 ( 0.00%)           0           2 ( 0.02%) 1 ( 0.01%) 0          2 ( 0.05%) 1 ( 0.01%) .           => ???:0x000000000010c5d0 (1x)
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .               // Bind the socket to the address and port number
         11 ( 0.00%)           3 ( 0.00%)           1 ( 0.00%)  .          .          .          .          .          .               if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0)
          8 ( 0.00%)           2 ( 0.00%)           0           2 ( 0.02%) 0          0          2 ( 0.05%) .          .           => ???:0x000000000010c5f0 (1x)
          .                    .                    .           .          .          .          .          .          .               { // Bind the socket to the address and port number
          .                    .                    .           .          .          .          .          .          .                   perror("bind failed");
          .                    .                    .           .          .          .          .          .          .                   exit(EXIT_FAILURE);
          .                    .                    .           .          .          .          .          .          .               }
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .               // Listen for incoming connections
          8 ( 0.00%)           2 ( 0.00%)           1 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .               if (listen(server_fd, 3) < 0)
          8 ( 0.00%)           2 ( 0.00%)           0           2 ( 0.02%) 1 ( 0.01%) 0          2 ( 0.05%) 1 ( 0.01%) .           => ???:0x000000000010c950 (1x)
          .                    .                    .           .          .          .          .          .          .               {
          .                    .                    .           .          .          .          .          .          .                   perror("listen");
          .                    .                    .           .          .          .          .          .          .                   exit(EXIT_FAILURE);
          .                    .                    .           .          .          .          .          .          .               }
          .                    .                    .           .          .          .          .          .          .               {
          6 ( 0.00%)           1 ( 0.00%)           1 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                   std::lock_guard<std::mutex> lock(this->mtx);
         87 ( 0.00%)          24 ( 0.00%)          18 ( 0.00%)  2 ( 0.02%) 0          1 ( 0.03%) .          .          .           => /usr/include/c++/11/bits/std_mutex.h:std::lock_guard<std::mutex>::lock_guard(std::mutex&) (1x)
         12 ( 0.00%)           1 ( 0.00%)           3 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                   std::cout << "Server started listening on port " << PORT << std::endl;
        497 ( 0.00%)         162 ( 0.00%)          80 ( 0.00%)  5 ( 0.06%) .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
        456 ( 0.00%)         113 ( 0.00%)          46 ( 0.00%)  5 ( 0.06%) 2 ( 0.02%) 0          0          2 ( 0.02%) .           => ???:0x000000000010c8b0 (1x)
        454 ( 0.00%)         111 ( 0.00%)          65 ( 0.00%)  4 ( 0.04%) .          .          .          .          .           => ???:0x000000000010ca90 (1x)
          3 ( 0.00%)           0                    1 ( 0.00%)  1 ( 0.01%) .          .          .          .          .               }
         69 ( 0.00%)          18 ( 0.00%)          14 ( 0.00%)  1 ( 0.01%) .          .          .          .          .           => /usr/include/c++/11/bits/std_mutex.h:std::lock_guard<std::mutex>::~lock_guard() (1x)
          .                    .                    .           .          .          .          .          .          .               // Handle incoming connections
          3 ( 0.00%)           1 ( 0.00%)           1 ( 0.00%)  .          .          .          .          .          .               this->handleConnections();
2,425,117,878 (99.88%) 723,515,605 (99.90%) 451,080,691 (99.93%) 480 ( 5.39%) 74 ( 0.56%) 24 ( 0.71%) 151 ( 3.45%) 39 ( 0.43%) 23 ( 0.84%)  => Server.cpp:Server::handleConnections() (1x)
          .                    .                    .           .          .          .          .          .          .           }
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .           // handle client connections
          .                    .                    .           .          .          .          .          .          .           void Server::handleConnections()
         11 ( 0.00%)           1 ( 0.00%)           6 ( 0.00%)  2 ( 0.02%) 0          0          2 ( 0.05%) .          .           {
          1 ( 0.00%)           0                    1 ( 0.00%)  .          .          .          .          .          .               int addrlen = sizeof(this->address);
          .                    .                    .           .          .          .          .          .          .               fd_set readfds;
          .                    .                    .           .          .          .          .          .          .               struct timeval timeout;
          4 ( 0.00%)           1 ( 0.00%)           2 ( 0.00%)  .          .          .          .          .          .               int stdin_fd = fileno(stdin);
          9 ( 0.00%)           4 ( 0.00%)           0           2 ( 0.02%) 1 ( 0.01%) 0          2 ( 0.05%) 1 ( 0.01%) .           => ???:0x000000000010c900 (1x)
          8 ( 0.00%)           2 ( 0.00%)           2 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .               int max_fd = std::max(server_fd, stdin_fd);
         14 ( 0.00%)           7 ( 0.00%)           3 ( 0.00%)  2 ( 0.02%) 0          0          2 ( 0.05%) .          .           => /usr/include/c++/11/bits/stl_algobase.h:int const& std::max<int>(int const&, int const&) (1x)
          .                    .                    .           .          .          .          .          .          .           
 31,262,883 ( 1.29%)   4,466,126 ( 0.62%)   4,466,126 ( 0.99%)  2 ( 0.02%) 0          0          2 ( 0.05%) .          .               while (!stopServer)
129,517,654 ( 5.33%)  44,661,260 ( 6.17%)  40,195,134 ( 8.90%) 17 ( 0.19%) .          .          .          .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::operator bool() const (4,466,126x)
          .                    .                    .           .          .          .          .          .          .               {                      // Loop until the server is stopped
455,544,852 (18.76%) 218,840,174 (30.22%) 151,848,284 (33.64%) 15 ( 0.17%) 0          0          1 ( 0.02%) .          .                   FD_ZERO(&readfds); // Clear the file descriptor set
 84,856,394 ( 3.49%)  22,330,630 ( 3.08%)   4,466,126 ( 0.99%)  3 ( 0.03%) 0          0          1 ( 0.02%) .          .                   FD_SET(server_fd, &readfds);
 75,924,142 ( 3.13%)  13,398,378 ( 1.85%)   4,466,126 ( 0.99%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .                   FD_SET(stdin_fd, &readfds);
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .                   // Set timeout to 1 second
  4,466,126 ( 0.18%)           0            4,466,126 ( 0.99%)  .          .          .          .          .          .                   timeout.tv_sec = 1;
  4,466,126 ( 0.18%)           0            4,466,126 ( 0.99%)  .          .          .          .          .          .                   timeout.tv_usec = 0;
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .                   // Check for activity on the sockets
 44,661,259 ( 1.84%)   4,466,126 ( 0.62%)   8,932,251 ( 1.98%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                   int activity = select(max_fd + 1, &readfds, NULL, NULL, &timeout); // Check for activity on the sockets
504,672,201 (20.78%) 111,653,137 (15.42%)  71,458,013 (15.83%) 64 ( 0.72%) 0          0          7 ( 0.16%) .          .           => ???:0x000000000010c890 (4,466,126x)
          .                    .                    .           .          .          .          .          .          .           
  8,932,250 ( 0.37%)   4,466,125 ( 0.62%)           .           .          .          .          .          .          .                   if (activity < 0 && errno != EINTR)
          .                    .                    .           .          .          .          .          .          .                   { // Check for errors
          .                    .                    .           .          .          .          .          .          .                       perror("select error");
          .                    .                    .           .          .          .          .          .          .                       continue;
          .                    .                    .           .          .          .          .          .          .                   }
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .                   // Check for keyboard input
 71,458,000 ( 2.94%)  13,398,375 ( 1.85%)           0           2 ( 0.02%) 0          0          2 ( 0.05%) .          .                   if (FD_ISSET(stdin_fd, &readfds))
          .                    .                    .           .          .          .          .          .          .                   { // Check if the file descriptor is set
 13,398,375 ( 0.55%)           0            4,466,125 ( 0.99%)  .          .          .          .          .          .                       std::string command;
 35,729,000 ( 1.47%)   8,932,250 ( 1.23%)  13,398,375 ( 2.97%) 32 ( 0.36%) 1 ( 0.01%) 0          1 ( 0.02%) .          .           => ???:0x000000000010c9c0 (4,466,125x)
 22,330,625 ( 0.92%)           0            4,466,125 ( 0.99%)  .          .          .          .          .          .                       std::getline(std::cin, command); // Get the command from the user
468,948,701 (19.31%) 178,646,533 (24.67%)  84,857,070 (18.80%) 181 ( 2.03%) 60 ( 0.45%) 2 ( 0.06%) 52 ( 1.19%) 36 ( 0.40%) 1 ( 0.04%)  => ???:0x000000000010c610 (4,466,125x)
 31,262,875 ( 1.29%)           0            4,466,125 ( 0.99%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                       if (command == "stop")
294,764,250 (12.14%)  62,525,750 ( 8.63%)  40,195,125 ( 8.90%) 10 ( 0.11%) 0          0          3 ( 0.07%) .          .           => /usr/include/c++/11/bits/basic_string.h:bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) (4,466,125x)
          .                    .                    .           .          .          .          .          .          .                       {
          .                    .                    .           .          .          .          .          .          .                           std::lock_guard<std::mutex> lock(this->mtx);
          .                    .                    .           .          .          .          .          .          .                           std::cout << "Command: " << command << std::endl;
          .                    .                    .           .          .          .          .          .          .                           stopServer = true;
          .                    .                    .           .          .          .          .          .          .                           break;
          .                    .                    .           .          .          .          .          .          .                       }
 26,796,750 ( 1.10%)           0            4,466,125 ( 0.99%)  2 ( 0.02%) 0          0          2 ( 0.05%) .          .                   }
 35,729,000 ( 1.47%)  13,398,375 ( 1.85%)           0           4 ( 0.04%) 1 ( 0.01%) 0          3 ( 0.07%) 1 ( 0.01%) .           => ???:0x000000000010c780 (4,466,125x)
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .                   // Check for new connections
 80,390,250 ( 3.31%)  22,330,625 ( 3.08%)           0           1 ( 0.01%) 0          0          1 ( 0.02%) .          .                   if (FD_ISSET(server_fd, &readfds))
          .                    .                    .           .          .          .          .          .          .                   {                                                                                           // Check if the file descriptor is set
          9 ( 0.00%)           3 ( 0.00%)           2 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                       int new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t *)&addrlen); // Accept the connection
         44 ( 0.00%)          14 ( 0.00%)           8 ( 0.00%)  3 ( 0.03%) 0          0          3 ( 0.07%) .          .           => ???:0x000000000010c690 (1x)
          3 ( 0.00%)           1 ( 0.00%)           .           .          .          .          .          .          .                       if (new_socket < 0)
          .                    .                    .           .          .          .          .          .          .                       {
          .                    .                    .           .          .          .          .          .          .                           perror("accept failed");
          .                    .                    .           .          .          .          .          .          .                           continue;
          .                    .                    .           .          .          .          .          .          .                       }
          .                    .                    .           .          .          .          .          .          .                   
          6 ( 0.00%)           1 ( 0.00%)           1 ( 0.00%)  .          .          .          .          .          .                       std::lock_guard<std::mutex> lock(this->mtx); // Lock the mutex because we are modifying the clients vector
         87 ( 0.00%)          24 ( 0.00%)          18 ( 0.00%)  3 ( 0.03%) .          .          .          .          .           => /usr/include/c++/11/bits/std_mutex.h:std::lock_guard<std::mutex>::lock_guard(std::mutex&) (1x)
          9 ( 0.00%)           1 ( 0.00%)           2 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                       std::cout << "New client connected!" << std::endl;
        486 ( 0.00%)         160 ( 0.00%)          78 ( 0.00%)  3 ( 0.03%) .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
        388 ( 0.00%)          99 ( 0.00%)          44 ( 0.00%)  5 ( 0.06%) 1 ( 0.01%) 0          0          1 ( 0.01%) .           => ???:0x000000000010c8b0 (1x)
         12 ( 0.00%)           1 ( 0.00%)           4 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                       auto client_thread = std::make_unique<std::thread>(&Server::handleRequest, this, new_socket);
      2,455 ( 0.00%)         625 ( 0.00%)         570 ( 0.00%) 47 ( 0.53%) 7 ( 0.05%) 21 ( 0.62%) 19 ( 0.43%) 0          21 ( 0.77%)  => /usr/include/c++/11/bits/unique_ptr.h:std::_MakeUniq<std::thread>::__single_object std::make_unique<std::thread, void (Server::*)(int), Server*, int&>(void (Server::*&&)(int), Server*&&, int&) (1x)
         10 ( 0.00%)           1 ( 0.00%)           2 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                       clients_dataset.emplace_back(new_socket, std::move(client_thread)); // Add client to the list (unique ptr owner is being moved)
      1,489 ( 0.00%)         475 ( 0.00%)         402 ( 0.00%) 45 ( 0.51%) 2 ( 0.02%) 1 ( 0.03%) 40 ( 0.91%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/vector.tcc:std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >& std::vector<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > >, std::allocator<std::pair<int, std::unique_ptr<std::thread, std::default_delete<std::thread> > > > >::emplace_back<int&, std::unique_ptr<std::thread, std::default_delete<std::thread> > >(int&, std::unique_ptr<std::thread, std::default_delete<std::thread> >&&) (1x)
          7 ( 0.00%)           3 ( 0.00%)           2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::unique_ptr<std::thread, std::default_delete<std::thread> >&>::type&& std::move<std::unique_ptr<std::thread, std::default_delete<std::thread> >&>(std::unique_ptr<std::thread, std::default_delete<std::thread> >&) (1x)
          9 ( 0.00%)           1 ( 0.00%)           2 ( 0.00%)  .          .          .          .          .          .                       std::cout << "Client has Added to the Clients list!" << std::endl;
        486 ( 0.00%)         160 ( 0.00%)          78 ( 0.00%) 17 ( 0.19%) .          .          .          .          .           => ???:0x000000000010c8e0 (1x)
        476 ( 0.00%)         117 ( 0.00%)          46 ( 0.00%)  8 ( 0.09%) 1 ( 0.01%) .          .          .          .           => ???:0x000000000010c8b0 (1x)
          6 ( 0.00%)           0                    2 ( 0.00%)  .          .          .          .          .          .                   }
         69 ( 0.00%)          18 ( 0.00%)          14 ( 0.00%)  1 ( 0.01%) .          .          .          .          .           => /usr/include/c++/11/bits/std_mutex.h:std::lock_guard<std::mutex>::~lock_guard() (1x)
         67 ( 0.00%)          22 ( 0.00%)          20 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::~unique_ptr() (1x)
          .                    .                    .           .          .          .          .          .          .               }
          .                    .                    .           .          .          .          .          .          .           }
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .           void Server::handleRequest(int client_FD)
         11 ( 0.00%)           1 ( 0.00%)           6 ( 0.00%)  2 ( 0.02%) 0          1 ( 0.03%) 2 ( 0.05%) 0          1 ( 0.04%)  {
          2 ( 0.00%)           1 ( 0.00%)           .           .          .          .          .          .          .               if (client_FD < 0)
          .                    .                    .           .          .          .          .          .          .               {
          .                    .                    .           .          .          .          .          .          .                   std::perror("Error: Invalid client file descriptor.");
          .                    .                    .           .          .          .          .          .          .                   return;
          .                    .                    .           .          .          .          .          .          .               }
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .               char buffer[1024];
          .                    .                    .           .          .          .          .          .          .               std::string menu =
          .                    .                    .           .          .          .          .          .          .                   "\nMenu:\n"
          .                    .                    .           .          .          .          .          .          .                   "1. Create a New Graph\n"
          .                    .                    .           .          .          .          .          .          .                   "2. Send Data to Pipeline and Active Objects\n"
          .                    .                    .           .          .          .          .          .          .                   "3. Send Data to Leader-Follower\n"
          .                    .                    .           .          .          .          .          .          .                   "4. Print MST Graphs Data\n"
          .                    .                    .           .          .          .          .          .          .                   "0. Exit\n"
         12 ( 0.00%)           0                    3 ( 0.00%)  1 ( 0.01%) 0          1 ( 0.03%) 1 ( 0.02%) 0          1 ( 0.04%)          "\nChoice: ";
      3,443 ( 0.00%)         744 ( 0.00%)         621 ( 0.00%) 75 ( 0.84%) 40 ( 0.30%) 69 ( 2.04%) 62 ( 1.42%) 24 ( 0.26%) 69 ( 2.52%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (1x)
          4 ( 0.00%)           2 ( 0.00%)           0           1 ( 0.01%) 0          0          1 ( 0.02%) .          .           => ???:0x000000000010cab0 (1x)
          4 ( 0.00%)           2 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010c910 (1x)
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .               while (true)
          .                    .                    .           .          .          .          .          .          .               {
          .                    .                    .           .          .          .          .          .          .                   try
          .                    .                    .           .          .          .          .          .          .                   {
        112 ( 0.00%)          16 ( 0.00%)          24 ( 0.00%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .                       sendMessage(client_FD, menu);            // Send the menu to the client
      3,867 ( 0.00%)         957 ( 0.00%)         551 ( 0.00%) 39 ( 0.44%) 17 ( 0.13%) 4 ( 0.12%) 16 ( 0.37%) 9 ( 0.10%) 4 ( 0.15%)  => ???:0x000000000010c6e0 (8x)
        896 ( 0.00%)         272 ( 0.00%)         120 ( 0.00%)  4 ( 0.04%) 1 ( 0.01%) .          .          .          .           => ???:0x000000000010c780 (8x)
        696 ( 0.00%)         232 ( 0.00%)         144 ( 0.00%)  8 ( 0.09%) 1 ( 0.01%) 0          8 ( 0.18%) .          .           => Server.cpp:Server::sendMessage(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (8x)
         40 ( 0.00%)           0                    8 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                       memset(buffer, 0, sizeof(buffer));       // Clear the buffer
      1,024 ( 0.00%)          16 ( 0.00%)         512 ( 0.00%) 13 ( 0.15%) 0          21 ( 0.62%) 1 ( 0.02%) 0          15 ( 0.55%)  => ???:0x000000000010c750 (8x)
         48 ( 0.00%)           8 ( 0.00%)           8 ( 0.00%)  .          .          .          .          .          .                       read(client_FD, buffer, sizeof(buffer)); // Read the client's choice
        352 ( 0.00%)         112 ( 0.00%)          64 ( 0.00%) 10 ( 0.11%) 2 ( 0.02%) 1 ( 0.03%) .          .          .           => ???:0x000000000010c9f0 (8x)
          .                    .                    .           .          .          .          .          .          .                   
          8 ( 0.00%)           0                    8 ( 0.00%)  1 ( 0.01%) .          .          .          .          .                       int choice = 0;
        168 ( 0.00%)           0                   48 ( 0.00%)  4 ( 0.04%) 0          0          2 ( 0.05%) .          .                       choice = std::stoi(buffer);
      1,720 ( 0.00%)         520 ( 0.00%)         352 ( 0.00%) 29 ( 0.33%) 0          3 ( 0.09%) .          .          .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (8x)
      2,156 ( 0.00%)         624 ( 0.00%)         360 ( 0.00%) 78 ( 0.88%) 7 ( 0.05%) 0          20 ( 0.46%) 3 ( 0.03%) .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) (8x)
         64 ( 0.00%)          24 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010c780 (8x)
         32 ( 0.00%)          16 ( 0.00%)           0           2 ( 0.02%) .          .          .          .          .           => ???:0x000000000010cab0 (8x)
         32 ( 0.00%)          16 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010c910 (8x)
         32 ( 0.00%)          16 ( 0.00%)           .           .          .          .          .          .          .                       if (choice < 0 || choice > 4)
          .                    .                    .           .          .          .          .          .          .                       {
          .                    .                    .           .          .          .          .          .          .                           continue;
          .                    .                    .           .          .          .          .          .          .                       }
          .                    .                    .           .          .          .          .          .          .           
         80 ( 0.00%)          24 ( 0.00%)           0           1 ( 0.01%) 1 ( 0.01%) 0          1 ( 0.02%) 1 ( 0.01%) .                       switch (choice)
          .                    .                    .           .          .          .          .          .          .                       {
          .                    .                    .           .          .          .          .          .          .                           case 0:
          5 ( 0.00%)           2 ( 0.00%)           1 ( 0.00%)  .          .          .          .          .          .                               stopClient(client_FD);
      1,124 ( 0.00%)         326 ( 0.00%)         170 ( 0.00%) 59 ( 0.66%) 4 ( 0.03%) 0          8 ( 0.18%) 4 ( 0.04%) .           => Server.cpp:Server::stopClient(int) (1x)
          1 ( 0.00%)           .                    .           .          .          .          .          .          .                               return;
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .                           case 1:
         10 ( 0.00%)           4 ( 0.00%)           2 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                               graphCreation(client_FD);
    101,447 ( 0.00%)      30,136 ( 0.00%)      24,402 ( 0.01%) 1,327 (14.89%) 15 ( 0.11%) 31 ( 0.91%) 708 (16.16%) 14 ( 0.15%) 30 ( 1.09%)  => Server.cpp:Server::graphCreation(int) (2x)
          2 ( 0.00%)           0                    0           1 ( 0.01%) .          .          .          .          .                               break;
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .                           case 2:
          5 ( 0.00%)           2 ( 0.00%)           1 ( 0.00%)  .          .          .          .          .          .                               sendDataToPipeline(client_FD);
      8,299 ( 0.00%)       2,551 ( 0.00%)       1,738 ( 0.00%) 220 ( 2.47%) 14 ( 0.11%) 0          83 ( 1.89%) 11 ( 0.12%) .           => Server.cpp:Server::sendDataToPipeline(int) (1x)
          1 ( 0.00%)           .                    .           .          .          .          .          .          .                               break;
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .                           case 3:
          5 ( 0.00%)           2 ( 0.00%)           1 ( 0.00%)  .          .          .          .          .          .                               sendDataToLeaderFollower(client_FD);
     10,831 ( 0.00%)       3,300 ( 0.00%)       2,221 ( 0.00%) 292 ( 3.28%) 34 ( 0.26%) 0          79 ( 1.80%) 23 ( 0.25%) .           => Server.cpp:Server::sendDataToLeaderFollower(int) (1x)
          1 ( 0.00%)           .                    .           .          .          .          .          .          .                               break;
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .                           case 4:
         15 ( 0.00%)           6 ( 0.00%)           3 ( 0.00%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .                               sendMSTDataToClient(client_FD);
     88,914 ( 0.00%)      23,998 ( 0.00%)      15,365 ( 0.00%) 1,150 (12.91%) 184 ( 1.38%) 70 ( 2.07%) 298 ( 6.80%) 133 ( 1.46%) 54 ( 1.97%)  => Server.cpp:Server::sendMSTDataToClient(int) (3x)
          3 ( 0.00%)           .                    .           .          .          .          .          .          .                               break;
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .                           default:
          .                    .                    .           .          .          .          .          .          .                               sendMessage(client_FD, "Invalid choice. Please try again.\n");
          .                    .                    .           .          .          .          .          .          .                               break;
          .                    .                    .           .          .          .          .          .          .                       }
          .                    .                    .           .          .          .          .          .          .                   }
          .                    .                    .           .          .          .          .          .          .                   catch (const std::exception &e)
          .                    .                    .           .          .          .          .          .          .                   {
          .                    .                    .           .          .          .          .          .          .                       continue;
          .                    .                    .           .          .          .          .          .          .                   }
          7 ( 0.00%)           0                    0           3 ( 0.03%) 0          0          1 ( 0.02%) .          .               }
         12 ( 0.00%)           6 ( 0.00%)           1 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .           }
        112 ( 0.00%)          34 ( 0.00%)          15 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c780 (1x)
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .           // Send a message to the client
          .                    .                    .           .          .          .          .          .          .           void Server::sendMessage(int client_FD, const std::string message)
        344 ( 0.00%)           0                  215 ( 0.00%)  3 ( 0.03%) 0          0          1 ( 0.02%) .          .           {
         86 ( 0.00%)          43 ( 0.00%)           .           .          .          .          .          .          .               if (client_FD < 0)
          .                    .                    .           .          .          .          .          .          .               {
          .                    .                    .           .          .          .          .          .          .                   std::perror("Error: Invalid client file descriptor.");
          .                    .                    .           .          .          .          .          .          .                   return;
          .                    .                    .           .          .          .          .          .          .               }
        559 ( 0.00%)         129 ( 0.00%)         129 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .               send(client_FD, message.c_str(), message.size(), 0);
      2,193 ( 0.00%)         688 ( 0.00%)         430 ( 0.00%) 14 ( 0.16%) 2 ( 0.02%) 0          4 ( 0.09%) .          .           => ???:0x000000000010c730 (43x)
        215 ( 0.00%)         129 ( 0.00%)           0           3 ( 0.03%) 0          0          1 ( 0.02%) .          .           => ???:0x000000000010c7b0 (43x)
        215 ( 0.00%)         129 ( 0.00%)           0           1 ( 0.01%) 0          0          1 ( 0.02%) .          .           => ???:0x000000000010c6d0 (43x)
        129 ( 0.00%)         129 ( 0.00%)           .           .          .          .          .          .          .           }
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .           void Server::graphCreation(int client_FD)
         22 ( 0.00%)           2 ( 0.00%)          12 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .           {
         42 ( 0.00%)           4 ( 0.00%)          10 ( 0.00%)  4 ( 0.04%) 0          0          2 ( 0.05%) .          .               sendMessage(client_FD, "Enter the number of vertices: ");
        823 ( 0.00%)         215 ( 0.00%)         138 ( 0.00%)  3 ( 0.03%) 2 ( 0.02%) 1 ( 0.03%) 0          2 ( 0.02%) 1 ( 0.04%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (2x)
        224 ( 0.00%)          68 ( 0.00%)          30 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c780 (2x)
        174 ( 0.00%)          58 ( 0.00%)          36 ( 0.00%)  .          .          .          .          .          .           => Server.cpp:Server::sendMessage(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (2x)
          8 ( 0.00%)           4 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010cab0 (2x)
          8 ( 0.00%)           4 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010c910 (2x)
         12 ( 0.00%)           4 ( 0.00%)           4 ( 0.00%)  .          .          .          .          .          .               int numVertices = getIntegerInputFromClient(client_FD);
      1,468 ( 0.00%)         350 ( 0.00%)         360 ( 0.00%) 12 ( 0.13%) 0          2 ( 0.06%) 6 ( 0.14%) 0          2 ( 0.07%)  => Server.cpp:Server::getIntegerInputFromClient(int) (2x)
          .                    .                    .           .          .          .          .          .          .           
          6 ( 0.00%)           2 ( 0.00%)           .           .          .          .          .          .          .               if (numVertices <= 1)
          .                    .                    .           .          .          .          .          .          .               {
          .                    .                    .           .          .          .          .          .          .                   sendMessage(client_FD, "Invalid number of vertices.\n");
          .                    .                    .           .          .          .          .          .          .                   return;
          .                    .                    .           .          .          .          .          .          .               }
          .                    .                    .           .          .          .          .          .          .           
         10 ( 0.00%)           0                    2 ( 0.00%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .               auto graph = std::make_shared<Graph>(numVertices);
     13,418 ( 0.00%)       3,942 ( 0.00%)       3,482 ( 0.00%) 240 ( 2.69%) 0          11 ( 0.32%) 144 ( 3.29%) 0          11 ( 0.40%)  => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<Graph> std::make_shared<Graph, int&>(int&) (2x)
          2 ( 0.00%)           0                    2 ( 0.00%)  .          .          .          .          .          .               int numEdges = -1;
         10 ( 0.00%)           4 ( 0.00%)           0           2 ( 0.02%) 0          0          1 ( 0.02%) .          .               while(numEdges < 0)
          .                    .                    .           .          .          .          .          .          .               {
          .                    .                    .           .          .          .          .          .          .                   try
          .                    .                    .           .          .          .          .          .          .                   {
         42 ( 0.00%)           4 ( 0.00%)          10 ( 0.00%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .                       sendMessage(client_FD, "Enter the number of edges: ");
        654 ( 0.00%)         186 ( 0.00%)         114 ( 0.00%)  3 ( 0.03%) 2 ( 0.02%) 0          0          1 ( 0.01%) .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (2x)
        224 ( 0.00%)          68 ( 0.00%)          30 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c780 (2x)
        174 ( 0.00%)          58 ( 0.00%)          36 ( 0.00%)  .          .          .          .          .          .           => Server.cpp:Server::sendMessage(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (2x)
          8 ( 0.00%)           4 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010cab0 (2x)
          8 ( 0.00%)           4 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010c910 (2x)
         12 ( 0.00%)           4 ( 0.00%)           4 ( 0.00%)  .          .          .          .          .          .                       numEdges = getIntegerInputFromClient(client_FD);
      1,468 ( 0.00%)         350 ( 0.00%)         360 ( 0.00%)  2 ( 0.02%) .          .          .          .          .           => Server.cpp:Server::getIntegerInputFromClient(int) (2x)
          .                    .                    .           .          .          .          .          .          .                   }
          .                    .                    .           .          .          .          .          .          .                   catch (const std::exception &e)
          .                    .                    .           .          .          .          .          .          .                   {
          .                    .                    .           .          .          .          .          .          .                       sendMessage(client_FD, "Invalid number of edges.\n");
          .                    .                    .           .          .          .          .          .          .                       continue;
          .                    .                    .           .          .          .          .          .          .                   }
          .                    .                    .           .          .          .          .          .          .               }
          .                    .                    .           .          .          .          .          .          .           
         30 ( 0.00%)          14 ( 0.00%)           7 ( 0.00%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .               for (int i = 0; i < numEdges; ++i)
          .                    .                    .           .          .          .          .          .          .               {
         15 ( 0.00%)           0                   15 ( 0.00%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .                   int src = -1, dest = -1, weight = -1;
         65 ( 0.00%)          35 ( 0.00%)           0           2 ( 0.02%) 0          0          1 ( 0.02%) .          .                   while((src < 0 || src >= numVertices) || (dest < 0 || dest >= numVertices))
          .                    .                    .           .          .          .          .          .          .                   {
          .                    .                    .           .          .          .          .          .          .                       try
          .                    .                    .           .          .          .          .          .          .                       {
        105 ( 0.00%)          10 ( 0.00%)          25 ( 0.00%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .                           sendMessage(client_FD, "Edge - Enter Source / From: ");
      1,635 ( 0.00%)         465 ( 0.00%)         285 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (5x)
        560 ( 0.00%)         170 ( 0.00%)          75 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c780 (5x)
        435 ( 0.00%)         145 ( 0.00%)          90 ( 0.00%)  .          .          .          .          .          .           => Server.cpp:Server::sendMessage(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (5x)
         20 ( 0.00%)          10 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010cab0 (5x)
         20 ( 0.00%)          10 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010c910 (5x)
         30 ( 0.00%)          10 ( 0.00%)          10 ( 0.00%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .                           src = getIntegerInputFromClient(client_FD);
      3,662 ( 0.00%)         875 ( 0.00%)         900 ( 0.00%)  9 ( 0.10%) 0          0          2 ( 0.05%) .          .           => Server.cpp:Server::getIntegerInputFromClient(int) (5x)
        105 ( 0.00%)          10 ( 0.00%)          25 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                           sendMessage(client_FD, "Edge - Enter Destination / To: ");
      1,635 ( 0.00%)         465 ( 0.00%)         285 ( 0.00%)  0          1 ( 0.01%) 0          0          1 ( 0.01%) .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (5x)
        560 ( 0.00%)         170 ( 0.00%)          75 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c780 (5x)
        435 ( 0.00%)         145 ( 0.00%)          90 ( 0.00%)  .          .          .          .          .          .           => Server.cpp:Server::sendMessage(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (5x)
         20 ( 0.00%)          10 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010cab0 (5x)
         20 ( 0.00%)          10 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010c910 (5x)
         30 ( 0.00%)          10 ( 0.00%)          10 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                           dest = getIntegerInputFromClient(client_FD);
      3,670 ( 0.00%)         875 ( 0.00%)         900 ( 0.00%)  5 ( 0.06%) .          .          .          .          .           => Server.cpp:Server::getIntegerInputFromClient(int) (5x)
        105 ( 0.00%)          10 ( 0.00%)          25 ( 0.00%)  .          .          .          .          .          .                           sendMessage(client_FD, "Edge - Enter Weight: ");
      1,635 ( 0.00%)         465 ( 0.00%)         285 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (5x)
        560 ( 0.00%)         170 ( 0.00%)          75 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c780 (5x)
        435 ( 0.00%)         145 ( 0.00%)          90 ( 0.00%)  .          .          .          .          .          .           => Server.cpp:Server::sendMessage(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (5x)
         20 ( 0.00%)          10 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010cab0 (5x)
         20 ( 0.00%)          10 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010c910 (5x)
         30 ( 0.00%)          10 ( 0.00%)          10 ( 0.00%)  .          .          .          .          .          .                           weight = getIntegerInputFromClient(client_FD);
      3,670 ( 0.00%)         875 ( 0.00%)         900 ( 0.00%)  5 ( 0.06%) .          .          .          .          .           => Server.cpp:Server::getIntegerInputFromClient(int) (5x)
          .                    .                    .           .          .          .          .          .          .                       }
          .                    .                    .           .          .          .          .          .          .                       catch (const std::exception &e)
          .                    .                    .           .          .          .          .          .          .                       {
          .                    .                    .           .          .          .          .          .          .                           sendMessage(client_FD, "Invalid vertices in edge.\n");
          .                    .                    .           .          .          .          .          .          .                           continue;  // retry this edge
          .                    .                    .           .          .          .          .          .          .                       }
          .                    .                    .           .          .          .          .          .          .                   }
          .                    .                    .           .          .          .          .          .          .           
         45 ( 0.00%)          15 ( 0.00%)          10 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                   graph->addEdge(src, dest, weight);  // Add the edge to the graph
      1,010 ( 0.00%)         355 ( 0.00%)         210 ( 0.00%) 14 ( 0.16%) 0          0          8 ( 0.18%) .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/Graph.cpp:Graph::addEdge(int, int, int) (5x)
        140 ( 0.00%)          50 ( 0.00%)          40 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<Graph, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (5x)
         15 ( 0.00%)           0                   15 ( 0.00%)  .          .          .          .          .          .                   src = -1, dest = -1, weight = -1;  // Reset the values
          .                    .                    .           .          .          .          .          .          .               }
          .                    .                    .           .          .          .          .          .          .           
          2 ( 0.00%)           0                    2 ( 0.00%)  .          .          .          .          .          .               std::unique_ptr<MSTStrategy> algorithmType;
          .                    .                    .           .          .          .          .          .          .               while (true)
          .                    .                    .           .          .          .          .          .          .               {
         42 ( 0.00%)           4 ( 0.00%)          10 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                   sendMessage(client_FD, "Choose MST algorithm:\n"                                
        907 ( 0.00%)         243 ( 0.00%)         150 ( 0.00%)  4 ( 0.04%) 1 ( 0.01%) 2 ( 0.06%) 0          1 ( 0.01%) 2 ( 0.07%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (2x)
        224 ( 0.00%)          68 ( 0.00%)          30 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c780 (2x)
        174 ( 0.00%)          58 ( 0.00%)          36 ( 0.00%)  .          .          .          .          .          .           => Server.cpp:Server::sendMessage(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (2x)
          8 ( 0.00%)           4 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010cab0 (2x)
          8 ( 0.00%)           4 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010c910 (2x)
          .                    .                    .           .          .          .          .          .          .                                       "1. Prim's Algorithm\n"
          .                    .                    .           .          .          .          .          .          .                                      "2. Kruskal's Algorithm\nChoice: ");
         12 ( 0.00%)           4 ( 0.00%)           4 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                   int algorithmChoice = getIntegerInputFromClient(client_FD);
      1,468 ( 0.00%)         350 ( 0.00%)         360 ( 0.00%)  2 ( 0.02%) .          .          .          .          .           => Server.cpp:Server::getIntegerInputFromClient(int) (2x)
          .                    .                    .           .          .          .          .          .          .                   
          4 ( 0.00%)           2 ( 0.00%)           .           .          .          .          .          .          .                   if (algorithmChoice == 1)
          .                    .                    .           .          .          .          .          .          .                   {
         15 ( 0.00%)           0                    4 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                       algorithmType = std::move(MSTFactory::createMSTStrategy(MSTFactory::AlgorithmType::Prim));
        972 ( 0.00%)         270 ( 0.00%)         265 ( 0.00%) 40 ( 0.45%) 0          1 ( 0.03%) 31 ( 0.71%) 0          1 ( 0.04%)  => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/MSTFactory.hpp:MSTFactory::createMSTStrategy(MSTFactory::AlgorithmType) (1x)
        382 ( 0.00%)         124 ( 0.00%)         116 ( 0.00%) 13 ( 0.15%) 0          0          13 ( 0.30%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> >::operator=(std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> >&&) (1x)
         67 ( 0.00%)          22 ( 0.00%)          20 ( 0.00%)  2 ( 0.02%) 0          0          2 ( 0.05%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> >::~unique_ptr() (1x)
          7 ( 0.00%)           3 ( 0.00%)           2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> > >::type&& std::move<std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> > >(std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> >&&) (1x)
          1 ( 0.00%)           .                    .           .          .          .          .          .          .                       break;
          .                    .                    .           .          .          .          .          .          .                   }
          2 ( 0.00%)           1 ( 0.00%)           .           .          .          .          .          .          .                   else if (algorithmChoice == 2)
          .                    .                    .           .          .          .          .          .          .                   {
         15 ( 0.00%)           0                    4 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                       algorithmType = std::move(MSTFactory::createMSTStrategy(MSTFactory::AlgorithmType::Kruskal));
        805 ( 0.00%)         241 ( 0.00%)         241 ( 0.00%) 32 ( 0.36%) 0          0          22 ( 0.50%) .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/MSTFactory.hpp:MSTFactory::createMSTStrategy(MSTFactory::AlgorithmType) (1x)
        382 ( 0.00%)         124 ( 0.00%)         116 ( 0.00%)  8 ( 0.09%) .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> >::operator=(std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> >&&) (1x)
         67 ( 0.00%)          22 ( 0.00%)          20 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> >::~unique_ptr() (1x)
          7 ( 0.00%)           3 ( 0.00%)           2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> > >::type&& std::move<std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> > >(std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> >&&) (1x)
          1 ( 0.00%)           .                    .           .          .          .          .          .          .                       break;
          .                    .                    .           .          .          .          .          .          .                   }
          .                    .                    .           .          .          .          .          .          .                   else
          .                    .                    .           .          .          .          .          .          .                   {
          .                    .                    .           .          .          .          .          .          .                       sendMessage(client_FD, "Invalid algorithm choice.\n");
          .                    .                    .           .          .          .          .          .          .                       continue;
          .                    .                    .           .          .          .          .          .          .                   }
          .                    .                    .           .          .          .          .          .          .               }
          .                    .                    .           .          .          .          .          .          .           
         38 ( 0.00%)           0                   10 ( 0.00%)  3 ( 0.03%) 0          0          2 ( 0.05%) .          .               graph->setMSTStrategy(std::move(algorithmType));  // Set the chosen algorithm
        814 ( 0.00%)         262 ( 0.00%)         246 ( 0.00%)  2 ( 0.02%) 0          0          2 ( 0.05%) .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/Graph.cpp:Graph::setMSTStrategy(std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> >) (2x)
        134 ( 0.00%)          44 ( 0.00%)          40 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> >::~unique_ptr() (2x)
         56 ( 0.00%)          20 ( 0.00%)          16 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<Graph, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (2x)
        288 ( 0.00%)          90 ( 0.00%)          88 ( 0.00%)  5 ( 0.06%) 0          0          3 ( 0.07%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> >::unique_ptr(std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> >&&) (2x)
         14 ( 0.00%)           6 ( 0.00%)           4 ( 0.00%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> >&>::type&& std::move<std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> >&>(std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> >&) (2x)
         10 ( 0.00%)           0                    4 ( 0.00%)  .          .          .          .          .          .               graph->activateMSTStrategy();  // Store the graph along with the chosen algorithm
     47,038 ( 0.00%)      14,759 ( 0.00%)      11,545 ( 0.00%) 630 ( 7.07%) 8 ( 0.06%) 13 ( 0.38%) 353 ( 8.06%) 8 ( 0.09%) 12 ( 0.44%)  => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/Graph.cpp:Graph::activateMSTStrategy() (2x)
         56 ( 0.00%)          20 ( 0.00%)          16 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<Graph, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (2x)
          .                    .                    .           .          .          .          .          .          .           
         14 ( 0.00%)           0                    4 ( 0.00%)  .          .          .          .          .          .               if (graph->getValidationMSTExist())
         56 ( 0.00%)          20 ( 0.00%)          16 ( 0.00%)  2 ( 0.02%) .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<Graph, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (2x)
        186 ( 0.00%)          56 ( 0.00%)          54 ( 0.00%)  5 ( 0.06%) 0          0          3 ( 0.07%) .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/Graph.cpp:Graph::getValidationMSTExist() const (2x)
          .                    .                    .           .          .          .          .          .          .               {
         12 ( 0.00%)           2 ( 0.00%)           2 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                   std::lock_guard<std::mutex> lock(this->mtx);
        174 ( 0.00%)          48 ( 0.00%)          36 ( 0.00%)  8 ( 0.09%) .          .          .          .          .           => /usr/include/c++/11/bits/std_mutex.h:std::lock_guard<std::mutex>::lock_guard(std::mutex&) (2x)
         10 ( 0.00%)           2 ( 0.00%)           2 ( 0.00%)  .          .          .          .          .          .                   this->vec_SharedPtrGraphs.push_back(graph);
      2,518 ( 0.00%)         850 ( 0.00%)         688 ( 0.00%) 96 ( 1.08%) 0          0          47 ( 1.07%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<Graph>, std::allocator<std::shared_ptr<Graph> > >::push_back(std::shared_ptr<Graph> const&) (2x)
         28 ( 0.00%)           2 ( 0.00%)           6 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                   this->vec_WeakPtrGraphs_Unprocessed.push_back(graph);
      2,918 ( 0.00%)         954 ( 0.00%)         783 ( 0.00%) 95 ( 1.07%) 0          0          42 ( 0.96%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::push_back(std::weak_ptr<Graph>&&) (2x)
        160 ( 0.00%)          58 ( 0.00%)          42 ( 0.00%) 11 ( 0.12%) .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<Graph>::weak_ptr<Graph, void>(std::shared_ptr<Graph> const&) (2x)
         70 ( 0.00%)          20 ( 0.00%)          16 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<Graph>::~weak_ptr() (2x)
         42 ( 0.00%)           4 ( 0.00%)          10 ( 0.00%)  2 ( 0.02%) 0          0          2 ( 0.05%) .          .                   sendMessage(client_FD, "Graph created and stored.\n");
        823 ( 0.00%)         215 ( 0.00%)         138 ( 0.00%) 17 ( 0.19%) 1 ( 0.01%) 1 ( 0.03%) 0          1 ( 0.01%) 1 ( 0.04%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (2x)
        224 ( 0.00%)          68 ( 0.00%)          30 ( 0.00%)  2 ( 0.02%) .          .          .          .          .           => ???:0x000000000010c780 (2x)
        174 ( 0.00%)          58 ( 0.00%)          36 ( 0.00%)  5 ( 0.06%) .          .          .          .          .           => Server.cpp:Server::sendMessage(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (2x)
          8 ( 0.00%)           4 ( 0.00%)           0           2 ( 0.02%) .          .          .          .          .           => ???:0x000000000010cab0 (2x)
          8 ( 0.00%)           4 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010c910 (2x)
          8 ( 0.00%)           0                    2 ( 0.00%)  .          .          .          .          .          .               }
        138 ( 0.00%)          36 ( 0.00%)          28 ( 0.00%)  1 ( 0.01%) .          .          .          .          .           => /usr/include/c++/11/bits/std_mutex.h:std::lock_guard<std::mutex>::~lock_guard() (2x)
          .                    .                    .           .          .          .          .          .          .               else
          .                    .                    .           .          .          .          .          .          .               {
          .                    .                    .           .          .          .          .          .          .                   graph.reset();
          .                    .                    .           .          .          .          .          .          .                   sendMessage(client_FD, "MST does not exist for the given graph.\n");
          .                    .                    .           .          .          .          .          .          .               }
         30 ( 0.00%)          12 ( 0.00%)           4 ( 0.00%)  5 ( 0.06%) 0          0          3 ( 0.07%) .          .           }
        134 ( 0.00%)          44 ( 0.00%)          40 ( 0.00%)  3 ( 0.03%) .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<MSTStrategy, std::default_delete<MSTStrategy> >::~unique_ptr() (2x)
        138 ( 0.00%)          42 ( 0.00%)          32 ( 0.00%)  5 ( 0.06%) .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<Graph>::~shared_ptr() (2x)
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .           void Server::sendDataToPipeline(int client_FD)
         10 ( 0.00%)           1 ( 0.00%)           5 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .           {
         11 ( 0.00%)           2 ( 0.00%)           2 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .               if(this->vec_WeakPtrGraphs_Unprocessed.size() > 0) filterUnprocessedGraphs();
      3,403 ( 0.00%)       1,106 ( 0.00%)         880 ( 0.00%) 60 ( 0.67%) 0          0          37 ( 0.84%) .          .           => Server.cpp:Server::filterUnprocessedGraphs() (1x)
         13 ( 0.00%)           6 ( 0.00%)           2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::size() const (1x)
          7 ( 0.00%)           3 ( 0.00%)           1 ( 0.00%)  1 ( 0.01%) .          .          .          .          .               this->pipeline->processGraphs(this->vec_WeakPtrGraphs_Unprocessed);
      4,243 ( 0.00%)       1,248 ( 0.00%)         747 ( 0.00%) 135 ( 1.52%) 12 ( 0.09%) 0          41 ( 0.94%) 9 ( 0.10%) .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/Pipeline.cpp:Pipeline::processGraphs(std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >&) (1x)
         21 ( 0.00%)           2 ( 0.00%)           5 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .               sendMessage(client_FD, "All graphs have been sent to Pipeline for processing using Active Object.\n");
        377 ( 0.00%)         111 ( 0.00%)          63 ( 0.00%) 14 ( 0.16%) 2 ( 0.02%) 0          0          2 ( 0.02%) .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (1x)
        112 ( 0.00%)          34 ( 0.00%)          15 ( 0.00%)  3 ( 0.03%) .          .          .          .          .           => ???:0x000000000010c780 (1x)
         87 ( 0.00%)          29 ( 0.00%)          18 ( 0.00%)  1 ( 0.01%) .          .          .          .          .           => Server.cpp:Server::sendMessage(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (1x)
          4 ( 0.00%)           2 ( 0.00%)           0           1 ( 0.01%) .          .          .          .          .           => ???:0x000000000010cab0 (1x)
          4 ( 0.00%)           2 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010c910 (1x)
          7 ( 0.00%)           5 ( 0.00%)           0           2 ( 0.02%) 0          0          2 ( 0.05%) .          .           }
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .           void Server::sendDataToLeaderFollower(int client_FD)
         10 ( 0.00%)           1 ( 0.00%)           5 ( 0.00%)  1 ( 0.01%) .          .          .          .          .           {
         11 ( 0.00%)           2 ( 0.00%)           2 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .               if(this->vec_WeakPtrGraphs_Unprocessed.size() > 0) filterUnprocessedGraphs();
      6,705 ( 0.00%)       2,090 ( 0.00%)       1,515 ( 0.00%) 129 ( 1.45%) 1 ( 0.01%) 0          9 ( 0.21%) 1 ( 0.01%) .           => Server.cpp:Server::filterUnprocessedGraphs() (1x)
         13 ( 0.00%)           6 ( 0.00%)           2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::size() const (1x)
          7 ( 0.00%)           3 ( 0.00%)           1 ( 0.00%)  1 ( 0.01%) .          .          .          .          .               this->leaderfollower->processGraphs(this->vec_WeakPtrGraphs_Unprocessed);
      3,489 ( 0.00%)       1,021 ( 0.00%)         599 ( 0.00%) 143 ( 1.60%) 32 ( 0.24%) 0          67 ( 1.53%) 22 ( 0.24%) .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/LeaderFollower.cpp:LeaderFollower::processGraphs(std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >&) (1x)
         21 ( 0.00%)           2 ( 0.00%)           5 ( 0.00%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .               sendMessage(client_FD, "All graphs have been sent to Leader-Follower for processing.\n");
        361 ( 0.00%)         103 ( 0.00%)          59 ( 0.00%) 11 ( 0.12%) 1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (1x)
        112 ( 0.00%)          34 ( 0.00%)          15 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c780 (1x)
         87 ( 0.00%)          29 ( 0.00%)          18 ( 0.00%)  2 ( 0.02%) .          .          .          .          .           => Server.cpp:Server::sendMessage(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (1x)
          4 ( 0.00%)           2 ( 0.00%)           0           1 ( 0.01%) .          .          .          .          .           => ???:0x000000000010cab0 (1x)
          4 ( 0.00%)           2 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010c910 (1x)
          7 ( 0.00%)           5 ( 0.00%)           0           1 ( 0.01%) 0          0          1 ( 0.02%) .          .           }
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .           void Server::filterUnprocessedGraphs()
         18 ( 0.00%)           2 ( 0.00%)           8 ( 0.00%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .           {
          6 ( 0.00%)           0                    2 ( 0.00%)  .          .          .          .          .          .               std::vector<std::weak_ptr<Graph>> tempWeakGraphs;
        134 ( 0.00%)          40 ( 0.00%)          40 ( 0.00%)  9 ( 0.10%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::vector() (2x)
          .                    .                    .           .          .          .          .          .          .               {
          .                    .                    .           .          .          .          .          .          .                   // locking to get shared and access the graph methods and check the status to filter the one that are not yet processed
         12 ( 0.00%)           2 ( 0.00%)           2 ( 0.00%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .                   auto weakGraphs = this->vec_WeakPtrGraphs_Unprocessed;
      1,669 ( 0.00%)         543 ( 0.00%)         456 ( 0.00%) 48 ( 0.54%) 0          0          21 ( 0.48%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::vector(std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > const&) (2x)
         78 ( 0.00%)           4 ( 0.00%)          24 ( 0.00%)  6 ( 0.07%) 0          0          3 ( 0.07%) .          .                   for (const auto &unlockedPtrGraph : weakGraphs)
        170 ( 0.00%)          65 ( 0.00%)          50 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<std::weak_ptr<Graph>*, std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >(__gnu_cxx::__normal_iterator<std::weak_ptr<Graph>*, std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > > const&, __gnu_cxx::__normal_iterator<std::weak_ptr<Graph>*, std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > > const&) (5x)
         64 ( 0.00%)          24 ( 0.00%)          16 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::end() (2x)
         62 ( 0.00%)          24 ( 0.00%)          16 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::begin() (2x)
         36 ( 0.00%)          18 ( 0.00%)           9 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::weak_ptr<Graph>*, std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::operator++() (3x)
         24 ( 0.00%)          12 ( 0.00%)           6 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::weak_ptr<Graph>*, std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > > >::operator*() const (3x)
          .                    .                    .           .          .          .          .          .          .                   {
         30 ( 0.00%)           3 ( 0.00%)           6 ( 0.00%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .                       if (auto sharedGraph = unlockedPtrGraph.lock()) // Lock the weak pointer to check validity
        462 ( 0.00%)         150 ( 0.00%)          96 ( 0.00%)  7 ( 0.08%) 0          0          1 ( 0.02%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<Graph>::lock() const (3x)
         30 ( 0.00%)          12 ( 0.00%)           6 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<Graph, (__gnu_cxx::_Lock_policy)2>::operator bool() const (3x)
          .                    .                    .           .          .          .          .          .          .                       {
         27 ( 0.00%)           0                    6 ( 0.00%)  .          .          .          .          .          .                           if (sharedGraph->getMSTDataStatusCalculation() == NO_MST_DATA_CALCULATION)
         84 ( 0.00%)          30 ( 0.00%)          24 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<Graph, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (3x)
         24 ( 0.00%)          12 ( 0.00%)           6 ( 0.00%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/Graph.cpp:Graph::getMSTDataStatusCalculation() const (3x)
          .                    .                    .           .          .          .          .          .          .                           {
         26 ( 0.00%)           0                    6 ( 0.00%)  .          .          .          .          .          .                               tempWeakGraphs.push_back(sharedGraph);  // Add the graph to the temporary vector
      2,346 ( 0.00%)         798 ( 0.00%)         656 ( 0.00%)  8 ( 0.09%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::push_back(std::weak_ptr<Graph>&&) (2x)
        160 ( 0.00%)          58 ( 0.00%)          42 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<Graph>::weak_ptr<Graph, void>(std::shared_ptr<Graph> const&) (2x)
         70 ( 0.00%)          20 ( 0.00%)          16 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::weak_ptr<Graph>::~weak_ptr() (2x)
          .                    .                    .           .          .          .          .          .          .                           }
          9 ( 0.00%)           0                    3 ( 0.00%)  .          .          .          .          .          .                       }
        207 ( 0.00%)          63 ( 0.00%)          48 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<Graph>::~shared_ptr() (3x)
          .                    .                    .           .          .          .          .          .          .                   }
          6 ( 0.00%)           0                    2 ( 0.00%)  .          .          .          .          .          .               }
        854 ( 0.00%)         268 ( 0.00%)         194 ( 0.00%) 22 ( 0.25%) 0          0          2 ( 0.05%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::~vector() (2x)
         24 ( 0.00%)           2 ( 0.00%)           4 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .               if(this->vec_WeakPtrGraphs_Unprocessed.size() != tempWeakGraphs.size()) {
         52 ( 0.00%)          24 ( 0.00%)           8 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::size() const (4x)
          6 ( 0.00%)           1 ( 0.00%)           1 ( 0.00%)  .          .          .          .          .          .                   std::lock_guard<std::mutex> lock(this->mtx);
         87 ( 0.00%)          24 ( 0.00%)          18 ( 0.00%)  4 ( 0.04%) .          .          .          .          .           => /usr/include/c++/11/bits/std_mutex.h:std::lock_guard<std::mutex>::lock_guard(std::mutex&) (1x)
          9 ( 0.00%)           1 ( 0.00%)           2 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                   this->vec_WeakPtrGraphs_Unprocessed = std::move(tempWeakGraphs);  // prevent copying
        941 ( 0.00%)         318 ( 0.00%)         247 ( 0.00%)  8 ( 0.09%) 0          0          6 ( 0.14%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::operator=(std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >&&) (1x)
          7 ( 0.00%)           3 ( 0.00%)           2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >&>::type&& std::move<std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >&>(std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >&) (1x)
         21 ( 0.00%)           1 ( 0.00%)           5 ( 0.00%)  1 ( 0.01%) .          .          .          .          .                   std::cout << "Unprocessed Graphs are filtered, remain " << tempWeakGraphs.size() <<" graphs to process"<< std::endl;
        864 ( 0.00%)         216 ( 0.00%)          90 ( 0.00%) 15 ( 0.17%) 1 ( 0.01%) 0          1 ( 0.02%) 1 ( 0.01%) .           => ???:0x000000000010c8b0 (2x)
        486 ( 0.00%)         160 ( 0.00%)          78 ( 0.00%) 25 ( 0.28%) 0          0          1 ( 0.02%) .          .           => ???:0x000000000010c8e0 (1x)
        383 ( 0.00%)         101 ( 0.00%)          61 ( 0.00%) 17 ( 0.19%) .          .          .          .          .           => ???:0x000000000010c620 (1x)
         13 ( 0.00%)           6 ( 0.00%)           2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::size() const (1x)
          3 ( 0.00%)           0                    1 ( 0.00%)  .          .          .          .          .          .               }
         69 ( 0.00%)          18 ( 0.00%)          14 ( 0.00%)  2 ( 0.02%) .          .          .          .          .           => /usr/include/c++/11/bits/std_mutex.h:std::lock_guard<std::mutex>::~lock_guard() (1x)
         18 ( 0.00%)          10 ( 0.00%)           2 ( 0.00%)  6 ( 0.07%) 0          0          4 ( 0.09%) .          .           }
        517 ( 0.00%)         163 ( 0.00%)         120 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::weak_ptr<Graph>, std::allocator<std::weak_ptr<Graph> > >::~vector() (2x)
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .           // Get MST data based on choice
          .                    .                    .           .          .          .          .          .          .           void Server::sendMSTDataToClient(int client_FD)
         30 ( 0.00%)           3 ( 0.00%)          15 ( 0.00%)  1 ( 0.01%) .          .          .          .          .           {
          6 ( 0.00%)           3 ( 0.00%)           .           .          .          .          .          .          .               if (client_FD < 0)
          .                    .                    .           .          .          .          .          .          .               {
          .                    .                    .           .          .          .          .          .          .                   std::perror("Error: Invalid client file descriptor.");
          .                    .                    .           .          .          .          .          .          .                   return;
          .                    .                    .           .          .          .          .          .          .               }
          3 ( 0.00%)           0                    3 ( 0.00%)  3 ( 0.03%) 0          0          1 ( 0.02%) .          .               int counter = 0; // Number of graphs start from 1 (increase in every loop - also the first one)
        144 ( 0.00%)           9 ( 0.00%)          38 ( 0.00%)  3 ( 0.03%) 0          0          2 ( 0.05%) .          .               for (auto myGraph : this->vec_SharedPtrGraphs)
        400 ( 0.00%)         145 ( 0.00%)         105 ( 0.00%)  3 ( 0.03%) .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<Graph>::shared_ptr(std::shared_ptr<Graph> const&) (5x)
        272 ( 0.00%)         104 ( 0.00%)          80 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .           => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<std::shared_ptr<Graph>*, std::vector<std::shared_ptr<Graph>, std::allocator<std::shared_ptr<Graph> > > >(__gnu_cxx::__normal_iterator<std::shared_ptr<Graph>*, std::vector<std::shared_ptr<Graph>, std::allocator<std::shared_ptr<Graph> > > > const&, __gnu_cxx::__normal_iterator<std::shared_ptr<Graph>*, std::vector<std::shared_ptr<Graph>, std::allocator<std::shared_ptr<Graph> > > > const&) (8x)
         96 ( 0.00%)          36 ( 0.00%)          24 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<Graph>, std::allocator<std::shared_ptr<Graph> > >::end() (3x)
         93 ( 0.00%)          36 ( 0.00%)          24 ( 0.00%)  6 ( 0.07%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<Graph>, std::allocator<std::shared_ptr<Graph> > >::begin() (3x)
         60 ( 0.00%)          30 ( 0.00%)          15 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<Graph>*, std::vector<std::shared_ptr<Graph>, std::allocator<std::shared_ptr<Graph> > > >::operator++() (5x)
         40 ( 0.00%)          20 ( 0.00%)          10 ( 0.00%)  2 ( 0.02%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<Graph>*, std::vector<std::shared_ptr<Graph>, std::allocator<std::shared_ptr<Graph> > > >::operator*() const (5x)
          .                    .                    .           .          .          .          .          .          .               {
          5 ( 0.00%)           0                    5 ( 0.00%)  .          .          .          .          .          .                   counter++; // Increase Number of graphs (Starting from 1)
        115 ( 0.00%)           5 ( 0.00%)          25 ( 0.00%)  2 ( 0.02%) 0          0          2 ( 0.05%) .          .                   std::string message = "********* Graph Number " + std::to_string(counter) + " *********.\n ";
      5,004 ( 0.00%)       1,207 ( 0.00%)         602 ( 0.00%) 69 ( 0.77%) 37 ( 0.28%) 2 ( 0.06%) 24 ( 0.55%) 28 ( 0.31%) 1 ( 0.04%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (5x)
      3,313 ( 0.00%)         835 ( 0.00%)         473 ( 0.00%) 36 ( 0.40%) 13 ( 0.10%) 2 ( 0.06%) 8 ( 0.18%) 12 ( 0.13%) 1 ( 0.04%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*) (5x)
         80 ( 0.00%)          30 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010c780 (10x)
        915 ( 0.00%)         310 ( 0.00%)         215 ( 0.00%) 32 ( 0.36%) 0          0          15 ( 0.34%) .          .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::to_string(int) (5x)
         70 ( 0.00%)          10 ( 0.00%)          15 ( 0.00%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .                   sendMessage(client_FD, message);
        560 ( 0.00%)         170 ( 0.00%)          75 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c780 (5x)
      1,205 ( 0.00%)         350 ( 0.00%)         220 ( 0.00%)  8 ( 0.09%) .          .          .          .          .           => ???:0x000000000010c6e0 (5x)
        435 ( 0.00%)         145 ( 0.00%)          90 ( 0.00%)  4 ( 0.04%) 1 ( 0.01%) .          .          .          .           => Server.cpp:Server::sendMessage(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (5x)
         30 ( 0.00%)           0                    5 ( 0.00%)  .          .          .          .          .          .                   if (myGraph == nullptr)
        110 ( 0.00%)          35 ( 0.00%)          30 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:bool std::operator==<Graph>(std::shared_ptr<Graph> const&, decltype(nullptr)) (5x)
          .                    .                    .           .          .          .          .          .          .                   {
          .                    .                    .           .          .          .          .          .          .                       continue;
          .                    .                    .           .          .          .          .          .          .                   }
         40 ( 0.00%)           0                   10 ( 0.00%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .                   else if (!myGraph->getValidationMSTExist())
        140 ( 0.00%)          50 ( 0.00%)          40 ( 0.00%)  2 ( 0.02%) .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<Graph, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (5x)
        465 ( 0.00%)         140 ( 0.00%)         135 ( 0.00%)  9 ( 0.10%) .          .          .          .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/Graph.cpp:Graph::getValidationMSTExist() const (5x)
          .                    .                    .           .          .          .          .          .          .                   {
          .                    .                    .           .          .          .          .          .          .                       message = "MST Graph does exist, unable show mst data!.\n";
          .                    .                    .           .          .          .          .          .          .                       sendMessage(client_FD, message);
          .                    .                    .           .          .          .          .          .          .                       continue;
          .                    .                    .           .          .          .          .          .          .                   }
         45 ( 0.00%)           0                   10 ( 0.00%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .                   else if(myGraph->getMSTDataStatusCalculation() == NO_MST_DATA_CALCULATION)
        140 ( 0.00%)          50 ( 0.00%)          40 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<Graph, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (5x)
         40 ( 0.00%)          20 ( 0.00%)          10 ( 0.00%)  4 ( 0.04%) .          .          .          .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/Graph.cpp:Graph::getMSTDataStatusCalculation() const (5x)
          .                    .                    .           .          .          .          .          .          .                   {
          5 ( 0.00%)           0                    1 ( 0.00%)  .          .          .          .          .          .                       message = "MST is not computed. Please pass it to Pipeline or Leader-Follower.\n";
        570 ( 0.00%)         136 ( 0.00%)          83 ( 0.00%)  6 ( 0.07%) 1 ( 0.01%) 3 ( 0.09%) 2 ( 0.05%) 1 ( 0.01%) 3 ( 0.11%)  => ???:0x000000000010c9b0 (1x)
         14 ( 0.00%)           2 ( 0.00%)           3 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .                       sendMessage(client_FD, message);
        112 ( 0.00%)          34 ( 0.00%)          15 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c780 (1x)
        249 ( 0.00%)          74 ( 0.00%)          48 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c6e0 (1x)
         87 ( 0.00%)          29 ( 0.00%)          18 ( 0.00%)  .          .          .          .          .          .           => Server.cpp:Server::sendMessage(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (1x)
          2 ( 0.00%)           .                    .           .          .          .          .          .          .                       continue;
          .                    .                    .           .          .          .          .          .          .                   }
        144 ( 0.00%)           0                   36 ( 0.00%)  8 ( 0.09%) 0          0          3 ( 0.07%) .          .                   message = "Weight of the longest path in MST: " + std::to_string(myGraph->getMSTLongestDistance()) + "\n";
      1,300 ( 0.00%)         316 ( 0.00%)         224 ( 0.00%)  4 ( 0.04%) 2 ( 0.02%) 0          0          2 ( 0.02%) .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (4x)
      1,576 ( 0.00%)         420 ( 0.00%)         272 ( 0.00%)  0          1 ( 0.01%) 0          0          1 ( 0.01%) .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*) (4x)
        512 ( 0.00%)         160 ( 0.00%)          60 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c780 (12x)
        732 ( 0.00%)         248 ( 0.00%)         172 ( 0.00%)  3 ( 0.03%) .          .          .          .          .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::to_string(int) (4x)
        112 ( 0.00%)          40 ( 0.00%)          32 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<Graph, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (4x)
        132 ( 0.00%)          36 ( 0.00%)          36 ( 0.00%)  8 ( 0.09%) 0          0          3 ( 0.07%) .          .           => ???:0x000000000010c980 (4x)
         32 ( 0.00%)          16 ( 0.00%)           8 ( 0.00%)  .          .          .          .          .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/Graph.cpp:Graph::getMSTLongestDistance() const (4x)
        144 ( 0.00%)           0                   36 ( 0.00%)  6 ( 0.07%) 0          0          2 ( 0.05%) .          .                   message += "Weight of the shortest path in MST: " + std::to_string(myGraph->getMSTShortestDistance()) + "\n";
      1,300 ( 0.00%)         316 ( 0.00%)         224 ( 0.00%)  0          1 ( 0.01%) 0          0          1 ( 0.01%) .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (4x)
      1,914 ( 0.00%)         478 ( 0.00%)         320 ( 0.00%) 10 ( 0.11%) 0          4 ( 0.12%) 0          0          4 ( 0.15%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*) (4x)
        512 ( 0.00%)         160 ( 0.00%)          60 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c780 (12x)
      1,348 ( 0.00%)         372 ( 0.00%)         212 ( 0.00%)  3 ( 0.03%) 2 ( 0.02%) 2 ( 0.06%) 1 ( 0.02%) .          .           => ???:0x000000000010c9a0 (4x)
        732 ( 0.00%)         248 ( 0.00%)         172 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::to_string(int) (4x)
        112 ( 0.00%)          40 ( 0.00%)          32 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<Graph, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (4x)
         32 ( 0.00%)          16 ( 0.00%)           8 ( 0.00%)  .          .          .          .          .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/Graph.cpp:Graph::getMSTShortestDistance() const (4x)
        144 ( 0.00%)           0                   36 ( 0.00%)  9 ( 0.10%) 0          0          4 ( 0.09%) .          .                   message += "Average weight of the edges in MST: " + std::to_string(myGraph->getMSTAvgEdgeWeight()) + "\n";
      1,690 ( 0.00%)         390 ( 0.00%)         280 ( 0.00%) 22 ( 0.25%) 0          2 ( 0.06%) 0          0          2 ( 0.07%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (4x)
      1,914 ( 0.00%)         478 ( 0.00%)         320 ( 0.00%) 12 ( 0.13%) 1 ( 0.01%) 2 ( 0.06%) 0          0          2 ( 0.07%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*) (4x)
      7,904 ( 0.00%)       1,676 ( 0.00%)       1,344 ( 0.00%) 359 ( 4.03%) 17 ( 0.13%) 25 ( 0.74%) 125 ( 2.85%) 14 ( 0.15%) 15 ( 0.55%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::to_string(double) (4x)
        512 ( 0.00%)         160 ( 0.00%)          60 ( 0.00%)  4 ( 0.04%) .          .          .          .          .           => ???:0x000000000010c780 (12x)
        252 ( 0.00%)          72 ( 0.00%)          36 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c9a0 (4x)
        112 ( 0.00%)          40 ( 0.00%)          32 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<Graph, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (4x)
         40 ( 0.00%)          16 ( 0.00%)           8 ( 0.00%)  .          .          .          .          .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/Graph.cpp:Graph::getMSTAvgEdgeWeight() const (4x)
        144 ( 0.00%)           0                   36 ( 0.00%)  6 ( 0.07%) 0          0          2 ( 0.05%) .          .                   message += "Total weight of the MST: " + std::to_string(myGraph->getMSTTotalWeight()) + "\n";
      1,284 ( 0.00%)         308 ( 0.00%)         220 ( 0.00%)  4 ( 0.04%) 1 ( 0.01%) 0          0          1 ( 0.01%) .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (4x)
        484 ( 0.00%)         120 ( 0.00%)          96 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*) (4x)
        512 ( 0.00%)         160 ( 0.00%)          60 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c780 (12x)
      1,513 ( 0.00%)         408 ( 0.00%)         244 ( 0.00%)  8 ( 0.09%) 4 ( 0.03%) 4 ( 0.12%) 0          2 ( 0.02%) 4 ( 0.15%)  => ???:0x000000000010c9a0 (4x)
        732 ( 0.00%)         248 ( 0.00%)         172 ( 0.00%) 12 ( 0.13%) .          .          .          .          .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::to_string(int) (4x)
        112 ( 0.00%)          40 ( 0.00%)          32 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<Graph, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (4x)
         32 ( 0.00%)          16 ( 0.00%)           8 ( 0.00%)  2 ( 0.02%) .          .          .          .          .           => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/Graph.cpp:Graph::getMSTTotalWeight() const (4x)
        100 ( 0.00%)           0                   24 ( 0.00%)  3 ( 0.03%) 0          0          2 ( 0.05%) .          .                   message += "MST Edge Printing (Not Part Of Design Patterns Process):\n" + myGraph->printMST();
     39,472 ( 0.00%)      11,197 ( 0.00%)       6,884 ( 0.00%) 420 ( 4.71%) 99 ( 0.74%) 11 ( 0.32%) 94 ( 2.15%) 70 ( 0.77%) 10 ( 0.36%)  => /home/ag/Studying/SemsterB/Operation System/OS-Project-Renew/OS_Project/Graph.cpp:Graph::printMST[abi:cxx11]() const (4x)
      2,101 ( 0.00%)         549 ( 0.00%)         343 ( 0.00%) 28 ( 0.31%) 1 ( 0.01%) 3 ( 0.09%) 0          0          2 ( 0.07%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (4x)
        480 ( 0.00%)         148 ( 0.00%)          60 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c780 (8x)
        353 ( 0.00%)          94 ( 0.00%)          55 ( 0.00%)  5 ( 0.06%) 1 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.04%)  => ???:0x000000000010c9a0 (4x)
        112 ( 0.00%)          40 ( 0.00%)          32 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<Graph, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (4x)
         56 ( 0.00%)           8 ( 0.00%)          12 ( 0.00%)  .          .          .          .          .          .                   sendMessage(client_FD, message);
        448 ( 0.00%)         136 ( 0.00%)          60 ( 0.00%)  0          1 ( 0.01%) 0          0          1 ( 0.01%) .           => ???:0x000000000010c780 (4x)
      1,550 ( 0.00%)         404 ( 0.00%)         288 ( 0.00%)  6 ( 0.07%) 1 ( 0.01%) 9 ( 0.27%) 0          0          9 ( 0.33%)  => ???:0x000000000010c6e0 (4x)
        348 ( 0.00%)         116 ( 0.00%)          72 ( 0.00%)  2 ( 0.02%) .          .          .          .          .           => Server.cpp:Server::sendMessage(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (4x)
         58 ( 0.00%)           0                   10 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .               }
        560 ( 0.00%)         170 ( 0.00%)          75 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c780 (5x)
        345 ( 0.00%)         105 ( 0.00%)          80 ( 0.00%)  5 ( 0.06%) .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<Graph>::~shared_ptr() (5x)
         21 ( 0.00%)          15 ( 0.00%)           0           1 ( 0.01%) 0          0          1 ( 0.02%) .          .           }
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .           void Server::stopClient(int client_FD)
         10 ( 0.00%)           1 ( 0.00%)           5 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .           { // Stop the client connection
          2 ( 0.00%)           1 ( 0.00%)           .           .          .          .          .          .          .               if (client_FD < 0)
          .                    .                    .           .          .          .          .          .          .               {
          .                    .                    .           .          .          .          .          .          .                   std::perror("Error: Invalid client file descriptor.");
          .                    .                    .           .          .          .          .          .          .               }
          3 ( 0.00%)           1 ( 0.00%)           1 ( 0.00%)  .          .          .          .          .          .               close(client_FD);
         40 ( 0.00%)          12 ( 0.00%)           6 ( 0.00%)  2 ( 0.02%) 0          0          2 ( 0.05%) .          .           => ???:0x000000000010cb10 (1x)
          6 ( 0.00%)           1 ( 0.00%)           1 ( 0.00%)  .          .          .          .          .          .               std::lock_guard<std::mutex> lock(this->mtx);
         87 ( 0.00%)          24 ( 0.00%)          18 ( 0.00%)  4 ( 0.04%) .          .          .          .          .           => /usr/include/c++/11/bits/std_mutex.h:std::lock_guard<std::mutex>::lock_guard(std::mutex&) (1x)
          9 ( 0.00%)           1 ( 0.00%)           2 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .               std::cout << "Client Connection Closed" << std::endl;
        486 ( 0.00%)         160 ( 0.00%)          78 ( 0.00%) 35 ( 0.39%) 1 ( 0.01%) 0          4 ( 0.09%) 1 ( 0.01%) .           => ???:0x000000000010c8e0 (1x)
        403 ( 0.00%)         102 ( 0.00%)          44 ( 0.00%) 13 ( 0.15%) 3 ( 0.02%) 0          0          3 ( 0.03%) .           => ???:0x000000000010c8b0 (1x)
          9 ( 0.00%)           5 ( 0.00%)           1 ( 0.00%)  1 ( 0.01%) .          .          .          .          .           }
         69 ( 0.00%)          18 ( 0.00%)          14 ( 0.00%)  2 ( 0.02%) .          .          .          .          .           => /usr/include/c++/11/bits/std_mutex.h:std::lock_guard<std::mutex>::~lock_guard() (1x)
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .           int Server::getIntegerInputFromClient(int client_FD)
        231 ( 0.00%)          21 ( 0.00%)         126 ( 0.00%) 23 ( 0.26%) 0          0          2 ( 0.05%) .          .           {
          .                    .                    .           .          .          .          .          .          .               char buffer[1024];
        105 ( 0.00%)           0                   21 ( 0.00%)  .          .          .          .          .          .               memset(buffer, 0, sizeof(buffer));
      2,835 ( 0.00%)          42 ( 0.00%)       1,428 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c750 (21x)
        126 ( 0.00%)          21 ( 0.00%)          21 ( 0.00%)  2 ( 0.02%) 0          0          1 ( 0.02%) .          .               read(client_FD, buffer, sizeof(buffer));
        924 ( 0.00%)         294 ( 0.00%)         168 ( 0.00%)  .          .          .          .          .          .           => ???:0x000000000010c9f0 (21x)
         21 ( 0.00%)           0                   21 ( 0.00%)  .          .          .          .          .          .               int data = INVALID;
          .                    .                    .           .          .          .          .          .          .               try
          .                    .                    .           .          .          .          .          .          .               {
        441 ( 0.00%)           0                  126 ( 0.00%)  4 ( 0.04%) 0          0          2 ( 0.05%) .          .                   data = std::stoi(buffer);
      5,662 ( 0.00%)       1,638 ( 0.00%)         945 ( 0.00%)  4 ( 0.04%) 0          0          2 ( 0.05%) .          .           => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) (21x)
      4,515 ( 0.00%)       1,365 ( 0.00%)         924 ( 0.00%)  0          0          2 ( 0.06%) 0          0          2 ( 0.07%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (21x)
        168 ( 0.00%)          63 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010c780 (21x)
         84 ( 0.00%)          42 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010cab0 (21x)
         84 ( 0.00%)          42 ( 0.00%)           .           .          .          .          .          .          .           => ???:0x000000000010c910 (21x)
          .                    .                    .           .          .          .          .          .          .               }
          .                    .                    .           .          .          .          .          .          .               catch (std::invalid_argument &e)
          .                    .                    .           .          .          .          .          .          .               {
          .                    .                    .           .          .          .          .          .          .                   return INVALID;
          .                    .                    .           .          .          .          .          .          .               }
         21 ( 0.00%)          21 ( 0.00%)           .           .          .          .          .          .          .               return data;
        189 ( 0.00%)         126 ( 0.00%)           0           2 ( 0.02%) 0          0          1 ( 0.02%) .          .           }
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .           std::string Server::getStringInputFromClient(int client_FD)
          .                    .                    .           .          .          .          .          .          .           {
          .                    .                    .           .          .          .          .          .          .               char buffer[1024];
          .                    .                    .           .          .          .          .          .          .               memset(buffer, 0, sizeof(buffer));
          .                    .                    .           .          .          .          .          .          .               read(client_FD, buffer, sizeof(buffer));
          .                    .                    .           .          .          .          .          .          .               return std::string(buffer);
          .                    .                    .           .          .          .          .          .          .           }
          .                    .                    .           .          .          .          .          .          .           
          .                    .                    .           .          .          .          .          .          .           int main(int argc, char *argv[])
          8 ( 0.00%)           0                    5 ( 0.00%)  1 ( 0.01%) 0          0          1 ( 0.02%) .          .           {
          5 ( 0.00%)           0                    2 ( 0.00%)  .          .          .          .          .          .               Server *serverObj = new Server();
2,425,243,635 (99.88%) 723,551,980 (99.90%) 451,106,538 (99.94%) 2,199 (24.68%) 316 ( 2.37%) 320 ( 9.45%) 982 (22.42%) 154 ( 1.69%) 308 (11.24%)  => Server.cpp:Server::Server() (1x)
        199 ( 0.00%)          38 ( 0.00%)          30 ( 0.00%) 14 ( 0.16%) 8 ( 0.06%) 1 ( 0.03%) 4 ( 0.09%) 0          1 ( 0.04%)  => ???:0x000000000010c8c0 (1x)
          .                    .                    .           .          .          .          .          .          .               delete serverObj;
          .                    .                    .           .          .          .          .          .          .               return 0;
         21 ( 0.00%)           6 ( 0.00%)           5 ( 0.00%)  3 ( 0.03%) 1 ( 0.01%) 0          3 ( 0.07%) .          .           }
    103,060 ( 0.00%)      26,940 ( 0.00%)      12,033 ( 0.00%) 439 ( 4.93%) 533 ( 4.01%) 145 ( 4.28%) 436 ( 9.95%) 254 ( 2.79%) 128 ( 4.67%)  => Server.cpp:__static_initialization_and_destruction_0(int, int) (1x)
          .                    .                    .           .          .          .          .          .          .           

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./misc/../sysdeps/unix/sysv/linux/select.c
  ./nptl/./nptl/cancellation.c
  ./string/../sysdeps/x86_64/multiarch/strlen-vec.S

--------------------------------------------------------------------------------
Ir                     Dr                   Dw                   I1mr         D1mr       D1mw        ILmr         DLmr       DLmw        
--------------------------------------------------------------------------------
1,152,273,944 (47.46%) 366,225,705 (50.57%) 259,038,984 (57.39%) 343 ( 3.85%) 6 ( 0.05%) 13 ( 0.38%) 153 ( 3.49%) 3 ( 0.03%) 13 ( 0.47%)  events annotated

