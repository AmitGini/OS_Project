--------------------------------------------------------------------------------
Profile data file 'callgrind.out.3560' (creator: callgrind-3.18.1)
--------------------------------------------------------------------------------
I1 cache: 65536 B, 64 B, 2-way associative
D1 cache: 65536 B, 64 B, 2-way associative
LL cache: 262144 B, 64 B, 8-way associative
Timerange: Basic block 0 - 409006
Trigger: Program termination
Profiled target:  ./graph -p (PID 3560, part 1)
Events recorded:  Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Events shown:     Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Event sort order: Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Thresholds:       99 0 0 0 0 0 0 0 0
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                 Dr               Dw               I1mr           D1mr            D1mw           ILmr           DLmr           DLmw           
--------------------------------------------------------------------------------
2,530,205 (100.0%) 607,584 (100.0%) 233,716 (100.0%) 3,819 (100.0%) 12,993 (100.0%) 2,847 (100.0%) 3,052 (100.0%) 9,020 (100.0%) 2,246 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                 Dr               Dw              I1mr         D1mr           D1mw           ILmr        DLmr           DLmw            file:function
--------------------------------------------------------------------------------
1,020,474 (40.33%) 168,915 (27.80%) 57,526 (24.61%)  20 ( 0.52%) 2,026 (15.59%)    23 ( 0.81%) 17 ( 0.56%) 1,816 (20.13%)    15 ( 0.67%)  ./elf/./elf/dl-lookup.c:_dl_lookup_symbol_x [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  599,926 (23.71%) 200,047 (32.92%) 83,940 (35.92%)  57 ( 1.49%) 3,082 (23.72%)    69 ( 2.42%) 46 ( 1.51%) 1,102 (12.22%)    60 ( 2.67%)  ./elf/./elf/dl-lookup.c:do_lookup_x [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  270,101 (10.68%)  65,018 (10.70%) 25,034 (10.71%)  28 ( 0.73%) 2,781 (21.40%) 1,683 (59.11%) 28 ( 0.92%) 2,456 (27.23%) 1,127 (50.18%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
  124,826 ( 4.93%)  41,602 ( 6.85%) 13,937 ( 5.96%)   9 ( 0.24%)   597 ( 4.59%)     9 ( 0.32%)  9 ( 0.29%)   405 ( 4.49%)     9 ( 0.40%)  ./elf/./elf/dl-lookup.c:check_match [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  112,393 ( 4.44%)  35,464 ( 5.84%) 10,665 ( 4.56%)  17 ( 0.45%) 2,562 (19.72%)     0          17 ( 0.56%) 1,859 (20.61%)     .           ./elf/./elf/do-rel.h:_dl_relocate_object
   85,222 ( 3.37%)  20,548 ( 3.38%)      0          109 ( 2.85%)   361 ( 2.78%)     0          95 ( 3.11%)   262 ( 2.90%)     .           ./string/../sysdeps/x86_64/strcmp.S:strcmp [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
   33,077 ( 1.31%)   5,982 ( 0.98%)      6 ( 0.00%)   5 ( 0.13%)    69 ( 0.53%)     1 ( 0.04%)  5 ( 0.16%)    69 ( 0.76%)     1 ( 0.04%)  ./elf/./elf/dl-tunables.c:__GI___tunables_init [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
   20,679 ( 0.82%)       0           4,602 ( 1.97%)   .              .              .           .              .              .           ./elf/../sysdeps/generic/dl-protected.h:do_lookup_x
   13,793 ( 0.55%)   4,815 ( 0.79%)    925 ( 0.40%)  20 ( 0.52%)    85 ( 0.65%)    67 ( 2.35%) 20 ( 0.66%)    85 ( 0.94%)    67 ( 2.98%)  ./elf/./elf/dl-version.c:_dl_check_map_versions [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
   12,128 ( 0.48%)   3,520 ( 0.58%)    288 ( 0.12%)   6 ( 0.16%)     2 ( 0.02%)     0           6 ( 0.20%)     .              .           ???:std::locale::_Impl::_M_install_facet(std::locale::id const*, std::locale::facet const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   11,430 ( 0.45%)   2,286 ( 0.38%)      0            1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           ./elf/../sysdeps/generic/ldsodefs.h:do_lookup_x
   10,551 ( 0.42%)   3,517 ( 0.58%)      .            .              .              .           .              .              .           ./elf/../sysdeps/generic/ldsodefs.h:_dl_relocate_object
   10,240 ( 0.40%)   3,072 ( 0.51%)  1,536 ( 0.66%)   4 ( 0.10%)     4 ( 0.03%)     0           4 ( 0.13%)     4 ( 0.04%)     .           ./wcsmbs/./wcsmbs/btowc.c:btowc [/usr/lib/x86_64-linux-gnu/libc.so.6]
    9,224 ( 0.36%)   3,315 ( 0.55%)    909 ( 0.39%)  12 ( 0.31%)   277 ( 2.13%)     3 ( 0.11%) 10 ( 0.33%)   140 ( 1.55%)     3 ( 0.13%)  ./elf/./elf/dl-runtime.c:_dl_fixup [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    6,867 ( 0.27%)   1,401 ( 0.23%)    554 ( 0.24%)   8 ( 0.21%)     0             13 ( 0.46%)  6 ( 0.20%)     0             13 ( 0.58%)  ./libio/./libio/fileops.c:_IO_file_xsputn@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    6,397 ( 0.25%)   1,073 ( 0.18%)  1,105 ( 0.47%)  71 ( 1.86%)     9 ( 0.07%)    42 ( 1.48%) 28 ( 0.92%)     1 ( 0.01%)    40 ( 1.78%)  ./malloc/./malloc/malloc.c:_int_malloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
    4,224 ( 0.17%)     310 ( 0.05%)    164 ( 0.07%)  16 ( 0.42%)    50 ( 0.38%)     1 ( 0.04%) 16 ( 0.52%)    25 ( 0.28%)     1 ( 0.04%)  ./elf/./elf/dl-reloc.c:_dl_relocate_object [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    4,192 ( 0.17%)     926 ( 0.15%)    129 ( 0.06%)   5 ( 0.13%)     8 ( 0.06%)     0           5 ( 0.16%)     8 ( 0.09%)     .           ./elf/../sysdeps/x86/dl-cacheinfo.h:intel_check_word.constprop.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    4,086 ( 0.16%)       0               0            2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           ./elf/../bits/stdlib-bsearch.h:intel_check_word.constprop.0
    3,782 ( 0.15%)     819 ( 0.13%)    400 ( 0.17%)  41 ( 1.07%)    54 ( 0.42%)    22 ( 0.77%) 41 ( 1.34%)    54 ( 0.60%)    22 ( 0.98%)  ./elf/./elf/dl-load.c:_dl_map_object_from_fd [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    3,737 ( 0.15%)   1,035 ( 0.17%)    697 ( 0.30%)  20 ( 0.52%)     7 ( 0.05%)     4 ( 0.14%)  4 ( 0.13%)     4 ( 0.04%)     4 ( 0.18%)  ./libio/./libio/iofwrite.c:fwrite [/usr/lib/x86_64-linux-gnu/libc.so.6]
    3,577 ( 0.14%)     932 ( 0.15%)      0            1 ( 0.03%)     1 ( 0.01%)     0           1 ( 0.03%)     1 ( 0.01%)     .           ./elf/./elf/dl-tunables.h:__GI___tunables_init
    3,456 ( 0.14%)     896 ( 0.15%)    512 ( 0.22%)   3 ( 0.08%)     0              0           3 ( 0.10%)     .              .           ./wcsmbs/./wcsmbs/wctob.c:wctob [/usr/lib/x86_64-linux-gnu/libc.so.6]
    3,183 ( 0.13%)     842 ( 0.14%)    472 ( 0.20%)   6 ( 0.16%)     0              1 ( 0.04%)  6 ( 0.20%)     0              1 ( 0.04%)  ./libio/./libio/fileops.c:_IO_file_overflow@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    2,848 ( 0.11%)     761 ( 0.13%)    443 ( 0.19%)   2 ( 0.05%)     1 ( 0.01%)     1 ( 0.04%)  2 ( 0.07%)     0              1 ( 0.04%)  ./elf/./elf/dl-misc.c:_dl_name_match_p [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    2,846 ( 0.11%)     419 ( 0.07%)      0            4 ( 0.10%)    27 ( 0.21%)     0           4 ( 0.13%)    27 ( 0.30%)     .           ./elf/./elf/dl-cache.c:_dl_cache_libcmp [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    2,813 ( 0.11%)   2,716 ( 0.45%)  2,619 ( 1.12%)   4 ( 0.10%)     0             22 ( 0.77%)  3 ( 0.10%)     0             22 ( 0.98%)  ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_fxsave [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    2,744 ( 0.11%)     954 ( 0.16%)    596 ( 0.26%)   6 ( 0.16%)     1 ( 0.01%)     0           3 ( 0.10%)     .              .           ???:std::ostream::sentry::sentry(std::ostream&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    2,733 ( 0.11%)       5 ( 0.00%)    810 ( 0.35%)   4 ( 0.10%)     0             20 ( 0.70%)  4 ( 0.13%)     0             20 ( 0.89%)  ???:std::ctype<wchar_t>::_M_initialize_ctype() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    2,688 ( 0.11%)   1,152 ( 0.19%)    576 ( 0.25%)   6 ( 0.16%)     2 ( 0.02%)     0           5 ( 0.16%)     1 ( 0.01%)     .           ???:std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    2,243 ( 0.09%)     541 ( 0.09%)    288 ( 0.12%)  27 ( 0.71%)     1 ( 0.01%)     6 ( 0.21%) 27 ( 0.88%)     1 ( 0.01%)     6 ( 0.27%)  ./elf/./elf/dl-load.c:_dl_map_object [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    2,240 ( 0.09%)     275 ( 0.05%)      0           13 ( 0.34%)    18 ( 0.14%)     0           3 ( 0.10%)    15 ( 0.17%)     .           ./string/../sysdeps/x86_64/multiarch/strlen-vec.S:__strlen_sse2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    2,226 ( 0.09%)     389 ( 0.06%)    209 ( 0.09%)  34 ( 0.89%)     3 ( 0.02%)     8 ( 0.28%) 34 ( 1.11%)     1 ( 0.01%)     8 ( 0.36%)  ./elf/./elf/dl-deps.c:_dl_map_object_deps [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    2,064 ( 0.08%)     502 ( 0.08%)    208 ( 0.09%)  14 ( 0.37%)     6 ( 0.05%)     0           8 ( 0.26%)     1 ( 0.01%)     .           ./malloc/./malloc/malloc.c:malloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
    1,616 ( 0.06%)     285 ( 0.05%)      0           15 ( 0.39%)     0              0          12 ( 0.39%)     .              .           ./string/../sysdeps/x86_64/multiarch/memcmp-sse4.S:__memcmp_sse4_1 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    1,497 ( 0.06%)     288 ( 0.05%)    304 ( 0.13%)  25 ( 0.65%)     0              0           7 ( 0.23%)     .              .           ???:std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    1,492 ( 0.06%)     214 ( 0.04%)    159 ( 0.07%)   9 ( 0.24%)    39 ( 0.30%)    29 ( 1.02%)  9 ( 0.29%)    39 ( 0.43%)    29 ( 1.29%)  ./elf/./elf/get-dynamic-info.h:_dl_map_object_from_fd
    1,481 ( 0.06%)     331 ( 0.05%)    145 ( 0.06%)  24 ( 0.63%)    14 ( 0.11%)     2 ( 0.07%) 21 ( 0.69%)    14 ( 0.16%)     2 ( 0.09%)  ./elf/./elf/dl-load.c:open_verify.constprop.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    1,310 ( 0.05%)     295 ( 0.05%)    151 ( 0.06%)  71 ( 1.86%)    43 ( 0.33%)    11 ( 0.39%) 71 ( 2.33%)    33 ( 0.37%)    10 ( 0.45%)  ./elf/./elf/rtld.c:dl_main [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    1,306 ( 0.05%)     386 ( 0.06%)    264 ( 0.11%)  29 ( 0.76%)     0              0           5 ( 0.16%)     .              .           ./libio/./libio/fileops.c:_IO_do_write@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    1,187 ( 0.05%)     316 ( 0.05%)    167 ( 0.07%)  16 ( 0.42%)     1 ( 0.01%)     4 ( 0.14%) 15 ( 0.49%)     1 ( 0.01%)     4 ( 0.18%)  ./elf/./elf/dl-load.c:open_path [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    1,185 ( 0.05%)     207 ( 0.03%)    213 ( 0.09%)   9 ( 0.24%)     0              0           3 ( 0.10%)     .              .           ./libio/./libio/libioP.h:fwrite
    1,129 ( 0.04%)     214 ( 0.04%)    207 ( 0.09%)  15 ( 0.39%)     7 ( 0.05%)    40 ( 1.40%) 15 ( 0.49%)     7 ( 0.08%)    40 ( 1.78%)  ./elf/./elf/dl-object.c:_dl_new_object [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    1,115 ( 0.04%)     218 ( 0.04%)    217 ( 0.09%)   4 ( 0.10%)     4 ( 0.03%)     5 ( 0.18%)  4 ( 0.13%)     3 ( 0.03%)     4 ( 0.18%)  ./elf/./elf/dl-minimal-malloc.c:__minimal_malloc [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    1,101 ( 0.04%)     227 ( 0.04%)    135 ( 0.06%)  19 ( 0.50%)    27 ( 0.21%)     1 ( 0.04%) 15 ( 0.49%)    26 ( 0.29%)     1 ( 0.04%)  ./elf/./elf/dl-cache.c:_dl_load_cache_lookup [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    1,080 ( 0.04%)     360 ( 0.06%)     96 ( 0.04%)   3 ( 0.08%)     7 ( 0.05%)     0           2 ( 0.07%)     5 ( 0.06%)     .           ???:std::locale::id::_M_id() const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    1,078 ( 0.04%)      83 ( 0.01%)     62 ( 0.03%)  12 ( 0.31%)     0              0           3 ( 0.10%)     .              .           ???:0x000000000012e8f0 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    1,044 ( 0.04%)      23 ( 0.00%)    454 ( 0.19%)   8 ( 0.21%)     0            109 ( 3.83%)  6 ( 0.20%)     0            109 ( 4.85%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:memset [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    1,036 ( 0.04%)     516 ( 0.08%)    137 ( 0.06%)   4 ( 0.10%)     5 ( 0.04%)     0           4 ( 0.13%)     1 ( 0.01%)     .           ???:std::ostream::flush() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    1,036 ( 0.04%)     158 ( 0.03%)    177 ( 0.08%)   2 ( 0.05%)     4 ( 0.03%)     0           2 ( 0.07%)     4 ( 0.04%)     .           ./wctype/./wctype/wctype_l.c:wctype_l [/usr/lib/x86_64-linux-gnu/libc.so.6]
    1,022 ( 0.04%)     374 ( 0.06%)    239 ( 0.10%)   4 ( 0.10%)     1 ( 0.01%)     0           4 ( 0.13%)     1 ( 0.01%)     .           ./libio/./libio/iofflush.c:fflush [/usr/lib/x86_64-linux-gnu/libc.so.6]
    1,006 ( 0.04%)     196 ( 0.03%)    128 ( 0.05%)  56 ( 1.47%)     0              0           5 ( 0.16%)     .              .           ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__mempcpy_sse2_unaligned [/usr/lib/x86_64-linux-gnu/libc.so.6]
    1,005 ( 0.04%)     333 ( 0.05%)     75 ( 0.03%)   5 ( 0.13%)     0              0           5 ( 0.16%)     .              .           ./libio/./libio/genops.c:_IO_default_xsputn [/usr/lib/x86_64-linux-gnu/libc.so.6]
      966 ( 0.04%)     437 ( 0.07%)    138 ( 0.06%)   5 ( 0.13%)     0              0           4 ( 0.13%)     .              .           ???:std::ostream::put(char) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      924 ( 0.04%)     372 ( 0.06%)    146 ( 0.06%)   9 ( 0.24%)     5 ( 0.04%)     0           6 ( 0.20%)     1 ( 0.01%)     .           ???:std::ostream& std::ostream::_M_insert<long>(long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      918 ( 0.04%)     282 ( 0.05%)    144 ( 0.06%)  13 ( 0.34%)     6 ( 0.05%)     0           8 ( 0.26%)     .              .           ./elf/../elf/dl-tls.c:_dl_allocate_tls [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      912 ( 0.04%)     144 ( 0.02%)    192 ( 0.08%)   3 ( 0.08%)     0              0           2 ( 0.07%)     .              .           ???:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      896 ( 0.04%)     128 ( 0.02%)      0            1 ( 0.03%)     1 ( 0.01%)     0           1 ( 0.03%)     .              .           ./wcsmbs/./wcsmbsload.h:btowc
      888 ( 0.04%)     192 ( 0.03%)    120 ( 0.05%)  11 ( 0.29%)     0              0           3 ( 0.10%)     .              .           ./libio/./libio/fileops.c:_IO_file_write@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      883 ( 0.03%)     319 ( 0.05%)    148 ( 0.06%)   5 ( 0.13%)    44 ( 0.34%)    22 ( 0.77%)  5 ( 0.16%)    44 ( 0.49%)    22 ( 0.98%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_start
      847 ( 0.03%)     247 ( 0.04%)    258 ( 0.11%)  20 ( 0.52%)     8 ( 0.06%)    30 ( 1.05%) 15 ( 0.49%)     5 ( 0.06%)    30 ( 1.34%)  ./nptl/./nptl/pthread_create.c:pthread_create@@GLIBC_2.34 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      816 ( 0.03%)     186 ( 0.03%)    174 ( 0.07%)  17 ( 0.45%)     1 ( 0.01%)    26 ( 0.91%) 13 ( 0.43%)     1 ( 0.01%)    24 ( 1.07%)  ./nptl/./nptl/allocatestack.c:pthread_create@@GLIBC_2.34
      815 ( 0.03%)     165 ( 0.03%)      0            2 ( 0.05%)    20 ( 0.15%)     0           2 ( 0.07%)    20 ( 0.22%)     .           ./elf/./elf/do-rel.h:_dl_start
      813 ( 0.03%)     110 ( 0.02%)      0            4 ( 0.10%)     5 ( 0.04%)     0           4 ( 0.13%)     5 ( 0.06%)     .           ./string/../sysdeps/x86_64/multiarch/strlen-vec.S:strlen [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      792 ( 0.03%)     308 ( 0.05%)    217 ( 0.09%)  11 ( 0.29%)     0              0          10 ( 0.33%)     .              .           Server.cpp:Server::handleConnections() [/home/yairco/OS/FinalProject/OS_Project/graph]
      787 ( 0.03%)     258 ( 0.04%)    156 ( 0.07%)   5 ( 0.13%)     0              0           5 ( 0.16%)     .              .           ./libio/./libio/putc.c:putc [/usr/lib/x86_64-linux-gnu/libc.so.6]
      776 ( 0.03%)       0             131 ( 0.06%)   2 ( 0.05%)     0             35 ( 1.23%)  2 ( 0.07%)     0             35 ( 1.56%)  ./malloc/./malloc/malloc.c:ptmalloc_init.part.0
      774 ( 0.03%)     258 ( 0.04%)      .            .              .              .           .              .              .           ./elf/../sysdeps/nptl/dl-tls_init_tp.c:rtld_mutex_dummy [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      769 ( 0.03%)       0             129 ( 0.06%)   0              0             33 ( 1.16%)  0              0             33 ( 1.47%)  ./malloc/./malloc/malloc.c:arena_get2.part.0
      768 ( 0.03%)     384 ( 0.06%)      0            1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           ./elf/./elf/dl-profstub.c:_dl_mcount_wrapper_check [/usr/lib/x86_64-linux-gnu/libc.so.6]
      768 ( 0.03%)     128 ( 0.02%)      0            2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           ./iconv/./iconv/gconv_simple.c:__gconv_btwoc_ascii [/usr/lib/x86_64-linux-gnu/libc.so.6]
      748 ( 0.03%)     146 ( 0.02%)     92 ( 0.04%)   5 ( 0.13%)     3 ( 0.02%)    12 ( 0.42%)  2 ( 0.07%)     2 ( 0.02%)    12 ( 0.53%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:mempcpy [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      745 ( 0.03%)     228 ( 0.04%)     81 ( 0.03%)   7 ( 0.18%)     0              1 ( 0.04%)  7 ( 0.23%)     0              1 ( 0.04%)  ./elf/./dl-map-segments.h:_dl_map_object_from_fd
      744 ( 0.03%)      93 ( 0.02%)      0            5 ( 0.13%)     6 ( 0.05%)     0           5 ( 0.16%)     6 ( 0.07%)     .           ./string/../sysdeps/x86_64/multiarch/../strchr.S:index [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      740 ( 0.03%)     144 ( 0.02%)     36 ( 0.02%)   3 ( 0.08%)    37 ( 0.28%)     0           3 ( 0.10%)    36 ( 0.40%)     .           ./elf/./elf/dl-tunables.c:__tunable_get_val [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      732 ( 0.03%)      36 ( 0.01%)     38 ( 0.02%)  10 ( 0.26%)     6 ( 0.05%)     3 ( 0.11%) 10 ( 0.33%)     4 ( 0.04%)     .           ???:std::ctype<char>::_M_widen_init() const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      720 ( 0.03%)     187 ( 0.03%)    149 ( 0.06%)   9 ( 0.24%)    20 ( 0.15%)    32 ( 1.12%)  8 ( 0.26%)    20 ( 0.22%)    32 ( 1.42%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:memcpy [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      708 ( 0.03%)     106 ( 0.02%)    174 ( 0.07%)   4 ( 0.10%)     0              1 ( 0.04%)  4 ( 0.13%)     0              1 ( 0.04%)  ./elf/../sysdeps/x86/dl-cacheinfo.h:handle_intel.constprop.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      705 ( 0.03%)     178 ( 0.03%)     81 ( 0.03%)   7 ( 0.18%)     3 ( 0.02%)     0           7 ( 0.23%)     3 ( 0.03%)     .           ./stdlib/./stdlib/cxa_finalize.c:__cxa_finalize [/usr/lib/x86_64-linux-gnu/libc.so.6]
      702 ( 0.03%)     126 ( 0.02%)    180 ( 0.08%)   3 ( 0.08%)     0             10 ( 0.35%)  3 ( 0.10%)     0             10 ( 0.45%)  ./stdlib/./stdlib/cxa_atexit.c:__cxa_atexit [/usr/lib/x86_64-linux-gnu/libc.so.6]
      694 ( 0.03%)     123 ( 0.02%)    111 ( 0.05%)  36 ( 0.94%)     0              6 ( 0.21%) 36 ( 1.18%)     0              6 ( 0.27%)  ./elf/./elf/dl-hwcaps.c:_dl_important_hwcaps [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      666 ( 0.03%)      88 ( 0.01%)    385 ( 0.16%)  55 ( 1.44%)    25 ( 0.19%)    50 ( 1.76%) 55 ( 1.80%)     8 ( 0.09%)    50 ( 2.23%)  ???:std::locale::_Impl::_Impl(unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      657 ( 0.03%)     256 ( 0.04%)    109 ( 0.05%)   9 ( 0.24%)     1 ( 0.01%)     0           3 ( 0.10%)     1 ( 0.01%)     .           ./libio/./libio/fileops.c:_IO_file_sync@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      644 ( 0.03%)     126 ( 0.02%)     91 ( 0.04%)   4 ( 0.10%)     4 ( 0.03%)     1 ( 0.04%)  4 ( 0.13%)     2 ( 0.02%)     .           ./stdlib/./stdlib/cxa_atexit.c:__new_exitfn [/usr/lib/x86_64-linux-gnu/libc.so.6]
      614 ( 0.02%)     136 ( 0.02%)    103 ( 0.04%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           ./libio/./libio/libioP.h:fflush
      598 ( 0.02%)      66 ( 0.01%)    137 ( 0.06%)  24 ( 0.63%)     1 ( 0.01%)     0          24 ( 0.79%)     .              .           PipeDP.cpp:PipeDP::setupPipe() [/home/yairco/OS/FinalProject/OS_Project/graph]
      576 ( 0.02%)     100 ( 0.02%)     36 ( 0.02%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           ./elf/./elf/dl-find_object.c:_dlfo_sort_mappings [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      548 ( 0.02%)     141 ( 0.02%)     40 ( 0.02%)  16 ( 0.42%)    20 ( 0.15%)     6 ( 0.21%) 16 ( 0.52%)    20 ( 0.22%)     6 ( 0.27%)  ./elf/../elf/dl-sysdep.c:_dl_sysdep_start [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      536 ( 0.02%)     130 ( 0.02%)     24 ( 0.01%)   8 ( 0.21%)     6 ( 0.05%)     3 ( 0.11%)  8 ( 0.26%)     4 ( 0.04%)     3 ( 0.13%)  ./elf/./elf/dl-find_object.c:_dlfo_process_initial [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      530 ( 0.02%)     161 ( 0.03%)     86 ( 0.04%)   6 ( 0.16%)     7 ( 0.05%)     0           6 ( 0.20%)     7 ( 0.08%)     .           ./elf/./elf/dl-sort-maps.c:dfs_traversal.part.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      517 ( 0.02%)     258 ( 0.04%)      2 ( 0.00%)   2 ( 0.05%)     1 ( 0.01%)     0           2 ( 0.07%)     .              .           ???:0x00000000048f6a60 [???]
      510 ( 0.02%)     132 ( 0.02%)    126 ( 0.05%)  22 ( 0.58%)     0              0           3 ( 0.10%)     .              .           ./io/../sysdeps/unix/sysv/linux/write.c:write [/usr/lib/x86_64-linux-gnu/libc.so.6]
      504 ( 0.02%)     136 ( 0.02%)     32 ( 0.01%)   2 ( 0.05%)    73 ( 0.56%)     3 ( 0.11%)  2 ( 0.07%)    71 ( 0.79%)     3 ( 0.13%)  ./elf/./dl-find_object.h:_dl_find_object_from_map [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      502 ( 0.02%)      93 ( 0.02%)     42 ( 0.02%)   6 ( 0.16%)     3 ( 0.02%)     0           6 ( 0.20%)     3 ( 0.03%)     .           ./elf/../sysdeps/x86/dl-prop.h:_dl_map_object_from_fd
      499 ( 0.02%)      99 ( 0.02%)     40 ( 0.02%)  24 ( 0.63%)     0              0          11 ( 0.36%)     .              .           ./malloc/./malloc/malloc.c:calloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
      495 ( 0.02%)     175 ( 0.03%)    105 ( 0.04%)   8 ( 0.21%)     0              0           8 ( 0.26%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> >::_M_initialize_map(unsigned long) [/home/yairco/OS/FinalProject/OS_Project/graph]
      493 ( 0.02%)     138 ( 0.02%)     76 ( 0.03%)  17 ( 0.45%)     1 ( 0.01%)     1 ( 0.04%) 17 ( 0.56%)     .              .           ./malloc/./malloc/malloc.c:_int_free [/usr/lib/x86_64-linux-gnu/libc.so.6]
      476 ( 0.02%)     111 ( 0.02%)     55 ( 0.02%)  28 ( 0.73%)     2 ( 0.02%)     0           7 ( 0.23%)     1 ( 0.01%)     .           ./nptl/./nptl/pthread_mutex_lock.c:pthread_mutex_lock@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      466 ( 0.02%)     163 ( 0.03%)     70 ( 0.03%)   3 ( 0.08%)     5 ( 0.04%)     0           3 ( 0.10%)     .              .           ???:std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      464 ( 0.02%)       8 ( 0.00%)    192 ( 0.08%)   3 ( 0.08%)     0             30 ( 1.05%)  3 ( 0.10%)     0             25 ( 1.11%)  ???:std::ios_base::ios_base() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      460 ( 0.02%)      85 ( 0.01%)     70 ( 0.03%)   7 ( 0.18%)     0              0           7 ( 0.23%)     .              .           ./misc/../sysdeps/unix/sysv/linux/select.c:select [/usr/lib/x86_64-linux-gnu/libc.so.6]
      451 ( 0.02%)     155 ( 0.03%)      2 ( 0.00%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           ./elf/./elf/dl-environ.c:_dl_next_ld_env_entry [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      449 ( 0.02%)     151 ( 0.02%)      7 ( 0.00%)   4 ( 0.10%)    44 ( 0.34%)     0           4 ( 0.13%)    43 ( 0.48%)     .           ./stdlib/./stdlib/getenv.c:getenv [/usr/lib/x86_64-linux-gnu/libc.so.6]
      448 ( 0.02%)     118 ( 0.02%)    198 ( 0.08%)  28 ( 0.73%)     7 ( 0.05%)    16 ( 0.56%) 28 ( 0.92%)     2 ( 0.02%)    14 ( 0.62%)  ???:std::ios_base::Init::Init() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      442 ( 0.02%)      95 ( 0.02%)    164 ( 0.07%)  11 ( 0.29%)     1 ( 0.01%)     8 ( 0.28%)  6 ( 0.20%)     1 ( 0.01%)     8 ( 0.36%)  ./setjmp/../sysdeps/x86_64/setjmp.S:__sigsetjmp [/usr/lib/x86_64-linux-gnu/libc.so.6]
      441 ( 0.02%)     189 ( 0.03%)    105 ( 0.04%)   1 ( 0.03%)     2 ( 0.02%)     0           1 ( 0.03%)     .              .           ???:0x000000000012b240 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      435 ( 0.02%)      90 ( 0.01%)     95 ( 0.04%)  15 ( 0.39%)     0              0           6 ( 0.20%)     .              .           ???:std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<unsigned long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      429 ( 0.02%)     165 ( 0.03%)     33 ( 0.01%)   2 ( 0.05%)     1 ( 0.01%)     0           2 ( 0.07%)     1 ( 0.01%)     .           ./nptl/./nptl/cancellation.c:__pthread_enable_asynccancel [/usr/lib/x86_64-linux-gnu/libc.so.6]
      428 ( 0.02%)      69 ( 0.01%)     68 ( 0.03%)   7 ( 0.18%)     3 ( 0.02%)     0           7 ( 0.23%)     1 ( 0.01%)     .           ./stdlib/./stdlib/exit.c:__run_exit_handlers [/usr/lib/x86_64-linux-gnu/libc.so.6]
      425 ( 0.02%)     100 ( 0.02%)    120 ( 0.05%)   7 ( 0.18%)     0              0           7 ( 0.23%)     .              .           ActiveObjectDP.cpp:ActiveObjectDP::ActiveObjectDP(int) [/home/yairco/OS/FinalProject/OS_Project/graph]
      423 ( 0.02%)     139 ( 0.02%)      8 ( 0.00%)   5 ( 0.13%)     0              0           5 ( 0.16%)     .              .           ./malloc/./malloc/malloc.c:__malloc_arena_thread_freeres
      421 ( 0.02%)     125 ( 0.02%)     66 ( 0.03%)   4 ( 0.10%)    26 ( 0.20%)     1 ( 0.04%)  4 ( 0.13%)    25 ( 0.28%)     1 ( 0.04%)  ./elf/./elf/dl-init.c:call_init.part.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      420 ( 0.02%)      84 ( 0.01%)    156 ( 0.07%)   3 ( 0.08%)     0              3 ( 0.11%)  3 ( 0.10%)     0              3 ( 0.13%)  ./elf/./elf/dl-error-skeleton.c:_dl_catch_exception [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      420 ( 0.02%)      70 ( 0.01%)     70 ( 0.03%)  14 ( 0.37%)     0              0           2 ( 0.07%)     .              .           ???:operator new(unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      414 ( 0.02%)     137 ( 0.02%)     75 ( 0.03%)   7 ( 0.18%)     4 ( 0.03%)     0           7 ( 0.23%)     3 ( 0.03%)     .           ???:std::__cxx11::numpunct<char>::_M_initialize_numpunct(__locale_struct*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      414 ( 0.02%)     137 ( 0.02%)     75 ( 0.03%)   5 ( 0.13%)     0              0           5 ( 0.16%)     .              .           ???:std::numpunct<char>::_M_initialize_numpunct(__locale_struct*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      414 ( 0.02%)     112 ( 0.02%)     75 ( 0.03%)  12 ( 0.31%)    26 ( 0.20%)     4 ( 0.14%) 12 ( 0.39%)    11 ( 0.12%)     4 ( 0.18%)  ./elf/./elf/dl-fini.c:_dl_fini [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      414 ( 0.02%)      69 ( 0.01%)      0            2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           ???:__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::xsputn(char const*, long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      405 ( 0.02%)      85 ( 0.01%)    130 ( 0.06%)  21 ( 0.55%)     0              1 ( 0.04%)  5 ( 0.16%)     0              1 ( 0.04%)  /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<ActiveObjectDP, std::allocator<ActiveObjectDP>, int&>(ActiveObjectDP*&, std::_Sp_alloc_shared_tag<std::allocator<ActiveObjectDP> >, int&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      392 ( 0.02%)      80 ( 0.01%)     67 ( 0.03%)   3 ( 0.08%)     1 ( 0.01%)     1 ( 0.04%)  3 ( 0.10%)     1 ( 0.01%)     1 ( 0.04%)  ./elf/./elf/dl-hwcaps_split.c:_dl_hwcaps_split_masked [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      385 ( 0.02%)     165 ( 0.03%)    110 ( 0.05%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/move.h:ActiveObjectDP*&& std::forward<ActiveObjectDP*>(std::remove_reference<ActiveObjectDP*>::type&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      378 ( 0.01%)      84 ( 0.01%)    114 ( 0.05%)   6 ( 0.16%)     0              0           6 ( 0.20%)     .              .           ./nptl/./nptl/pthread_create.c:create_thread [/usr/lib/x86_64-linux-gnu/libc.so.6]
      378 ( 0.01%)      18 ( 0.00%)     30 ( 0.01%)   2 ( 0.05%)     0              3 ( 0.11%)  2 ( 0.07%)     0              3 ( 0.13%)  ./io/../sysdeps/unix/sysv/linux/open64_nocancel.c:__open_nocancel [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      374 ( 0.01%)     132 ( 0.02%)    132 ( 0.06%)   3 ( 0.08%)     0              2 ( 0.07%)  3 ( 0.10%)     0              2 ( 0.09%)  ???:std::locale::locale() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      370 ( 0.01%)      55 ( 0.01%)     95 ( 0.04%)  24 ( 0.63%)     0              5 ( 0.18%)  6 ( 0.20%)     0              5 ( 0.22%)  ActiveObjectDP.cpp:ActiveObjectDP::work() [/home/yairco/OS/FinalProject/OS_Project/graph]
      350 ( 0.01%)      74 ( 0.01%)     74 ( 0.03%)   6 ( 0.16%)     0              0           6 ( 0.20%)     .              .           ???:std::numpunct<wchar_t>::_M_initialize_numpunct(__locale_struct*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      350 ( 0.01%)      74 ( 0.01%)     74 ( 0.03%)   5 ( 0.13%)     1 ( 0.01%)     3 ( 0.11%)  5 ( 0.16%)     1 ( 0.01%)     3 ( 0.13%)  ???:std::__cxx11::numpunct<wchar_t>::_M_initialize_numpunct(__locale_struct*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      350 ( 0.01%)      50 ( 0.01%)    115 ( 0.05%)  13 ( 0.34%)     0              0           7 ( 0.23%)     .              .           ./nptl/./nptl/pthread_cond_wait.c:pthread_cond_wait@@GLIBC_2.3.2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      350 ( 0.01%)       7 ( 0.00%)    319 ( 0.14%)   3 ( 0.08%)     0             41 ( 1.44%)  3 ( 0.10%)     0             41 ( 1.83%)  ./elf/../elf/dl-tls.c:_dl_allocate_tls_storage [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      344 ( 0.01%)      74 ( 0.01%)     48 ( 0.02%)  19 ( 0.50%)     1 ( 0.01%)     0          19 ( 0.62%)     1 ( 0.01%)     .           ./elf/./elf/dl-sort-maps.c:_dl_sort_maps [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      342 ( 0.01%)      52 ( 0.01%)     39 ( 0.02%)  10 ( 0.26%)     8 ( 0.06%)     6 ( 0.21%) 10 ( 0.33%)     8 ( 0.09%)     6 ( 0.27%)  ./elf/./get-dynamic-info.h:dl_main
      330 ( 0.01%)     129 ( 0.02%)     70 ( 0.03%)   4 ( 0.10%)     1 ( 0.01%)     0           4 ( 0.13%)     1 ( 0.01%)     .           ./libio/./libio/getc.c:getc [/usr/lib/x86_64-linux-gnu/libc.so.6]
      320 ( 0.01%)      93 ( 0.02%)     76 ( 0.03%)  16 ( 0.42%)     2 ( 0.02%)     6 ( 0.21%)  8 ( 0.26%)     0              6 ( 0.27%)  ./nptl/./nptl/pthread_create.c:start_thread [/usr/lib/x86_64-linux-gnu/libc.so.6]
      315 ( 0.01%)     135 ( 0.02%)     90 ( 0.04%)   .              .              .           .              .              .           /usr/include/c++/11/bits/move.h:void (ActiveObjectDP::*&&std::forward<void (ActiveObjectDP::*)()>(std::remove_reference<void (ActiveObjectDP::*)()>::type&))() [/home/yairco/OS/FinalProject/OS_Project/graph]
      312 ( 0.01%)      52 ( 0.01%)     55 ( 0.02%)  16 ( 0.42%)     2 ( 0.02%)     5 ( 0.18%) 16 ( 0.52%)     2 ( 0.02%)     5 ( 0.22%)  ./elf/./elf/dl-load.c:_dl_init_paths [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      300 ( 0.01%)     100 ( 0.02%)     50 ( 0.02%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long) [/home/yairco/OS/FinalProject/OS_Project/graph]
      300 ( 0.01%)      90 ( 0.01%)     90 ( 0.04%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<TaskQueue, std::default_delete<TaskQueue> >::_M_ptr() [/home/yairco/OS/FinalProject/OS_Project/graph]
      300 ( 0.01%)      90 ( 0.01%)     90 ( 0.04%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, TaskQueue*, std::default_delete<TaskQueue> >::_M_head(std::_Tuple_impl<0ul, TaskQueue*, std::default_delete<TaskQueue> >&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      300 ( 0.01%)      90 ( 0.01%)     90 ( 0.04%)   .              .              .           .              .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::_M_ptr() [/home/yairco/OS/FinalProject/OS_Project/graph]
      300 ( 0.01%)      90 ( 0.01%)     90 ( 0.04%)   .              .              .           .              .              .           /usr/include/c++/11/tuple:TaskQueue*& std::__get_helper<0ul, TaskQueue*, std::default_delete<TaskQueue> >(std::_Tuple_impl<0ul, TaskQueue*, std::default_delete<TaskQueue> >&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      300 ( 0.01%)      90 ( 0.01%)     90 ( 0.04%)   .              .              .           .              .              .           /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, std::thread*, std::default_delete<std::thread> >::_M_head(std::_Tuple_impl<0ul, std::thread*, std::default_delete<std::thread> >&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      300 ( 0.01%)      90 ( 0.01%)     90 ( 0.04%)   .              .              .           .              .              .           /usr/include/c++/11/tuple:std::thread*& std::__get_helper<0ul, std::thread*, std::default_delete<std::thread> >(std::_Tuple_impl<0ul, std::thread*, std::default_delete<std::thread> >&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      300 ( 0.01%)      90 ( 0.01%)     90 ( 0.04%)   .              .              .           .              .              .           /usr/include/c++/11/tuple:std::tuple_element<0ul, std::tuple<TaskQueue*, std::default_delete<TaskQueue> > >::type& std::get<0ul, TaskQueue*, std::default_delete<TaskQueue> >(std::tuple<TaskQueue*, std::default_delete<TaskQueue> >&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      300 ( 0.01%)      90 ( 0.01%)     90 ( 0.04%)   .              .              .           .              .              .           /usr/include/c++/11/tuple:std::tuple_element<0ul, std::tuple<std::thread*, std::default_delete<std::thread> > >::type& std::get<0ul, std::thread*, std::default_delete<std::thread> >(std::tuple<std::thread*, std::default_delete<std::thread> >&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      297 ( 0.01%)      33 ( 0.01%)      0            2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           ./misc/../sysdeps/unix/sysv/linux/mmap64.c:mmap [/usr/lib/x86_64-linux-gnu/libc.so.6]
      296 ( 0.01%)     107 ( 0.02%)     41 ( 0.02%)  12 ( 0.31%)     1 ( 0.01%)     2 ( 0.07%) 12 ( 0.39%)     1 ( 0.01%)     2 ( 0.09%)  ???:std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      294 ( 0.01%)     101 ( 0.02%)    122 ( 0.05%)  25 ( 0.65%)     7 ( 0.05%)     7 ( 0.25%) 25 ( 0.82%)     1 ( 0.01%)     6 ( 0.27%)  ???:0x00000000000dc6c0 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      294 ( 0.01%)       6 ( 0.00%)    120 ( 0.05%)   9 ( 0.24%)     0             23 ( 0.81%)  4 ( 0.13%)     0             23 ( 1.02%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_sse2_unaligned [/usr/lib/x86_64-linux-gnu/libc.so.6]
      290 ( 0.01%)     110 ( 0.02%)     80 ( 0.03%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<TaskQueue::TaskData, TaskQueue::TaskData&, TaskQueue::TaskData*>::_M_set_node(TaskQueue::TaskData**) [/home/yairco/OS/FinalProject/OS_Project/graph]
      285 ( 0.01%)     115 ( 0.02%)     45 ( 0.02%)   7 ( 0.18%)     0              0           5 ( 0.16%)     .              .           ???:std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      280 ( 0.01%)     120 ( 0.02%)     80 ( 0.03%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/move.h:int& std::forward<int&>(std::remove_reference<int&>::type&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      278 ( 0.01%)      16 ( 0.00%)     29 ( 0.01%)  30 ( 0.79%)     3 ( 0.02%)     1 ( 0.04%) 30 ( 0.98%)     3 ( 0.03%)     1 ( 0.04%)  ???:__cpu_indicator_init [/usr/lib/x86_64-linux-gnu/libgcc_s.so.1]
      268 ( 0.01%)      95 ( 0.02%)     39 ( 0.02%)   7 ( 0.18%)     6 ( 0.05%)     0           7 ( 0.23%)     3 ( 0.03%)     .           ./elf/./elf/dl-lookup-direct.c:_dl_lookup_direct [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      265 ( 0.01%)      62 ( 0.01%)     53 ( 0.02%)   3 ( 0.08%)     0              0           3 ( 0.10%)     .              .           ./elf/./elf/dl-object.c:_dl_add_to_namespace_list [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      265 ( 0.01%)      60 ( 0.01%)     85 ( 0.04%)   4 ( 0.10%)     1 ( 0.01%)     0           4 ( 0.13%)     1 ( 0.01%)     .           /usr/include/c++/11/bits/std_thread.h:std::thread::thread<void (ActiveObjectDP::*)(), ActiveObjectDP*, void>(void (ActiveObjectDP::*&&)(), ActiveObjectDP*&&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      261 ( 0.01%)     130 ( 0.02%)      2 ( 0.00%)   2 ( 0.05%)     1 ( 0.01%)     0           2 ( 0.07%)     .              .           ???:0x00000000048f4f30 [???]
      261 ( 0.01%)      87 ( 0.01%)     67 ( 0.03%)   .              .              .           .              .              .           ./libio/./libio/libioP.h:putc
      258 ( 0.01%)       .               .            .              .              .           .              .              .           ./libio/./libio/libioP.h:_IO_default_xsputn
      255 ( 0.01%)      65 ( 0.01%)     70 ( 0.03%)   8 ( 0.21%)     0              0           4 ( 0.13%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObjectDP, std::allocator<ActiveObjectDP>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<int&>(std::allocator<ActiveObjectDP>, int&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      253 ( 0.01%)      92 ( 0.02%)     23 ( 0.01%)   7 ( 0.18%)     0              0           2 ( 0.07%)     .              .           ./libio/./libio/genops.c:__overflow [/usr/lib/x86_64-linux-gnu/libc.so.6]
      252 ( 0.01%)     102 ( 0.02%)     84 ( 0.04%)   9 ( 0.24%)     1 ( 0.01%)     0           4 ( 0.13%)     .              .           ./nptl/./nptl/pthread_attr_copy.c:__pthread_attr_copy [/usr/lib/x86_64-linux-gnu/libc.so.6]
      251 ( 0.01%)      55 ( 0.01%)     12 ( 0.01%)  12 ( 0.31%)    12 ( 0.09%)     0          12 ( 0.39%)    12 ( 0.13%)     .           ./elf/./elf/dl-load.c:open_verify.constprop.1 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      250 ( 0.01%)      55 ( 0.01%)     28 ( 0.01%)   5 ( 0.13%)     0              0           5 ( 0.16%)     .              .           ./nptl/./nptl/pthread_mutex_unlock.c:pthread_mutex_unlock@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      248 ( 0.01%)      77 ( 0.01%)      1 ( 0.00%)   2 ( 0.05%)     2 ( 0.02%)     0           2 ( 0.07%)     2 ( 0.02%)     .           ./elf/./elf/dl-minimal.c:strsep [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      245 ( 0.01%)      35 ( 0.01%)     20 ( 0.01%)   4 ( 0.10%)     0              0           4 ( 0.13%)     .              .           ./elf/./elf/dl-tunables.c:__GI___tunable_set_val [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      244 ( 0.01%)      53 ( 0.01%)     11 ( 0.00%)   9 ( 0.24%)     1 ( 0.01%)     0           9 ( 0.29%)     .              .           ./elf/../sysdeps/x86/dl-prop.h:dl_main
      243 ( 0.01%)     121 ( 0.02%)      2 ( 0.00%)   2 ( 0.05%)     1 ( 0.01%)     0           2 ( 0.07%)     .              .           ???:0x00000000048f71f0 [???]
      243 ( 0.01%)      36 ( 0.01%)     26 ( 0.01%)   7 ( 0.18%)     6 ( 0.05%)     6 ( 0.21%)  7 ( 0.23%)     6 ( 0.07%)     6 ( 0.27%)  ./elf/./get-dynamic-info.h:_dl_start
      240 ( 0.01%)     108 ( 0.02%)     54 ( 0.02%)   7 ( 0.18%)     0              0           3 ( 0.10%)     .              .           ./misc/../sysdeps/unix/sysv/linux/clone-internal.c:__clone_internal [/usr/lib/x86_64-linux-gnu/libc.so.6]
      234 ( 0.01%)      14 ( 0.00%)    173 ( 0.07%)   6 ( 0.16%)     0             18 ( 0.63%)  5 ( 0.16%)     0             18 ( 0.80%)  ./malloc/./malloc/malloc.c:tcache_init.part.0 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      233 ( 0.01%)     108 ( 0.02%)     34 ( 0.01%)   3 ( 0.08%)     1 ( 0.01%)     4 ( 0.14%)  3 ( 0.10%)     1 ( 0.01%)     4 ( 0.18%)  ./string/../sysdeps/x86_64/strcspn.S:strcspn [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      221 ( 0.01%)     110 ( 0.02%)      2 ( 0.00%)   5 ( 0.13%)     1 ( 0.01%)     0           2 ( 0.07%)     .              .           ???:0x00000000048f46b0 [???]
      216 ( 0.01%)      81 ( 0.01%)     81 ( 0.03%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/new:operator new(unsigned long, void*) [/home/yairco/OS/FinalProject/OS_Project/graph]
      215 ( 0.01%)      20 ( 0.00%)     16 ( 0.01%)  13 ( 0.34%)     0              0          13 ( 0.43%)     .              .           ./elf/../sysdeps/x86/dl-cacheinfo.h:get_common_cache_info.constprop.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      210 ( 0.01%)      90 ( 0.01%)     60 ( 0.03%)   .              .              .           .              .              .           /usr/include/c++/11/tuple:std::_Head_base<0ul, TaskQueue*, false>::_M_head(std::_Head_base<0ul, TaskQueue*, false>&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      210 ( 0.01%)      90 ( 0.01%)     60 ( 0.03%)   .              .              .           .              .              .           /usr/include/c++/11/tuple:std::_Head_base<0ul, std::thread*, false>::_M_head(std::_Head_base<0ul, std::thread*, false>&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      210 ( 0.01%)      85 ( 0.01%)     65 ( 0.03%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::function(std::function<bool (int&, int)> const&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      210 ( 0.01%)      84 ( 0.01%)     63 ( 0.03%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/atomic_base.h:std::operator&(std::memory_order, std::__memory_order_modifier) [/home/yairco/OS/FinalProject/OS_Project/graph]
      210 ( 0.01%)      60 ( 0.01%)     60 ( 0.03%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObjectDP>::allocator(std::allocator<ActiveObjectDP> const&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      208 ( 0.01%)      56 ( 0.01%)     64 ( 0.03%)   3 ( 0.08%)     1 ( 0.01%)     0           3 ( 0.10%)     1 ( 0.01%)     .           ???:std::ios_base::_M_init() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      207 ( 0.01%)      32 ( 0.01%)     71 ( 0.03%)  21 ( 0.55%)     0              4 ( 0.14%) 21 ( 0.69%)     0              4 ( 0.18%)  ./elf/../sysdeps/x86/dl-cacheinfo.h:init_cpu_features.constprop.0
      204 ( 0.01%)      58 ( 0.01%)     33 ( 0.01%)  17 ( 0.45%)     1 ( 0.01%)     0          17 ( 0.56%)     1 ( 0.01%)     .           ./posix/./posix/getopt.c:_getopt_internal_r [/usr/lib/x86_64-linux-gnu/libc.so.6]
      203 ( 0.01%)      56 ( 0.01%)     35 ( 0.01%)   3 ( 0.08%)     5 ( 0.04%)     1 ( 0.04%)  3 ( 0.10%)     5 ( 0.06%)     1 ( 0.04%)  ./elf/./elf/dl-setup_hash.c:_dl_setup_hash [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      200 ( 0.01%)      60 ( 0.01%)     80 ( 0.03%)   3 ( 0.08%)     0              5 ( 0.18%)  1 ( 0.03%)     0              5 ( 0.22%)  /usr/include/c++/11/atomic:std::atomic<bool>::operator bool() const [/home/yairco/OS/FinalProject/OS_Project/graph]
      198 ( 0.01%)      88 ( 0.01%)     33 ( 0.01%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           ./elf/./elf/dl-deps.c:openaux [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      198 ( 0.01%)      66 ( 0.01%)     66 ( 0.03%)   2 ( 0.05%)     0              1 ( 0.04%)  2 ( 0.07%)     0              1 ( 0.04%)  ./elf/./elf/dl-load.c:_dl_dst_count [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      196 ( 0.01%)      90 ( 0.01%)      5 ( 0.00%)   3 ( 0.08%)     1 ( 0.01%)     0           3 ( 0.10%)     1 ( 0.01%)     .           ???:0x00000000000c2320 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      192 ( 0.01%)      80 ( 0.01%)     48 ( 0.02%)   .              .              .           .              .              .           /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::operator[](unsigned long) [/home/yairco/OS/FinalProject/OS_Project/graph]
      192 ( 0.01%)      60 ( 0.01%)     42 ( 0.02%)   4 ( 0.10%)     0              0           4 ( 0.13%)     .              .           ./libio/./libio/ioungetc.c:ungetc [/usr/lib/x86_64-linux-gnu/libc.so.6]
      192 ( 0.01%)       0               0           20 ( 0.52%)     0              0           1 ( 0.03%)     .              .           ./libio/./libio/libioP.h:_IO_do_write@@GLIBC_2.2.5
      190 ( 0.01%)      75 ( 0.01%)     65 ( 0.03%)   3 ( 0.08%)     0              0           3 ( 0.10%)     .              .           /usr/include/c++/11/bits/move.h:std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      180 ( 0.01%)      60 ( 0.01%)     75 ( 0.03%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/std_function.h:std::_Function_base::_Function_base() [/home/yairco/OS/FinalProject/OS_Project/graph]
      180 ( 0.01%)      60 ( 0.01%)     40 ( 0.02%)   0              1 ( 0.01%)     .           .              .              .           /usr/include/c++/11/bits/atomic_base.h:std::atomic<bool>::operator bool() const
      176 ( 0.01%)      52 ( 0.01%)     41 ( 0.02%)  10 ( 0.26%)     2 ( 0.02%)     0          10 ( 0.33%)     1 ( 0.01%)     .           ./libio/./libio/genops.c:_IO_cleanup [/usr/lib/x86_64-linux-gnu/libc.so.6]
      176 ( 0.01%)      48 ( 0.01%)      0            1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           ???:std::ostream::operator<<(int) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      175 ( 0.01%)      75 ( 0.01%)     40 ( 0.02%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/vector.tcc:std::shared_ptr<ActiveObjectDP>& std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::emplace_back<std::shared_ptr<ActiveObjectDP> >(std::shared_ptr<ActiveObjectDP>&&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      175 ( 0.01%)      45 ( 0.01%)     60 ( 0.03%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::_MakeUniq<std::thread>::__single_object std::make_unique<std::thread, void (ActiveObjectDP::*)(), ActiveObjectDP*>(void (ActiveObjectDP::*&&)(), ActiveObjectDP*&&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      175 ( 0.01%)      45 ( 0.01%)     45 ( 0.02%)  10 ( 0.26%)     0              0           3 ( 0.10%)     .              .           /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP> std::make_shared<ActiveObjectDP, int&>(int&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      171 ( 0.01%)      54 ( 0.01%)      9 ( 0.00%)   3 ( 0.08%)     1 ( 0.01%)     0           3 ( 0.10%)     1 ( 0.01%)     .           ./elf/./dl-load.h:_dl_map_object_from_fd
      170 ( 0.01%)      45 ( 0.01%)     55 ( 0.02%)   5 ( 0.13%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/std_thread.h:std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (ActiveObjectDP::*)(), ActiveObjectDP*> > >::_State_impl<void (ActiveObjectDP::*)(), ActiveObjectDP*>(void (ActiveObjectDP::*&&)(), ActiveObjectDP*&&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      170 ( 0.01%)       0               0            2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           ./elf/./elf/dl-minimal-malloc.c:__minimal_calloc [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      168 ( 0.01%)      56 ( 0.01%)     28 ( 0.01%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           ./nptl/./nptl/cancellation.c:__pthread_disable_asynccancel [/usr/lib/x86_64-linux-gnu/libc.so.6]
      165 ( 0.01%)      45 ( 0.01%)     45 ( 0.02%)   .              .              .           .              .              .           /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObjectDP>::~allocator() [/home/yairco/OS/FinalProject/OS_Project/graph]
      161 ( 0.01%)      23 ( 0.00%)      0            1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           ???:__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::overflow(int) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      161 ( 0.01%)       .               .            .              .              .           .              .              .           ./libio/./libio/libioP.h:__overflow
      160 ( 0.01%)      60 ( 0.01%)     50 ( 0.02%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/move.h:std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)) [/home/yairco/OS/FinalProject/OS_Project/graph]
      160 ( 0.01%)      60 ( 0.01%)     50 ( 0.02%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/move.h:std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data const&, int&, int&&)> >, std::is_move_constructible<bool (*)(std::_Any_data const&, int&, int&&)>, std::is_move_assignable<bool (*)(std::_Any_data const&, int&, int&&)> >::value, void>::type std::swap<bool (*)(std::_Any_data const&, int&, int&&)>(bool (*&)(std::_Any_data const&, int&, int&&), bool (*&)(std::_Any_data const&, int&, int&&)) [/home/yairco/OS/FinalProject/OS_Project/graph]
      160 ( 0.01%)      60 ( 0.01%)     25 ( 0.01%)   .              .              .           .              .              .           /usr/include/c++/11/bits/std_function.h:std::_Function_base::~_Function_base() [/home/yairco/OS/FinalProject/OS_Project/graph]
      160 ( 0.01%)      56 ( 0.01%)     24 ( 0.01%)   3 ( 0.08%)     0              0           3 ( 0.10%)     .              .           ???:std::locale::operator=(std::locale const&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      160 ( 0.01%)      40 ( 0.01%)     40 ( 0.02%)   3 ( 0.08%)     0              0           3 ( 0.10%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> >::_M_allocate_map(unsigned long) [/home/yairco/OS/FinalProject/OS_Project/graph]
      159 ( 0.01%)      14 ( 0.00%)      0            2 ( 0.05%)     4 ( 0.03%)     0           2 ( 0.07%)     3 ( 0.03%)     .           ./elf/./elf/dl-misc.c:_dl_higher_prime_number [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      156 ( 0.01%)      56 ( 0.01%)     28 ( 0.01%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [/home/yairco/OS/FinalProject/OS_Project/graph]
      156 ( 0.01%)      24 ( 0.00%)     18 ( 0.01%)   2 ( 0.05%)     1 ( 0.01%)     6 ( 0.21%)  2 ( 0.07%)     0              6 ( 0.27%)  ./misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:clone [/usr/lib/x86_64-linux-gnu/libc.so.6]
      155 ( 0.01%)      55 ( 0.01%)     45 ( 0.02%)   5 ( 0.13%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<ActiveObjectDP>, int&>(std::_Sp_alloc_shared_tag<std::allocator<ActiveObjectDP> >, int&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      155 ( 0.01%)      30 ( 0.00%)     85 ( 0.04%)   3 ( 0.08%)     0              3 ( 0.11%)  3 ( 0.10%)     0              3 ( 0.13%)  /usr/include/c++/11/bits/unique_ptr.h:std::_MakeUniq<TaskQueue>::__single_object std::make_unique<TaskQueue>() [/home/yairco/OS/FinalProject/OS_Project/graph]
      153 ( 0.01%)      31 ( 0.01%)     22 ( 0.01%)  20 ( 0.52%)     2 ( 0.02%)     2 ( 0.07%) 20 ( 0.66%)     2 ( 0.02%)     2 ( 0.09%)  ./malloc/./malloc/malloc.c:sysmalloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
      152 ( 0.01%)      31 ( 0.01%)     31 ( 0.01%)  12 ( 0.31%)     0              0          12 ( 0.39%)     .              .           ./elf/./elf/dl-load.c:fillin_rpath.isra.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      152 ( 0.01%)      17 ( 0.00%)      8 ( 0.00%)   4 ( 0.10%)     0              0           3 ( 0.10%)     .              .           ./io/../sysdeps/unix/sysv/linux/fstatat64.c:fstatat [/usr/lib/x86_64-linux-gnu/libc.so.6]
      151 ( 0.01%)      45 ( 0.01%)     21 ( 0.01%)   8 ( 0.21%)    10 ( 0.08%)     1 ( 0.04%)  8 ( 0.26%)     5 ( 0.06%)     1 ( 0.04%)  ./elf/../elf/dl-tls.c:_dl_allocate_tls_init [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      150 ( 0.01%)      60 ( 0.01%)     60 ( 0.03%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<TaskQueue::TaskData, TaskQueue::TaskData&, TaskQueue::TaskData*>::_Deque_iterator() [/home/yairco/OS/FinalProject/OS_Project/graph]
      150 ( 0.01%)      45 ( 0.01%)     35 ( 0.01%)   3 ( 0.08%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/thread:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::thread::id) [/home/yairco/OS/FinalProject/OS_Project/graph]
      150 ( 0.01%)      21 ( 0.00%)     44 ( 0.02%)  21 ( 0.55%)     1 ( 0.01%)     3 ( 0.11%) 21 ( 0.69%)     1 ( 0.01%)     3 ( 0.13%)  ./elf/../sysdeps/x86/cpu-features.c:init_cpu_features.constprop.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      149 ( 0.01%)       6 ( 0.00%)     29 ( 0.01%)  14 ( 0.37%)     0              0          14 ( 0.46%)     .              .           ???:std::__timepunct<char>::_M_initialize_timepunct(__locale_struct*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      149 ( 0.01%)       6 ( 0.00%)     29 ( 0.01%)  14 ( 0.37%)     0              0          14 ( 0.46%)     .              .           ???:std::__timepunct<wchar_t>::_M_initialize_timepunct(__locale_struct*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      146 ( 0.01%)      49 ( 0.01%)     14 ( 0.01%)   6 ( 0.16%)     4 ( 0.03%)     0           6 ( 0.20%)     1 ( 0.01%)     .           ./elf/./elf/dl-init.c:_dl_init [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      146 ( 0.01%)      12 ( 0.00%)      0            7 ( 0.18%)     0              0           7 ( 0.23%)     .              .           ???:std::ctype<wchar_t>::_M_convert_to_wmask(unsigned short) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      145 ( 0.01%)      40 ( 0.01%)     50 ( 0.02%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<ActiveObjectDP>::construct<ActiveObjectDP, int&>(ActiveObjectDP*, int&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      143 ( 0.01%)      71 ( 0.01%)      2 ( 0.00%)   1 ( 0.03%)     .              .           .              .              .           ???:0x00000000048f6bf0 [???]
      143 ( 0.01%)      42 ( 0.01%)     31 ( 0.01%)   8 ( 0.21%)     8 ( 0.06%)     0           5 ( 0.16%)     3 ( 0.03%)     .           ./csu/../csu/libc-start.c:__libc_start_main@@GLIBC_2.34 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      140 ( 0.01%)      70 ( 0.01%)     30 ( 0.01%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::operator=(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      140 ( 0.01%)      60 ( 0.01%)     30 ( 0.01%)   .              .              .           .              .              .           /usr/include/c++/11/ext/atomicity.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_add_ref_copy()
      140 ( 0.01%)      48 ( 0.01%)     32 ( 0.01%)   3 ( 0.08%)     0              0           3 ( 0.10%)     .              .           ./elf/./elf/dl-minimal.c:lookup_malloc_symbol [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      140 ( 0.01%)      40 ( 0.01%)     40 ( 0.02%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, std::thread*, std::default_delete<std::thread> >::_Tuple_impl() [/home/yairco/OS/FinalProject/OS_Project/graph]
      140 ( 0.01%)      40 ( 0.01%)     40 ( 0.02%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, TaskQueue*, std::default_delete<TaskQueue> >::_Tuple_impl() [/home/yairco/OS/FinalProject/OS_Project/graph]
      140 ( 0.01%)      40 ( 0.01%)     35 ( 0.01%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::operator=(std::function<bool (int&, int)> const&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      140 ( 0.01%)      40 ( 0.01%)     30 ( 0.01%)   5 ( 0.13%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::deque<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> >::empty() const [/home/yairco/OS/FinalProject/OS_Project/graph]
      140 ( 0.01%)      40 ( 0.01%)     30 ( 0.01%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::swap(std::function<bool (int&, int)>&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      138 ( 0.01%)      69 ( 0.01%)      0            1 ( 0.03%)     1 ( 0.01%)     0           1 ( 0.03%)     1 ( 0.01%)     .           ???:0x0000000004ac9490 [???]
      136 ( 0.01%)      68 ( 0.01%)     34 ( 0.01%)   .              .              .           .              .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>::get() const [/home/yairco/OS/FinalProject/OS_Project/graph]
      136 ( 0.01%)      68 ( 0.01%)      0            1 ( 0.03%)     1 ( 0.01%)     0           1 ( 0.03%)     1 ( 0.01%)     .           ???:0x0000000004ac93e0 [???]
      135 ( 0.01%)      50 ( 0.01%)     45 ( 0.02%)   2 ( 0.05%)     0              1 ( 0.04%)  2 ( 0.07%)     0              1 ( 0.04%)  /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> >::_M_create_nodes(TaskQueue::TaskData**, TaskQueue::TaskData**) [/home/yairco/OS/FinalProject/OS_Project/graph]
      135 ( 0.01%)      45 ( 0.01%)     30 ( 0.01%)   6 ( 0.16%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObjectDP>*, std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > > >::operator-(long) const [/home/yairco/OS/FinalProject/OS_Project/graph]
      135 ( 0.01%)      35 ( 0.01%)     45 ( 0.02%)   4 ( 0.10%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, void (ActiveObjectDP::*)(), ActiveObjectDP*>::_Tuple_impl<void (ActiveObjectDP::*)(), ActiveObjectDP*, void>(void (ActiveObjectDP::*&&)(), ActiveObjectDP*&&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      135 ( 0.01%)      35 ( 0.01%)     45 ( 0.02%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/std_thread.h:std::thread::_Invoker<std::tuple<void (ActiveObjectDP::*)(), ActiveObjectDP*> >::_Invoker<void (ActiveObjectDP::*)(), ActiveObjectDP*>(void (ActiveObjectDP::*&&)(), ActiveObjectDP*&&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      135 ( 0.01%)      35 ( 0.01%)     45 ( 0.02%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/tuple:std::tuple<void (ActiveObjectDP::*)(), ActiveObjectDP*>::tuple<void (ActiveObjectDP::*)(), ActiveObjectDP*, true>(void (ActiveObjectDP::*&&)(), ActiveObjectDP*&&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      135 ( 0.01%)      25 ( 0.00%)     30 ( 0.01%)   3 ( 0.08%)     0              0           3 ( 0.10%)     .              .           /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<TaskQueue::TaskData>::allocate(unsigned long, void const*) [/home/yairco/OS/FinalProject/OS_Project/graph]
      135 ( 0.01%)      25 ( 0.00%)     30 ( 0.01%)   3 ( 0.08%)     0              0           3 ( 0.10%)     .              .           /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<ActiveObjectDP, std::allocator<ActiveObjectDP>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*) [/home/yairco/OS/FinalProject/OS_Project/graph]
      130 ( 0.01%)      60 ( 0.01%)     30 ( 0.01%)   2 ( 0.05%)     2 ( 0.02%)     0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::operator==(std::_Deque_iterator<TaskQueue::TaskData, TaskQueue::TaskData&, TaskQueue::TaskData*> const&, std::_Deque_iterator<TaskQueue::TaskData, TaskQueue::TaskData&, TaskQueue::TaskData*> const&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      130 ( 0.01%)      45 ( 0.01%)     35 ( 0.01%)   0              0              1 ( 0.04%)  0              0              1 ( 0.04%)  /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>&&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      126 ( 0.00%)      54 ( 0.01%)     36 ( 0.02%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/move.h:Server*&& std::forward<Server*>(std::remove_reference<Server*>::type&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      126 ( 0.00%)      28 ( 0.00%)     14 ( 0.01%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           ???:std::locale::facet::_S_get_c_locale() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      125 ( 0.00%)      35 ( 0.01%)     40 ( 0.02%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<TaskQueue, std::default_delete<TaskQueue> >::operator=(std::__uniq_ptr_impl<TaskQueue, std::default_delete<TaskQueue> >&&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      125 ( 0.00%)      35 ( 0.01%)     40 ( 0.02%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::operator=(std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >&&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      125 ( 0.00%)      30 ( 0.00%)     40 ( 0.02%)   3 ( 0.08%)     0              0           3 ( 0.10%)     .              .           /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::back() [/home/yairco/OS/FinalProject/OS_Project/graph]
      125 ( 0.00%)      25 ( 0.00%)     10 ( 0.00%)   3 ( 0.08%)     0              0           2 ( 0.07%)     .              .           ./nptl/./nptl/pthread_mutex_unlock.c:__pthread_mutex_unlock_usercnt [/usr/lib/x86_64-linux-gnu/libc.so.6]
      124 ( 0.00%)      60 ( 0.01%)     17 ( 0.01%)   4 ( 0.10%)     6 ( 0.05%)     0           4 ( 0.13%)     3 ( 0.03%)     .           ???:std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::flush() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      124 ( 0.00%)      12 ( 0.00%)     44 ( 0.02%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           ???:std::basic_ios<char, std::char_traits<char> >::_M_cache_locale(std::locale const&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      124 ( 0.00%)      12 ( 0.00%)     44 ( 0.02%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           ???:std::basic_ios<wchar_t, std::char_traits<wchar_t> >::_M_cache_locale(std::locale const&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      122 ( 0.00%)      44 ( 0.01%)     21 ( 0.01%)   4 ( 0.10%)     1 ( 0.01%)     0           4 ( 0.13%)     .              .           ./malloc/./malloc/malloc.c:free [/usr/lib/x86_64-linux-gnu/libc.so.6]
      120 ( 0.00%)      50 ( 0.01%)     40 ( 0.02%)   5 ( 0.13%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObjectDP>*, std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > > >::__normal_iterator(std::shared_ptr<ActiveObjectDP>* const&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      120 ( 0.00%)      48 ( 0.01%)      0            3 ( 0.08%)     6 ( 0.05%)     0           3 ( 0.10%)     6 ( 0.07%)     .           ./elf/./elf/dl-load.c:_dl_process_pt_gnu_property [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      120 ( 0.00%)      42 ( 0.01%)     36 ( 0.02%)   6 ( 0.16%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr() [/home/yairco/OS/FinalProject/OS_Project/graph]
      120 ( 0.00%)      40 ( 0.01%)     30 ( 0.01%)   .              .              .           .              .              .           ./libio/./libio/libioP.h:getc
      120 ( 0.00%)      36 ( 0.01%)     36 ( 0.02%)   9 ( 0.24%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr() [/home/yairco/OS/FinalProject/OS_Project/graph]
      120 ( 0.00%)      36 ( 0.01%)     36 ( 0.02%)   6 ( 0.16%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/tuple:std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      120 ( 0.00%)      36 ( 0.01%)     36 ( 0.02%)   6 ( 0.16%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/tuple:std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      120 ( 0.00%)      36 ( 0.01%)     36 ( 0.02%)   .              .              .           .              .              .           /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      120 ( 0.00%)      30 ( 0.00%)     45 ( 0.02%)   5 ( 0.13%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<ActiveObjectDP>::new_allocator(__gnu_cxx::new_allocator<ActiveObjectDP> const&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      120 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   .              .              .           .              .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [/home/yairco/OS/FinalProject/OS_Project/graph]
      120 ( 0.00%)      25 ( 0.00%)     30 ( 0.01%)   3 ( 0.08%)     0              0           3 ( 0.10%)     .              .           /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<TaskQueue::TaskData*>::allocate(unsigned long, void const*) [/home/yairco/OS/FinalProject/OS_Project/graph]
      119 ( 0.00%)      70 ( 0.01%)     21 ( 0.01%)   9 ( 0.24%)     8 ( 0.06%)     0           2 ( 0.07%)     5 ( 0.06%)     .           ./ctype/./ctype/ctype-info.c:__ctype_init [/usr/lib/x86_64-linux-gnu/libc.so.6]
      118 ( 0.00%)      27 ( 0.00%)     28 ( 0.01%)   3 ( 0.08%)     1 ( 0.01%)     0           3 ( 0.10%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() [/home/yairco/OS/FinalProject/OS_Project/graph]
      117 ( 0.00%)      31 ( 0.01%)     26 ( 0.01%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           ActiveObjectDP.cpp:ActiveObjectDP::setNextStage(std::shared_ptr<ActiveObjectDP>) [/home/yairco/OS/FinalProject/OS_Project/graph]
      116 ( 0.00%)       8 ( 0.00%)     79 ( 0.03%)   4 ( 0.10%)     1 ( 0.01%)     9 ( 0.32%)  4 ( 0.13%)     1 ( 0.01%)     9 ( 0.40%)  ???:std::ctype<char>::ctype(unsigned short const*, bool, unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      115 ( 0.00%)      40 ( 0.01%)     40 ( 0.02%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::reset(std::thread*) [/home/yairco/OS/FinalProject/OS_Project/graph]
      115 ( 0.00%)      40 ( 0.01%)     40 ( 0.02%)   .              .              .           .              .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<TaskQueue, std::default_delete<TaskQueue> >::reset(TaskQueue*) [/home/yairco/OS/FinalProject/OS_Project/graph]
      115 ( 0.00%)      30 ( 0.00%)     25 ( 0.01%)   6 ( 0.16%)     0              0           2 ( 0.07%)     .              .           ActiveObjectDP.cpp:ActiveObjectDP::work()::{lambda()#1}::operator()() const [/home/yairco/OS/FinalProject/OS_Project/graph]
      115 ( 0.00%)      25 ( 0.00%)     40 ( 0.02%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::shared_ptr<ActiveObjectDP> >::construct<std::shared_ptr<ActiveObjectDP>, std::shared_ptr<ActiveObjectDP> >(std::shared_ptr<ActiveObjectDP>*, std::shared_ptr<ActiveObjectDP>&&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      114 ( 0.00%)      53 ( 0.01%)     10 ( 0.00%)   3 ( 0.08%)     2 ( 0.02%)     0           3 ( 0.10%)     2 ( 0.02%)     .           ./elf/../sysdeps/posix/dl-fileid.h:_dl_map_object_from_fd
      114 ( 0.00%)      36 ( 0.01%)     42 ( 0.02%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*) [/home/yairco/OS/FinalProject/OS_Project/graph]
      114 ( 0.00%)      36 ( 0.01%)     24 ( 0.01%)   3 ( 0.08%)     0              0           3 ( 0.10%)     .              .           ./libio/./libio/genops.c:_IO_sputbackc [/usr/lib/x86_64-linux-gnu/libc.so.6]
      113 ( 0.00%)      38 ( 0.01%)     31 ( 0.01%)   5 ( 0.13%)     0              0           5 ( 0.16%)     .              .           ???:std::__cxx11::moneypunct<char, true>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      113 ( 0.00%)      38 ( 0.01%)     31 ( 0.01%)   5 ( 0.13%)     0              0           5 ( 0.16%)     .              .           ???:std::moneypunct<char, true>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      113 ( 0.00%)      38 ( 0.01%)     31 ( 0.01%)   4 ( 0.10%)     1 ( 0.01%)     0           4 ( 0.13%)     1 ( 0.01%)     .           ???:std::__cxx11::moneypunct<char, false>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      113 ( 0.00%)      38 ( 0.01%)     31 ( 0.01%)   4 ( 0.10%)     0              0           4 ( 0.13%)     .              .           ???:std::moneypunct<char, false>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      112 ( 0.00%)      48 ( 0.01%)     32 ( 0.01%)   .              .              .           .              .              .           /usr/include/c++/11/bits/move.h:void (Server::*&&std::forward<void (Server::*)()>(std::remove_reference<void (Server::*)()>::type&))() [/home/yairco/OS/FinalProject/OS_Project/graph]
      112 ( 0.00%)       2 ( 0.00%)      1 ( 0.00%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           ./malloc/./malloc/arena.c:malloc
      111 ( 0.00%)      19 ( 0.00%)     11 ( 0.00%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           ./elf/./elf/dl-version.c:_dl_check_all_versions [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      110 ( 0.00%)      45 ( 0.01%)     20 ( 0.01%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_lock.h:std::unique_lock<std::mutex>::lock() [/home/yairco/OS/FinalProject/OS_Project/graph]
      110 ( 0.00%)      40 ( 0.01%)     30 ( 0.01%)   6 ( 0.16%)     0              0           3 ( 0.10%)     .              .           ./nptl/./nptl/pthread_cond_broadcast.c:pthread_cond_broadcast@@GLIBC_2.3.2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      110 ( 0.00%)      40 ( 0.01%)     30 ( 0.01%)   5 ( 0.13%)     0              5 ( 0.18%)  1 ( 0.03%)     0              5 ( 0.22%)  /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<TaskQueue, std::default_delete<TaskQueue> >::_M_ptr() const [/home/yairco/OS/FinalProject/OS_Project/graph]
      110 ( 0.00%)      40 ( 0.01%)     25 ( 0.01%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/invoke.h:void std::__invoke_impl<void, void (ActiveObjectDP::*)(), ActiveObjectDP*>(std::__invoke_memfun_deref, void (ActiveObjectDP::*&&)(), ActiveObjectDP*&&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      110 ( 0.00%)      33 ( 0.01%)     33 ( 0.01%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2, false, false>::_M_get() const [/home/yairco/OS/FinalProject/OS_Project/graph]
      110 ( 0.00%)      33 ( 0.01%)     33 ( 0.01%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const [/home/yairco/OS/FinalProject/OS_Project/graph]
      110 ( 0.00%)      30 ( 0.00%)     40 ( 0.02%)   .              .              .           .              .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_add_ref_copy() [/home/yairco/OS/FinalProject/OS_Project/graph]
      110 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   6 ( 0.16%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP>::~shared_ptr() [/home/yairco/OS/FinalProject/OS_Project/graph]
      110 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObjectDP, std::allocator<ActiveObjectDP>, (__gnu_cxx::_Lock_policy)2>::_M_ptr() [/home/yairco/OS/FinalProject/OS_Project/graph]
      110 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   1 ( 0.03%)     0              1 ( 0.04%)  1 ( 0.03%)     .              .           /usr/include/c++/11/tuple:std::_Tuple_impl<1ul, std::default_delete<std::thread> >::_Tuple_impl() [/home/yairco/OS/FinalProject/OS_Project/graph]
      110 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/tuple:std::_Tuple_impl<1ul, std::default_delete<TaskQueue> >::_Tuple_impl() [/home/yairco/OS/FinalProject/OS_Project/graph]
      110 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/tuple:std::tuple<std::thread*, std::default_delete<std::thread> >::tuple<true, true>() [/home/yairco/OS/FinalProject/OS_Project/graph]
      110 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   .              .              .           .              .              .           /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::~function() [/home/yairco/OS/FinalProject/OS_Project/graph]
      110 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   .              .              .           .              .              .           /usr/include/c++/11/tuple:std::tuple<TaskQueue*, std::default_delete<TaskQueue> >::tuple<true, true>() [/home/yairco/OS/FinalProject/OS_Project/graph]
      110 ( 0.00%)      21 ( 0.00%)     29 ( 0.01%)  10 ( 0.26%)     2 ( 0.02%)     8 ( 0.28%) 10 ( 0.33%)     2 ( 0.02%)     8 ( 0.36%)  ./elf/./elf/rtld.c:_dl_start [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      110 ( 0.00%)      20 ( 0.00%)     65 ( 0.03%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/stl_queue.h:std::queue<TaskQueue::TaskData, std::deque<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> > >::queue<std::deque<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> >, void>() [/home/yairco/OS/FinalProject/OS_Project/graph]
      110 ( 0.00%)       5 ( 0.00%)     35 ( 0.01%)   6 ( 0.16%)     0              0           3 ( 0.10%)     .              .           ./nptl/./nptl/futex-internal.c:__futex_abstimed_wait_cancelable64 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      109 ( 0.00%)      30 ( 0.00%)     31 ( 0.01%)   6 ( 0.16%)     0              0           6 ( 0.20%)     .              .           ???:std::__cxx11::moneypunct<wchar_t, false>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      109 ( 0.00%)      30 ( 0.00%)     31 ( 0.01%)   6 ( 0.16%)     0              0           6 ( 0.20%)     .              .           ???:std::__cxx11::moneypunct<wchar_t, true>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      109 ( 0.00%)      30 ( 0.00%)     31 ( 0.01%)   6 ( 0.16%)     0              0           6 ( 0.20%)     .              .           ???:std::moneypunct<wchar_t, true>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      109 ( 0.00%)      30 ( 0.00%)     31 ( 0.01%)   5 ( 0.13%)     0              0           5 ( 0.16%)     .              .           ???:std::moneypunct<wchar_t, false>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
      108 ( 0.00%)      36 ( 0.01%)     36 ( 0.02%)   6 ( 0.16%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/std_thread.h:std::thread::id::id() [/home/yairco/OS/FinalProject/OS_Project/graph]
      108 ( 0.00%)      22 ( 0.00%)     11 ( 0.00%)   7 ( 0.18%)     0              0           7 ( 0.23%)     .              .           ./elf/../elf/dl-tls.c:_dl_determine_tlsoffset [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
      108 ( 0.00%)      18 ( 0.00%)     24 ( 0.01%)   2 ( 0.05%)     0              1 ( 0.04%)  2 ( 0.07%)     0              1 ( 0.04%)  ./nptl/./nptl/pthread_getattr_default_np.c:pthread_getattr_default_np@@GLIBC_2.34 [/usr/lib/x86_64-linux-gnu/libc.so.6]
      105 ( 0.00%)      45 ( 0.01%)     30 ( 0.01%)   1 ( 0.03%)     .              .           .              .              .           /usr/include/c++/11/bits/std_function.h:std::_Any_data::_M_access() [/home/yairco/OS/FinalProject/OS_Project/graph]
      105 ( 0.00%)      45 ( 0.01%)     30 ( 0.01%)   .              .              .           .              .              .           /usr/include/c++/11/bits/move.h:std::remove_reference<bool (*&)(std::_Any_data const&, int&, int&&)>::type&& std::move<bool (*&)(std::_Any_data const&, int&, int&&)>(bool (*&)(std::_Any_data const&, int&, int&&)) [/home/yairco/OS/FinalProject/OS_Project/graph]
      105 ( 0.00%)      45 ( 0.01%)     30 ( 0.01%)   .              .              .           .              .              .           /usr/include/c++/11/bits/move.h:std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)) [/home/yairco/OS/FinalProject/OS_Project/graph]
      105 ( 0.00%)      45 ( 0.01%)     30 ( 0.01%)   .              .              .           .              .              .           /usr/include/c++/11/bits/move.h:std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      105 ( 0.00%)      45 ( 0.01%)     30 ( 0.01%)   .              .              .           .              .              .           /usr/include/c++/11/bits/move.h:std::shared_ptr<ActiveObjectDP>&& std::forward<std::shared_ptr<ActiveObjectDP> >(std::remove_reference<std::shared_ptr<ActiveObjectDP> >::type&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      105 ( 0.00%)      45 ( 0.01%)     25 ( 0.01%)   .              .              .           .              .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      105 ( 0.00%)      35 ( 0.01%)     40 ( 0.02%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_lock.h:std::unique_lock<std::mutex>::unique_lock(std::mutex&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      105 ( 0.00%)      30 ( 0.00%)     35 ( 0.01%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP>::shared_ptr<std::allocator<ActiveObjectDP>, int&>(std::_Sp_alloc_shared_tag<std::allocator<ActiveObjectDP> >, int&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      105 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   .              .              .           .              .              .           /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<ActiveObjectDP>::~new_allocator() [/home/yairco/OS/FinalProject/OS_Project/graph]
      105 ( 0.00%)      28 ( 0.00%)     28 ( 0.01%)   3 ( 0.08%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/atomic:std::atomic<bool>::atomic(bool) [/home/yairco/OS/FinalProject/OS_Project/graph]
      104 ( 0.00%)      28 ( 0.00%)     23 ( 0.01%)   8 ( 0.21%)     0              0           8 ( 0.26%)     .              .           ./libio/./libio/genops.c:_IO_flush_all_lockp [/usr/lib/x86_64-linux-gnu/libc.so.6]
      104 ( 0.00%)      24 ( 0.00%)     56 ( 0.02%)   4 ( 0.10%)     0              3 ( 0.11%)  0              0              3 ( 0.13%)  /usr/include/c++/11/bits/std_mutex.h:std::__mutex_base::__mutex_base() [/home/yairco/OS/FinalProject/OS_Project/graph]
      103 ( 0.00%)      51 ( 0.01%)      2 ( 0.00%)   2 ( 0.05%)     1 ( 0.01%)     0           2 ( 0.07%)     .              .           ???:0x00000000048f4bb0 [???]
      101 ( 0.00%)      50 ( 0.01%)      2 ( 0.00%)  22 ( 0.58%)     0              0           2 ( 0.07%)     .              .           ???:0x00000000048f59f0 [???]
      100 ( 0.00%)      40 ( 0.01%)     25 ( 0.01%)   .              .              .           .              .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>::operator=(std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2> const&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      100 ( 0.00%)      35 ( 0.01%)     30 ( 0.01%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<TaskQueue, std::default_delete<TaskQueue> >::~unique_ptr() [/home/yairco/OS/FinalProject/OS_Project/graph]
      100 ( 0.00%)      35 ( 0.01%)     30 ( 0.01%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::~unique_ptr() [/home/yairco/OS/FinalProject/OS_Project/graph]
      100 ( 0.00%)      35 ( 0.01%)     25 ( 0.01%)   .              .              .           .              .              .           /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2> const&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      100 ( 0.00%)      35 ( 0.01%)     20 ( 0.01%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::end() [/home/yairco/OS/FinalProject/OS_Project/graph]
      100 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)  11 ( 0.29%)     0              0           2 ( 0.07%)     .              .           TaskQueue.cpp:TaskQueue::isEmpty() const [/home/yairco/OS/FinalProject/OS_Project/graph]
      100 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   5 ( 0.13%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_queue.h:std::queue<TaskQueue::TaskData, std::deque<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> > >::empty() const [/home/yairco/OS/FinalProject/OS_Project/graph]
      100 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<TaskQueue, std::default_delete<TaskQueue> >::get() const [/home/yairco/OS/FinalProject/OS_Project/graph]
      100 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<TaskQueue, std::default_delete<TaskQueue> >::operator->() const [/home/yairco/OS/FinalProject/OS_Project/graph]
      100 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   2 ( 0.05%)     0              0           2 ( 0.07%)     .              .           /usr/include/c++/11/tuple:std::default_delete<TaskQueue>& std::__get_helper<1ul, std::default_delete<TaskQueue>>(std::_Tuple_impl<1ul, std::default_delete<TaskQueue>>&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      100 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   2 ( 0.05%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/tuple:std::tuple_element<1ul, std::tuple<TaskQueue*, std::default_delete<TaskQueue> > >::type& std::get<1ul, TaskQueue*, std::default_delete<TaskQueue> >(std::tuple<TaskQueue*, std::default_delete<TaskQueue> >&) [/home/yairco/OS/FinalProject/OS_Project/graph]
      100 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> >::_Deque_impl_data::_Deque_impl_data() [/home/yairco/OS/FinalProject/OS_Project/graph]
      100 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<TaskQueue, std::default_delete<TaskQueue> >::_M_deleter() [/home/yairco/OS/FinalProject/OS_Project/graph]
      100 ( 0.00%)      30 ( 0.00%)     30 ( 0.01%)   1 ( 0.03%)     0              0           1 ( 0.03%)     .              .           /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<ActiveObjectDP>::_M_ptr() [/home/yairco/OS/FinalProject/OS_Project/graph]

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/tuple
--------------------------------------------------------------------------------
Ir           Dr           Dw           I1mr        D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 72 ----------------------------------------
  .            .            .           .          .          .          .          .          .             template<size_t _Idx, typename _Head,
  .            .            .           .          .          .          .          .          .           	   bool = __empty_not_final<_Head>::value>
  .            .            .           .          .          .          .          .          .               struct _Head_base;
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .           #if __has_cpp_attribute(__no_unique_address__)
  .            .            .           .          .          .          .          .          .             template<size_t _Idx, typename _Head>
  .            .            .           .          .          .          .          .          .               struct _Head_base<_Idx, _Head, true>
  .            .            .           .          .          .          .          .          .               {
116 ( 0.00%)   0           58 ( 0.02%)  9 ( 0.24%) 0          0          5 ( 0.16%) .          .                 constexpr _Head_base()
 87 ( 0.00%)  58 ( 0.01%)   0           1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 : _M_head_impl() { }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 constexpr _Head_base(const _Head& __h)
  .            .            .           .          .          .          .          .          .                 : _M_head_impl(__h) { }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 constexpr _Head_base(const _Head_base&) = default;
  .            .            .           .          .          .          .          .          .                 constexpr _Head_base(_Head_base&&) = default;
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 template<typename _UHead>
-- line 89 ----------------------------------------
-- line 116 ----------------------------------------
  .            .            .           .          .          .          .          .          .           	{ }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 template<typename _Alloc, typename _UHead>
  .            .            .           .          .          .          .          .          .           	_GLIBCXX20_CONSTEXPR
  .            .            .           .          .          .          .          .          .           	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
  .            .            .           .          .          .          .          .          .           	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 static constexpr _Head&
161 ( 0.01%)  69 ( 0.01%)  46 ( 0.02%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 static constexpr const _Head&
  .            .            .           .          .          .          .          .          .                 _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 [[__no_unique_address__]] _Head _M_head_impl;
  .            .            .           .          .          .          .          .          .               };
  .            .            .           .          .          .          .          .          .           #else
  .            .            .           .          .          .          .          .          .             template<size_t _Idx, typename _Head>
-- line 132 ----------------------------------------
-- line 181 ----------------------------------------
  .            .            .           .          .          .          .          .          .                 static constexpr const _Head&
  .            .            .           .          .          .          .          .          .                 _M_head(const _Head_base& __b) noexcept { return __b; }
  .            .            .           .          .          .          .          .          .               };
  .            .            .           .          .          .          .          .          .           #endif
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             template<size_t _Idx, typename _Head>
  .            .            .           .          .          .          .          .          .               struct _Head_base<_Idx, _Head, false>
  .            .            .           .          .          .          .          .          .               {
116 ( 0.00%)   0           58 ( 0.02%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 constexpr _Head_base()
145 ( 0.01%)  87 ( 0.01%)  29 ( 0.01%)  2 ( 0.05%) 0          1 ( 0.04%) 2 ( 0.07%) 0          1 ( 0.04%)        : _M_head_impl() { }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 constexpr _Head_base(const _Head& __h)
  .            .            .           .          .          .          .          .          .                 : _M_head_impl(__h) { }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 constexpr _Head_base(const _Head_base&) = default;
  .            .            .           .          .          .          .          .          .                 constexpr _Head_base(_Head_base&&) = default;
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 template<typename _UHead>
 72 ( 0.00%)   0           36 ( 0.02%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                   constexpr _Head_base(_UHead&& __h)
120 ( 0.00%)  66 ( 0.01%)  30 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	: _M_head_impl(std::forward<_UHead>(__h)) { }
  7 ( 0.00%)   3 ( 0.00%)   2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:void (Server::*&&std::forward<void (Server::*)()>(std::remove_reference<void (Server::*)()>::type&))() (1x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
  .            .            .           .          .          .          .          .          .                 _Head_base(allocator_arg_t, __uses_alloc0)
  .            .            .           .          .          .          .          .          .                 : _M_head_impl() { }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 template<typename _Alloc>
  .            .            .           .          .          .          .          .          .           	_GLIBCXX20_CONSTEXPR
  .            .            .           .          .          .          .          .          .           	_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
-- line 208 ----------------------------------------
-- line 225 ----------------------------------------
  .            .            .           .          .          .          .          .          .           	{ }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 template<typename _Alloc, typename _UHead>
  .            .            .           .          .          .          .          .          .           	_GLIBCXX20_CONSTEXPR
  .            .            .           .          .          .          .          .          .           	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
  .            .            .           .          .          .          .          .          .           	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 static constexpr _Head&
644 ( 0.03%) 276 ( 0.05%) 184 ( 0.08%)  7 ( 0.18%) 0          0          3 ( 0.10%) .          .                 _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 static constexpr const _Head&
 70 ( 0.00%)  30 ( 0.00%)  20 ( 0.01%)  .          .          .          .          .          .                 _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 _Head _M_head_impl;
  .            .            .           .          .          .          .          .          .               };
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             /**
  .            .            .           .          .          .          .          .          .              * Contains the actual implementation of the @c tuple template, stored
  .            .            .           .          .          .          .          .          .              * as a recursive inheritance hierarchy from the first element (most
  .            .            .           .          .          .          .          .          .              * derived class) to the last (least derived class). The @c Idx
-- line 244 ----------------------------------------
-- line 260 ----------------------------------------
  .            .            .           .          .          .          .          .          .                 private _Head_base<_Idx, _Head>
  .            .            .           .          .          .          .          .          .               {
  .            .            .           .          .          .          .          .          .                 template<size_t, typename...> friend struct _Tuple_impl;
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
  .            .            .           .          .          .          .          .          .                 typedef _Head_base<_Idx, _Head> _Base;
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 static constexpr _Head&
866 ( 0.03%) 258 ( 0.04%) 258 ( 0.11%)  3 ( 0.08%) 0          0          3 ( 0.10%) .          .                 _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
210 ( 0.01%)  90 ( 0.01%)  60 ( 0.03%)  .          .          .          .          .          .           => /usr/include/c++/11/tuple:std::_Head_base<0ul, TaskQueue*, false>::_M_head(std::_Head_base<0ul, TaskQueue*, false>&) (30x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 static constexpr const _Head&
100 ( 0.00%)  30 ( 0.00%)  30 ( 0.01%)  .          .          .          .          .          .                 _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 70 ( 0.00%)  30 ( 0.00%)  20 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/tuple:std::_Head_base<0ul, TaskQueue*, false>::_M_head(std::_Head_base<0ul, TaskQueue*, false> const&) (10x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 static constexpr _Inherited&
  .            .            .           .          .          .          .          .          .                 _M_tail(_Tuple_impl& __t) noexcept { return __t; }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 static constexpr const _Inherited&
  .            .            .           .          .          .          .          .          .                 _M_tail(const _Tuple_impl& __t) noexcept { return __t; }
  .            .            .           .          .          .          .          .          .           
145 ( 0.01%)   0           58 ( 0.02%)  7 ( 0.18%) 0          0          7 ( 0.23%) .          .                 constexpr _Tuple_impl()
261 ( 0.01%) 116 ( 0.02%)  58 ( 0.02%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 : _Inherited(), _Base() { }
 18 ( 0.00%)   5 ( 0.00%)   5 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/tuple:std::_Tuple_impl<1ul, std::default_delete<Graph> >::_Tuple_impl() (1x)
  9 ( 0.00%)   3 ( 0.00%)   3 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/tuple:std::_Head_base<0ul, Graph*, false>::_Head_base() (1x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 explicit constexpr
  .            .            .           .          .          .          .          .          .                 _Tuple_impl(const _Head& __head, const _Tail&... __tail)
  .            .            .           .          .          .          .          .          .                 : _Inherited(__tail...), _Base(__head)
  .            .            .           .          .          .          .          .          .                 { }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 template<typename _UHead, typename... _UTail,
  .            .            .           .          .          .          .          .          .           	       typename = __enable_if_t<sizeof...(_Tail) == sizeof...(_UTail)>>
  .            .            .           .          .          .          .          .          .           	explicit constexpr
 48 ( 0.00%)   0           30 ( 0.01%)  5 ( 0.13%) 0          0          3 ( 0.10%) .          .           	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
  .            .            .           .          .          .          .          .          .           	: _Inherited(std::forward<_UTail>(__tail)...),
 90 ( 0.00%)  24 ( 0.00%)  24 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	  _Base(std::forward<_UHead>(__head))
 47 ( 0.00%)  16 ( 0.00%)  15 ( 0.01%)  3 ( 0.08%) 0          0          3 ( 0.10%) .          .           => /usr/include/c++/11/tuple:std::_Tuple_impl<1ul, Server*>::_Tuple_impl<Server*>(Server*&&) (1x)
 24 ( 0.00%)   9 ( 0.00%)   8 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/tuple:std::_Head_base<0ul, void (Server::*)(), false>::_Head_base<void (Server::*)()>(void (Server::*&&)()) (1x)
  7 ( 0.00%)   3 ( 0.00%)   2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:Server*&& std::forward<Server*>(std::remove_reference<Server*>::type&) (1x)
  7 ( 0.00%)   3 ( 0.00%)   2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:void (Server::*&&std::forward<void (Server::*)()>(std::remove_reference<void (Server::*)()>::type&))() (1x)
 24 ( 0.00%)  18 ( 0.00%)   .           .          .          .          .          .          .           	{ }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 constexpr _Tuple_impl(const _Tuple_impl&) = default;
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .            .            .           .          .          .          .          .          .                 // 2729. Missing SFINAE on std::pair::operator=
  .            .            .           .          .          .          .          .          .                 _Tuple_impl& operator=(const _Tuple_impl&) = delete;
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 _Tuple_impl(_Tuple_impl&&) = default;
-- line 301 ----------------------------------------
-- line 416 ----------------------------------------
  .            .            .           .          .          .          .          .          .               struct _Tuple_impl<_Idx, _Head>
  .            .            .           .          .          .          .          .          .               : private _Head_base<_Idx, _Head>
  .            .            .           .          .          .          .          .          .               {
  .            .            .           .          .          .          .          .          .                 template<size_t, typename...> friend struct _Tuple_impl;
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 typedef _Head_base<_Idx, _Head> _Base;
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 static constexpr _Head&
290 ( 0.01%)  87 ( 0.01%)  87 ( 0.04%)  7 ( 0.18%) 0          6 ( 0.21%) 7 ( 0.23%) 0          6 ( 0.27%)        _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 35 ( 0.00%)  15 ( 0.00%)  10 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/tuple:std::_Head_base<1ul, ActiveObjectDP*, false>::_M_head(std::_Head_base<1ul, ActiveObjectDP*, false>&) (5x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 static constexpr const _Head&
  .            .            .           .          .          .          .          .          .                 _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 constexpr
145 ( 0.01%)   0           58 ( 0.02%)  5 ( 0.13%) 0          1 ( 0.04%) 5 ( 0.16%) .          .                 _Tuple_impl()
174 ( 0.01%)  87 ( 0.01%)  29 ( 0.01%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 : _Base() { }
  7 ( 0.00%)   2 ( 0.00%)   2 ( 0.00%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/tuple:std::_Head_base<1ul, std::default_delete<PipeDP>, true>::_Head_base() (1x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 explicit constexpr
  .            .            .           .          .          .          .          .          .                 _Tuple_impl(const _Head& __head)
  .            .            .           .          .          .          .          .          .                 : _Base(__head)
  .            .            .           .          .          .          .          .          .                 { }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 template<typename _UHead>
  .            .            .           .          .          .          .          .          .           	explicit constexpr
 42 ( 0.00%)   0           24 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	_Tuple_impl(_UHead&& __head)
 42 ( 0.00%)  12 ( 0.00%)  12 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	: _Base(std::forward<_UHead>(__head))
110 ( 0.00%)  40 ( 0.01%)  35 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/tuple:std::_Head_base<1ul, ActiveObjectDP*, false>::_Head_base<ActiveObjectDP*>(ActiveObjectDP*&&) (5x)
 35 ( 0.00%)  15 ( 0.00%)  10 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:ActiveObjectDP*&& std::forward<ActiveObjectDP*>(std::remove_reference<ActiveObjectDP*>::type&) (5x)
 24 ( 0.00%)  18 ( 0.00%)   0           1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	{ }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 constexpr _Tuple_impl(const _Tuple_impl&) = default;
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .            .            .           .          .          .          .          .          .                 // 2729. Missing SFINAE on std::pair::operator=
  .            .            .           .          .          .          .          .          .                 _Tuple_impl& operator=(const _Tuple_impl&) = delete;
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .           #if _GLIBCXX_INLINE_VERSION
-- line 450 ----------------------------------------
-- line 1041 ----------------------------------------
  .            .            .           .          .          .          .          .          .                 template<typename _U1>
  .            .            .           .          .          .          .          .          .           	static constexpr bool __is_alloc_arg()
  .            .            .           .          .          .          .          .          .           	{ return is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value; }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .               public:
  .            .            .           .          .          .          .          .          .                 template<bool _Dummy = true,
  .            .            .           .          .          .          .          .          .           	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
  .            .            .           .          .          .          .          .          .           	constexpr
145 ( 0.01%)   0           58 ( 0.02%)  9 ( 0.24%) 0          0          5 ( 0.16%) .          .           	tuple()
  .            .            .           .          .          .          .          .          .           	noexcept(__nothrow_default_constructible())
174 ( 0.01%)  87 ( 0.01%)  29 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	: _Inherited() { }
 41 ( 0.00%)  12 ( 0.00%)  12 ( 0.01%)  4 ( 0.10%) 0          0          4 ( 0.13%) .          .           => /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, Graph*, std::default_delete<Graph> >::_Tuple_impl() (1x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 template<bool _Dummy = true,
  .            .            .           .          .          .          .          .          .           	       _ExplicitDefaultCtor<_Dummy, _T1, _T2> = false>
  .            .            .           .          .          .          .          .          .           	explicit constexpr
  .            .            .           .          .          .          .          .          .           	tuple()
  .            .            .           .          .          .          .          .          .           	noexcept(__nothrow_default_constructible())
  .            .            .           .          .          .          .          .          .           	: _Inherited() { }
  .            .            .           .          .          .          .          .          .           
-- line 1059 ----------------------------------------
-- line 1069 ----------------------------------------
  .            .            .           .          .          .          .          .          .           	explicit constexpr
  .            .            .           .          .          .          .          .          .           	tuple(const _T1& __a1, const _T2& __a2)
  .            .            .           .          .          .          .          .          .           	noexcept(__nothrow_constructible<const _T1&, const _T2&>())
  .            .            .           .          .          .          .          .          .           	: _Inherited(__a1, __a2) { }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 template<typename _U1, typename _U2,
  .            .            .           .          .          .          .          .          .           	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
  .            .            .           .          .          .          .          .          .           	constexpr
 54 ( 0.00%)   0           36 ( 0.02%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	tuple(_U1&& __a1, _U2&& __a2)
  .            .            .           .          .          .          .          .          .           	noexcept(__nothrow_constructible<_U1, _U2>())
108 ( 0.00%)  42 ( 0.01%)  18 ( 0.01%)  2 ( 0.05%) 0          0          1 ( 0.03%) .          .           	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
560 ( 0.02%) 190 ( 0.03%) 180 ( 0.08%)  6 ( 0.16%) 0          0          4 ( 0.13%) .          .           => /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, void (ActiveObjectDP::*)(), ActiveObjectDP*>::_Tuple_impl<void (ActiveObjectDP::*)(), ActiveObjectDP*, void>(void (ActiveObjectDP::*&&)(), ActiveObjectDP*&&) (5x)
 35 ( 0.00%)  15 ( 0.00%)  10 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:void (ActiveObjectDP::*&&std::forward<void (ActiveObjectDP::*)()>(std::remove_reference<void (ActiveObjectDP::*)()>::type&))() (5x)
 35 ( 0.00%)  15 ( 0.00%)  10 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:ActiveObjectDP*&& std::forward<ActiveObjectDP*>(std::remove_reference<ActiveObjectDP*>::type&) (5x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 template<typename _U1, typename _U2,
  .            .            .           .          .          .          .          .          .           	       _ExplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = false>
  .            .            .           .          .          .          .          .          .           	explicit constexpr
  .            .            .           .          .          .          .          .          .           	tuple(_U1&& __a1, _U2&& __a2)
  .            .            .           .          .          .          .          .          .           	noexcept(__nothrow_constructible<_U1, _U2>())
  .            .            .           .          .          .          .          .          .           	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
  .            .            .           .          .          .          .          .          .           
-- line 1087 ----------------------------------------
-- line 1369 ----------------------------------------
  .            .            .           .          .          .          .          .          .               struct tuple_element<__i, tuple<>>
  .            .            .           .          .          .          .          .          .               {
  .            .            .           .          .          .          .          .          .                 static_assert(__i < tuple_size<tuple<>>::value,
  .            .            .           .          .          .          .          .          .           	  "tuple index must be in range");
  .            .            .           .          .          .          .          .          .               };
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             template<size_t __i, typename _Head, typename... _Tail>
  .            .            .           .          .          .          .          .          .               constexpr _Head&
575 ( 0.02%)   0          230 ( 0.10%) 13 ( 0.34%) 0          0          8 ( 0.26%) .          .               __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
575 ( 0.02%) 345 ( 0.06%) 115 ( 0.05%)  3 ( 0.08%) 0          0          3 ( 0.10%) .          .               { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
510 ( 0.02%) 180 ( 0.03%) 150 ( 0.06%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, TaskQueue*, std::default_delete<TaskQueue> >::_M_head(std::_Tuple_impl<0ul, TaskQueue*, std::default_delete<TaskQueue> >&) (30x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             template<size_t __i, typename _Head, typename... _Tail>
  .            .            .           .          .          .          .          .          .               constexpr const _Head&
 50 ( 0.00%)   0           20 ( 0.01%)  .          .          .          .          .          .               __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 50 ( 0.00%)  30 ( 0.00%)  10 ( 0.00%)  0          0          5 ( 0.18%) 0          0          5 ( 0.22%)      { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
170 ( 0.01%)  60 ( 0.01%)  50 ( 0.02%)  .          .          .          .          .          .           => /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, TaskQueue*, std::default_delete<TaskQueue> >::_M_head(std::_Tuple_impl<0ul, TaskQueue*, std::default_delete<TaskQueue> > const&) (10x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             // Deleted overload to improve diagnostics for invalid indices
  .            .            .           .          .          .          .          .          .             template<size_t __i, typename... _Types>
  .            .            .           .          .          .          .          .          .               __enable_if_t<(__i >= sizeof...(_Types))>
  .            .            .           .          .          .          .          .          .               __get_helper(const tuple<_Types...>&) = delete;
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             /// Return a reference to the ith element of a tuple.
  .            .            .           .          .          .          .          .          .             template<size_t __i, typename... _Elements>
  .            .            .           .          .          .          .          .          .               constexpr __tuple_element_t<__i, tuple<_Elements...>>&
515 ( 0.02%)   0          206 ( 0.09%)  8 ( 0.21%) 0          0          2 ( 0.07%) .          .               get(tuple<_Elements...>& __t) noexcept
515 ( 0.02%) 309 ( 0.05%) 103 ( 0.04%)  4 ( 0.10%) 0          0          2 ( 0.07%) .          .               { return std::__get_helper<__i>(__t); }
324 ( 0.01%) 108 ( 0.02%)  96 ( 0.04%)  9 ( 0.24%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/tuple:std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) (12x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             /// Return a const reference to the ith element of a const tuple.
  .            .            .           .          .          .          .          .          .             template<size_t __i, typename... _Elements>
  .            .            .           .          .          .          .          .          .               constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
 50 ( 0.00%)   0           20 ( 0.01%)  .          .          .          .          .          .               get(const tuple<_Elements...>& __t) noexcept
 50 ( 0.00%)  30 ( 0.00%)  10 ( 0.00%)  .          .          .          .          .          .               { return std::__get_helper<__i>(__t); }
270 ( 0.01%)  90 ( 0.01%)  80 ( 0.03%)  0          0          5 ( 0.18%) 0          0          5 ( 0.22%)  => /usr/include/c++/11/tuple:TaskQueue* const& std::__get_helper<0ul, TaskQueue*, std::default_delete<TaskQueue> >(std::_Tuple_impl<0ul, TaskQueue*, std::default_delete<TaskQueue> > const&) (10x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             /// Return an rvalue reference to the ith element of a tuple rvalue.
  .            .            .           .          .          .          .          .          .             template<size_t __i, typename... _Elements>
  .            .            .           .          .          .          .          .          .               constexpr __tuple_element_t<__i, tuple<_Elements...>>&&
 60 ( 0.00%)   0           24 ( 0.01%)  3 ( 0.08%) 0          0          2 ( 0.07%) .          .               get(tuple<_Elements...>&& __t) noexcept
  .            .            .           .          .          .          .          .          .               {
  .            .            .           .          .          .          .          .          .                 typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
 60 ( 0.00%)  12 ( 0.00%)  24 ( 0.01%)  .          .          .          .          .          .                 return std::forward<__element_type>(std::__get_helper<__i>(__t));
135 ( 0.01%)  45 ( 0.01%)  40 ( 0.02%)  3 ( 0.08%) 0          5 ( 0.18%) 3 ( 0.10%) 0          5 ( 0.22%)  => /usr/include/c++/11/tuple:ActiveObjectDP*& std::__get_helper<1ul, ActiveObjectDP*>(std::_Tuple_impl<1ul, ActiveObjectDP*>&) (5x)
 35 ( 0.00%)  15 ( 0.00%)  10 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:ActiveObjectDP*&& std::forward<ActiveObjectDP*>(std::remove_reference<ActiveObjectDP*>::type&) (5x)
 24 ( 0.00%)  24 ( 0.00%)   .           .          .          .          .          .          .               }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             /// Return a const rvalue reference to the ith element of a const tuple rvalue.
  .            .            .           .          .          .          .          .          .             template<size_t __i, typename... _Elements>
  .            .            .           .          .          .          .          .          .               constexpr const __tuple_element_t<__i, tuple<_Elements...>>&&
  .            .            .           .          .          .          .          .          .               get(const tuple<_Elements...>&& __t) noexcept
  .            .            .           .          .          .          .          .          .               {
  .            .            .           .          .          .          .          .          .                 typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
  .            .            .           .          .          .          .          .          .                 return std::forward<const __element_type>(std::__get_helper<__i>(__t));
-- line 1417 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/unique_ptr.h
--------------------------------------------------------------------------------
Ir           Dr           Dw           I1mr        D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 67 ----------------------------------------
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /** @brief Converting constructor.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * Allows conversion from a deleter for objects of another type, `_Up`,
  .            .            .           .          .          .          .          .          .                  * only if `_Up*` is convertible to `_Tp*`.
  .            .            .           .          .          .          .          .          .                  */
  .            .            .           .          .          .          .          .          .                 template<typename _Up,
  .            .            .           .          .          .          .          .          .           	       typename = _Require<is_convertible<_Up*, _Tp*>>>
  8 ( 0.00%)   2 ( 0.00%)   3 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                   default_delete(const default_delete<_Up>&) noexcept { }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Calls `delete __ptr`
  .            .            .           .          .          .          .          .          .                 void
  7 ( 0.00%)   0            4 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 operator()(_Tp* __ptr) const
  .            .            .           .          .          .          .          .          .                 {
  .            .            .           .          .          .          .          .          .           	static_assert(!is_void<_Tp>::value,
  .            .            .           .          .          .          .          .          .           		      "can't delete pointer to incomplete type");
  .            .            .           .          .          .          .          .          .           	static_assert(sizeof(_Tp)>0,
  .            .            .           .          .          .          .          .          .           		      "can't delete pointer to incomplete type");
  8 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%)  .          .          .          .          .          .           	delete __ptr;
152 ( 0.01%)  41 ( 0.01%)  21 ( 0.01%)  2 ( 0.05%) 1 ( 0.01%) 0          2 ( 0.07%) .          .           => ???:0x000000000010c9c0 (1x)
 82 ( 0.00%)  26 ( 0.00%)  24 ( 0.01%)  5 ( 0.13%) 0          1 ( 0.04%) 3 ( 0.10%) .          .           => /home/yairco/OS/FinalProject/OS_Project/RequestService.hpp:RequestService::~RequestService() (1x)
  4 ( 0.00%)   3 ( 0.00%)   .           .          .          .          .          .          .                 }
  .            .            .           .          .          .          .          .          .               };
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .            .            .           .          .          .          .          .          .             // DR 740 - omit specialization for array objects with a compile time length
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             /// Specialization of default_delete for arrays, used by `unique_ptr<T[]>`
  .            .            .           .          .          .          .          .          .             template<typename _Tp>
  .            .            .           .          .          .          .          .          .               struct default_delete<_Tp[]>
-- line 94 ----------------------------------------
-- line 146 ----------------------------------------
  .            .            .           .          .          .          .          .          .           	       is_default_constructible<_Dp>>::value>;
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 using pointer = typename _Ptr<_Tp, _Dp>::type;
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 static_assert( !is_rvalue_reference<_Dp>::value,
  .            .            .           .          .          .          .          .          .           		     "unique_ptr's deleter type must be a function object type"
  .            .            .           .          .          .          .          .          .           		     " or an lvalue reference type" );
  .            .            .           .          .          .          .          .          .           
132 ( 0.01%)  36 ( 0.01%)  36 ( 0.02%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 __uniq_ptr_impl() = default;
 52 ( 0.00%)  15 ( 0.00%)  15 ( 0.01%)  6 ( 0.16%) 0          0          6 ( 0.20%) .          .           => /usr/include/c++/11/tuple:std::tuple<Graph*, std::default_delete<Graph> >::tuple<true, true>() (1x)
323 ( 0.01%) 102 ( 0.02%) 119 ( 0.05%)  7 ( 0.18%) 0          0          4 ( 0.13%) .          .                 __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 52 ( 0.00%)  15 ( 0.00%)  15 ( 0.01%)  7 ( 0.18%) 0          1 ( 0.04%) 7 ( 0.23%) 0          1 ( 0.04%)  => /usr/include/c++/11/tuple:std::tuple<PipeDP*, std::default_delete<PipeDP> >::tuple<true, true>() (1x)
 47 ( 0.00%)  15 ( 0.00%)  14 ( 0.01%)  3 ( 0.08%) 0          0          3 ( 0.10%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<PipeDP, std::default_delete<PipeDP> >::_M_ptr() (1x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 template<typename _Del>
  .            .            .           .          .          .          .          .          .                 __uniq_ptr_impl(pointer __p, _Del&& __d)
  .            .            .           .          .          .          .          .          .           	: _M_t(__p, std::forward<_Del>(__d)) { }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 __uniq_ptr_impl(__uniq_ptr_impl&& __u) noexcept
  .            .            .           .          .          .          .          .          .                 : _M_t(std::move(__u._M_t))
  .            .            .           .          .          .          .          .          .                 { __u._M_ptr() = nullptr; }
  .            .            .           .          .          .          .          .          .           
 60 ( 0.00%)   0           30 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
  .            .            .           .          .          .          .          .          .                 {
 80 ( 0.00%)  20 ( 0.00%)  20 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	reset(__u.release());
585 ( 0.02%) 190 ( 0.03%) 180 ( 0.08%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::reset(std::thread*) (5x)
555 ( 0.02%) 180 ( 0.03%) 170 ( 0.07%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::release() (5x)
 80 ( 0.00%)  20 ( 0.00%)  30 ( 0.01%)  .          .          .          .          .          .           	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
470 ( 0.02%) 150 ( 0.02%) 140 ( 0.06%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::_M_deleter() (10x)
 35 ( 0.00%)  15 ( 0.00%)  10 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::default_delete<std::thread>&& std::forward<std::default_delete<std::thread> >(std::remove_reference<std::default_delete<std::thread> >::type&) (5x)
 10 ( 0.00%)  10 ( 0.00%)   0           1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	return *this;
 20 ( 0.00%)  20 ( 0.00%)   .           .          .          .          .          .          .                 }
  .            .            .           .          .          .          .          .          .           
800 ( 0.03%) 240 ( 0.04%) 240 ( 0.10%) 15 ( 0.39%) 0          0          4 ( 0.13%) .          .                 pointer&   _M_ptr() { return std::get<0>(_M_t); }
444 ( 0.02%) 144 ( 0.02%) 132 ( 0.06%) 15 ( 0.39%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/tuple:std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&) (12x)
110 ( 0.00%)  40 ( 0.01%)  30 ( 0.01%)  5 ( 0.13%) 0          5 ( 0.18%) 1 ( 0.03%) 0          5 ( 0.22%)        pointer    _M_ptr() const { return std::get<0>(_M_t); }
370 ( 0.01%) 120 ( 0.02%) 110 ( 0.05%)  0          0          5 ( 0.18%) 0          0          5 ( 0.22%)  => /usr/include/c++/11/tuple:std::tuple_element<0ul, std::tuple<TaskQueue*, std::default_delete<TaskQueue> > >::type const& std::get<0ul, TaskQueue*, std::default_delete<TaskQueue> >(std::tuple<TaskQueue*, std::default_delete<TaskQueue> > const&) (10x)
230 ( 0.01%)  69 ( 0.01%)  69 ( 0.03%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _Dp&       _M_deleter() { return std::get<1>(_M_t); }
370 ( 0.01%) 120 ( 0.02%) 110 ( 0.05%)  6 ( 0.16%) 0          0          5 ( 0.16%) .          .           => /usr/include/c++/11/tuple:std::tuple_element<1ul, std::tuple<TaskQueue*, std::default_delete<TaskQueue> > >::type& std::get<1ul, TaskQueue*, std::default_delete<TaskQueue> >(std::tuple<TaskQueue*, std::default_delete<TaskQueue> >&) (10x)
  .            .            .           .          .          .          .          .          .                 const _Dp& _M_deleter() const { return std::get<1>(_M_t); }
  .            .            .           .          .          .          .          .          .           
 77 ( 0.00%)   0           44 ( 0.02%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 void reset(pointer __p) noexcept
  .            .            .           .          .          .          .          .          .                 {
 55 ( 0.00%)  22 ( 0.00%)  22 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	const pointer __old_p = _M_ptr();
 47 ( 0.00%)  15 ( 0.00%)  14 ( 0.01%)  6 ( 0.16%) 0          0          5 ( 0.16%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<RequestService, std::default_delete<RequestService> >::_M_ptr() (1x)
 55 ( 0.00%)  22 ( 0.00%)  22 ( 0.01%)  .          .          .          .          .          .           	_M_ptr() = __p;
 47 ( 0.00%)  15 ( 0.00%)  14 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<RequestService, std::default_delete<RequestService> >::_M_ptr() (1x)
 22 ( 0.00%)  11 ( 0.00%)   .           .          .          .          .          .          .           	if (__old_p)
  .            .            .           .          .          .          .          .          .           	  _M_deleter()(__old_p);
 44 ( 0.00%)  33 ( 0.01%)   .           .          .          .          .          .          .                 }
  .            .            .           .          .          .          .          .          .           
 55 ( 0.00%)   0           22 ( 0.01%)  4 ( 0.10%) 0          0          4 ( 0.13%) .          .                 pointer release() noexcept
  .            .            .           .          .          .          .          .          .                 {
 55 ( 0.00%)  22 ( 0.00%)  22 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	pointer __p = _M_ptr();
235 ( 0.01%)  75 ( 0.01%)  70 ( 0.03%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<TaskQueue, std::default_delete<TaskQueue> >::_M_ptr() (5x)
 44 ( 0.00%)  11 ( 0.00%)  22 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	_M_ptr() = nullptr;
235 ( 0.01%)  75 ( 0.01%)  70 ( 0.03%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<TaskQueue, std::default_delete<TaskQueue> >::_M_ptr() (5x)
 11 ( 0.00%)  11 ( 0.00%)   .           .          .          .          .          .          .           	return __p;
 22 ( 0.00%)  22 ( 0.00%)   .           .          .          .          .          .          .                 }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 void
  .            .            .           .          .          .          .          .          .                 swap(__uniq_ptr_impl& __rhs) noexcept
  .            .            .           .          .          .          .          .          .                 {
  .            .            .           .          .          .          .          .          .           	using std::swap;
  .            .            .           .          .          .          .          .          .           	swap(this->_M_ptr(), __rhs._M_ptr());
  .            .            .           .          .          .          .          .          .           	swap(this->_M_deleter(), __rhs._M_deleter());
  .            .            .           .          .          .          .          .          .                 }
-- line 198 ----------------------------------------
-- line 202 ----------------------------------------
  .            .            .           .          .          .          .          .          .               };
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             // Defines move construction + assignment as either defaulted or deleted.
  .            .            .           .          .          .          .          .          .             template <typename _Tp, typename _Dp,
  .            .            .           .          .          .          .          .          .           	    bool = is_move_constructible<_Dp>::value,
  .            .            .           .          .          .          .          .          .           	    bool = is_move_assignable<_Dp>::value>
  .            .            .           .          .          .          .          .          .               struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
  .            .            .           .          .          .          .          .          .               {
370 ( 0.01%) 104 ( 0.02%) 104 ( 0.04%)  5 ( 0.13%) 0          0          4 ( 0.13%) .          .                 using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
590 ( 0.02%) 180 ( 0.03%) 180 ( 0.08%)  3 ( 0.08%) 0          0          3 ( 0.10%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<TaskQueue, std::default_delete<TaskQueue> >::__uniq_ptr_impl(TaskQueue*) (5x)
  .            .            .           .          .          .          .          .          .                 __uniq_ptr_data(__uniq_ptr_data&&) = default;
140 ( 0.01%)  50 ( 0.01%)  40 ( 0.02%)  .          .          .          .          .          .                 __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
1,770 ( 0.07%) 570 ( 0.09%) 540 ( 0.23%)  6 ( 0.16%) 0          0          6 ( 0.20%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >::operator=(std::__uniq_ptr_impl<std::thread, std::default_delete<std::thread> >&&) (5x)
  .            .            .           .          .          .          .          .          .               };
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             template <typename _Tp, typename _Dp>
  .            .            .           .          .          .          .          .          .               struct __uniq_ptr_data<_Tp, _Dp, true, false> : __uniq_ptr_impl<_Tp, _Dp>
  .            .            .           .          .          .          .          .          .               {
  .            .            .           .          .          .          .          .          .                 using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
  .            .            .           .          .          .          .          .          .                 __uniq_ptr_data(__uniq_ptr_data&&) = default;
  .            .            .           .          .          .          .          .          .                 __uniq_ptr_data& operator=(__uniq_ptr_data&&) = delete;
-- line 220 ----------------------------------------
-- line 261 ----------------------------------------
  .            .            .           .          .          .          .          .          .           	  __not_<is_array<_Up>>
  .            .            .           .          .          .          .          .          .                   >;
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .               public:
  .            .            .           .          .          .          .          .          .                 // Constructors.
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Default constructor, creates a unique_ptr that owns nothing.
  .            .            .           .          .          .          .          .          .                 template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 60 ( 0.00%)   0           24 ( 0.01%)  4 ( 0.10%) 0          0          4 ( 0.13%) .          .           	constexpr unique_ptr() noexcept
 60 ( 0.00%)  24 ( 0.00%)  24 ( 0.01%)  2 ( 0.05%) 0          2 ( 0.07%) 2 ( 0.07%) 0          2 ( 0.09%)  	: _M_t()
370 ( 0.01%) 105 ( 0.02%) 105 ( 0.04%)  4 ( 0.10%) 0          0          4 ( 0.13%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_data<TaskQueue, std::default_delete<TaskQueue>, true, true>::__uniq_ptr_impl() (5x)
 36 ( 0.00%)  24 ( 0.00%)   .           .          .          .          .          .          .           	{ }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /** Takes ownership of a pointer.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * @param __p  A pointer to an object of @c element_type
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * The deleter will be value-initialized.
  .            .            .           .          .          .          .          .          .                  */
  .            .            .           .          .          .          .          .          .                 template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
  .            .            .           .          .          .          .          .          .           	explicit
102 ( 0.00%)   0           51 ( 0.02%)  6 ( 0.16%) 0          0          4 ( 0.13%) .          .           	unique_ptr(pointer __p) noexcept
 85 ( 0.00%)  34 ( 0.01%)  17 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	: _M_t(__p)
132 ( 0.01%)  40 ( 0.01%)  40 ( 0.02%) 12 ( 0.31%) 0          1 ( 0.04%) 12 ( 0.39%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_data<PipeDP, std::default_delete<PipeDP>, true, true>::__uniq_ptr_impl(PipeDP*) (1x)
 51 ( 0.00%)  34 ( 0.01%)   .           .          .          .          .          .          .                   { }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /** Takes ownership of a pointer.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * @param __p  A pointer to an object of @c element_type
  .            .            .           .          .          .          .          .          .                  * @param __d  A reference to a deleter.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * The deleter will be initialized with @p __d
  .            .            .           .          .          .          .          .          .                  */
-- line 291 ----------------------------------------
-- line 347 ----------------------------------------
  .            .            .           .          .          .          .          .          .                 /// Converting constructor from @c auto_ptr
  .            .            .           .          .          .          .          .          .                 template<typename _Up, typename = _Require<
  .            .            .           .          .          .          .          .          .           	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
  .            .            .           .          .          .          .          .          .           	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
  .            .            .           .          .          .          .          .          .           #pragma GCC diagnostic pop
  .            .            .           .          .          .          .          .          .           #endif
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Destructor, invokes the deleter if the stored pointer is not null.
114 ( 0.00%)   0           57 ( 0.02%)  2 ( 0.05%) 0          0          1 ( 0.03%) .          .                 ~unique_ptr() noexcept
  .            .            .           .          .          .          .          .          .                 {
  .            .            .           .          .          .          .          .          .           	static_assert(__is_invocable<deleter_type&, pointer>::value,
  .            .            .           .          .          .          .          .          .           		      "unique_ptr's deleter must be invocable with a pointer");
 76 ( 0.00%)  19 ( 0.00%)  38 ( 0.02%)  6 ( 0.16%) 0          0          3 ( 0.10%) .          .           	auto& __ptr = _M_t._M_ptr();
 47 ( 0.00%)  15 ( 0.00%)  14 ( 0.01%)  3 ( 0.08%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<Graph, std::default_delete<Graph> >::_M_ptr() (1x)
 76 ( 0.00%)  38 ( 0.01%)   .           .          .          .          .          .          .           	if (__ptr != nullptr)
 11 ( 0.00%)   3 ( 0.00%)   3 ( 0.00%)  1 ( 0.03%) .          .          .          .          .           	  get_deleter()(std::move(__ptr));
253 ( 0.01%)  71 ( 0.01%)  51 ( 0.02%)  8 ( 0.21%) 1 ( 0.01%) 1 ( 0.04%) 6 ( 0.20%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::default_delete<RequestService>::operator()(RequestService*) const (1x)
 57 ( 0.00%)  18 ( 0.00%)  17 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<RequestService, std::default_delete<RequestService> >::get_deleter() (1x)
  7 ( 0.00%)   3 ( 0.00%)   2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<RequestService*&>::type&& std::move<RequestService*&>(RequestService*&) (1x)
 38 ( 0.00%)  19 ( 0.00%)  19 ( 0.01%)  3 ( 0.08%) 0          0          1 ( 0.03%) .          .           	__ptr = pointer();
 76 ( 0.00%)  57 ( 0.01%)   .           .          .          .          .          .          .                 }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 // Assignment.
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /** @brief Move assignment operator.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * Invokes the deleter if this object owns a pointer.
  .            .            .           .          .          .          .          .          .                  */
140 ( 0.01%)  50 ( 0.01%)  40 ( 0.02%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 unique_ptr& operator=(unique_ptr&&) = default;
1,840 ( 0.07%) 595 ( 0.10%) 560 ( 0.24%)  6 ( 0.16%) 0          0          6 ( 0.20%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_data<std::thread, std::default_delete<std::thread>, true, true>::operator=(std::__uniq_ptr_data<std::thread, std::default_delete<std::thread>, true, true>&&) (5x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /** @brief Assignment from another type.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * @param __u  The object to transfer ownership from, which owns a
  .            .            .           .          .          .          .          .          .                  *             convertible pointer to a non-array object.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * Invokes the deleter if this object owns a pointer.
  .            .            .           .          .          .          .          .          .                  */
  .            .            .           .          .          .          .          .          .                 template<typename _Up, typename _Ep>
  .            .            .           .          .          .          .          .          .                   typename enable_if< __and_<
  .            .            .           .          .          .          .          .          .                     __safe_conversion_up<_Up, _Ep>,
  .            .            .           .          .          .          .          .          .                     is_assignable<deleter_type&, _Ep&&>
  .            .            .           .          .          .          .          .          .                     >::value,
  .            .            .           .          .          .          .          .          .                     unique_ptr&>::type
  9 ( 0.00%)   1 ( 0.00%)   4 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
  .            .            .           .          .          .          .          .          .           	{
  8 ( 0.00%)   2 ( 0.00%)   2 ( 0.00%)  .          .          .          .          .          .           	  reset(__u.release());
143 ( 0.01%)  46 ( 0.01%)  44 ( 0.02%)  8 ( 0.21%) 0          0          7 ( 0.23%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<RequestService, std::default_delete<RequestService> >::reset(RequestService*) (1x)
121 ( 0.00%)  39 ( 0.01%)  37 ( 0.02%)  3 ( 0.08%) 0          0          3 ( 0.10%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<PipeDP, std::default_delete<PipeDP> >::release() (1x)
 13 ( 0.00%)   2 ( 0.00%)   4 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 57 ( 0.00%)  18 ( 0.00%)  17 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<PipeDP, std::default_delete<PipeDP> >::get_deleter() (1x)
 57 ( 0.00%)  18 ( 0.00%)  17 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<RequestService, std::default_delete<RequestService> >::get_deleter() (1x)
  8 ( 0.00%)   2 ( 0.00%)   3 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::default_delete<RequestService>::default_delete<PipeDP, void>(std::default_delete<PipeDP> const&) (1x)
  7 ( 0.00%)   3 ( 0.00%)   2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::default_delete<PipeDP>&& std::forward<std::default_delete<PipeDP> >(std::remove_reference<std::default_delete<PipeDP> >::type&) (1x)
  1 ( 0.00%)   1 ( 0.00%)   .           .          .          .          .          .          .           	  return *this;
  5 ( 0.00%)   4 ( 0.00%)   0           1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	}
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Reset the %unique_ptr to empty, invoking the deleter if necessary.
  .            .            .           .          .          .          .          .          .                 unique_ptr&
  .            .            .           .          .          .          .          .          .                 operator=(nullptr_t) noexcept
  .            .            .           .          .          .          .          .          .                 {
  .            .            .           .          .          .          .          .          .           	reset();
  .            .            .           .          .          .          .          .          .           	return *this;
  .            .            .           .          .          .          .          .          .                 }
-- line 399 ----------------------------------------
-- line 405 ----------------------------------------
  .            .            .           .          .          .          .          .          .                 operator*() const
  .            .            .           .          .          .          .          .          .                 {
  .            .            .           .          .          .          .          .          .           	__glibcxx_assert(get() != pointer());
  .            .            .           .          .          .          .          .          .           	return *get();
  .            .            .           .          .          .          .          .          .                 }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Return the stored pointer.
  .            .            .           .          .          .          .          .          .                 pointer
 50 ( 0.00%)   0           20 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 operator->() const noexcept
  .            .            .           .          .          .          .          .          .                 {
  .            .            .           .          .          .          .          .          .           	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
 30 ( 0.00%)  10 ( 0.00%)  10 ( 0.00%)  .          .          .          .          .          .           	return get();
580 ( 0.02%) 190 ( 0.03%) 170 ( 0.07%)  7 ( 0.18%) 0          10 ( 0.35%) 3 ( 0.10%) 0          10 ( 0.45%)  => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<TaskQueue, std::default_delete<TaskQueue> >::get() const (10x)
 20 ( 0.00%)  20 ( 0.00%)   0           1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Return the stored pointer.
  .            .            .           .          .          .          .          .          .                 pointer
 50 ( 0.00%)   0           20 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 get() const noexcept
 50 ( 0.00%)  30 ( 0.00%)  10 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 { return _M_t._M_ptr(); }
480 ( 0.02%) 160 ( 0.03%) 140 ( 0.06%)  5 ( 0.13%) 0          10 ( 0.35%) 1 ( 0.03%) 0          10 ( 0.45%)  => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<TaskQueue, std::default_delete<TaskQueue> >::_M_ptr() const (10x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Return a reference to the stored deleter.
  .            .            .           .          .          .          .          .          .                 deleter_type&
 15 ( 0.00%)   0            6 ( 0.00%)  .          .          .          .          .          .                 get_deleter() noexcept
 15 ( 0.00%)   9 ( 0.00%)   3 ( 0.00%)  .          .          .          .          .          .                 { return _M_t._M_deleter(); }
 94 ( 0.00%)  30 ( 0.00%)  28 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<RequestService, std::default_delete<RequestService> >::_M_deleter() (2x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Return a reference to the stored deleter.
  .            .            .           .          .          .          .          .          .                 const deleter_type&
  .            .            .           .          .          .          .          .          .                 get_deleter() const noexcept
  .            .            .           .          .          .          .          .          .                 { return _M_t._M_deleter(); }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Return @c true if the stored pointer is not null.
  .            .            .           .          .          .          .          .          .                 explicit operator bool() const noexcept
  .            .            .           .          .          .          .          .          .                 { return get() == pointer() ? false : true; }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 // Modifiers.
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Release ownership of any stored pointer.
  .            .            .           .          .          .          .          .          .                 pointer
  5 ( 0.00%)   0            2 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 release() noexcept
  5 ( 0.00%)   3 ( 0.00%)   1 ( 0.00%)  .          .          .          .          .          .                 { return _M_t.release(); }
111 ( 0.00%)  36 ( 0.01%)  34 ( 0.01%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<PipeDP, std::default_delete<PipeDP> >::release() (1x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /** @brief Replace the stored pointer.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * @param __p  The new pointer to store.
  .            .            .           .          .          .          .          .          .                  *
  .            .            .           .          .          .          .          .          .                  * The deleter will be invoked if a pointer is already owned.
  .            .            .           .          .          .          .          .          .                  */
  .            .            .           .          .          .          .          .          .                 void
  7 ( 0.00%)   0            4 ( 0.00%)  .          .          .          .          .          .                 reset(pointer __p = pointer()) noexcept
  .            .            .           .          .          .          .          .          .                 {
  .            .            .           .          .          .          .          .          .           	static_assert(__is_invocable<deleter_type&, pointer>::value,
  .            .            .           .          .          .          .          .          .           		      "unique_ptr's deleter must be invocable with a pointer");
  8 ( 0.00%)   2 ( 0.00%)   2 ( 0.00%)  .          .          .          .          .          .           	_M_t.reset(std::move(__p));
117 ( 0.00%)  38 ( 0.01%)  36 ( 0.02%)  7 ( 0.18%) 0          0          6 ( 0.20%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::__uniq_ptr_impl<RequestService, std::default_delete<RequestService> >::reset(RequestService*) (1x)
  7 ( 0.00%)   3 ( 0.00%)   2 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<RequestService*&>::type&& std::move<RequestService*&>(RequestService*&) (1x)
  4 ( 0.00%)   3 ( 0.00%)   .           .          .          .          .          .          .                 }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .                 /// Exchange the pointer and deleter with another object.
  .            .            .           .          .          .          .          .          .                 void
  .            .            .           .          .          .          .          .          .                 swap(unique_ptr& __u) noexcept
  .            .            .           .          .          .          .          .          .                 {
  .            .            .           .          .          .          .          .          .           	static_assert(__is_swappable<_Dp>::value, "deleter must be swappable");
  .            .            .           .          .          .          .          .          .           	_M_t.swap(__u._M_t);
  .            .            .           .          .          .          .          .          .                 }
-- line 465 ----------------------------------------
-- line 953 ----------------------------------------
  .            .            .           .          .          .          .          .          .               struct _MakeUniq<_Tp[_Bound]>
  .            .            .           .          .          .          .          .          .               { struct __invalid_type { }; };
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             /// @endcond
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             /// std::make_unique for single objects
  .            .            .           .          .          .          .          .          .             template<typename _Tp, typename... _Args>
  .            .            .           .          .          .          .          .          .               inline typename _MakeUniq<_Tp>::__single_object
 81 ( 0.00%)   0           48 ( 0.02%)  3 ( 0.08%) 0          0          3 ( 0.10%) .          .               make_unique(_Args&&... __args)
270 ( 0.01%)  81 ( 0.01%) 104 ( 0.04%)  6 ( 0.16%) 0          3 ( 0.11%) 5 ( 0.16%) 0          3 ( 0.13%)      { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
5,198 ( 0.21%) 1,359 ( 0.22%) 1,156 ( 0.49%) 45 ( 1.18%) 5 ( 0.04%) 12 ( 0.42%) 41 ( 1.34%) 0          11 ( 0.49%)  => /home/yairco/OS/FinalProject/OS_Project/TaskQueue.hpp:TaskQueue::TaskQueue() (5x)
1,079 ( 0.04%) 207 ( 0.03%) 158 ( 0.07%)  5 ( 0.13%) 0          5 ( 0.18%) 0          0          5 ( 0.22%)  => ???:0x000000000010c9b0 (5x)
730 ( 0.03%) 220 ( 0.04%) 220 ( 0.09%)  5 ( 0.13%) 0          0          5 ( 0.16%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<TaskQueue, std::default_delete<TaskQueue> >::unique_ptr<std::default_delete<TaskQueue>, void>(TaskQueue*) (5x)
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             /// std::make_unique for arrays of unknown bound
  .            .            .           .          .          .          .          .          .             template<typename _Tp>
  .            .            .           .          .          .          .          .          .               inline typename _MakeUniq<_Tp>::__array
  .            .            .           .          .          .          .          .          .               make_unique(size_t __num)
  .            .            .           .          .          .          .          .          .               { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
  .            .            .           .          .          .          .          .          .           
  .            .            .           .          .          .          .          .          .             /// Disable std::make_unique for arrays of known bound
-- line 970 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/ext/aligned_buffer.h
--------------------------------------------------------------------------------
Ir          Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 94 ----------------------------------------
 .           .           .          .          .          .          .          .          .           	std::aligned_storage<sizeof(_Tp), __alignof__(_Tp)>::type _M_storage;
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 __aligned_buffer() = default;
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 // Can be used to avoid value-initialization
 .           .           .          .          .          .          .          .          .                 __aligned_buffer(std::nullptr_t) { }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 void*
52 ( 0.00%)  0          26 ( 0.01%) 4 ( 0.10%) 0          0          3 ( 0.10%) .          .                 _M_addr() noexcept
 .           .           .          .          .          .          .          .          .                 {
13 ( 0.00%) 13 ( 0.00%)  .          .          .          .          .          .          .                   return static_cast<void*>(&_M_storage);
26 ( 0.00%) 26 ( 0.00%)  .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 const void*
 .           .           .          .          .          .          .          .          .                 _M_addr() const noexcept
 .           .           .          .          .          .          .          .          .                 {
 .           .           .          .          .          .          .          .          .                   return static_cast<const void*>(&_M_storage);
 .           .           .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 _Tp*
65 ( 0.00%)  0          26 ( 0.01%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 _M_ptr() noexcept
65 ( 0.00%) 39 ( 0.01%) 13 ( 0.01%) .          .          .          .          .          .                 { return static_cast<_Tp*>(_M_addr()); }
21 ( 0.00%)  9 ( 0.00%)  6 ( 0.00%) 3 ( 0.08%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::thread>::_M_addr() (3x)
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 const _Tp*
 .           .           .          .          .          .          .          .          .                 _M_ptr() const noexcept
 .           .           .          .          .          .          .          .          .                 { return static_cast<const _Tp*>(_M_addr()); }
 .           .           .          .          .          .          .          .          .               };
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           } // namespace
-- line 123 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/atomic
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 68 ----------------------------------------
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             public:
  .           .           .          .          .          .          .          .          .               atomic() noexcept = default;
  .           .           .          .          .          .          .          .          .               ~atomic() noexcept = default;
  .           .           .          .          .          .          .          .          .               atomic(const atomic&) = delete;
  .           .           .          .          .          .          .          .          .               atomic& operator=(const atomic&) = delete;
  .           .           .          .          .          .          .          .          .               atomic& operator=(const atomic&) volatile = delete;
  .           .           .          .          .          .          .          .          .           
105 ( 0.00%) 28 ( 0.00%) 28 ( 0.01%) 3 ( 0.08%) 0          0          2 ( 0.07%) .          .               constexpr atomic(bool __i) noexcept : _M_base(__i) { }
 84 ( 0.00%) 28 ( 0.00%) 28 ( 0.01%) 0          0          1 ( 0.04%) 0          0          1 ( 0.04%)  => /usr/include/c++/11/bits/atomic_base.h:std::__atomic_base<bool>::__atomic_base(bool) (7x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               bool
  7 ( 0.00%)  0           3 ( 0.00%) .          .          .          .          .          .               operator=(bool __i) noexcept
  7 ( 0.00%)  4 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .               { return _M_base.operator=(__i); }
 35 ( 0.00%) 13 ( 0.00%) 13 ( 0.01%) 3 ( 0.08%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/atomic_base.h:std::__atomic_base<bool>::operator=(bool) (1x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               bool
  .           .           .          .          .          .          .          .          .               operator=(bool __i) volatile noexcept
  .           .           .          .          .          .          .          .          .               { return _M_base.operator=(__i); }
  .           .           .          .          .          .          .          .          .           
100 ( 0.00%)  0          40 ( 0.02%) 3 ( 0.08%) 0          5 ( 0.18%) 1 ( 0.03%) 0          5 ( 0.22%)      operator bool() const noexcept
100 ( 0.00%) 60 ( 0.01%) 40 ( 0.02%) .          .          .          .          .          .               { return _M_base.load(); }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               operator bool() const volatile noexcept
  .           .           .          .          .          .          .          .          .               { return _M_base.load(); }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               bool
  .           .           .          .          .          .          .          .          .               is_lock_free() const noexcept { return _M_base.is_lock_free(); }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               bool
-- line 95 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/new
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 167 ----------------------------------------
  .           .           .          .          .          .          .          .          .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
  .           .           .          .          .          .          .          .          .           void operator delete[](void*, std::size_t, std::align_val_t)
  .           .           .          .          .          .          .          .          .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
  .           .           .          .          .          .          .          .          .           #endif // __cpp_sized_deallocation
  .           .           .          .          .          .          .          .          .           #endif // __cpp_aligned_new
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           // Default placement versions of operator new.
  .           .           .          .          .          .          .          .          .           _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
216 ( 0.01%) 81 ( 0.01%) 81 ( 0.03%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           { return __p; }
  .           .           .          .          .          .          .          .          .           _GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
  .           .           .          .          .          .          .          .          .           { return __p; }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           // Default placement versions of operator delete.
  .           .           .          .          .          .          .          .          .           inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
  .           .           .          .          .          .          .          .          .           inline void operator delete[](void*, void*) _GLIBCXX_USE_NOEXCEPT { }
  .           .           .          .          .          .          .          .          .           //@}
  .           .           .          .          .          .          .          .          .           } // extern "C++"
-- line 183 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/allocator.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr        D1mr       D1mw       ILmr       DLmr DLmw 

-- line 148 ----------------------------------------
  .           .           .           .          .          .          .          .          .                 using is_always_equal
  .           .           .           .          .          .          .          .          .           	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
  .           .           .           .          .          .          .          .          .           	= true_type;
  .           .           .           .          .          .          .          .          .           #endif
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .           .           .           .          .          .          .          .          .                 // 3035. std::allocator's constructors should be constexpr
  .           .           .           .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
143 ( 0.01%) 39 ( 0.01%) 39 ( 0.02%) 10 ( 0.26%) 0          0          6 ( 0.20%) .          .                 allocator() _GLIBCXX_NOTHROW { }
  7 ( 0.00%)  2 ( 0.00%)  2 ( 0.00%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::shared_ptr<ActiveObjectDP> >::new_allocator() (1x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
108 ( 0.00%)  0          54 ( 0.02%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 allocator(const allocator& __a) _GLIBCXX_NOTHROW
144 ( 0.01%) 72 ( 0.01%) 18 ( 0.01%)  .          .          .          .          .          .                 : __allocator_base<_Tp>(__a) { }
 24 ( 0.00%)  6 ( 0.00%)  9 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::thread>::new_allocator(__gnu_cxx::new_allocator<std::thread> const&) (3x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           #if __cplusplus >= 201103L
  .           .           .           .          .          .          .          .          .                 // Avoid implicit deprecation.
  .           .           .           .          .          .          .          .          .                 allocator& operator=(const allocator&) = default;
  .           .           .           .          .          .          .          .          .           #endif
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Tp1>
  .           .           .           .          .          .          .          .          .           	_GLIBCXX20_CONSTEXPR
144 ( 0.01%) 36 ( 0.01%) 48 ( 0.02%)  4 ( 0.10%) 0          0          4 ( 0.13%) .          .           	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 35 ( 0.00%) 10 ( 0.00%) 10 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<ActiveObjectDP, std::allocator<ActiveObjectDP>, (__gnu_cxx::_Lock_policy)2> >::new_allocator() (5x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           #if __cpp_constexpr_dynamic_alloc
  .           .           .           .          .          .          .          .          .                 constexpr
  .           .           .           .          .          .          .          .          .           #endif
352 ( 0.01%) 96 ( 0.02%) 96 ( 0.04%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 ~allocator() _GLIBCXX_NOTHROW { }
  7 ( 0.00%)  2 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::pair<int, std::shared_ptr<std::thread> > >::~new_allocator() (1x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           #if __cplusplus > 201703L
  .           .           .           .          .          .          .          .          .                 [[nodiscard,__gnu__::__always_inline__]]
  .           .           .           .          .          .          .          .          .                 constexpr _Tp*
  .           .           .           .          .          .          .          .          .                 allocate(size_t __n)
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .           #ifdef __cpp_lib_is_constant_evaluated
  .           .           .           .          .          .          .          .          .           	if (std::is_constant_evaluated())
-- line 182 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: PipeDP.cpp
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 2 ----------------------------------------
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #define STAGE_CREATE_GRAPH 0
  .           .           .          .          .          .          .          .          .           #define STAGE_MODIFY_GRAPH 1
  .           .           .          .          .          .          .          .          .           #define STAGE_CALCULATE_MST 2
  .           .           .          .          .          .          .          .          .           #define STAGE_MST_OPERATIONS 3
  .           .           .          .          .          .          .          .          .           #define STAGE_CLIENT_EXIT 4
  .           .           .          .          .          .          .          .          .           #define STAGE_UNDEFINE -1 // Undefined stage for error handling
  .           .           .          .          .          .          .          .          .           
 25 ( 0.00%)  5 ( 0.00%)  8 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           PipeDP::PipeDP() : isStageActive(false) {
130 ( 0.01%) 36 ( 0.01%) 40 ( 0.02%) 11 ( 0.29%) 0          1 ( 0.04%) 11 ( 0.36%) 0          1 ( 0.04%)  => /home/yairco/OS/FinalProject/OS_Project/RequestService.hpp:RequestService::RequestService() (1x)
 67 ( 0.00%) 20 ( 0.00%) 20 ( 0.01%) 6 ( 0.16%) 0          1 ( 0.04%) 6 ( 0.20%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::vector() (1x)
 27 ( 0.00%)  8 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::atomic(bool) (1x)
 24 ( 0.00%)  6 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_mutex.h:std::mutex::mutex() (1x)
  3 ( 0.00%)  1 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .               setupPipe();
60,380 ( 2.39%) 16,931 ( 2.79%) 12,881 ( 5.51%) 811 (21.24%) 83 ( 0.64%) 165 ( 5.80%) 491 (16.09%) 37 ( 0.41%) 158 ( 7.03%)  => PipeDP.cpp:PipeDP::setupPipe() (1x)
  4 ( 0.00%)  3 ( 0.00%)  0          1 ( 0.03%) 1 ( 0.01%) 0          1 ( 0.03%) .          .           }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           PipeDP::~PipeDP() {
  .           .           .          .          .          .          .          .          .               std::cout<<"**** Closing Pattern Type ****"<<std::endl;
  .           .           .          .          .          .          .          .          .               std::cout<<"Deleting PipeDP"<<std::endl;
  .           .           .          .          .          .          .          .          .               this->isStageActive = false;
  .           .           .          .          .          .          .          .          .               stages.clear();
  .           .           .          .          .          .          .          .          .               std::cout<<"Pipe And Active Objects has Closed"<<std::endl;
  .           .           .          .          .          .          .          .          .           }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           // define the task handlers for each stage
 10 ( 0.00%)  1 ( 0.00%)  5 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           void PipeDP::setupPipe() {
  .           .           .          .          .          .          .          .          .               try {
  .           .           .          .          .          .          .          .          .                   // Pre-allocate vector capacity
  5 ( 0.00%)  1 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .                   stages.reserve(STAGE_CLIENT_EXIT + 1); 
574 ( 0.02%) 168 ( 0.03%) 131 ( 0.06%) 27 ( 0.71%) 0          1 ( 0.04%) 25 ( 0.82%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/vector.tcc:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::reserve(unsigned long) (1x)
  .           .           .          .          .          .          .          .          .                   
  .           .           .          .          .          .          .          .          .                   // Create stages with error checking
 35 ( 0.00%) 11 ( 0.00%)  6 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                   for(int i = STAGE_CREATE_GRAPH; i < STAGE_CLIENT_EXIT+ 1; ++i) {
120 ( 0.00%) 10 ( 0.00%) 25 ( 0.01%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .                       std::cout <<"***** "<< "Creating stage " << i <<" *****"<<std::endl;
4,670 ( 0.18%) 1,260 ( 0.21%) 660 ( 0.28%) 14 ( 0.37%) 3 ( 0.02%) 0          2 ( 0.07%) 2 ( 0.02%) .           => ???:0x000000000010c9a0 (15x)
4,131 ( 0.16%) 1,054 ( 0.17%) 521 ( 0.22%) 25 ( 0.65%) 19 ( 0.15%) 0          24 ( 0.79%) 12 ( 0.13%) .           => ???:0x000000000010cba0 (5x)
2,380 ( 0.09%) 781 ( 0.13%) 377 ( 0.16%) 10 ( 0.26%) .          .          .          .          .           => ???:0x000000000010c9d0 (5x)
 70 ( 0.00%)  5 ( 0.00%) 15 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                       stages.push_back(std::make_shared<ActiveObjectDP>(i)); // Create a shared pointer to an active object
32,066 ( 1.27%) 8,623 ( 1.42%) 7,756 ( 3.32%) 488 (12.78%) 56 ( 0.43%) 163 ( 5.73%) 284 ( 9.31%) 21 ( 0.23%) 156 ( 6.95%)  => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP> std::make_shared<ActiveObjectDP, int&>(int&) (5x)
1,560 ( 0.06%) 545 ( 0.09%) 450 ( 0.19%) 31 ( 0.81%) 0          1 ( 0.04%) 17 ( 0.56%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::push_back(std::shared_ptr<ActiveObjectDP>&&) (5x)
175 ( 0.01%) 50 ( 0.01%) 40 ( 0.02%) 8 ( 0.21%) 0          0          3 ( 0.10%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP>::~shared_ptr() (5x)
 95 ( 0.00%) 10 ( 0.00%) 20 ( 0.01%) .          .          .          .          .          .                       std::cout << "Stage " << i << " created successfully" << std::endl;
3,505 ( 0.14%) 910 ( 0.15%) 448 ( 0.19%) 29 ( 0.76%) 3 ( 0.02%) 0          0          1 ( 0.01%) .           => ???:0x000000000010c9a0 (10x)
1,993 ( 0.08%) 520 ( 0.09%) 305 ( 0.13%) 18 ( 0.47%) .          .          .          .          .           => ???:0x000000000010cba0 (5x)
2,441 ( 0.10%) 802 ( 0.13%) 392 ( 0.17%) 31 ( 0.81%) 1 ( 0.01%) 0          7 ( 0.23%) 1 ( 0.01%) .           => ???:0x000000000010c9d0 (5x)
  .           .           .          .          .          .          .          .          .                   }
  .           .           .          .          .          .          .          .          .                   
  9 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                   std::cout<<"*******Here*******"<<std::endl;
373 ( 0.01%) 96 ( 0.02%) 44 ( 0.02%) .          .          .          .          .          .           => ???:0x000000000010c9a0 (1x)
486 ( 0.02%) 160 ( 0.03%) 78 ( 0.03%) .          .          .          .          .          .           => ???:0x000000000010c9d0 (1x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                   // Set up the pipeline connections
 25 ( 0.00%)  2 ( 0.00%)  6 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .                   stages[STAGE_CREATE_GRAPH]->setNextStage(stages[STAGE_MODIFY_GRAPH]);
118 ( 0.00%) 46 ( 0.01%) 29 ( 0.01%) 5 ( 0.13%) 0          0          5 ( 0.16%) .          .           => /home/yairco/OS/FinalProject/OS_Project/ActiveObjectDP.cpp:ActiveObjectDP::setNextStage(std::shared_ptr<ActiveObjectDP>) (1x)
 69 ( 0.00%) 21 ( 0.00%) 16 ( 0.01%) 3 ( 0.08%) 0          0          3 ( 0.10%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP>::~shared_ptr() (1x)
 80 ( 0.00%) 29 ( 0.00%) 21 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP>::shared_ptr(std::shared_ptr<ActiveObjectDP> const&) (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 24 ( 0.00%) 10 ( 0.00%)  6 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::operator[](unsigned long) (2x)
 25 ( 0.00%)  2 ( 0.00%)  6 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                   stages[STAGE_MODIFY_GRAPH]->setNextStage(stages[STAGE_CALCULATE_MST]);
118 ( 0.00%) 46 ( 0.01%) 29 ( 0.01%) .          .          .          .          .          .           => /home/yairco/OS/FinalProject/OS_Project/ActiveObjectDP.cpp:ActiveObjectDP::setNextStage(std::shared_ptr<ActiveObjectDP>) (1x)
 69 ( 0.00%) 21 ( 0.00%) 16 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP>::~shared_ptr() (1x)
 80 ( 0.00%) 29 ( 0.00%) 21 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP>::shared_ptr(std::shared_ptr<ActiveObjectDP> const&) (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 24 ( 0.00%) 10 ( 0.00%)  6 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::operator[](unsigned long) (2x)
 25 ( 0.00%)  2 ( 0.00%)  6 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .                   stages[STAGE_CALCULATE_MST]->setNextStage(stages[STAGE_MST_OPERATIONS]);
118 ( 0.00%) 46 ( 0.01%) 29 ( 0.01%) .          .          .          .          .          .           => /home/yairco/OS/FinalProject/OS_Project/ActiveObjectDP.cpp:ActiveObjectDP::setNextStage(std::shared_ptr<ActiveObjectDP>) (1x)
 69 ( 0.00%) 21 ( 0.00%) 16 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP>::~shared_ptr() (1x)
 80 ( 0.00%) 29 ( 0.00%) 21 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP>::shared_ptr(std::shared_ptr<ActiveObjectDP> const&) (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 24 ( 0.00%) 10 ( 0.00%)  6 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::operator[](unsigned long) (2x)
 25 ( 0.00%)  2 ( 0.00%)  6 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                   stages[STAGE_MST_OPERATIONS]->setNextStage(stages[STAGE_CLIENT_EXIT]);
118 ( 0.00%) 46 ( 0.01%) 29 ( 0.01%) .          .          .          .          .          .           => /home/yairco/OS/FinalProject/OS_Project/ActiveObjectDP.cpp:ActiveObjectDP::setNextStage(std::shared_ptr<ActiveObjectDP>) (1x)
 69 ( 0.00%) 21 ( 0.00%) 16 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP>::~shared_ptr() (1x)
 80 ( 0.00%) 29 ( 0.00%) 21 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP>::shared_ptr(std::shared_ptr<ActiveObjectDP> const&) (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 24 ( 0.00%) 10 ( 0.00%)  6 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::operator[](unsigned long) (2x)
 25 ( 0.00%)  2 ( 0.00%)  6 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .                   stages[STAGE_CLIENT_EXIT]->setNextStage(stages[STAGE_CLIENT_EXIT]);
120 ( 0.00%) 47 ( 0.01%) 30 ( 0.01%) .          .          .          .          .          .           => /home/yairco/OS/FinalProject/OS_Project/ActiveObjectDP.cpp:ActiveObjectDP::setNextStage(std::shared_ptr<ActiveObjectDP>) (1x)
 69 ( 0.00%) 21 ( 0.00%) 16 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP>::~shared_ptr() (1x)
 80 ( 0.00%) 29 ( 0.00%) 21 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP>::shared_ptr(std::shared_ptr<ActiveObjectDP> const&) (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 24 ( 0.00%) 10 ( 0.00%)  6 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::operator[](unsigned long) (2x)
  .           .           .          .          .          .          .          .          .           
 10 ( 0.00%)  1 ( 0.00%)  3 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                   stages[STAGE_CREATE_GRAPH]->setPrevStageStatus(true); // Set the first stage to active (because it's the first stage)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::operator[](unsigned long) (1x)
 46 ( 0.00%) 15 ( 0.00%) 10 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /home/yairco/OS/FinalProject/OS_Project/ActiveObjectDP.cpp:ActiveObjectDP::setPrevStageStatus(bool) (1x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                   // Define task handlers for each stage
 22 ( 0.00%)  2 ( 0.00%)  6 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                   stages[STAGE_CREATE_GRAPH]->setTaskHandler([this](int &client_FD, int choice) -> bool {
485 ( 0.02%) 169 ( 0.03%) 143 ( 0.06%) 25 ( 0.65%) 0          0          25 ( 0.82%) .          .           => /home/yairco/OS/FinalProject/OS_Project/ActiveObjectDP.cpp:ActiveObjectDP::setTaskHandler(std::function<bool (int&, int)>) (1x)
 99 ( 0.00%) 32 ( 0.01%) 26 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::~function() (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::operator[](unsigned long) (1x)
125 ( 0.00%) 41 ( 0.01%) 44 ( 0.02%) 9 ( 0.24%) 0          0          8 ( 0.26%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::function<PipeDP::setupPipe()::{lambda(int&, int)#1}, void>(PipeDP::setupPipe()::{lambda(int&, int)#1}&&) (1x)
  .           .           .          .          .          .          .          .          .                       std::cout<<"Set Task Handler for stage 0"<<std::endl;
  .           .           .          .          .          .          .          .          .                       return createGraph(client_FD);
  .           .           .          .          .          .          .          .          .                       
  .           .           .          .          .          .          .          .          .                       
  .           .           .          .          .          .          .          .          .                   });
  .           .           .          .          .          .          .          .          .           
 22 ( 0.00%)  2 ( 0.00%)  6 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                   stages[STAGE_MODIFY_GRAPH]->setTaskHandler([this](int &client_FD, int choice) -> bool {
485 ( 0.02%) 169 ( 0.03%) 143 ( 0.06%) 10 ( 0.26%) 0          0          10 ( 0.33%) .          .           => /home/yairco/OS/FinalProject/OS_Project/ActiveObjectDP.cpp:ActiveObjectDP::setTaskHandler(std::function<bool (int&, int)>) (1x)
 99 ( 0.00%) 32 ( 0.01%) 26 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::~function() (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::operator[](unsigned long) (1x)
125 ( 0.00%) 41 ( 0.01%) 44 ( 0.02%) 5 ( 0.13%) 0          0          5 ( 0.16%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::function<PipeDP::setupPipe()::{lambda(int&, int)#2}, void>(PipeDP::setupPipe()::{lambda(int&, int)#2}&&) (1x)
  .           .           .          .          .          .          .          .          .                       bool addOrRemoveEdge = (choice == 2); // 2 for add edge, 3 for remove edge
  .           .           .          .          .          .          .          .          .                       std::cout<<"Set Task Handler for stage 1"<<std::endl;
  .           .           .          .          .          .          .          .          .                       return modifyGraph(client_FD, addOrRemoveEdge);
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                   });
  .           .           .          .          .          .          .          .          .           
 22 ( 0.00%)  2 ( 0.00%)  6 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .                   stages[STAGE_CALCULATE_MST]->setTaskHandler([this](int &client_FD, int choice) -> bool {
485 ( 0.02%) 169 ( 0.03%) 143 ( 0.06%) 11 ( 0.29%) 0          0          11 ( 0.36%) .          .           => /home/yairco/OS/FinalProject/OS_Project/ActiveObjectDP.cpp:ActiveObjectDP::setTaskHandler(std::function<bool (int&, int)>) (1x)
 99 ( 0.00%) 32 ( 0.01%) 26 ( 0.01%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::~function() (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::operator[](unsigned long) (1x)
125 ( 0.00%) 41 ( 0.01%) 44 ( 0.02%) 4 ( 0.10%) 0          0          4 ( 0.13%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::function<PipeDP::setupPipe()::{lambda(int&, int)#3}, void>(PipeDP::setupPipe()::{lambda(int&, int)#3}&&) (1x)
  .           .           .          .          .          .          .          .          .                       std::cout<<"Set Task Handler for stage 2"<<std::endl;
  .           .           .          .          .          .          .          .          .                       return calculateMST(client_FD);
  .           .           .          .          .          .          .          .          .                       
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                   });
  .           .           .          .          .          .          .          .          .           
 22 ( 0.00%)  2 ( 0.00%)  6 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                   stages[STAGE_MST_OPERATIONS]->setTaskHandler([this](int &client_FD, int choice) -> bool {
485 ( 0.02%) 169 ( 0.03%) 143 ( 0.06%) 9 ( 0.24%) 0          0          9 ( 0.29%) .          .           => /home/yairco/OS/FinalProject/OS_Project/ActiveObjectDP.cpp:ActiveObjectDP::setTaskHandler(std::function<bool (int&, int)>) (1x)
 99 ( 0.00%) 32 ( 0.01%) 26 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::~function() (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::operator[](unsigned long) (1x)
125 ( 0.00%) 41 ( 0.01%) 44 ( 0.02%) 4 ( 0.10%) 0          0          4 ( 0.13%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::function<PipeDP::setupPipe()::{lambda(int&, int)#4}, void>(PipeDP::setupPipe()::{lambda(int&, int)#4}&&) (1x)
  .           .           .          .          .          .          .          .          .                       std::cout<<"Set Task Handler for stage 3"<<std::endl;
  .           .           .          .          .          .          .          .          .                       getMSTData(client_FD, choice);
  .           .           .          .          .          .          .          .          .                       return true; 
  .           .           .          .          .          .          .          .          .                   });
  .           .           .          .          .          .          .          .          .           
 22 ( 0.00%)  2 ( 0.00%)  6 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                   stages[STAGE_CLIENT_EXIT]->setTaskHandler([this](int &client_FD, int choice) -> bool {
485 ( 0.02%) 169 ( 0.03%) 143 ( 0.06%) 8 ( 0.21%) 0          0          8 ( 0.26%) .          .           => /home/yairco/OS/FinalProject/OS_Project/ActiveObjectDP.cpp:ActiveObjectDP::setTaskHandler(std::function<bool (int&, int)>) (1x)
 99 ( 0.00%) 32 ( 0.01%) 26 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::~function() (1x)
 28 ( 0.00%) 10 ( 0.00%)  8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
 12 ( 0.00%)  5 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::operator[](unsigned long) (1x)
125 ( 0.00%) 41 ( 0.01%) 44 ( 0.02%) 4 ( 0.10%) 0          0          4 ( 0.13%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::function<PipeDP::setupPipe()::{lambda(int&, int)#5}, void>(PipeDP::setupPipe()::{lambda(int&, int)#5}&&) (1x)
  .           .           .          .          .          .          .          .          .                       std::cout<<"Set Task Handler for stage 4"<<std::endl;
  .           .           .          .          .          .          .          .          .                       return stopClient(client_FD);
  .           .           .          .          .          .          .          .          .                       
  .           .           .          .          .          .          .          .          .                   });
  .           .           .          .          .          .          .          .          .                   
  .           .           .          .          .          .          .          .          .               } catch (const std::exception& e) {
  .           .           .          .          .          .          .          .          .                   std::cerr << "Stage creation failed: " << e.what() << std::endl;
  .           .           .          .          .          .          .          .          .                   stages.clear();
  .           .           .          .          .          .          .          .          .                   throw;
  .           .           .          .          .          .          .          .          .               }
  9 ( 0.00%)  6 ( 0.00%)  0          2 ( 0.05%) 1 ( 0.01%) 0          2 ( 0.07%) .          .           }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           void PipeDP::handleRequest(int& client_FD) {
  .           .           .          .          .          .          .          .          .               while (client_FD > 0) {
  .           .           .          .          .          .          .          .          .                   int choice = startConversation(client_FD);
  .           .           .          .          .          .          .          .          .                   
  .           .           .          .          .          .          .          .          .                   int numStage = (choice == 1) ? STAGE_CREATE_GRAPH : 
  .           .           .          .          .          .          .          .          .                       (choice == 2 || choice == 3) ? STAGE_MODIFY_GRAPH :
  .           .           .          .          .          .          .          .          .                       (choice == 4) ? STAGE_CALCULATE_MST :
-- line 93 ----------------------------------------
-- line 129 ----------------------------------------
  .           .           .          .          .          .          .          .          .                   
  .           .           .          .          .          .          .          .          .                   std::cout<<"************************************"<<std::endl;
  .           .           .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           void PipeDP::setStageActiveStatus(bool status) {
  .           .           .          .          .          .          .          .          .                std::cout<<"Pipe Updated Working Status From: "<<this->isStageActive<<" To: "<<status<<std::endl; 
  .           .           .          .          .          .          .          .          .               this->isStageActive = status;
 21 ( 0.00%)  6 ( 0.00%)  5 ( 0.00%) 3 ( 0.08%) 0          0          3 ( 0.10%) .          .           }
127 ( 0.01%) 31 ( 0.01%) 27 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => PipeDP.cpp:__static_initialization_and_destruction_0(int, int) (1x)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/ext/atomicity.h
--------------------------------------------------------------------------------
Ir          Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 44 ----------------------------------------
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             __attribute__((__always_inline__))
 .           .           .          .          .          .          .          .          .             inline bool
 .           .           .          .          .          .          .          .          .             __is_single_threaded() _GLIBCXX_NOTHROW
 .           .           .          .          .          .          .          .          .             {
 .           .           .          .          .          .          .          .          .           #ifndef __GTHREADS
 .           .           .          .          .          .          .          .          .               return true;
 .           .           .          .          .          .          .          .          .           #elif __has_include(<sys/single_threaded.h>)
51 ( 0.00%) 17 ( 0.00%)  0          0          1 ( 0.01%) .          .          .          .               return ::__libc_single_threaded;
 .           .           .          .          .          .          .          .          .           #else
 .           .           .          .          .          .          .          .          .               return !__gthread_active_p();
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .             }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             // Functions for portable atomic access.
 .           .           .          .          .          .          .          .          .             // To abstract locking primitives across all thread policies, use:
 .           .           .          .          .          .          .          .          .             // __exchange_and_add_dispatch
 .           .           .          .          .          .          .          .          .             // __atomic_add_dispatch
 .           .           .          .          .          .          .          .          .           #ifdef _GLIBCXX_ATOMIC_BUILTINS
 .           .           .          .          .          .          .          .          .             inline _Atomic_word
 .           .           .          .          .          .          .          .          .             __attribute__((__always_inline__))
 .           .           .          .          .          .          .          .          .             __exchange_and_add(volatile _Atomic_word* __mem, int __val)
28 ( 0.00%) 21 ( 0.00%)  7 ( 0.00%) .          .          .          .          .          .             { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             inline void
 .           .           .          .          .          .          .          .          .             __attribute__((__always_inline__))
 .           .           .          .          .          .          .          .          .             __atomic_add(volatile _Atomic_word* __mem, int __val)
40 ( 0.00%) 30 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .             { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
 .           .           .          .          .          .          .          .          .           #else
 .           .           .          .          .          .          .          .          .             _Atomic_word
 .           .           .          .          .          .          .          .          .             __exchange_and_add(volatile _Atomic_word*, int) _GLIBCXX_NOTHROW;
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             void
 .           .           .          .          .          .          .          .          .             __atomic_add(volatile _Atomic_word*, int) _GLIBCXX_NOTHROW;
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           
-- line 79 ----------------------------------------
-- line 84 ----------------------------------------
 .           .           .          .          .          .          .          .          .               _Atomic_word __result = *__mem;
 .           .           .          .          .          .          .          .          .               *__mem += __val;
 .           .           .          .          .          .          .          .          .               return __result;
 .           .           .          .          .          .          .          .          .             }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             inline void
 .           .           .          .          .          .          .          .          .             __attribute__((__always_inline__))
 .           .           .          .          .          .          .          .          .             __atomic_add_single(_Atomic_word* __mem, int __val)
40 ( 0.00%) 20 ( 0.00%) 20 ( 0.01%) .          .          .          .          .          .             { *__mem += __val; }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             inline _Atomic_word
 .           .           .          .          .          .          .          .          .             __attribute__ ((__always_inline__))
 .           .           .          .          .          .          .          .          .             __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
 .           .           .          .          .          .          .          .          .             {
14 ( 0.00%)  .           .          .          .          .          .          .          .               if (__is_single_threaded())
28 ( 0.00%) 14 ( 0.00%) 14 ( 0.01%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 return __exchange_and_add_single(__mem, __val);
 .           .           .          .          .          .          .          .          .               else
 7 ( 0.00%)  .           .          .          .          .          .          .          .                 return __exchange_and_add(__mem, __val);
 .           .           .          .          .          .          .          .          .             }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             inline void
 .           .           .          .          .          .          .          .          .             __attribute__ ((__always_inline__))
 .           .           .          .          .          .          .          .          .             __atomic_add_dispatch(_Atomic_word* __mem, int __val)
 .           .           .          .          .          .          .          .          .             {
20 ( 0.00%)  .           .          .          .          .          .          .          .               if (__is_single_threaded())
 .           .           .          .          .          .          .          .          .                 __atomic_add_single(__mem, __val);
 .           .           .          .          .          .          .          .          .               else
 .           .           .          .          .          .          .          .          .                 __atomic_add(__mem, __val);
10 ( 0.00%)  .           .          .          .          .          .          .          .             }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           _GLIBCXX_END_NAMESPACE_VERSION
 .           .           .          .          .          .          .          .          .           } // namespace
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           // Even if the CPU doesn't need a memory barrier, we need to ensure
 .           .           .          .          .          .          .          .          .           // that the compiler doesn't reorder memory accesses across the
 .           .           .          .          .          .          .          .          .           // barriers.
 .           .           .          .          .          .          .          .          .           #ifndef _GLIBCXX_READ_MEM_BARRIER
-- line 120 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/shared_ptr_base.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr        D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 118 ----------------------------------------
  .           .           .           .          .          .          .          .          .                 enum { _S_need_barriers = 1 };
  .           .           .           .          .          .          .          .          .               };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             template<_Lock_policy _Lp = __default_lock_policy>
  .           .           .           .          .          .          .          .          .               class _Sp_counted_base
  .           .           .           .          .          .          .          .          .               : public _Mutex_base<_Lp>
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .               public:
 24 ( 0.00%)  0          12 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _Sp_counted_base() noexcept
 60 ( 0.00%) 30 ( 0.00%) 18 ( 0.01%)  1 ( 0.03%) 0          1 ( 0.04%) 1 ( 0.03%) 0          1 ( 0.04%)        : _M_use_count(1), _M_weak_count(1) { }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 virtual
  4 ( 0.00%)  0           2 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 ~_Sp_counted_base() noexcept
  6 ( 0.00%)  3 ( 0.00%)  1 ( 0.00%)  .          .          .          .          .          .                 { }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // Called when _M_use_count drops to zero, to release the resources
  .           .           .           .          .          .          .          .          .                 // managed by *this.
  .           .           .           .          .          .          .          .          .                 virtual void
  .           .           .           .          .          .          .          .          .                 _M_dispose() noexcept = 0;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // Called when _M_weak_count drops to zero.
  .           .           .           .          .          .          .          .          .                 virtual void
  .           .           .           .          .          .          .          .          .                 _M_destroy() noexcept
  .           .           .           .          .          .          .          .          .                 { delete this; }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 virtual void*
  .           .           .           .          .          .          .          .          .                 _M_get_deleter(const std::type_info&) noexcept = 0;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 void
 40 ( 0.00%)  0          20 ( 0.01%)  .          .          .          .          .          .                 _M_add_ref_copy()
 70 ( 0.00%) 30 ( 0.00%) 20 ( 0.01%)  .          .          .          .          .          .                 { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 void
  .           .           .           .          .          .          .          .          .                 _M_add_ref_lock()
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .           	if (!_M_add_ref_lock_nothrow())
  .           .           .           .          .          .          .          .          .           	  __throw_bad_weak_ptr();
  .           .           .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 bool
  .           .           .           .          .          .          .          .          .                 _M_add_ref_lock_nothrow() noexcept;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 void
 30 ( 0.00%)  0          12 ( 0.01%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 _M_release() noexcept
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .                   // Be race-detector-friendly.  For more info see bits/c++config.
  .           .           .           .          .          .          .          .          .                   _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_use_count);
 48 ( 0.00%)  6 ( 0.00%) 12 ( 0.01%)  .          .          .          .          .          .           	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
  .           .           .           .          .          .          .          .          .           	  {
  .           .           .           .          .          .          .          .          .                       _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&_M_use_count);
  7 ( 0.00%)  4 ( 0.00%)  1 ( 0.00%)  1 ( 0.03%) 1 ( 0.01%) 0          1 ( 0.03%) .          .           	    _M_dispose();
147 ( 0.01%) 45 ( 0.01%) 41 ( 0.02%)  5 ( 0.13%) 0          0          5 ( 0.16%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<std::thread, std::allocator<std::thread>, (__gnu_cxx::_Lock_policy)2>::_M_dispose() (1x)
  .           .           .           .          .          .          .          .          .           	    // There must be a memory barrier between dispose() and destroy()
  .           .           .           .          .          .          .          .          .           	    // to ensure that the effects of dispose() are observed in the
  .           .           .           .          .          .          .          .          .           	    // thread that runs destroy().
  .           .           .           .          .          .          .          .          .           	    // See http://gcc.gnu.org/ml/libstdc++/2005-11/msg00136.html
  .           .           .           .          .          .          .          .          .           	    if (_Mutex_base<_Lp>::_S_need_barriers)
  .           .           .           .          .          .          .          .          .           	      {
  .           .           .           .          .          .          .          .          .           		__atomic_thread_fence (__ATOMIC_ACQ_REL);
  .           .           .           .          .          .          .          .          .           	      }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                       // Be race-detector-friendly.  For more info see bits/c++config.
  .           .           .           .          .          .          .          .          .                       _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_weak_count);
  6 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .           	    if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
  2 ( 0.00%)  .           .           .          .          .          .          .          .           						       -1) == 1)
  .           .           .           .          .          .          .          .          .                         {
  .           .           .           .          .          .          .          .          .                           _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&_M_weak_count);
  7 ( 0.00%)  4 ( 0.00%)  1 ( 0.00%)  .          .          .          .          .          .           	        _M_destroy();
338 ( 0.01%) 100 ( 0.02%) 81 ( 0.03%)  7 ( 0.18%) 1 ( 0.01%) 0          4 ( 0.13%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<std::thread, std::allocator<std::thread>, (__gnu_cxx::_Lock_policy)2>::_M_destroy() (1x)
  .           .           .           .          .          .          .          .          .                         }
  .           .           .           .          .          .          .          .          .           	  }
 18 ( 0.00%) 12 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 void
  .           .           .           .          .          .          .          .          .                 _M_weak_add_ref() noexcept
  .           .           .           .          .          .          .          .          .                 { __gnu_cxx::__atomic_add_dispatch(&_M_weak_count, 1); }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 void
  .           .           .           .          .          .          .          .          .                 _M_weak_release() noexcept
  .           .           .           .          .          .          .          .          .                 {
-- line 195 ----------------------------------------
-- line 375 ----------------------------------------
  .           .           .           .          .          .          .          .          .               _Sp_counted_ptr<nullptr_t, _S_atomic>::_M_dispose() noexcept { }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             template<int _Nm, typename _Tp,
  .           .           .           .          .          .          .          .          .           	   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
  .           .           .           .          .          .          .          .          .               struct _Sp_ebo_helper;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             /// Specialization using EBO.
  .           .           .           .          .          .          .          .          .             template<int _Nm, typename _Tp>
 11 ( 0.00%)  3 ( 0.00%)  3 ( 0.00%)  .          .          .          .          .          .               struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 18 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<std::thread>::~allocator() (1x)
  .           .           .           .          .          .          .          .          .               {
 84 ( 0.00%) 24 ( 0.00%) 24 ( 0.01%)  3 ( 0.08%) 0          0          3 ( 0.10%) .          .                 explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
110 ( 0.00%) 30 ( 0.00%) 35 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObjectDP>::allocator(std::allocator<ActiveObjectDP> const&) (5x)
  .           .           .           .          .          .          .          .          .                 explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 static _Tp&
 14 ( 0.00%)  6 ( 0.00%)  4 ( 0.00%)  .          .          .          .          .          .                 _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
  .           .           .           .          .          .          .          .          .               };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             /// Specialization not using EBO.
  .           .           .           .          .          .          .          .          .             template<int _Nm, typename _Tp>
  .           .           .           .          .          .          .          .          .               struct _Sp_ebo_helper<_Nm, _Tp, false>
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                 explicit _Sp_ebo_helper(const _Tp& __tp) : _M_tp(__tp) { }
  .           .           .           .          .          .          .          .          .                 explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
-- line 397 ----------------------------------------
-- line 489 ----------------------------------------
  .           .           .           .          .          .          .          .          .               struct _Sp_alloc_shared_tag
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                 const _Alloc& _M_a;
  .           .           .           .          .          .          .          .          .               };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
  .           .           .           .          .          .          .          .          .               class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>
  .           .           .           .          .          .          .          .          .               {
 11 ( 0.00%)  3 ( 0.00%)  3 ( 0.00%)  .          .          .          .          .          .                 class _Impl : _Sp_ebo_helper<0, _Alloc>
 29 ( 0.00%)  8 ( 0.00%)  8 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_ebo_helper<0, std::allocator<std::thread>, true>::~_Sp_ebo_helper() (1x)
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .           	typedef _Sp_ebo_helper<0, _Alloc>	_A_base;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 public:
 84 ( 0.00%) 24 ( 0.00%) 24 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 36 ( 0.00%) 10 ( 0.00%) 11 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_ebo_helper<0, std::allocator<std::thread>, true>::_Sp_ebo_helper(std::allocator<std::thread> const&) (1x)
  .           .           .           .          .          .          .          .          .           
 20 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .           	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 14 ( 0.00%)  6 ( 0.00%)  4 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_ebo_helper<0, std::allocator<std::thread>, true>::_S_get(std::_Sp_ebo_helper<0, std::allocator<std::thread>, true>&) (2x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           	__gnu_cxx::__aligned_buffer<_Tp> _M_storage;
  .           .           .           .          .          .          .          .          .                 };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               public:
  .           .           .           .          .          .          .          .          .                 using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_ptr_inplace>;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // Alloc parameter is not a reference so doesn't alias anything in __args
  .           .           .           .          .          .          .          .          .                 template<typename... _Args>
 68 ( 0.00%)  6 ( 0.00%) 38 ( 0.02%)  8 ( 0.21%) 0          0          4 ( 0.13%) .          .           	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
120 ( 0.00%) 24 ( 0.00%) 30 ( 0.01%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .           	: _M_impl(__a)
250 ( 0.01%) 70 ( 0.01%) 75 ( 0.03%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObjectDP, std::allocator<ActiveObjectDP>, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<ActiveObjectDP>) (5x)
110 ( 0.00%) 30 ( 0.00%) 35 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObjectDP>::allocator(std::allocator<ActiveObjectDP> const&) (5x)
 90 ( 0.00%) 25 ( 0.00%) 25 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObjectDP>::~allocator() (5x)
 70 ( 0.00%) 25 ( 0.00%) 25 ( 0.01%)  2 ( 0.05%) 0          1 ( 0.04%) 2 ( 0.07%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base() (5x)
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .           .           .           .          .          .          .          .          .           	  // 2070.  allocate_shared should use allocator_traits<A>::construct
 82 ( 0.00%) 19 ( 0.00%) 19 ( 0.01%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .           	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
27,502 ( 1.09%) 7,396 ( 1.22%) 6,563 ( 2.81%) 366 ( 9.58%) 55 ( 0.42%) 155 ( 5.44%) 239 ( 7.83%) 21 ( 0.23%) 149 ( 6.63%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<ActiveObjectDP> >::construct<ActiveObjectDP, int&>(std::allocator<ActiveObjectDP>&, ActiveObjectDP*, int&) (5x)
140 ( 0.01%) 45 ( 0.01%) 40 ( 0.02%)  4 ( 0.10%) 0          0          4 ( 0.13%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObjectDP, std::allocator<ActiveObjectDP>, (__gnu_cxx::_Lock_policy)2>::_M_ptr() (5x)
 35 ( 0.00%) 15 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:int& std::forward<int&>(std::remove_reference<int&>::type&) (5x)
  .           .           .           .          .          .          .          .          .           	      std::forward<_Args>(__args)...); // might throw
 44 ( 0.00%) 31 ( 0.01%)  0           1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	}
  .           .           .           .          .          .          .          .          .           
 18 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 ~_Sp_counted_ptr_inplace() noexcept { }
 40 ( 0.00%) 11 ( 0.00%) 11 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<std::thread, std::allocator<std::thread>, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl() (1x)
 10 ( 0.00%)  3 ( 0.00%)  3 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base() (1x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 virtual void
  6 ( 0.00%)  0           3 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _M_dispose() noexcept
  .           .           .           .          .          .          .          .          .                 {
 11 ( 0.00%)  2 ( 0.00%)  3 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 81 ( 0.00%) 25 ( 0.00%) 22 ( 0.01%)  3 ( 0.08%) 0          0          3 ( 0.10%) .          .           => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::thread> >::destroy<std::thread>(std::allocator<std::thread>&, std::thread*) (1x)
 28 ( 0.00%)  9 ( 0.00%)  8 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<std::thread, std::allocator<std::thread>, (__gnu_cxx::_Lock_policy)2>::_M_ptr() (1x)
 17 ( 0.00%)  6 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<std::thread, std::allocator<std::thread>, (__gnu_cxx::_Lock_policy)2>::_Impl::_M_alloc() (1x)
  4 ( 0.00%)  3 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // Override because the allocator needs to know the dynamic type
  .           .           .           .          .          .          .          .          .                 virtual void
  8 ( 0.00%)  1 ( 0.00%)  3 ( 0.00%)  .          .          .          .          .          .                 _M_destroy() noexcept
  .           .           .           .          .          .          .          .          .                 {
  9 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	__allocator_type __a(_M_impl._M_alloc());
 19 ( 0.00%)  5 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<std::_Sp_counted_ptr_inplace<std::thread, std::allocator<std::thread>, (__gnu_cxx::_Lock_policy)2> >::allocator<std::thread>(std::allocator<std::thread> const&) (1x)
 17 ( 0.00%)  6 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<std::thread, std::allocator<std::thread>, (__gnu_cxx::_Lock_policy)2>::_Impl::_M_alloc() (1x)
  6 ( 0.00%)  1 ( 0.00%)  1 ( 0.00%)  .          .          .          .          .          .           	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 25 ( 0.00%)  9 ( 0.00%)  9 ( 0.00%)  2 ( 0.05%) .          .          .          .          .           => /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread, std::allocator<std::thread>, (__gnu_cxx::_Lock_policy)2> > >::__allocated_ptr(std::allocator<std::_Sp_counted_ptr_inplace<std::thread, std::allocator<std::thread>, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread, std::allocator<std::thread>, (__gnu_cxx::_Lock_policy)2>*) (1x)
  3 ( 0.00%)  1 ( 0.00%)  1 ( 0.00%)  .          .          .          .          .          .           	this->~_Sp_counted_ptr_inplace();
 68 ( 0.00%) 19 ( 0.00%) 19 ( 0.01%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<std::thread, std::allocator<std::thread>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() (1x)
 11 ( 0.00%)  4 ( 0.00%)  2 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 }
154 ( 0.01%) 48 ( 0.01%) 28 ( 0.01%)  1 ( 0.03%) 1 ( 0.01%) .          .          .          .           => /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<std::thread, std::allocator<std::thread>, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr() (1x)
 18 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<std::_Sp_counted_ptr_inplace<std::thread, std::allocator<std::thread>, (__gnu_cxx::_Lock_policy)2> >::~allocator() (1x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               private:
  .           .           .           .          .          .          .          .          .                 friend class __shared_count<_Lp>; // To be able to call _M_ptr().
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // No longer used, but code compiled against old libstdc++ headers
  .           .           .           .          .          .          .          .          .                 // might still call it from __shared_ptr ctor to get the pointer out.
  .           .           .           .          .          .          .          .          .                 virtual void*
  .           .           .           .          .          .          .          .          .                 _M_get_deleter(const std::type_info& __ti) noexcept override
-- line 546 ----------------------------------------
-- line 557 ----------------------------------------
  .           .           .           .          .          .          .          .          .           #else
  .           .           .           .          .          .          .          .          .           	    _Sp_make_shared_tag::_S_eq(__ti)
  .           .           .           .          .          .          .          .          .           #endif
  .           .           .           .          .          .          .          .          .           	   )
  .           .           .           .          .          .          .          .          .           	  return __ptr;
  .           .           .           .          .          .          .          .          .           	return nullptr;
  .           .           .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
143 ( 0.01%) 39 ( 0.01%) 39 ( 0.02%)  3 ( 0.08%) 0          0          3 ( 0.10%) .          .                 _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 51 ( 0.00%) 18 ( 0.00%) 15 ( 0.01%)  4 ( 0.10%) 0          0          3 ( 0.10%) .          .           => /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::thread>::_M_ptr() (3x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 _Impl _M_impl;
  .           .           .           .          .          .          .          .          .               };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             // The default deleter for shared_ptr<T[]> and shared_ptr<T[N]>.
  .           .           .           .          .          .          .          .          .             struct __sp_array_delete
  .           .           .           .          .          .          .          .          .             {
  .           .           .           .          .          .          .          .          .               template<typename _Yp>
-- line 573 ----------------------------------------
-- line 579 ----------------------------------------
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                 template<typename _Tp>
  .           .           .           .          .          .          .          .          .           	struct __not_alloc_shared_tag { using type = void; };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Tp>
  .           .           .           .          .          .          .          .          .           	struct __not_alloc_shared_tag<_Sp_alloc_shared_tag<_Tp>> { };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               public:
 60 ( 0.00%) 10 ( 0.00%) 30 ( 0.01%)  1 ( 0.03%) 0          1 ( 0.04%) 1 ( 0.03%) 0          1 ( 0.04%)        constexpr __shared_count() noexcept : _M_pi(0)
 30 ( 0.00%) 20 ( 0.00%)  .           .          .          .          .          .          .                 { }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Ptr>
  .           .           .           .          .          .          .          .          .                   explicit
  .           .           .           .          .          .          .          .          .           	__shared_count(_Ptr __p) : _M_pi(0)
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  __try
  .           .           .           .          .          .          .          .          .           	    {
  .           .           .           .          .          .          .          .          .           	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
-- line 596 ----------------------------------------
-- line 635 ----------------------------------------
  .           .           .           .          .          .          .          .          .           	  __catch(...)
  .           .           .           .          .          .          .          .          .           	    {
  .           .           .           .          .          .          .          .          .           	      __d(__p); // Call _Deleter on __p.
  .           .           .           .          .          .          .          .          .           	      __throw_exception_again;
  .           .           .           .          .          .          .          .          .           	    }
  .           .           .           .          .          .          .          .          .           	}
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Tp, typename _Alloc, typename... _Args>
 92 ( 0.00%)  6 ( 0.00%) 62 ( 0.03%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .           	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
  .           .           .           .          .          .          .          .          .           		       _Args&&... __args)
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;
 30 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .           	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 95 ( 0.00%) 25 ( 0.00%) 30 ( 0.01%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<std::_Sp_counted_ptr_inplace<ActiveObjectDP, std::allocator<ActiveObjectDP>, (__gnu_cxx::_Lock_policy)2> >::allocator<ActiveObjectDP>(std::allocator<ActiveObjectDP> const&) (5x)
 30 ( 0.00%)  0           6 ( 0.00%)  .          .          .          .          .          .           	  auto __guard = std::__allocate_guarded(__a2);
1,519 ( 0.06%) 332 ( 0.05%) 288 ( 0.12%) 47 ( 1.23%) 1 ( 0.01%) 6 ( 0.21%) 8 ( 0.26%) 0          5 ( 0.22%)  => /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObjectDP, std::allocator<ActiveObjectDP>, (__gnu_cxx::_Lock_policy)2> > > std::__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObjectDP, std::allocator<ActiveObjectDP>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<ActiveObjectDP, std::allocator<ActiveObjectDP>, (__gnu_cxx::_Lock_policy)2> >&) (5x)
 24 ( 0.00%)  0          12 ( 0.01%)  .          .          .          .          .          .           	  _Sp_cp_type* __mem = __guard.get();
 90 ( 0.00%) 35 ( 0.01%) 25 ( 0.01%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObjectDP, std::allocator<ActiveObjectDP>, (__gnu_cxx::_Lock_policy)2> > >::get() (5x)
115 ( 0.00%) 12 ( 0.00%) 30 ( 0.01%) 17 ( 0.45%) 0          0          4 ( 0.13%) .          .           	  auto __pi = ::new (__mem)
28,452 ( 1.12%) 7,671 ( 1.26%) 6,843 ( 2.93%) 382 (10.00%) 55 ( 0.42%) 156 ( 5.48%) 251 ( 8.22%) 21 ( 0.23%) 150 ( 6.68%)  => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObjectDP, std::allocator<ActiveObjectDP>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<int&>(std::allocator<ActiveObjectDP>, int&) (5x)
110 ( 0.00%) 30 ( 0.00%) 35 ( 0.01%)  6 ( 0.16%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObjectDP>::allocator(std::allocator<ActiveObjectDP> const&) (5x)
 90 ( 0.00%) 25 ( 0.00%) 25 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObjectDP>::~allocator() (5x)
 40 ( 0.00%) 15 ( 0.00%) 15 ( 0.01%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/new:operator new(unsigned long, void*) (5x)
 28 ( 0.00%)  7 ( 0.00%)  7 ( 0.00%)  .          .          .          .          .          .           	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 35 ( 0.00%) 15 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:int& std::forward<int&>(std::remove_reference<int&>::type&) (5x)
 24 ( 0.00%)  0           6 ( 0.00%)  .          .          .          .          .          .           	  __guard = nullptr;
 50 ( 0.00%) 20 ( 0.00%) 20 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObjectDP, std::allocator<ActiveObjectDP>, (__gnu_cxx::_Lock_policy)2> > >::operator=(decltype(nullptr)) (5x)
 18 ( 0.00%) 12 ( 0.00%)  6 ( 0.00%)  0          0          2 ( 0.07%) 0          0          1 ( 0.04%)  	  _M_pi = __pi;
 30 ( 0.00%) 12 ( 0.00%) 12 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	  __p = __pi->_M_ptr();
140 ( 0.01%) 45 ( 0.01%) 40 ( 0.02%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_ptr_inplace<ActiveObjectDP, std::allocator<ActiveObjectDP>, (__gnu_cxx::_Lock_policy)2>::_M_ptr() (5x)
103 ( 0.00%) 49 ( 0.01%) 12 ( 0.01%)  7 ( 0.18%) 0          0          3 ( 0.10%) .          .           	}
 90 ( 0.00%) 25 ( 0.00%) 25 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<std::_Sp_counted_ptr_inplace<ActiveObjectDP, std::allocator<ActiveObjectDP>, (__gnu_cxx::_Lock_policy)2> >::~allocator() (5x)
 60 ( 0.00%) 20 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<ActiveObjectDP, std::allocator<ActiveObjectDP>, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr() (5x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           #if _GLIBCXX_USE_DEPRECATED
  .           .           .           .          .          .          .          .          .           #pragma GCC diagnostic push
  .           .           .           .          .          .          .          .          .           #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  .           .           .           .          .          .          .          .          .                 // Special case for auto_ptr<_Tp> to provide the strong guarantee.
  .           .           .           .          .          .          .          .          .                 template<typename _Tp>
  .           .           .           .          .          .          .          .          .                   explicit
  .           .           .           .          .          .          .          .          .           	__shared_count(std::auto_ptr<_Tp>&& __r);
-- line 663 ----------------------------------------
-- line 694 ----------------------------------------
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // Throw bad_weak_ptr when __r._M_get_use_count() == 0.
  .           .           .           .          .          .          .          .          .                 explicit __shared_count(const __weak_count<_Lp>& __r);
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // Does not throw if __r._M_get_use_count() == 0, caller must check.
  .           .           .           .          .          .          .          .          .                 explicit
  .           .           .           .          .          .          .          .          .                 __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) noexcept;
  .           .           .           .          .          .          .          .          .           
 55 ( 0.00%)  0          22 ( 0.01%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 ~__shared_count() noexcept
  .           .           .           .          .          .          .          .          .                 {
 44 ( 0.00%) 22 ( 0.00%)  .           .          .          .          .          .          .           	if (_M_pi != nullptr)
 24 ( 0.00%) 12 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .           	  _M_pi->_M_release();
701 ( 0.03%) 214 ( 0.04%) 171 ( 0.07%) 17 ( 0.45%) 3 ( 0.02%) 0          14 ( 0.46%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() (6x)
 33 ( 0.00%) 22 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
 30 ( 0.00%)  0          15 ( 0.01%)  .          .          .          .          .          .                 __shared_count(const __shared_count& __r) noexcept
 20 ( 0.00%) 15 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .                 : _M_pi(__r._M_pi)
  .           .           .           .          .          .          .          .          .                 {
 20 ( 0.00%) 10 ( 0.00%)  .           .          .          .          .          .          .           	if (_M_pi != nullptr)
 20 ( 0.00%) 10 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .           	  _M_pi->_M_add_ref_copy();
125 ( 0.00%) 45 ( 0.01%) 35 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_add_ref_copy() (5x)
 15 ( 0.00%) 10 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 __shared_count&
 30 ( 0.00%)  0          15 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 operator=(const __shared_count& __r) noexcept
  .           .           .           .          .          .          .          .          .                 {
 15 ( 0.00%) 10 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .           	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 20 ( 0.00%) 15 ( 0.00%)  .           .          .          .          .          .          .           	if (__tmp != _M_pi)
  .           .           .           .          .          .          .          .          .           	  {
 10 ( 0.00%)  5 ( 0.00%)  .           .          .          .          .          .          .           	    if (__tmp != nullptr)
 15 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	      __tmp->_M_add_ref_copy();
125 ( 0.00%) 45 ( 0.01%) 35 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_add_ref_copy() (5x)
 20 ( 0.00%) 10 ( 0.00%)  .           .          .          .          .          .          .           	    if (_M_pi != nullptr)
  .           .           .           .          .          .          .          .          .           	      _M_pi->_M_release();
 15 ( 0.00%) 10 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .           	    _M_pi = __tmp;
  .           .           .           .          .          .          .          .          .           	  }
  5 ( 0.00%)  5 ( 0.00%)  .           .          .          .          .          .          .           	return *this;
 10 ( 0.00%) 10 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 void
 25 ( 0.00%)  0          15 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _M_swap(__shared_count& __r) noexcept
  .           .           .           .          .          .          .          .          .                 {
 15 ( 0.00%) 10 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .           	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 20 ( 0.00%) 15 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .           	__r._M_pi = _M_pi;
 15 ( 0.00%) 10 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .           	_M_pi = __tmp;
 15 ( 0.00%) 10 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 long
  .           .           .           .          .          .          .          .          .                 _M_get_use_count() const noexcept
  .           .           .           .          .          .          .          .          .                 { return _M_pi ? _M_pi->_M_get_use_count() : 0; }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 bool
  .           .           .           .          .          .          .          .          .                 _M_unique() const noexcept
  .           .           .           .          .          .          .          .          .                 { return this->_M_get_use_count() == 1; }
-- line 744 ----------------------------------------
-- line 976 ----------------------------------------
  .           .           .           .          .          .          .          .          .                 element_type&
  .           .           .           .          .          .          .          .          .                 operator*() const noexcept
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .           	__glibcxx_assert(_M_get() != nullptr);
  .           .           .           .          .          .          .          .          .           	return *_M_get();
  .           .           .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 element_type*
 60 ( 0.00%)  0          24 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 operator->() const noexcept
  .           .           .           .          .          .          .          .          .                 {
  .           .           .           .          .          .          .          .          .           	_GLIBCXX_DEBUG_PEDASSERT(_M_get() != nullptr);
 36 ( 0.00%) 12 ( 0.00%) 12 ( 0.01%)  .          .          .          .          .          .           	return _M_get();
198 ( 0.01%) 77 ( 0.01%) 55 ( 0.02%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2, false, false>::_M_get() const (11x)
 24 ( 0.00%) 24 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               private:
  .           .           .           .          .          .          .          .          .                 element_type*
 60 ( 0.00%)  0          24 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _M_get() const noexcept
 60 ( 0.00%) 36 ( 0.01%) 12 ( 0.01%)  .          .          .          .          .          .                 { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 88 ( 0.00%) 44 ( 0.01%) 22 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>::get() const (11x)
  .           .           .           .          .          .          .          .          .               };
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .             // Define operator-> for shared_ptr<cv void>.
  .           .           .           .          .          .          .          .          .             template<typename _Tp, _Lock_policy _Lp>
  .           .           .           .          .          .          .          .          .               class __shared_ptr_access<_Tp, _Lp, false, true>
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .               public:
  .           .           .           .          .          .          .          .          .                 using element_type = _Tp;
-- line 1001 ----------------------------------------
-- line 1084 ----------------------------------------
  .           .           .           .          .          .          .          .          .           	using _UniqAssignable = _UniqCompatible<_Yp, _Del, __shared_ptr&>;
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               public:
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           #if __cplusplus > 201402L
  .           .           .           .          .          .          .          .          .                 using weak_type = __weak_ptr<_Tp, _Lp>;
  .           .           .           .          .          .          .          .          .           #endif
  .           .           .           .          .          .          .          .          .           
 25 ( 0.00%)  0          10 ( 0.00%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 constexpr __shared_ptr() noexcept
 30 ( 0.00%) 10 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .                 : _M_ptr(0), _M_refcount()
 45 ( 0.00%) 15 ( 0.00%) 15 ( 0.01%)  1 ( 0.03%) 0          1 ( 0.04%) 1 ( 0.03%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() (5x)
 15 ( 0.00%) 10 ( 0.00%)  .           .          .          .          .          .          .                 { }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp, typename = _SafeConv<_Yp>>
  .           .           .           .          .          .          .          .          .           	explicit
  .           .           .           .          .          .          .          .          .           	__shared_ptr(_Yp* __p)
  .           .           .           .          .          .          .          .          .           	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  static_assert( !is_void<_Yp>::value, "incomplete type" );
  .           .           .           .          .          .          .          .          .           	  static_assert( sizeof(_Yp) > 0, "incomplete type" );
-- line 1102 ----------------------------------------
-- line 1144 ----------------------------------------
  .           .           .           .          .          .          .          .          .           	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r,
  .           .           .           .          .          .          .          .          .           		     element_type* __p) noexcept
  .           .           .           .          .          .          .          .          .           	: _M_ptr(__p), _M_refcount()
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  _M_refcount._M_swap(__r._M_refcount);
  .           .           .           .          .          .          .          .          .           	  __r._M_ptr = nullptr;
  .           .           .           .          .          .          .          .          .           	}
  .           .           .           .          .          .          .          .          .           
100 ( 0.00%) 35 ( 0.01%) 25 ( 0.01%)  .          .          .          .          .          .                 __shared_ptr(const __shared_ptr&) noexcept = default;
230 ( 0.01%) 90 ( 0.01%) 60 ( 0.03%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&) (5x)
100 ( 0.00%) 40 ( 0.01%) 25 ( 0.01%)  .          .          .          .          .          .                 __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
265 ( 0.01%) 115 ( 0.02%) 65 ( 0.03%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::operator=(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&) (5x)
132 ( 0.01%) 33 ( 0.01%) 33 ( 0.01%)  1 ( 0.03%) .          .          .          .          .                 ~__shared_ptr() = default;
290 ( 0.01%) 95 ( 0.02%) 60 ( 0.03%)  5 ( 0.13%) 0          0          5 ( 0.16%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() (10x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp, typename = _Compatible<_Yp>>
  .           .           .           .          .          .          .          .          .           	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
  .           .           .           .          .          .          .          .          .           	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
  .           .           .           .          .          .          .          .          .           	{ }
  .           .           .           .          .          .          .          .          .           
 30 ( 0.00%)  0          15 ( 0.01%)  .          .          .          .          .          .                 __shared_ptr(__shared_ptr&& __r) noexcept
 40 ( 0.00%) 20 ( 0.00%) 10 ( 0.00%)  0          0          1 ( 0.04%) 0          0          1 ( 0.04%)        : _M_ptr(__r._M_ptr), _M_refcount()
 45 ( 0.00%) 15 ( 0.00%) 15 ( 0.01%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() (5x)
  .           .           .           .          .          .          .          .          .                 {
 35 ( 0.00%) 10 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .           	_M_refcount._M_swap(__r._M_refcount);
 90 ( 0.00%) 45 ( 0.01%) 30 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&) (5x)
 10 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .           	__r._M_ptr = nullptr;
 15 ( 0.00%) 10 ( 0.00%)  .           .          .          .          .          .          .                 }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp, typename = _Compatible<_Yp>>
  .           .           .           .          .          .          .          .          .           	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
  .           .           .           .          .          .          .          .          .           	: _M_ptr(__r._M_ptr), _M_refcount()
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  _M_refcount._M_swap(__r._M_refcount);
  .           .           .           .          .          .          .          .          .           	  __r._M_ptr = nullptr;
  .           .           .           .          .          .          .          .          .           	}
-- line 1174 ----------------------------------------
-- line 1287 ----------------------------------------
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp, typename _Deleter, typename _Alloc>
  .           .           .           .          .          .          .          .          .           	_SafeConv<_Yp>
  .           .           .           .          .          .          .          .          .           	reset(_Yp* __p, _Deleter __d, _Alloc __a)
  .           .           .           .          .          .          .          .          .                   { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /// Return the stored pointer.
  .           .           .           .          .          .          .          .          .                 element_type*
 72 ( 0.00%)  0          36 ( 0.02%)  .          .          .          .          .          .                 get() const noexcept
 72 ( 0.00%) 72 ( 0.01%)  .           .          .          .          .          .          .                 { return _M_ptr; }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /// Return true if the stored pointer is not null.
  4 ( 0.00%)  0           2 ( 0.00%)  .          .          .          .          .          .                 explicit operator bool() const noexcept
  6 ( 0.00%)  4 ( 0.00%)  .           .          .          .          .          .          .                 { return _M_ptr != nullptr; }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /// Return true if use_count() == 1.
  .           .           .           .          .          .          .          .          .                 bool
  .           .           .           .          .          .          .          .          .                 unique() const noexcept
  .           .           .           .          .          .          .          .          .                 { return _M_refcount._M_unique(); }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 /// If *this owns a pointer, return the number of owners, otherwise zero.
  .           .           .           .          .          .          .          .          .                 long
-- line 1308 ----------------------------------------
-- line 1333 ----------------------------------------
  .           .           .           .          .          .          .          .          .           	bool
  .           .           .           .          .          .          .          .          .           	owner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const noexcept
  .           .           .           .          .          .          .          .          .           	{ return _M_refcount._M_less(__rhs._M_refcount); }
  .           .           .           .          .          .          .          .          .                 /// @}
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               protected:
  .           .           .           .          .          .          .          .          .                 // This constructor is non-standard, it is used by allocate_shared.
  .           .           .           .          .          .          .          .          .                 template<typename _Alloc, typename... _Args>
 50 ( 0.00%)  0          32 ( 0.01%)  5 ( 0.13%) 0          0          2 ( 0.07%) .          .           	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 83 ( 0.00%) 31 ( 0.01%) 19 ( 0.01%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .           	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
31,176 ( 1.23%) 8,343 ( 1.37%) 7,496 ( 3.21%) 462 (12.10%) 56 ( 0.43%) 163 ( 5.73%) 272 ( 8.91%) 21 ( 0.23%) 156 ( 6.95%)  => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<ActiveObjectDP, std::allocator<ActiveObjectDP>, int&>(ActiveObjectDP*&, std::_Sp_alloc_shared_tag<std::allocator<ActiveObjectDP> >, int&) (5x)
 35 ( 0.00%) 15 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:int& std::forward<int&>(std::remove_reference<int&>::type&) (5x)
 62 ( 0.00%) 37 ( 0.01%)  6 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	{ _M_enable_shared_from_this_with(_M_ptr); }
 40 ( 0.00%) 10 ( 0.00%) 15 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::enable_if<!std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>::__has_esft_base<ActiveObjectDP, void>::value, void>::type std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>::_M_enable_shared_from_this_with<ActiveObjectDP, ActiveObjectDP>(ActiveObjectDP*) (5x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Tp1, _Lock_policy _Lp1, typename _Alloc,
  .           .           .           .          .          .          .          .          .           	       typename... _Args>
  .           .           .           .          .          .          .          .          .           	friend __shared_ptr<_Tp1, _Lp1>
  .           .           .           .          .          .          .          .          .           	__allocate_shared(const _Alloc& __a, _Args&&... __args);
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 // This constructor is used by __weak_ptr::lock() and
  .           .           .           .          .          .          .          .          .                 // shared_ptr::shared_ptr(const weak_ptr&, std::nothrow_t).
-- line 1351 ----------------------------------------
-- line 1378 ----------------------------------------
  .           .           .           .          .          .          .          .          .           	_M_enable_shared_from_this_with(_Yp* __p) noexcept
  .           .           .           .          .          .          .          .          .           	{
  .           .           .           .          .          .          .          .          .           	  if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
  .           .           .           .          .          .          .          .          .           	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
  .           .           .           .          .          .          .          .          .           	}
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
  .           .           .           .          .          .          .          .          .           	typename enable_if<!__has_esft_base<_Yp2>::value>::type
 30 ( 0.00%)  0          18 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	_M_enable_shared_from_this_with(_Yp*) noexcept
 18 ( 0.00%) 12 ( 0.00%)  .           .          .          .          .          .          .           	{ }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 void*
  .           .           .           .          .          .          .          .          .                 _M_get_deleter(const std::type_info& __ti) const noexcept
  .           .           .           .          .          .          .          .          .                 { return _M_refcount._M_get_deleter(__ti); }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                 template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
  .           .           .           .          .          .          .          .          .                 template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;
  .           .           .           .          .          .          .          .          .           
-- line 1395 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/invoke.h
--------------------------------------------------------------------------------
Ir          Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 63 ----------------------------------------
 .           .           .          .          .          .          .          .          .             template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
 .           .           .          .          .          .          .          .          .               constexpr _Res
 .           .           .          .          .          .          .          .          .               __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
 .           .           .          .          .          .          .          .          .           		  _Args&&... __args)
 .           .           .          .          .          .          .          .          .               { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
 .           .           .          .          .          .          .          .          .               constexpr _Res
36 ( 0.00%)  0          18 ( 0.01%) .          .          .          .          .          .               __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 .           .           .          .          .          .          .          .          .           		  _Args&&... __args)
 .           .           .          .          .          .          .          .          .               {
97 ( 0.00%) 48 ( 0.01%) 12 ( 0.01%) 4 ( 0.10%) 0          0          3 ( 0.10%) .          .                 return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
19,988 ( 0.79%) 5,397 ( 0.89%) 3,204 ( 1.37%) 326 ( 8.54%) 65 ( 0.50%) 56 ( 1.97%) 94 ( 3.08%) 26 ( 0.29%) 55 ( 2.45%)  => /home/yairco/OS/FinalProject/OS_Project/ActiveObjectDP.cpp:ActiveObjectDP::work() (5x)
35 ( 0.00%) 15 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:ActiveObjectDP*&& std::forward<ActiveObjectDP*>(std::remove_reference<ActiveObjectDP*>::type&) (5x)
 2 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .          .               }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             template<typename _Res, typename _MemPtr, typename _Tp>
 .           .           .          .          .          .          .          .          .               constexpr _Res
 .           .           .          .          .          .          .          .          .               __invoke_impl(__invoke_memobj_ref, _MemPtr&& __f, _Tp&& __t)
 .           .           .          .          .          .          .          .          .               { return __invfwd<_Tp>(__t).*__f; }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             template<typename _Res, typename _MemPtr, typename _Tp>
 .           .           .          .          .          .          .          .          .               constexpr _Res
 .           .           .          .          .          .          .          .          .               __invoke_impl(__invoke_memobj_deref, _MemPtr&& __f, _Tp&& __t)
 .           .           .          .          .          .          .          .          .               { return (*std::forward<_Tp>(__t)).*__f; }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             /// Invoke a callable object.
 .           .           .          .          .          .          .          .          .             template<typename _Callable, typename... _Args>
 .           .           .          .          .          .          .          .          .               constexpr typename __invoke_result<_Callable, _Args...>::type
42 ( 0.00%)  0          24 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               __invoke(_Callable&& __fn, _Args&&... __args)
 .           .           .          .          .          .          .          .          .               noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
 .           .           .          .          .          .          .          .          .               {
 .           .           .          .          .          .          .          .          .                 using __result = __invoke_result<_Callable, _Args...>;
 .           .           .          .          .          .          .          .          .                 using __type = typename __result::type;
 .           .           .          .          .          .          .          .          .                 using __tag = typename __result::__invoke_type;
60 ( 0.00%) 12 ( 0.00%) 18 ( 0.01%) .          .          .          .          .          .                 return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
20,133 ( 0.80%) 5,452 ( 0.90%) 3,239 ( 1.39%) 327 ( 8.56%) 65 ( 0.50%) 56 ( 1.97%) 95 ( 3.11%) 26 ( 0.29%) 55 ( 2.45%)  => /usr/include/c++/11/bits/invoke.h:void std::__invoke_impl<void, void (ActiveObjectDP::*)(), ActiveObjectDP*>(std::__invoke_memfun_deref, void (ActiveObjectDP::*&&)(), ActiveObjectDP*&&) (5x)
35 ( 0.00%) 15 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:ActiveObjectDP*&& std::forward<ActiveObjectDP*>(std::remove_reference<ActiveObjectDP*>::type&) (5x)
35 ( 0.00%) 15 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:void (ActiveObjectDP::*&&std::forward<void (ActiveObjectDP::*)()>(std::remove_reference<void (ActiveObjectDP::*)()>::type&))() (5x)
 1 ( 0.00%)  .           .          .          .          .          .          .          .           					std::forward<_Args>(__args)...);
 3 ( 0.00%)  3 ( 0.00%)  0          1 ( 0.03%) 0          0          1 ( 0.03%) .          .               }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201703L
 .           .           .          .          .          .          .          .          .             // INVOKE<R>: Invoke a callable object and convert the result to R.
 .           .           .          .          .          .          .          .          .             template<typename _Res, typename _Callable, typename... _Args>
 .           .           .          .          .          .          .          .          .               constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
 .           .           .          .          .          .          .          .          .               __invoke_r(_Callable&& __fn, _Args&&... __args)
 .           .           .          .          .          .          .          .          .               noexcept(is_nothrow_invocable_r_v<_Res, _Callable, _Args...>)
 .           .           .          .          .          .          .          .          .               {
-- line 106 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/std_function.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 77 ----------------------------------------
  .           .           .          .          .          .          .          .          .               void*       _M_object;
  .           .           .          .          .          .          .          .          .               const void* _M_const_object;
  .           .           .          .          .          .          .          .          .               void (*_M_function_pointer)();
  .           .           .          .          .          .          .          .          .               void (_Undefined_class::*_M_member_pointer)();
  .           .           .          .          .          .          .          .          .             };
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             union [[gnu::may_alias]] _Any_data
  .           .           .          .          .          .          .          .          .             {
105 ( 0.00%) 45 ( 0.01%) 30 ( 0.01%) 1 ( 0.03%) .          .          .          .          .               void*       _M_access()       { return &_M_pod_data[0]; }
 35 ( 0.00%) 15 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .               const void* _M_access() const { return &_M_pod_data[0]; }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               template<typename _Tp>
  .           .           .          .          .          .          .          .          .                 _Tp&
 20 ( 0.00%)  0          10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _M_access()
 25 ( 0.00%) 15 ( 0.00%)  5 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 { return *static_cast<_Tp*>(_M_access()); }
  7 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::_Any_data::_M_access() (1x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               template<typename _Tp>
  .           .           .          .          .          .          .          .          .                 const _Tp&
 20 ( 0.00%)  0          10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _M_access() const
 25 ( 0.00%) 15 ( 0.00%)  5 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 { return *static_cast<const _Tp*>(_M_access()); }
  7 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::_Any_data::_M_access() const (1x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               _Nocopy_types _M_unused;
  .           .           .          .          .          .          .          .          .               char _M_pod_data[sizeof(_Nocopy_types)];
  .           .           .          .          .          .          .          .          .             };
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             enum _Manager_operation
  .           .           .          .          .          .          .          .          .             {
  .           .           .          .          .          .          .          .          .               __get_type_info,
-- line 104 ----------------------------------------
-- line 126 ----------------------------------------
  .           .           .          .          .          .          .          .          .           	 && sizeof(_Functor) <= _M_max_size
  .           .           .          .          .          .          .          .          .           	 && __alignof__(_Functor) <= _M_max_align
  .           .           .          .          .          .          .          .          .           	 && (_M_max_align % __alignof__(_Functor) == 0));
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	using _Local_storage = integral_constant<bool, __stored_locally>;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	// Retrieve a pointer to the function object
  .           .           .          .          .          .          .          .          .           	static _Functor*
 20 ( 0.00%)  0          10 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           	_M_get_pointer(const _Any_data& __source)
  .           .           .          .          .          .          .          .          .           	{
  .           .           .          .          .          .          .          .          .           	  if _GLIBCXX17_CONSTEXPR (__stored_locally)
  .           .           .          .          .          .          .          .          .           	    {
 20 ( 0.00%)  5 ( 0.00%) 10 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           	      const _Functor& __f = __source._M_access<_Functor>();
 16 ( 0.00%)  6 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:PipeDP::setupPipe()::{lambda(int&, int)#2} const& std::_Any_data::_M_access<PipeDP::setupPipe()::{lambda(int&, int)#2}>() const (1x)
 15 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	      return const_cast<_Functor*>(std::__addressof(__f));
  6 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:PipeDP::setupPipe()::{lambda(int&, int)#2} const* std::__addressof<PipeDP::setupPipe()::{lambda(int&, int)#2} const>(PipeDP::setupPipe()::{lambda(int&, int)#2} const&) (1x)
  .           .           .          .          .          .          .          .          .           	    }
  .           .           .          .          .          .          .          .          .           	  else // have stored a pointer
  .           .           .          .          .          .          .          .          .           	    return __source._M_access<_Functor*>();
 10 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .          .           	}
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 private:
  .           .           .          .          .          .          .          .          .           	// Construct a location-invariant function object that fits within
  .           .           .          .          .          .          .          .          .           	// an _Any_data structure.
  .           .           .          .          .          .          .          .          .           	template<typename _Fn>
  .           .           .          .          .          .          .          .          .           	  static void
 60 ( 0.00%)  0          40 ( 0.02%) 5 ( 0.13%) 0          0          5 ( 0.16%) .          .           	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
  .           .           .          .          .          .          .          .          .           	  {
120 ( 0.00%) 30 ( 0.00%) 40 ( 0.02%) 6 ( 0.16%) 0          0          6 ( 0.20%) .          .           	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
  8 ( 0.00%)  3 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/new:operator new(unsigned long, void*) (1x)
  7 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::_Any_data::_M_access() (1x)
  6 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:PipeDP::setupPipe()::{lambda(int&, int)#3} const& std::forward<PipeDP::setupPipe()::{lambda(int&, int)#3} const&>(std::remove_reference<PipeDP::setupPipe()::{lambda(int&, int)#3} const&>::type&) (1x)
 40 ( 0.00%) 30 ( 0.00%)  .          .          .          .          .          .          .           	  }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	// Construct a function object on the heap and store a pointer.
  .           .           .          .          .          .          .          .          .           	template<typename _Fn>
  .           .           .          .          .          .          .          .          .           	  static void
  .           .           .          .          .          .          .          .          .           	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
  .           .           .          .          .          .          .          .          .           	  {
  .           .           .          .          .          .          .          .          .           	    __dest._M_access<_Functor*>()
  .           .           .          .          .          .          .          .          .           	      = new _Functor(std::forward<_Fn>(__f));
  .           .           .          .          .          .          .          .          .           	  }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	// Destroy an object stored in the internal buffer.
  .           .           .          .          .          .          .          .          .           	static void
 20 ( 0.00%)  0          10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	_M_destroy(_Any_data& __victim, true_type)
  .           .           .          .          .          .          .          .          .           	{
 15 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	  __victim._M_access<_Functor>().~_Functor();
 16 ( 0.00%)  6 ( 0.00%)  5 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_function.h:PipeDP::setupPipe()::{lambda(int&, int)#3}& std::_Any_data::_M_access<PipeDP::setupPipe()::{lambda(int&, int)#3}>() (1x)
 15 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .          .           	}
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	// Destroy an object located on the heap.
  .           .           .          .          .          .          .          .          .           	static void
  .           .           .          .          .          .          .          .          .           	_M_destroy(_Any_data& __victim, false_type)
  .           .           .          .          .          .          .          .          .           	{
  .           .           .          .          .          .          .          .          .           	  delete __victim._M_access<_Functor*>();
  .           .           .          .          .          .          .          .          .           	}
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 public:
  .           .           .          .          .          .          .          .          .           	static bool
 70 ( 0.00%)  0          50 ( 0.02%) 6 ( 0.16%) 0          0          6 ( 0.20%) .          .           	_M_manager(_Any_data& __dest, const _Any_data& __source,
  .           .           .          .          .          .          .          .          .           		   _Manager_operation __op)
  .           .           .          .          .          .          .          .          .           	{
 50 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .          .           	  switch (__op)
  .           .           .          .          .          .          .          .          .           	    {
  .           .           .          .          .          .          .          .          .           	    case __get_type_info:
  .           .           .          .          .          .          .          .          .           #if __cpp_rtti
  .           .           .          .          .          .          .          .          .           	      __dest._M_access<const type_info*>() = &typeid(_Functor);
  .           .           .          .          .          .          .          .          .           #else
  .           .           .          .          .          .          .          .          .           	      __dest._M_access<const type_info*>() = nullptr;
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           	      break;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	    case __get_functor_ptr:
  .           .           .          .          .          .          .          .          .           	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
  .           .           .          .          .          .          .          .          .           	      break;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	    case __clone_functor:
 20 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           	      _M_init_functor(__dest,
 65 ( 0.00%) 22 ( 0.00%) 22 ( 0.01%) 3 ( 0.08%) 0          0          3 ( 0.10%) .          .           => /usr/include/c++/11/bits/std_function.h:void std::_Function_base::_Base_manager<PipeDP::setupPipe()::{lambda(int&, int)#2}>::_M_init_functor<PipeDP::setupPipe()::{lambda(int&, int)#2} const&>(std::_Any_data&, PipeDP::setupPipe()::{lambda(int&, int)#2} const&) (1x)
 20 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) 6 ( 0.16%) 0          0          6 ( 0.20%) .          .           		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 35 ( 0.00%) 13 ( 0.00%) 12 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_base::_Base_manager<PipeDP::setupPipe()::{lambda(int&, int)#2}>::_M_get_pointer(std::_Any_data const&) (1x)
  5 ( 0.00%)  .           .          .          .          .          .          .          .           	      break;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	    case __destroy_functor:
 15 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           	      _M_destroy(__dest, _Local_storage());
 26 ( 0.00%)  9 ( 0.00%)  8 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_base::_Base_manager<PipeDP::setupPipe()::{lambda(int&, int)#2}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>) (1x)
  5 ( 0.00%)  .           .          .          .          .          .          .          .           	      break;
  .           .           .          .          .          .          .          .          .           	    }
 10 ( 0.00%)  .           .          .          .          .          .          .          .           	  return false;
 30 ( 0.00%) 30 ( 0.00%)  .          .          .          .          .          .          .           	}
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	template<typename _Fn>
  .           .           .          .          .          .          .          .          .           	  static void
 50 ( 0.00%)  0          30 ( 0.01%) 7 ( 0.18%) 0          0          7 ( 0.23%) .          .           	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
  .           .           .          .          .          .          .          .          .           	  noexcept(__and_<_Local_storage,
  .           .           .          .          .          .          .          .          .           			  is_nothrow_constructible<_Functor, _Fn>>::value)
  .           .           .          .          .          .          .          .          .           	  {
 80 ( 0.00%) 20 ( 0.00%) 20 ( 0.01%) 4 ( 0.10%) 0          0          4 ( 0.13%) .          .           	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 43 ( 0.00%) 15 ( 0.00%) 15 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_function.h:void std::_Function_base::_Base_manager<PipeDP::setupPipe()::{lambda(int&, int)#3}>::_M_create<PipeDP::setupPipe()::{lambda(int&, int)#3}>(std::_Any_data&, PipeDP::setupPipe()::{lambda(int&, int)#3}&&, std::integral_constant<bool, true>) (1x)
  6 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:PipeDP::setupPipe()::{lambda(int&, int)#3}&& std::forward<PipeDP::setupPipe()::{lambda(int&, int)#3}>(std::remove_reference<PipeDP::setupPipe()::{lambda(int&, int)#3}>::type&) (1x)
 30 ( 0.00%) 20 ( 0.00%)  0          1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	  }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	template<typename _Signature>
  .           .           .          .          .          .          .          .          .           	  static bool
  .           .           .          .          .          .          .          .          .           	  _M_not_empty_function(const function<_Signature>& __f)
  .           .           .          .          .          .          .          .          .           	  { return static_cast<bool>(__f); }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	template<typename _Tp>
  .           .           .          .          .          .          .          .          .           	  static bool
-- line 224 ----------------------------------------
-- line 227 ----------------------------------------
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	template<typename _Class, typename _Tp>
  .           .           .          .          .          .          .          .          .           	  static bool
  .           .           .          .          .          .          .          .          .           	  _M_not_empty_function(_Tp _Class::* __mp)
  .           .           .          .          .          .          .          .          .           	  { return __mp != nullptr; }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	template<typename _Tp>
  .           .           .          .          .          .          .          .          .           	  static bool
 15 ( 0.00%)  0          10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	  _M_not_empty_function(const _Tp&)
 15 ( 0.00%) 10 ( 0.00%)  0          1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	  { return true; }
  .           .           .          .          .          .          .          .          .                 };
  .           .           .          .          .          .          .          .          .           
180 ( 0.01%) 60 ( 0.01%) 75 ( 0.03%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               _Function_base() = default;
  .           .           .          .          .          .          .          .          .           
 50 ( 0.00%)  0          20 ( 0.01%) .          .          .          .          .          .               ~_Function_base()
  .           .           .          .          .          .          .          .          .               {
 40 ( 0.00%) 20 ( 0.00%)  .          .          .          .          .          .          .                 if (_M_manager)
 40 ( 0.00%) 20 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           	_M_manager(_M_functor, _M_functor, __destroy_functor);
 68 ( 0.00%) 21 ( 0.00%) 20 ( 0.01%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_handler<bool (int&, int), PipeDP::setupPipe()::{lambda(int&, int)#3}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation) (1x)
 68 ( 0.00%) 21 ( 0.00%) 20 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_handler<bool (int&, int), PipeDP::setupPipe()::{lambda(int&, int)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation) (1x)
 68 ( 0.00%) 21 ( 0.00%) 20 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_handler<bool (int&, int), PipeDP::setupPipe()::{lambda(int&, int)#2}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation) (1x)
 68 ( 0.00%) 21 ( 0.00%) 20 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_handler<bool (int&, int), PipeDP::setupPipe()::{lambda(int&, int)#4}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation) (1x)
 68 ( 0.00%) 21 ( 0.00%) 20 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_handler<bool (int&, int), PipeDP::setupPipe()::{lambda(int&, int)#5}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation) (1x)
 30 ( 0.00%) 20 ( 0.00%)  .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
 50 ( 0.00%) 20 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .               bool _M_empty() const { return !_M_manager; }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               using _Manager_type
  .           .           .          .          .          .          .          .          .                 = bool (*)(_Any_data&, const _Any_data&, _Manager_operation);
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               _Any_data     _M_functor{};
  .           .           .          .          .          .          .          .          .               _Manager_type _M_manager{};
  .           .           .          .          .          .          .          .          .             };
  .           .           .          .          .          .          .          .          .           
-- line 255 ----------------------------------------
-- line 259 ----------------------------------------
  .           .           .          .          .          .          .          .          .             template<typename _Res, typename _Functor, typename... _ArgTypes>
  .           .           .          .          .          .          .          .          .               class _Function_handler<_Res(_ArgTypes...), _Functor>
  .           .           .          .          .          .          .          .          .               : public _Function_base::_Base_manager<_Functor>
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 using _Base = _Function_base::_Base_manager<_Functor>;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               public:
  .           .           .          .          .          .          .          .          .                 static bool
 80 ( 0.00%)  0          50 ( 0.02%) 7 ( 0.18%) 0          0          7 ( 0.23%) .          .                 _M_manager(_Any_data& __dest, const _Any_data& __source,
  .           .           .          .          .          .          .          .          .           		 _Manager_operation __op)
  .           .           .          .          .          .          .          .          .                 {
 60 ( 0.00%) 10 ( 0.00%)  0          1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	switch (__op)
  .           .           .          .          .          .          .          .          .           	  {
  .           .           .          .          .          .          .          .          .           #if __cpp_rtti
  .           .           .          .          .          .          .          .          .           	  case __get_type_info:
  .           .           .          .          .          .          .          .          .           	    __dest._M_access<const type_info*>() = &typeid(_Functor);
  .           .           .          .          .          .          .          .          .           	    break;
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           	  case __get_functor_ptr:
  .           .           .          .          .          .          .          .          .           	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
  .           .           .          .          .          .          .          .          .           	    break;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	  default:
 60 ( 0.00%) 30 ( 0.00%) 10 ( 0.00%) 5 ( 0.13%) 0          0          5 ( 0.16%) .          .           	    _Base::_M_manager(__dest, __source, __op);
171 ( 0.01%) 55 ( 0.01%) 55 ( 0.02%) 6 ( 0.16%) 0          0          6 ( 0.20%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_base::_Base_manager<PipeDP::setupPipe()::{lambda(int&, int)#4}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation) (2x)
  .           .           .          .          .          .          .          .          .           	  }
 10 ( 0.00%)  .           .          .          .          .          .          .          .           	return false;
 30 ( 0.00%) 30 ( 0.00%)  0          1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 static _Res
  .           .           .          .          .          .          .          .          .                 _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
  .           .           .          .          .          .          .          .          .           				     std::forward<_ArgTypes>(__args)...);
  .           .           .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
-- line 293 ----------------------------------------
-- line 326 ----------------------------------------
  .           .           .          .          .          .          .          .          .               { };
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             /**
  .           .           .          .          .          .          .          .          .              *  @brief Polymorphic function wrapper.
  .           .           .          .          .          .          .          .          .              *  @ingroup functors
  .           .           .          .          .          .          .          .          .              *  @since C++11
  .           .           .          .          .          .          .          .          .              */
  .           .           .          .          .          .          .          .          .             template<typename _Res, typename... _ArgTypes>
110 ( 0.00%) 30 ( 0.00%) 30 ( 0.01%) .          .          .          .          .          .               class function<_Res(_ArgTypes...)>
500 ( 0.02%) 165 ( 0.03%) 125 ( 0.05%) 4 ( 0.10%) 0          0          4 ( 0.13%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_base::~_Function_base() (10x)
  .           .           .          .          .          .          .          .          .               : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
  .           .           .          .          .          .          .          .          .                 private _Function_base
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 // Equivalent to std::decay_t except that it produces an invalid type
  .           .           .          .          .          .          .          .          .                 // if the decayed type is the current specialization of std::function.
  .           .           .          .          .          .          .          .          .                 template<typename _Func,
  .           .           .          .          .          .          .          .          .           	       bool _Self = is_same<__remove_cvref_t<_Func>, function>::value>
  .           .           .          .          .          .          .          .          .           	using _Decay_t
-- line 342 ----------------------------------------
-- line 360 ----------------------------------------
  .           .           .          .          .          .          .          .          .                 typedef _Res result_type;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 // [3.7.2.1] construct/copy/destroy
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief Default construct creates an empty function call wrapper.
  .           .           .          .          .          .          .          .          .                  *  @post `!(bool)*this`
  .           .           .          .          .          .          .          .          .                  */
 25 ( 0.00%)  0          10 ( 0.00%) .          .          .          .          .          .                 function() noexcept
 60 ( 0.00%) 25 ( 0.00%) 25 ( 0.01%) 5 ( 0.13%) 0          0          1 ( 0.03%) .          .                 : _Function_base() { }
 60 ( 0.00%) 20 ( 0.00%) 25 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_base::_Function_base() (5x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief Creates an empty function call wrapper.
  .           .           .          .          .          .          .          .          .                  *  @post @c !(bool)*this
  .           .           .          .          .          .          .          .          .                  */
  .           .           .          .          .          .          .          .          .                 function(nullptr_t) noexcept
  .           .           .          .          .          .          .          .          .                 : _Function_base() { }
  .           .           .          .          .          .          .          .          .           
-- line 377 ----------------------------------------
-- line 378 ----------------------------------------
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief %Function copy constructor.
  .           .           .          .          .          .          .          .          .                  *  @param __x A %function object with identical call signature.
  .           .           .          .          .          .          .          .          .                  *  @post `bool(*this) == bool(__x)`
  .           .           .          .          .          .          .          .          .                  *
  .           .           .          .          .          .          .          .          .                  *  The newly-created %function contains a copy of the target of
  .           .           .          .          .          .          .          .          .                  *  `__x` (if it has one).
  .           .           .          .          .          .          .          .          .                  */
 35 ( 0.00%)  0          20 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 function(const function& __x)
 45 ( 0.00%) 15 ( 0.00%) 25 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 : _Function_base()
 60 ( 0.00%) 20 ( 0.00%) 25 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_base::_Function_base() (5x)
  .           .           .          .          .          .          .          .          .                 {
 25 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           	if (static_cast<bool>(__x))
105 ( 0.00%) 35 ( 0.01%) 25 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::operator bool() const (5x)
  .           .           .          .          .          .          .          .          .           	  {
 40 ( 0.00%) 20 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
151 ( 0.01%) 48 ( 0.01%) 47 ( 0.02%) 13 ( 0.34%) 0          0          13 ( 0.43%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_handler<bool (int&, int), PipeDP::setupPipe()::{lambda(int&, int)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation) (1x)
151 ( 0.01%) 48 ( 0.01%) 47 ( 0.02%) 11 ( 0.29%) 0          0          11 ( 0.36%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_handler<bool (int&, int), PipeDP::setupPipe()::{lambda(int&, int)#3}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation) (1x)
151 ( 0.01%) 48 ( 0.01%) 47 ( 0.02%) 10 ( 0.26%) 0          0          10 ( 0.33%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_handler<bool (int&, int), PipeDP::setupPipe()::{lambda(int&, int)#2}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation) (1x)
151 ( 0.01%) 48 ( 0.01%) 47 ( 0.02%) 9 ( 0.24%) 0          0          9 ( 0.29%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_handler<bool (int&, int), PipeDP::setupPipe()::{lambda(int&, int)#4}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation) (1x)
151 ( 0.01%) 48 ( 0.01%) 47 ( 0.02%) 8 ( 0.21%) 0          0          8 ( 0.26%) .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_handler<bool (int&, int), PipeDP::setupPipe()::{lambda(int&, int)#5}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation) (1x)
 20 ( 0.00%) 15 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           	    _M_invoker = __x._M_invoker;
 20 ( 0.00%) 15 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           	    _M_manager = __x._M_manager;
  .           .           .          .          .          .          .          .          .           	  }
 25 ( 0.00%) 15 ( 0.00%)  .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief %Function move constructor.
  .           .           .          .          .          .          .          .          .                  *  @param __x A %function object rvalue with identical call signature.
  .           .           .          .          .          .          .          .          .                  *
  .           .           .          .          .          .          .          .          .                  *  The newly-created %function contains the target of `__x`
  .           .           .          .          .          .          .          .          .                  *  (if it has one).
  .           .           .          .          .          .          .          .          .                  */
-- line 403 ----------------------------------------
-- line 427 ----------------------------------------
  .           .           .          .          .          .          .          .          .                  *
  .           .           .          .          .          .          .          .          .                  *  If `__f` is a non-null function pointer or an object of type
  .           .           .          .          .          .          .          .          .                  *  `reference_wrapper<F>`, this function will not throw.
  .           .           .          .          .          .          .          .          .                  */
  .           .           .          .          .          .          .          .          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .           .           .          .          .          .          .          .          .                 // 2774. std::function construction vs assignment
  .           .           .          .          .          .          .          .          .                 template<typename _Functor,
  .           .           .          .          .          .          .          .          .           	       typename _Constraints = _Requires<_Callable<_Functor>>>
 25 ( 0.00%)  0          15 ( 0.01%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           	function(_Functor&& __f)
  .           .           .          .          .          .          .          .          .           	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
 45 ( 0.00%) 15 ( 0.00%) 25 ( 0.01%) 4 ( 0.10%) 0          0          4 ( 0.13%) .          .           	: _Function_base()
 12 ( 0.00%)  4 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_base::_Function_base() (1x)
  .           .           .          .          .          .          .          .          .           	{
  .           .           .          .          .          .          .          .          .           	  static_assert(is_copy_constructible<__decay_t<_Functor>>::value,
  .           .           .          .          .          .          .          .          .           	      "std::function target must be copy-constructible");
  .           .           .          .          .          .          .          .          .           	  static_assert(is_constructible<__decay_t<_Functor>, _Functor>::value,
  .           .           .          .          .          .          .          .          .           	      "std::function target must be constructible from the "
  .           .           .          .          .          .          .          .          .           	      "constructor argument");
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	  using _My_handler = _Handler<_Functor>;
  .           .           .          .          .          .          .          .          .           
 25 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           	  if (_My_handler::_M_not_empty_function(__f))
  6 ( 0.00%)  2 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:bool std::_Function_base::_Base_manager<PipeDP::setupPipe()::{lambda(int&, int)#4}>::_M_not_empty_function<PipeDP::setupPipe()::{lambda(int&, int)#4}>(PipeDP::setupPipe()::{lambda(int&, int)#4} const&) (1x)
  .           .           .          .          .          .          .          .          .           	    {
 40 ( 0.00%) 10 ( 0.00%) 10 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           	      _My_handler::_M_init_functor(_M_functor,
 65 ( 0.00%) 22 ( 0.00%) 22 ( 0.01%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/std_function.h:void std::_Function_base::_Base_manager<PipeDP::setupPipe()::{lambda(int&, int)#4}>::_M_init_functor<PipeDP::setupPipe()::{lambda(int&, int)#4}>(std::_Any_data&, PipeDP::setupPipe()::{lambda(int&, int)#4}&&) (1x)
  6 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:PipeDP::setupPipe()::{lambda(int&, int)#4}&& std::forward<PipeDP::setupPipe()::{lambda(int&, int)#4}>(std::remove_reference<PipeDP::setupPipe()::{lambda(int&, int)#4}>::type&) (1x)
  .           .           .          .          .          .          .          .          .           					   std::forward<_Functor>(__f));
 15 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	      _M_invoker = &_My_handler::_M_invoke;
 15 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           	      _M_manager = &_My_handler::_M_manager;
  .           .           .          .          .          .          .          .          .           	    }
 15 ( 0.00%) 10 ( 0.00%)  0          1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	}
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief %Function assignment operator.
  .           .           .          .          .          .          .          .          .                  *  @param __x A %function with identical call signature.
  .           .           .          .          .          .          .          .          .                  *  @post @c (bool)*this == (bool)x
  .           .           .          .          .          .          .          .          .                  *  @returns @c *this
  .           .           .          .          .          .          .          .          .                  *
  .           .           .          .          .          .          .          .          .                  *  The target of @a __x is copied to @c *this. If @a __x has no
  .           .           .          .          .          .          .          .          .                  *  target, then @c *this will be empty.
  .           .           .          .          .          .          .          .          .                  *
  .           .           .          .          .          .          .          .          .                  *  If @a __x targets a function pointer or a reference to a function
  .           .           .          .          .          .          .          .          .                  *  object, then this operation will not throw an %exception.
  .           .           .          .          .          .          .          .          .                  */
  .           .           .          .          .          .          .          .          .                 function&
 45 ( 0.00%)  5 ( 0.00%) 20 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 operator=(const function& __x)
  .           .           .          .          .          .          .          .          .                 {
 65 ( 0.00%) 10 ( 0.00%) 15 ( 0.01%) .          .          .          .          .          .           	function(__x).swap(*this);
1,130 ( 0.04%) 380 ( 0.06%) 350 ( 0.15%) 54 ( 1.41%) 0          0          54 ( 1.77%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::function(std::function<bool (int&, int)> const&) (5x)
965 ( 0.04%) 370 ( 0.06%) 285 ( 0.12%) 7 ( 0.18%) 0          0          7 ( 0.23%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::swap(std::function<bool (int&, int)>&) (5x)
115 ( 0.00%) 35 ( 0.01%) 25 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::~function() (5x)
  5 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .          .           	return *this;
 25 ( 0.00%) 20 ( 0.00%)  .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief %Function move-assignment operator.
  .           .           .          .          .          .          .          .          .                  *  @param __x A %function rvalue with identical call signature.
  .           .           .          .          .          .          .          .          .                  *  @returns @c *this
  .           .           .          .          .          .          .          .          .                  *
  .           .           .          .          .          .          .          .          .                  *  The target of @a __x is moved to @c *this. If @a __x has no
  .           .           .          .          .          .          .          .          .                  *  target, then @c *this will be empty.
-- line 481 ----------------------------------------
-- line 547 ----------------------------------------
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief Swap the targets of two %function objects.
  .           .           .          .          .          .          .          .          .                  *  @param __x A %function with identical call signature.
  .           .           .          .          .          .          .          .          .                  *
  .           .           .          .          .          .          .          .          .                  *  Swap the targets of @c this function object and @a __f. This
  .           .           .          .          .          .          .          .          .                  *  function will not throw an %exception.
  .           .           .          .          .          .          .          .          .                  */
 30 ( 0.00%)  0          15 ( 0.01%) .          .          .          .          .          .                 void swap(function& __x) noexcept
  .           .           .          .          .          .          .          .          .                 {
 25 ( 0.00%) 10 ( 0.00%)  5 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	std::swap(_M_functor, __x._M_functor);
295 ( 0.01%) 120 ( 0.02%) 95 ( 0.04%) 3 ( 0.08%) 0          0          3 ( 0.10%) .          .           => /usr/include/c++/11/bits/move.h:std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&) (5x)
 35 ( 0.00%) 10 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           	std::swap(_M_manager, __x._M_manager);
265 ( 0.01%) 105 ( 0.02%) 80 ( 0.03%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/move.h:std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)) (5x)
 35 ( 0.00%) 10 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           	std::swap(_M_invoker, __x._M_invoker);
265 ( 0.01%) 105 ( 0.02%) 80 ( 0.03%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/move.h:std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data const&, int&, int&&)> >, std::is_move_constructible<bool (*)(std::_Any_data const&, int&, int&&)>, std::is_move_assignable<bool (*)(std::_Any_data const&, int&, int&&)> >::value, void>::type std::swap<bool (*)(std::_Any_data const&, int&, int&&)>(bool (*&)(std::_Any_data const&, int&, int&&), bool (*&)(std::_Any_data const&, int&, int&&)) (5x)
 15 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 // [3.7.2.3] function capacity
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief Determine if the %function wrapper has a target.
  .           .           .          .          .          .          .          .          .                  *
  .           .           .          .          .          .          .          .          .                  *  @return @c true when this %function object contains a target,
  .           .           .          .          .          .          .          .          .                  *  or @c false when it is empty.
  .           .           .          .          .          .          .          .          .                  *
  .           .           .          .          .          .          .          .          .                  *  This function will not throw an %exception.
  .           .           .          .          .          .          .          .          .                  */
 25 ( 0.00%)  0          10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 explicit operator bool() const noexcept
 30 ( 0.00%) 15 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .                 { return !_M_empty(); }
 50 ( 0.00%) 20 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_function.h:std::_Function_base::_M_empty() const (5x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 // [3.7.2.4] function invocation
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief Invokes the function targeted by @c *this.
  .           .           .          .          .          .          .          .          .                  *  @returns the result of the target.
  .           .           .          .          .          .          .          .          .                  *  @throws bad_function_call when @c !(bool)*this
  .           .           .          .          .          .          .          .          .                  *
-- line 581 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/move.h
--------------------------------------------------------------------------------
Ir           Dr           Dw           I1mr       D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 41 ----------------------------------------
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .             // Used, in C++03 mode too, by allocators, etc.
  .            .            .          .          .          .          .          .          .             /**
  .            .            .          .          .          .          .          .          .              *  @brief Same as C++11 std::addressof
  .            .            .          .          .          .          .          .          .              *  @ingroup utilities
  .            .            .          .          .          .          .          .          .              */
  .            .            .          .          .          .          .          .          .             template<typename _Tp>
  .            .            .          .          .          .          .          .          .               inline _GLIBCXX_CONSTEXPR _Tp*
 63 ( 0.00%)   0           34 ( 0.01%) 3 ( 0.08%) 0          0          2 ( 0.07%) .          .               __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 51 ( 0.00%)  51 ( 0.01%)   .          .          .          .          .          .          .               { return __builtin_addressof(__r); }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .           #if __cplusplus >= 201103L
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .           _GLIBCXX_END_NAMESPACE_VERSION
  .            .            .          .          .          .          .          .          .           } // namespace
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .           #include <type_traits> // Brings in std::declval too.
  .            .            .          .          .          .          .          .          .           
-- line 58 ----------------------------------------
-- line 69 ----------------------------------------
  .            .            .          .          .          .          .          .          .              *  @brief  Forward an lvalue.
  .            .            .          .          .          .          .          .          .              *  @return The parameter cast to the specified type.
  .            .            .          .          .          .          .          .          .              *
  .            .            .          .          .          .          .          .          .              *  This function is used to implement "perfect forwarding".
  .            .            .          .          .          .          .          .          .              */
  .            .            .          .          .          .          .          .          .             template<typename _Tp>
  .            .            .          .          .          .          .          .          .               _GLIBCXX_NODISCARD
  .            .            .          .          .          .          .          .          .               constexpr _Tp&&
875 ( 0.03%)   0          450 ( 0.19%) 4 ( 0.10%) 0          0          4 ( 0.13%) .          .               forward(typename std::remove_reference<_Tp>::type& __t) noexcept
675 ( 0.03%) 675 ( 0.11%)   0          4 ( 0.10%) 0          0          4 ( 0.13%) .          .               { return static_cast<_Tp&&>(__t); }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .             /**
  .            .            .          .          .          .          .          .          .              *  @brief  Forward an rvalue.
  .            .            .          .          .          .          .          .          .              *  @return The parameter cast to the specified type.
  .            .            .          .          .          .          .          .          .              *
  .            .            .          .          .          .          .          .          .              *  This function is used to implement "perfect forwarding".
  .            .            .          .          .          .          .          .          .              */
  .            .            .          .          .          .          .          .          .             template<typename _Tp>
-- line 86 ----------------------------------------
-- line 96 ----------------------------------------
  .            .            .          .          .          .          .          .          .             /**
  .            .            .          .          .          .          .          .          .              *  @brief  Convert a value to an rvalue.
  .            .            .          .          .          .          .          .          .              *  @param  __t  A thing of arbitrary type.
  .            .            .          .          .          .          .          .          .              *  @return The parameter cast to an rvalue-reference to allow moving it.
  .            .            .          .          .          .          .          .          .             */
  .            .            .          .          .          .          .          .          .             template<typename _Tp>
  .            .            .          .          .          .          .          .          .               _GLIBCXX_NODISCARD
  .            .            .          .          .          .          .          .          .               constexpr typename std::remove_reference<_Tp>::type&&
276 ( 0.01%)   0          138 ( 0.06%) 6 ( 0.16%) 0          6 ( 0.21%) 4 ( 0.13%) 0          6 ( 0.27%)      move(_Tp&& __t) noexcept
207 ( 0.01%) 207 ( 0.03%)   .          .          .          .          .          .          .               { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .             template<typename _Tp>
  .            .            .          .          .          .          .          .          .               struct __move_if_noexcept_cond
  .            .            .          .          .          .          .          .          .               : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
  .            .            .          .          .          .          .          .          .                               is_copy_constructible<_Tp>>::type { };
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .             /**
-- line 113 ----------------------------------------
-- line 188 ----------------------------------------
  .            .            .          .          .          .          .          .          .               inline
  .            .            .          .          .          .          .          .          .           #if __cplusplus >= 201103L
  .            .            .          .          .          .          .          .          .               typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
  .            .            .          .          .          .          .          .          .           			      is_move_constructible<_Tp>,
  .            .            .          .          .          .          .          .          .           			      is_move_assignable<_Tp>>::value>::type
  .            .            .          .          .          .          .          .          .           #else
  .            .            .          .          .          .          .          .          .               void
  .            .            .          .          .          .          .          .          .           #endif
135 ( 0.01%)  15 ( 0.00%)  60 ( 0.03%) 3 ( 0.08%) 0          0          3 ( 0.10%) .          .               swap(_Tp& __a, _Tp& __b)
  .            .            .          .          .          .          .          .          .               _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
  .            .            .          .          .          .          .          .          .           				is_nothrow_move_assignable<_Tp>>::value)
  .            .            .          .          .          .          .          .          .               {
  .            .            .          .          .          .          .          .          .           #if __cplusplus < 201103L
  .            .            .          .          .          .          .          .          .                 // concept requirements
  .            .            .          .          .          .          .          .          .                 __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
  .            .            .          .          .          .          .          .          .           #endif
 85 ( 0.00%)  35 ( 0.01%)  35 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _Tp __tmp = _GLIBCXX_MOVE(__a);
 35 ( 0.00%)  15 ( 0.00%)  10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)) (5x)
100 ( 0.00%)  50 ( 0.01%)  35 ( 0.01%) .          .          .          .          .          .                 __a = _GLIBCXX_MOVE(__b);
 35 ( 0.00%)  15 ( 0.00%)  10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)) (5x)
100 ( 0.00%)  35 ( 0.01%)  35 ( 0.01%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 __b = _GLIBCXX_MOVE(__tmp);
 35 ( 0.00%)  15 ( 0.00%)  10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)) (5x)
 90 ( 0.00%)  60 ( 0.01%)   .          .          .          .          .          .          .               }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .             // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .            .            .          .          .          .          .          .          .             // DR 809. std::swap should be overloaded for array types.
  .            .            .          .          .          .          .          .          .             /// Swap the contents of two arrays.
  .            .            .          .          .          .          .          .          .             template<typename _Tp, size_t _Nm>
  .            .            .          .          .          .          .          .          .               _GLIBCXX20_CONSTEXPR
  .            .            .          .          .          .          .          .          .               inline
  .            .            .          .          .          .          .          .          .           #if __cplusplus >= 201103L
-- line 215 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: TaskQueue.cpp
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr        D1mr       D1mw       ILmr       DLmr DLmw 

-- line 28 ----------------------------------------
  .           .           .           .          .          .          .          .          .               return data.task(data.arg1, data.arg2); // Execute the function with stored arguments
  .           .           .           .          .          .          .          .          .           }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           int TaskQueue::size(){
  .           .           .           .          .          .          .          .          .               return this->taskQueue.size();
  .           .           .           .          .          .          .          .          .           }
  .           .           .           .          .          .          .          .          .           
100 ( 0.00%) 30 ( 0.00%) 30 ( 0.01%) 11 ( 0.29%) 0          0          2 ( 0.07%) .          .           bool TaskQueue::isEmpty() const{ return taskQueue.empty(); }
370 ( 0.01%) 130 ( 0.02%) 90 ( 0.04%) 12 ( 0.31%) 2 ( 0.02%) 0          4 ( 0.13%) .          .           => /usr/include/c++/11/bits/stl_queue.h:std::queue<TaskQueue::TaskData, std::deque<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> > >::empty() const (10x)
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           void TaskQueue::clear() {
  .           .           .           .          .          .          .          .          .               while (!taskQueue.empty()) {
  .           .           .           .          .          .          .          .          .                   taskQueue.pop();
  .           .           .           .          .          .          .          .          .               }
 21 ( 0.00%)  6 ( 0.00%)  5 ( 0.00%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .           }127 ( 0.01%) 31 ( 0.01%) 27 ( 0.01%)  1 ( 0.03%) 0          1 ( 0.04%) 1 ( 0.03%) 0          1 ( 0.04%)  => TaskQueue.cpp:__static_initialization_and_destruction_0(int, int) (1x)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/vector.tcc
--------------------------------------------------------------------------------
Ir          Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 58 ----------------------------------------
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           namespace std _GLIBCXX_VISIBILITY(default)
 .           .           .          .          .          .          .          .          .           {
 .           .           .          .          .          .          .          .          .           _GLIBCXX_BEGIN_NAMESPACE_VERSION
 .           .           .          .          .          .          .          .          .           _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             template<typename _Tp, typename _Alloc>
 .           .           .          .          .          .          .          .          .               void
 6 ( 0.00%)  0           3 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               vector<_Tp, _Alloc>::
 .           .           .          .          .          .          .          .          .               reserve(size_type __n)
 .           .           .          .          .          .          .          .          .               {
 7 ( 0.00%)  2 ( 0.00%)  1 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 if (__n > this->max_size())
85 ( 0.00%) 28 ( 0.00%) 24 ( 0.01%) 8 ( 0.21%) 0          0          8 ( 0.26%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::max_size() const (1x)
 .           .           .          .          .          .          .          .          .           	__throw_length_error(__N("vector::reserve"));
 7 ( 0.00%)  2 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .                 if (this->capacity() < __n)
13 ( 0.00%)  6 ( 0.00%)  2 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::capacity() const (1x)
 .           .           .          .          .          .          .          .          .           	{
 4 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           	  const size_type __old_size = size();
13 ( 0.00%)  6 ( 0.00%)  2 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::size() const (1x)
 .           .           .          .          .          .          .          .          .           	  pointer __tmp;
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
 .           .           .          .          .          .          .          .          .           	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 .           .           .          .          .          .          .          .          .           	    {
 6 ( 0.00%)  2 ( 0.00%)  2 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	      __tmp = this->_M_allocate(__n);
264 ( 0.01%) 55 ( 0.01%) 46 ( 0.02%) 6 ( 0.16%) 0          1 ( 0.04%) 4 ( 0.13%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::_M_allocate(unsigned long) (1x)
 7 ( 0.00%)  5 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .           	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
104 ( 0.00%) 36 ( 0.01%) 36 ( 0.02%) 4 ( 0.10%) 0          0          4 ( 0.13%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::_S_relocate(std::shared_ptr<ActiveObjectDP>*, std::shared_ptr<ActiveObjectDP>*, std::shared_ptr<ActiveObjectDP>*, std::allocator<std::shared_ptr<ActiveObjectDP> >&) (1x)
 4 ( 0.00%)  1 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .           			  __tmp, _M_get_Tp_allocator());
 7 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::_M_get_Tp_allocator() (1x)
 .           .           .          .          .          .          .          .          .           	    }
 .           .           .          .          .          .          .          .          .           	  else
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           	    {
 .           .           .          .          .          .          .          .          .           	      __tmp = _M_allocate_and_copy(__n,
 .           .           .          .          .          .          .          .          .           		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
 .           .           .          .          .          .          .          .          .           		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
 .           .           .          .          .          .          .          .          .           	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 .           .           .          .          .          .          .          .          .           			    _M_get_Tp_allocator());
 .           .           .          .          .          .          .          .          .           	    }
 .           .           .          .          .          .          .          .          .           	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
 8 ( 0.00%)  3 ( 0.00%)  1 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	  _M_deallocate(this->_M_impl._M_start,
12 ( 0.00%)  3 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::_M_deallocate(std::shared_ptr<ActiveObjectDP>*, unsigned long) (1x)
 2 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .          .           			this->_M_impl._M_end_of_storage
 5 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .          .           			- this->_M_impl._M_start);
 3 ( 0.00%)  2 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .           	  this->_M_impl._M_start = __tmp;
 7 ( 0.00%)  3 ( 0.00%)  1 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	  this->_M_impl._M_finish = __tmp + __old_size;
 7 ( 0.00%)  4 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .           	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 .           .           .          .          .          .          .          .          .           	}
 3 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .          .               }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
 .           .           .          .          .          .          .          .          .             template<typename _Tp, typename _Alloc>
 .           .           .          .          .          .          .          .          .               template<typename... _Args>
 .           .           .          .          .          .          .          .          .           #if __cplusplus > 201402L
 .           .           .          .          .          .          .          .          .                 typename vector<_Tp, _Alloc>::reference
 .           .           .          .          .          .          .          .          .           #else
 .           .           .          .          .          .          .          .          .                 void
 .           .           .          .          .          .          .          .          .           #endif
35 ( 0.00%)  0          20 ( 0.01%) .          .          .          .          .          .                 vector<_Tp, _Alloc>::
 .           .           .          .          .          .          .          .          .                 emplace_back(_Args&&... __args)
 .           .           .          .          .          .          .          .          .                 {
30 ( 0.00%) 20 ( 0.00%)  .          .          .          .          .          .          .           	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 .           .           .          .          .          .          .          .          .           	  {
 .           .           .          .          .          .          .          .          .           	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
50 ( 0.00%) 20 ( 0.00%) 10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
710 ( 0.03%) 240 ( 0.04%) 225 ( 0.10%) 4 ( 0.10%) 0          1 ( 0.04%) 4 ( 0.13%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::shared_ptr<ActiveObjectDP> > >::construct<std::shared_ptr<ActiveObjectDP>, std::shared_ptr<ActiveObjectDP> >(std::allocator<std::shared_ptr<ActiveObjectDP> >&, std::shared_ptr<ActiveObjectDP>*, std::shared_ptr<ActiveObjectDP>&&) (5x)
35 ( 0.00%) 15 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::shared_ptr<ActiveObjectDP>&& std::forward<std::shared_ptr<ActiveObjectDP> >(std::remove_reference<std::shared_ptr<ActiveObjectDP> >::type&) (5x)
 .           .           .          .          .          .          .          .          .           				     std::forward<_Args>(__args)...);
30 ( 0.00%) 15 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           	    ++this->_M_impl._M_finish;
 .           .           .          .          .          .          .          .          .           	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 .           .           .          .          .          .          .          .          .           	  }
 .           .           .          .          .          .          .          .          .           	else
 .           .           .          .          .          .          .          .          .           	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 .           .           .          .          .          .          .          .          .           #if __cplusplus > 201402L
15 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	return back();
520 ( 0.02%) 180 ( 0.03%) 140 ( 0.06%) 21 ( 0.55%) 0          0          9 ( 0.29%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::back() (5x)
 .           .           .          .          .          .          .          .          .           #endif
15 ( 0.00%) 15 ( 0.00%)  .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             template<typename _Tp, typename _Alloc>
 .           .           .          .          .          .          .          .          .               typename vector<_Tp, _Alloc>::iterator
 .           .           .          .          .          .          .          .          .               vector<_Tp, _Alloc>::
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
 .           .           .          .          .          .          .          .          .               insert(const_iterator __position, const value_type& __x)
 .           .           .          .          .          .          .          .          .           #else
-- line 133 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/std_mutex.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 57 ----------------------------------------
  .           .           .          .          .          .          .          .          .             class __mutex_base
  .           .           .          .          .          .          .          .          .             {
  .           .           .          .          .          .          .          .          .             protected:
  .           .           .          .          .          .          .          .          .               typedef __gthread_mutex_t			__native_type;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #ifdef __GTHREAD_MUTEX_INIT
  .           .           .          .          .          .          .          .          .               __native_type  _M_mutex = __GTHREAD_MUTEX_INIT;
  .           .           .          .          .          .          .          .          .           
104 ( 0.00%) 24 ( 0.00%) 56 ( 0.02%) 4 ( 0.10%) 0          3 ( 0.11%) 0          0          3 ( 0.13%)      constexpr __mutex_base() noexcept = default;
  .           .           .          .          .          .          .          .          .           #else
  .           .           .          .          .          .          .          .          .               __native_type  _M_mutex;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               __mutex_base() noexcept
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 // XXX EAGAIN, ENOMEM, EPERM, EBUSY(may), EINVAL(may)
  .           .           .          .          .          .          .          .          .                 __GTHREAD_MUTEX_INIT_FUNCTION(&_M_mutex);
  .           .           .          .          .          .          .          .          .               }
-- line 73 ----------------------------------------
-- line 83 ----------------------------------------
  .           .           .          .          .          .          .          .          .             class mutex : private __mutex_base
  .           .           .          .          .          .          .          .          .             {
  .           .           .          .          .          .          .          .          .             public:
  .           .           .          .          .          .          .          .          .               typedef __native_type* 			native_handle_type;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #ifdef __GTHREAD_MUTEX_INIT
  .           .           .          .          .          .          .          .          .               constexpr
  .           .           .          .          .          .          .          .          .           #endif
 88 ( 0.00%) 24 ( 0.00%) 24 ( 0.01%) 5 ( 0.13%) 0          0          1 ( 0.03%) .          .               mutex() noexcept = default;
104 ( 0.00%) 24 ( 0.00%) 56 ( 0.02%) 4 ( 0.10%) 0          3 ( 0.11%) 0          0          3 ( 0.13%)  => /usr/include/c++/11/bits/std_mutex.h:std::__mutex_base::__mutex_base() (8x)
  .           .           .          .          .          .          .          .          .               ~mutex() = default;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               mutex(const mutex&) = delete;
  .           .           .          .          .          .          .          .          .               mutex& operator=(const mutex&) = delete;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               void
 25 ( 0.00%)  0          10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               lock()
  .           .           .          .          .          .          .          .          .               {
 20 ( 0.00%)  5 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .                 int __e = __gthread_mutex_lock(&_M_mutex);
285 ( 0.01%) 70 ( 0.01%) 45 ( 0.02%) 15 ( 0.39%) 1 ( 0.01%) 0          2 ( 0.07%) .          .           => /usr/include/x86_64-linux-gnu/c++/11/bits/gthr-default.h:__gthread_mutex_lock(pthread_mutex_t*) (5x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 // EINVAL, EAGAIN, EBUSY, EINVAL, EDEADLK(may)
 10 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .          .                 if (__e)
  .           .           .          .          .          .          .          .          .           	__throw_system_error(__e);
 15 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               bool
  .           .           .          .          .          .          .          .          .               try_lock() noexcept
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 // XXX EINVAL, EAGAIN, EBUSY
  .           .           .          .          .          .          .          .          .                 return !__gthread_mutex_trylock(&_M_mutex);
  .           .           .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
-- line 113 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/std_thread.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 60 ----------------------------------------
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             /// thread
  .           .           .          .          .          .          .          .          .             class thread
  .           .           .          .          .          .          .          .          .             {
  .           .           .          .          .          .          .          .          .             public:
  .           .           .          .          .          .          .          .          .           #ifdef _GLIBCXX_HAS_GTHREADS
  .           .           .          .          .          .          .          .          .               // Abstract base class for types that wrap arbitrary functors to be
  .           .           .          .          .          .          .          .          .               // invoked in the new thread of execution.
 60 ( 0.00%) 18 ( 0.00%) 18 ( 0.01%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .               struct _State
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 virtual ~_State();
  .           .           .          .          .          .          .          .          .                 virtual void _M_run() = 0;
  .           .           .          .          .          .          .          .          .               };
  .           .           .          .          .          .          .          .          .               using _State_ptr = unique_ptr<_State>;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               using native_handle_type = __gthread_t;
  .           .           .          .          .          .          .          .          .           #else
-- line 76 ----------------------------------------
-- line 78 ----------------------------------------
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               /// thread::id
  .           .           .          .          .          .          .          .          .               class id
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 native_handle_type	_M_thread;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               public:
108 ( 0.00%) 36 ( 0.01%) 36 ( 0.02%) 6 ( 0.16%) 0          0          1 ( 0.03%) .          .                 id() noexcept : _M_thread() { }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 explicit
 55 ( 0.00%) 20 ( 0.00%) 20 ( 0.01%) .          .          .          .          .          .                 id(native_handle_type __id) : _M_thread(__id) { }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               private:
  .           .           .          .          .          .          .          .          .                 friend class thread;
  .           .           .          .          .          .          .          .          .                 friend struct hash<id>;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 friend bool
  .           .           .          .          .          .          .          .          .                 operator==(id __x, id __y) noexcept;
  .           .           .          .          .          .          .          .          .           
-- line 97 ----------------------------------------
-- line 119 ----------------------------------------
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             public:
  .           .           .          .          .          .          .          .          .               thread() noexcept = default;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #ifdef _GLIBCXX_HAS_GTHREADS
  .           .           .          .          .          .          .          .          .               template<typename _Callable, typename... _Args,
  .           .           .          .          .          .          .          .          .           	     typename = _Require<__not_same<_Callable>>>
  .           .           .          .          .          .          .          .          .                 explicit
 72 ( 0.00%)  6 ( 0.00%) 42 ( 0.02%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 thread(_Callable&& __f, _Args&&... __args)
 18 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%) .          .          .          .          .          .                 {
 45 ( 0.00%) 15 ( 0.00%) 15 ( 0.01%) 3 ( 0.08%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_thread.h:std::thread::id::id() (5x)
  .           .           .          .          .          .          .          .          .           	static_assert( __is_invocable<typename decay<_Callable>::type,
  .           .           .          .          .          .          .          .          .           				      typename decay<_Args>::type...>::value,
  .           .           .          .          .          .          .          .          .           	  "std::thread arguments must be invocable after conversion to rvalues"
  .           .           .          .          .          .          .          .          .           	  );
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #ifdef GTHR_ACTIVE_PROXY
  .           .           .          .          .          .          .          .          .           	// Create a reference to pthread_create, not just the gthr weak symbol.
  .           .           .          .          .          .          .          .          .           	auto __depend = reinterpret_cast<void(*)()>(&pthread_create);
  .           .           .          .          .          .          .          .          .           #else
  6 ( 0.00%)  0           6 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	auto __depend = nullptr;
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           	using _Wrapper = _Call_wrapper<_Callable, _Args...>;
  .           .           .          .          .          .          .          .          .           	// Create a call wrapper with DECAY_COPY(__f) as its target object
  .           .           .          .          .          .          .          .          .           	// and DECAY_COPY(__args)... as its bound argument entities.
120 ( 0.00%) 12 ( 0.00%) 36 ( 0.02%) 3 ( 0.08%) 0          0          2 ( 0.07%) .          .           	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
7,727 ( 0.31%) 1,916 ( 0.32%) 1,408 ( 0.60%) 167 ( 4.37%) 48 ( 0.37%) 118 ( 4.14%) 106 ( 3.47%) 20 ( 0.22%) 114 ( 5.08%)  => ???:0x000000000010c960 (5x)
1,260 ( 0.05%) 410 ( 0.07%) 400 ( 0.17%) 15 ( 0.39%) 0          0          10 ( 0.33%) .          .           => /usr/include/c++/11/bits/std_thread.h:std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (ActiveObjectDP::*)(), ActiveObjectDP*> > >::_State_impl<void (ActiveObjectDP::*)(), ActiveObjectDP*>(void (ActiveObjectDP::*&&)(), ActiveObjectDP*&&) (5x)
1,079 ( 0.04%) 207 ( 0.03%) 158 ( 0.07%) 0          0          4 ( 0.14%) 0          0          4 ( 0.18%)  => ???:0x000000000010c9b0 (5x)
730 ( 0.03%) 220 ( 0.04%) 220 ( 0.09%) 34 ( 0.89%) 0          0          11 ( 0.36%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*) (5x)
335 ( 0.01%) 110 ( 0.02%) 100 ( 0.04%) 8 ( 0.21%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr() (5x)
 48 ( 0.00%) 12 ( 0.00%) 12 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	      std::forward<_Callable>(__f), std::forward<_Args>(__args)...)),
 35 ( 0.00%) 15 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:ActiveObjectDP*&& std::forward<ActiveObjectDP*>(std::remove_reference<ActiveObjectDP*>::type&) (5x)
 35 ( 0.00%) 15 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:void (ActiveObjectDP::*&&std::forward<void (ActiveObjectDP::*)()>(std::remove_reference<void (ActiveObjectDP::*)()>::type&))() (5x)
  .           .           .          .          .          .          .          .          .           	    __depend);
 54 ( 0.00%) 36 ( 0.01%)  0          3 ( 0.08%) 1 ( 0.01%) 0          3 ( 0.10%) 1 ( 0.01%) .                 }
  .           .           .          .          .          .          .          .          .           #endif // _GLIBCXX_HAS_GTHREADS
  .           .           .          .          .          .          .          .          .           
  5 ( 0.00%)  0           2 ( 0.00%) .          .          .          .          .          .               ~thread()
  .           .           .          .          .          .          .          .          .               {
  5 ( 0.00%)  1 ( 0.00%)  1 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 if (joinable())
 42 ( 0.00%) 15 ( 0.00%) 11 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_thread.h:std::thread::joinable() const (1x)
  .           .           .          .          .          .          .          .          .           	std::terminate();
  3 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               thread(const thread&) = delete;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               thread(thread&& __t) noexcept
  .           .           .          .          .          .          .          .          .               { swap(__t); }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               thread& operator=(const thread&) = delete;
  .           .           .          .          .          .          .          .          .           
-- line 161 ----------------------------------------
-- line 167 ----------------------------------------
  .           .           .          .          .          .          .          .          .                 return *this;
  .           .           .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               void
  .           .           .          .          .          .          .          .          .               swap(thread& __t) noexcept
  .           .           .          .          .          .          .          .          .               { std::swap(_M_id, __t._M_id); }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               bool
  8 ( 0.00%)  1 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .               joinable() const noexcept
 14 ( 0.00%)  7 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .               { return !(_M_id == id()); }
 11 ( 0.00%)  4 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_thread.h:std::operator==(std::thread::id, std::thread::id) (1x)
  9 ( 0.00%)  3 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_thread.h:std::thread::id::id() (1x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               void
  .           .           .          .          .          .          .          .          .               join();
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               void
  .           .           .          .          .          .          .          .          .               detach();
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               id
-- line 184 ----------------------------------------
-- line 193 ----------------------------------------
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               // Returns a value that hints at the number of hardware thread contexts.
  .           .           .          .          .          .          .          .          .               static unsigned int
  .           .           .          .          .          .          .          .          .               hardware_concurrency() noexcept;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #ifdef _GLIBCXX_HAS_GTHREADS
  .           .           .          .          .          .          .          .          .             private:
  .           .           .          .          .          .          .          .          .               template<typename _Callable>
 28 ( 0.00%)  8 ( 0.00%)  8 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 struct _State_impl : public _State
1,515 ( 0.06%) 504 ( 0.08%) 245 ( 0.10%) 15 ( 0.39%) 16 ( 0.12%) 0          14 ( 0.46%) 6 ( 0.07%) .           => ???:0x000000000010c9c0 (1x)
 18 ( 0.00%)  6 ( 0.00%)  4 ( 0.00%) 3 ( 0.08%) 1 ( 0.01%) 0          3 ( 0.10%) 1 ( 0.01%) .           => /usr/include/c++/11/bits/std_thread.h:std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (Server::*)(), Server*> > >::~_State_impl()'2 (1x)
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	_Callable		_M_func;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	template<typename... _Args>
 54 ( 0.00%)  0          36 ( 0.02%) .          .          .          .          .          .           	  _State_impl(_Args&&... __args)
114 ( 0.00%) 30 ( 0.00%) 30 ( 0.01%) 5 ( 0.13%) 0          0          2 ( 0.07%) .          .           	  : _M_func(std::forward<_Args>(__args)...)
194 ( 0.01%) 64 ( 0.01%) 62 ( 0.03%) 9 ( 0.24%) 0          0          8 ( 0.26%) .          .           => /usr/include/c++/11/bits/std_thread.h:std::thread::_Invoker<std::tuple<void (Server::*)(), Server*> >::_Invoker<void (Server::*)(), Server*>(void (Server::*&&)(), Server*&&) (1x)
 10 ( 0.00%)  3 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_thread.h:std::thread::_State::_State() (1x)
  7 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:void (Server::*&&std::forward<void (Server::*)()>(std::remove_reference<void (Server::*)()>::type&))() (1x)
  7 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:Server*&& std::forward<Server*>(std::remove_reference<Server*>::type&) (1x)
 36 ( 0.00%) 24 ( 0.00%)  0          1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	  { }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	void
 57 ( 0.00%)  8 ( 0.00%) 18 ( 0.01%) 4 ( 0.10%) 0          0          4 ( 0.13%) .          .           	_M_run() { _M_func(); }
20,963 ( 0.83%) 5,687 ( 0.94%) 3,509 ( 1.50%) 335 ( 8.77%) 65 ( 0.50%) 71 ( 2.49%) 102 ( 3.34%) 26 ( 0.29%) 70 ( 3.12%)  => /usr/include/c++/11/bits/std_thread.h:std::thread::_Invoker<std::tuple<void (ActiveObjectDP::*)(), ActiveObjectDP*> >::operator()() (5x)
  .           .           .          .          .          .          .          .          .                 };
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               void
  .           .           .          .          .          .          .          .          .               _M_start_thread(_State_ptr, void (*)());
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #if _GLIBCXX_THREAD_ABI_COMPAT
  .           .           .          .          .          .          .          .          .             public:
  .           .           .          .          .          .          .          .          .               struct _Impl_base;
-- line 219 ----------------------------------------
-- line 235 ----------------------------------------
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             private:
  .           .           .          .          .          .          .          .          .               // A call wrapper that does INVOKE(forwarded tuple elements...)
  .           .           .          .          .          .          .          .          .               template<typename _Tuple>
  .           .           .          .          .          .          .          .          .                 struct _Invoker
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	template<typename... _Args>
  .           .           .          .          .          .          .          .          .           	  explicit
 54 ( 0.00%)  0          36 ( 0.02%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           	  _Invoker(_Args&&... __args)
 72 ( 0.00%) 18 ( 0.00%) 18 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	  : _M_t(std::forward<_Args>(__args)...)
765 ( 0.03%) 255 ( 0.04%) 245 ( 0.10%) 7 ( 0.18%) 0          0          5 ( 0.16%) .          .           => /usr/include/c++/11/tuple:std::tuple<void (ActiveObjectDP::*)(), ActiveObjectDP*>::tuple<void (ActiveObjectDP::*)(), ActiveObjectDP*, true>(void (ActiveObjectDP::*&&)(), ActiveObjectDP*&&) (5x)
 35 ( 0.00%) 15 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:ActiveObjectDP*&& std::forward<ActiveObjectDP*>(std::remove_reference<ActiveObjectDP*>::type&) (5x)
 35 ( 0.00%) 15 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:void (ActiveObjectDP::*&&std::forward<void (ActiveObjectDP::*)()>(std::remove_reference<void (ActiveObjectDP::*)()>::type&))() (5x)
 36 ( 0.00%) 24 ( 0.00%)  .          .          .          .          .          .          .           	  { }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	_Tuple _M_t;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	template<typename>
  .           .           .          .          .          .          .          .          .           	  struct __result;
  .           .           .          .          .          .          .          .          .           	template<typename _Fn, typename... _Args>
  .           .           .          .          .          .          .          .          .           	  struct __result<tuple<_Fn, _Args...>>
  .           .           .          .          .          .          .          .          .           	  : __invoke_result<_Fn, _Args...>
  .           .           .          .          .          .          .          .          .           	  { };
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	template<size_t... _Ind>
  .           .           .          .          .          .          .          .          .           	  typename __result<_Tuple>::type
 36 ( 0.00%)  0          18 ( 0.01%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           	  _M_invoke(_Index_tuple<_Ind...>)
 88 ( 0.00%) 15 ( 0.00%) 30 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	  { return std::__invoke(std::get<_Ind>(std::move(_M_t))...); }
20,288 ( 0.80%) 5,492 ( 0.90%) 3,294 ( 1.41%) 327 ( 8.56%) 65 ( 0.50%) 56 ( 1.97%) 95 ( 3.11%) 26 ( 0.29%) 55 ( 2.45%)  => /usr/include/c++/11/bits/invoke.h:std::__invoke_result<void (ActiveObjectDP::*)(), ActiveObjectDP*>::type std::__invoke<void (ActiveObjectDP::*)(), ActiveObjectDP*>(void (ActiveObjectDP::*&&)(), ActiveObjectDP*&&) (5x)
235 ( 0.01%) 75 ( 0.01%) 70 ( 0.03%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/tuple:std::tuple_element<0ul, std::tuple<void (ActiveObjectDP::*)(), ActiveObjectDP*> >::type&& std::get<0ul, void (ActiveObjectDP::*)(), ActiveObjectDP*>(std::tuple<void (ActiveObjectDP::*)(), ActiveObjectDP*>&&) (5x)
230 ( 0.01%) 75 ( 0.01%) 70 ( 0.03%) 5 ( 0.13%) 0          5 ( 0.18%) 4 ( 0.13%) 0          5 ( 0.22%)  => /usr/include/c++/11/tuple:std::tuple_element<1ul, std::tuple<void (ActiveObjectDP::*)(), ActiveObjectDP*> >::type&& std::get<1ul, void (ActiveObjectDP::*)(), ActiveObjectDP*>(std::tuple<void (ActiveObjectDP::*)(), ActiveObjectDP*>&&) (5x)
 70 ( 0.00%) 30 ( 0.00%) 20 ( 0.01%) 1 ( 0.03%) 0          5 ( 0.18%) 1 ( 0.03%) 0          5 ( 0.22%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<std::tuple<void (ActiveObjectDP::*)(), ActiveObjectDP*>&>::type&& std::move<std::tuple<void (ActiveObjectDP::*)(), ActiveObjectDP*>&>(std::tuple<void (ActiveObjectDP::*)(), ActiveObjectDP*>&) (10x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	typename __result<_Tuple>::type
 30 ( 0.00%)  0          12 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	operator()()
  .           .           .          .          .          .          .          .          .           	{
  .           .           .          .          .          .          .          .          .           	  using _Indices
  .           .           .          .          .          .          .          .          .           	    = typename _Build_index_tuple<tuple_size<_Tuple>::value>::__type;
 19 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%) 1 ( 0.03%) 0          6 ( 0.21%) 1 ( 0.03%) 0          6 ( 0.27%)  	  return _M_invoke(_Indices());
6,749 ( 0.27%) 1,843 ( 0.30%) 1,208 ( 0.52%) 166 ( 4.35%) 55 ( 0.42%) 73 ( 2.56%) 123 ( 4.03%) 32 ( 0.35%) 72 ( 3.21%)  => /usr/include/c++/11/bits/std_thread.h:void std::thread::_Invoker<std::tuple<void (Server::*)(), Server*> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (1x)
  2 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .          .           	}
  .           .           .          .          .          .          .          .          .                 };
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             public:
  .           .           .          .          .          .          .          .          .               template<typename... _Tp>
  .           .           .          .          .          .          .          .          .                 using _Call_wrapper = _Invoker<tuple<typename decay<_Tp>::type...>>;
  .           .           .          .          .          .          .          .          .           #endif // _GLIBCXX_HAS_GTHREADS
  .           .           .          .          .          .          .          .          .             };
  .           .           .          .          .          .          .          .          .           
-- line 275 ----------------------------------------
-- line 280 ----------------------------------------
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             inline void
  .           .           .          .          .          .          .          .          .             swap(thread& __x, thread& __y) noexcept
  .           .           .          .          .          .          .          .          .             { __x.swap(__y); }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             inline bool
  .           .           .          .          .          .          .          .          .             operator==(thread::id __x, thread::id __y) noexcept
 30 ( 0.00%)  0          18 ( 0.01%) 2 ( 0.05%) 0          0          1 ( 0.03%) .          .             {
  .           .           .          .          .          .          .          .          .               // pthread_equal is undefined if either thread ID is not valid, so we
  .           .           .          .          .          .          .          .          .               // can't safely use __gthread_equal on default-constructed values (nor
  .           .           .          .          .          .          .          .          .               // the non-zero value returned by this_thread::get_id() for
  .           .           .          .          .          .          .          .          .               // single-threaded programs using GNU libc). Assume EqualityComparable.
 24 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .          .               return __x._M_thread == __y._M_thread;
 12 ( 0.00%) 12 ( 0.00%)  .          .          .          .          .          .          .             }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             // N.B. other comparison operators are defined in <thread>
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             // DR 889.
  .           .           .          .          .          .          .          .          .             /// std::hash specialization for thread::id.
  .           .           .          .          .          .          .          .          .             template<>
  .           .           .          .          .          .          .          .          .               struct hash<thread::id>
  .           .           .          .          .          .          .          .          .               : public __hash_base<size_t, thread::id>
-- line 302 ----------------------------------------
-- line 306 ----------------------------------------
  .           .           .          .          .          .          .          .          .                 { return std::_Hash_impl::hash(__id._M_thread); }
  .           .           .          .          .          .          .          .          .               };
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             namespace this_thread
  .           .           .          .          .          .          .          .          .             {
  .           .           .          .          .          .          .          .          .               /// this_thread::get_id
  .           .           .          .          .          .          .          .          .               inline thread::id
  .           .           .          .          .          .          .          .          .               get_id() noexcept
 35 ( 0.00%)  5 ( 0.00%) 10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               {
  .           .           .          .          .          .          .          .          .           #ifndef _GLIBCXX_HAS_GTHREADS
  .           .           .          .          .          .          .          .          .                 return thread::id(1);
  .           .           .          .          .          .          .          .          .           #elif defined _GLIBCXX_NATIVE_THREAD_ID
 35 ( 0.00%)  5 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .                 return thread::id(_GLIBCXX_NATIVE_THREAD_ID);
 55 ( 0.00%) 20 ( 0.00%) 20 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/std_thread.h:std::thread::id::id(unsigned long) (5x)
 25 ( 0.00%) 15 ( 0.00%)  0          2 ( 0.05%) 1 ( 0.01%) 0          1 ( 0.03%) .          .           => ???:0x000000000010c950 (5x)
  .           .           .          .          .          .          .          .          .           #else
  .           .           .          .          .          .          .          .          .                 return thread::id(__gthread_self());
  .           .           .          .          .          .          .          .          .           #endif
 25 ( 0.00%) 20 ( 0.00%)  .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               /// this_thread::yield
  .           .           .          .          .          .          .          .          .               inline void
  .           .           .          .          .          .          .          .          .               yield() noexcept
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .           #if defined _GLIBCXX_HAS_GTHREADS && defined _GLIBCXX_USE_SCHED_YIELD
  .           .           .          .          .          .          .          .          .                 __gthread_yield();
  .           .           .          .          .          .          .          .          .           #endif
-- line 330 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_iterator.h
--------------------------------------------------------------------------------
Ir          Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 1019 ----------------------------------------
 .           .           .          .          .          .          .          .          .           #if __cplusplus > 201703L && __cpp_lib_concepts
 .           .           .          .          .          .          .          .          .                 using iterator_concept = std::__detail::__iter_concept<_Iterator>;
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 .           .           .          .          .          .          .          .          .                 : _M_current(_Iterator()) { }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 explicit _GLIBCXX20_CONSTEXPR
60 ( 0.00%)  0          36 ( 0.02%) 6 ( 0.16%) 0          0          2 ( 0.07%) .          .                 __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
84 ( 0.00%) 60 ( 0.01%) 12 ( 0.01%) .          .          .          .          .          .                 : _M_current(__i) { }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 // Allow iterator to const_iterator conversion
 .           .           .          .          .          .          .          .          .                 template<typename _Iter>
 .           .           .          .          .          .          .          .          .                   _GLIBCXX20_CONSTEXPR
 .           .           .          .          .          .          .          .          .                   __normal_iterator(const __normal_iterator<_Iter,
 .           .           .          .          .          .          .          .          .           			  typename __enable_if<
 .           .           .          .          .          .          .          .          .                 	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 .           .           .          .          .          .          .          .          .           		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
 .           .           .          .          .          .          .          .          .                   : _M_current(__i.base()) { }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 // Forward iterator requirements
 .           .           .          .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
 .           .           .          .          .          .          .          .          .                 reference
20 ( 0.00%)  0          10 ( 0.00%) 5 ( 0.13%) 0          0          1 ( 0.03%) .          .                 operator*() const _GLIBCXX_NOEXCEPT
20 ( 0.00%) 20 ( 0.00%)  .          .          .          .          .          .          .                 { return *_M_current; }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
 .           .           .          .          .          .          .          .          .                 pointer
 .           .           .          .          .          .          .          .          .                 operator->() const _GLIBCXX_NOEXCEPT
 .           .           .          .          .          .          .          .          .                 { return _M_current; }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
 .           .           .          .          .          .          .          .          .                 __normal_iterator&
-- line 1051 ----------------------------------------
-- line 1092 ----------------------------------------
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
 .           .           .          .          .          .          .          .          .                 __normal_iterator&
 .           .           .          .          .          .          .          .          .                 operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 .           .           .          .          .          .          .          .          .                 { _M_current -= __n; return *this; }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
 .           .           .          .          .          .          .          .          .                 __normal_iterator
45 ( 0.00%)  5 ( 0.00%) 20 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
90 ( 0.00%) 40 ( 0.01%) 10 ( 0.00%) 5 ( 0.13%) 0          0          1 ( 0.03%) .          .                 { return __normal_iterator(_M_current - __n); }
60 ( 0.00%) 25 ( 0.00%) 20 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObjectDP>*, std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > > >::__normal_iterator(std::shared_ptr<ActiveObjectDP>* const&) (5x)
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
 .           .           .          .          .          .          .          .          .                 const _Iterator&
 8 ( 0.00%)  0           4 ( 0.00%) .          .          .          .          .          .                 base() const _GLIBCXX_NOEXCEPT
 6 ( 0.00%)  6 ( 0.00%)  .          .          .          .          .          .          .                 { return _M_current; }
 .           .           .          .          .          .          .          .          .               };
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             // Note: In what follows, the left- and right-hand-side iterators are
 .           .           .          .          .          .          .          .          .             // allowed to vary in types (conceptually in cv-qualification) so that
 .           .           .          .          .          .          .          .          .             // comparison between cv-qualified and non-cv-qualified iterators be
 .           .           .          .          .          .          .          .          .             // valid.  However, the greedy and unfriendly operators in std::rel_ops
 .           .           .          .          .          .          .          .          .             // will make overload resolution ambiguous (when in scope) if we don't
 .           .           .          .          .          .          .          .          .             // provide overloads whose operands are of the same type.  Can someone
-- line 1114 ----------------------------------------
-- line 1171 ----------------------------------------
 .           .           .          .          .          .          .          .          .               operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 .           .           .          .          .          .          .          .          .           	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 .           .           .          .          .          .          .          .          .               _GLIBCXX_NOEXCEPT
 .           .           .          .          .          .          .          .          .               { return __lhs.base() != __rhs.base(); }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             template<typename _Iterator, typename _Container>
 .           .           .          .          .          .          .          .          .               _GLIBCXX20_CONSTEXPR
 .           .           .          .          .          .          .          .          .               inline bool
 7 ( 0.00%)  0           4 ( 0.00%) .          .          .          .          .          .               operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 .           .           .          .          .          .          .          .          .           	       const __normal_iterator<_Iterator, _Container>& __rhs)
 .           .           .          .          .          .          .          .          .               _GLIBCXX_NOEXCEPT
13 ( 0.00%)  7 ( 0.00%)  2 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               { return __lhs.base() != __rhs.base(); }
14 ( 0.00%)  6 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<int, std::shared_ptr<std::thread> >*, std::vector<std::pair<int, std::shared_ptr<std::thread> >, std::allocator<std::pair<int, std::shared_ptr<std::thread> > > > >::base() const (2x)
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             // Random access iterator requirements
 .           .           .          .          .          .          .          .          .             template<typename _IteratorL, typename _IteratorR, typename _Container>
 .           .           .          .          .          .          .          .          .               inline bool
 .           .           .          .          .          .          .          .          .               operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
 .           .           .          .          .          .          .          .          .           	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 .           .           .          .          .          .          .          .          .               _GLIBCXX_NOEXCEPT
 .           .           .          .          .          .          .          .          .               { return __lhs.base() < __rhs.base(); }
-- line 1190 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: Server.cpp
--------------------------------------------------------------------------------
Ir           Dr           Dw           I1mr       D1mr       D1mw       ILmr       DLmr       DLmw       

  .            .            .          .          .          .          .          .          .           #include "Server.hpp"
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .           // Constructor 
 32 ( 0.00%)   7 ( 0.00%)  12 ( 0.01%) 3 ( 0.08%) 0          0          3 ( 0.10%) .          .           Server::Server(bool isPipe) {
 87 ( 0.00%)  25 ( 0.00%)  25 ( 0.01%) 8 ( 0.21%) 0          0          8 ( 0.26%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<RequestService, std::default_delete<RequestService> >::unique_ptr<std::default_delete<RequestService>, void>() (1x)
 67 ( 0.00%)  20 ( 0.00%)  20 ( 0.01%) 6 ( 0.16%) 0          1 ( 0.04%) 6 ( 0.20%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, std::shared_ptr<std::thread> >, std::allocator<std::pair<int, std::shared_ptr<std::thread> > > >::vector() (1x)
 27 ( 0.00%)   8 ( 0.00%)   8 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::atomic(bool) (1x)
 24 ( 0.00%)   6 ( 0.00%)  10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_mutex.h:std::mutex::mutex() (1x)
  9 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%) 0          1 ( 0.01%) .          .          .          .               std::cout<<"Start Building the Server..."<<std::endl;
5,665 ( 0.22%) 1,633 ( 0.27%) 767 ( 0.33%) 67 ( 1.75%) 66 ( 0.51%) 5 ( 0.18%) 66 ( 2.16%) 33 ( 0.37%) 1 ( 0.04%)  => ???:0x000000000010c9d0 (1x)
5,599 ( 0.22%) 1,561 ( 0.26%) 718 ( 0.31%) 60 ( 1.57%) 51 ( 0.39%) 1 ( 0.04%) 57 ( 1.87%) 26 ( 0.29%) 1 ( 0.04%)  => ???:0x000000000010c9a0 (1x)
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .               // Choose the Design pattern
  2 ( 0.00%)   1 ( 0.00%)   .          .          .          .          .          .          .               if(isPipe){
  9 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                   std::cout<<"Starting Pipeline Design Pattern"<<std::endl;
425 ( 0.02%) 139 ( 0.02%)  63 ( 0.03%) 0          0          1 ( 0.04%) 0          0          1 ( 0.04%)  => ???:0x000000000010c9d0 (1x)
443 ( 0.02%) 110 ( 0.02%)  44 ( 0.02%) 4 ( 0.10%) 2 ( 0.02%) 0          4 ( 0.13%) 2 ( 0.02%) .           => ???:0x000000000010c9a0 (1x)
 13 ( 0.00%)   1 ( 0.00%)   3 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                   this->patternType = std::make_unique<PipeDP>();
61,032 ( 2.41%) 17,097 ( 2.81%) 13,049 ( 5.58%) 850 (22.26%) 85 ( 0.65%) 169 ( 5.94%) 527 (17.27%) 38 ( 0.42%) 162 ( 7.21%)  => /usr/include/c++/11/bits/unique_ptr.h:std::_MakeUniq<PipeDP>::__single_object std::make_unique<PipeDP>() (1x)
429 ( 0.02%) 136 ( 0.02%) 130 ( 0.06%) 17 ( 0.45%) 0          0          16 ( 0.52%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::enable_if<std::__and_<std::__and_<std::is_convertible<std::unique_ptr<PipeDP, std::default_delete<PipeDP> >::pointer, RequestService*>, std::__not_<std::is_array<PipeDP> > >, std::is_assignable<std::default_delete<RequestService>&, std::default_delete<PipeDP>&&> >::value, std::unique_ptr<RequestService, std::default_delete<RequestService> >&>::type std::unique_ptr<RequestService, std::default_delete<RequestService> >::operator=<PipeDP, std::default_delete<PipeDP> >(std::unique_ptr<PipeDP, std::default_delete<PipeDP> >&&) (1x)
 67 ( 0.00%)  22 ( 0.00%)  20 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<PipeDP, std::default_delete<PipeDP> >::~unique_ptr() (1x)
  .            .            .          .          .          .          .          .          .               }else{
  .            .            .          .          .          .          .          .          .                   std::cout<<"Starting Leader Follower Design Pattern"<<std::endl;
  .            .            .          .          .          .          .          .          .                   this->patternType = std::make_unique<LeaderFollowerDP>();
  .            .            .          .          .          .          .          .          .               }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .                // Start the stop thread - to listen for stop command input from keyboard
 11 ( 0.00%)   1 ( 0.00%)   4 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .               auto stop_thread = std::make_shared<std::thread>(&Server::stop, this);  
3,003 ( 0.12%) 781 ( 0.13%) 730 ( 0.31%) 92 ( 2.41%) 1 ( 0.01%) 22 ( 0.77%) 61 ( 2.00%) 0          21 ( 0.93%)  => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<std::thread> std::make_shared<std::thread, void (Server::*)(), Server*>(void (Server::*&&)(), Server*&&) (1x)
  5 ( 0.00%)   0            2 ( 0.00%) 1 ( 0.03%) .          .          .          .          .               stop_thread->detach();  // Detach the thread
868 ( 0.03%) 267 ( 0.04%) 120 ( 0.05%) 8 ( 0.21%) 12 ( 0.09%) 0          5 ( 0.16%) 7 ( 0.08%) .           => ???:0x000000000010cbb0 (1x)
 28 ( 0.00%)  10 ( 0.00%)   8 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr_access<std::thread, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const (1x)
  .            .            .          .          .          .          .          .          .           
  3 ( 0.00%)   1 ( 0.00%)   1 ( 0.00%) .          .          .          .          .          .               start();  // Start the server
3,195 ( 0.13%) 952 ( 0.16%) 597 ( 0.26%) 46 ( 1.20%) 5 ( 0.04%) 0          35 ( 1.15%) 2 ( 0.02%) .           => Server.cpp:Server::start() (1x)
 10 ( 0.00%)   5 ( 0.00%)   1 ( 0.00%) 2 ( 0.05%) 1 ( 0.01%) 0          2 ( 0.07%) .          .           }
590 ( 0.02%) 181 ( 0.03%) 145 ( 0.06%) 15 ( 0.39%) 3 ( 0.02%) 0          11 ( 0.36%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<std::thread>::~shared_ptr() (1x)
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .           // Destructor
  8 ( 0.00%)   1 ( 0.00%)   3 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           Server::~Server(){    
  9 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%) .          .          .          .          .          .               std::cout << "\n********* Stopping Server *********" << std::endl;
2,554 ( 0.10%) 659 ( 0.11%) 288 ( 0.12%) 10 ( 0.26%) 1 ( 0.01%) 0          1 ( 0.03%) 1 ( 0.01%) .           => ???:0x000000000010c9a0 (1x)
486 ( 0.02%) 160 ( 0.03%)  78 ( 0.03%) 1 ( 0.03%) .          .          .          .          .           => ???:0x000000000010c9d0 (1x)
  9 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               std::cout<<"Closing Client Sockets && Join Threads..."<<std::endl;
496 ( 0.02%) 121 ( 0.02%)  46 ( 0.02%) 3 ( 0.08%) 1 ( 0.01%) 0          0          1 ( 0.01%) .           => ???:0x000000000010c9a0 (1x)
486 ( 0.02%) 160 ( 0.03%)  78 ( 0.03%) 3 ( 0.08%) .          .          .          .          .           => ???:0x000000000010c9d0 (1x)
 18 ( 0.00%)   3 ( 0.00%)   6 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .               for(auto& client_data : clients_dataset){
 34 ( 0.00%)  13 ( 0.00%)  10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<std::pair<int, std::shared_ptr<std::thread> >*, std::vector<std::pair<int, std::shared_ptr<std::thread> >, std::allocator<std::pair<int, std::shared_ptr<std::thread> > > > >(__gnu_cxx::__normal_iterator<std::pair<int, std::shared_ptr<std::thread> >*, std::vector<std::pair<int, std::shared_ptr<std::thread> >, std::allocator<std::pair<int, std::shared_ptr<std::thread> > > > > const&, __gnu_cxx::__normal_iterator<std::pair<int, std::shared_ptr<std::thread> >*, std::vector<std::pair<int, std::shared_ptr<std::thread> >, std::allocator<std::pair<int, std::shared_ptr<std::thread> > > > > const&) (1x)
 32 ( 0.00%)  12 ( 0.00%)   8 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, std::shared_ptr<std::thread> >, std::allocator<std::pair<int, std::shared_ptr<std::thread> > > >::end() (1x)
 31 ( 0.00%)  12 ( 0.00%)   8 ( 0.00%) 3 ( 0.08%) 0          0          3 ( 0.10%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, std::shared_ptr<std::thread> >, std::allocator<std::pair<int, std::shared_ptr<std::thread> > > >::begin() (1x)
  .            .            .          .          .          .          .          .          .                   if (client_data.first > 0) {
  .            .            .          .          .          .          .          .          .                       close(client_data.first);
  .            .            .          .          .          .          .          .          .                   }
  .            .            .          .          .          .          .          .          .                   
  .            .            .          .          .          .          .          .          .                   if(client_data.second && client_data.second->joinable()){
  .            .            .          .          .          .          .          .          .                       client_data.second->join();
  .            .            .          .          .          .          .          .          .                   }
  .            .            .          .          .          .          .          .          .               }
  .            .            .          .          .          .          .          .          .           
  3 ( 0.00%)   1 ( 0.00%)   1 ( 0.00%) .          .          .          .          .          .               clients_dataset.clear();
 33 ( 0.00%)  11 ( 0.00%)   7 ( 0.00%) 3 ( 0.08%) 0          0          3 ( 0.10%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, std::shared_ptr<std::thread> >, std::allocator<std::pair<int, std::shared_ptr<std::thread> > > >::clear() (1x)
  .            .            .          .          .          .          .          .          .           
  9 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               std::cout<<"Closing Server File Descriptor..."<<std::endl;
456 ( 0.02%) 113 ( 0.02%)  46 ( 0.02%) 3 ( 0.08%) .          .          .          .          .           => ???:0x000000000010c9a0 (1x)
486 ( 0.02%) 160 ( 0.03%)  78 ( 0.03%) 3 ( 0.08%) .          .          .          .          .           => ???:0x000000000010c9d0 (1x)
  4 ( 0.00%)   2 ( 0.00%)   .          .          .          .          .          .          .               if (server_fd >= 0) {
  4 ( 0.00%)   2 ( 0.00%)   1 ( 0.00%) .          .          .          .          .          .                   close(server_fd);
 40 ( 0.00%)  12 ( 0.00%)   6 ( 0.00%) 3 ( 0.08%) 0          0          3 ( 0.10%) .          .           => ???:0x000000000010cc50 (1x)
  .            .            .          .          .          .          .          .          .               }
  .            .            .          .          .          .          .          .          .           
  9 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               std::cout<<"********* Server has Closed! *********"<<std::endl;
481 ( 0.02%) 118 ( 0.02%)  46 ( 0.02%) 3 ( 0.08%) 1 ( 0.01%) 0          0          1 ( 0.01%) .           => ???:0x000000000010c9a0 (1x)
486 ( 0.02%) 160 ( 0.03%)  78 ( 0.03%) 3 ( 0.08%) .          .          .          .          .           => ???:0x000000000010c9d0 (1x)
 13 ( 0.00%)   6 ( 0.00%)   2 ( 0.00%) .          .          .          .          .          .           }
395 ( 0.02%) 117 ( 0.02%)  93 ( 0.04%) 14 ( 0.37%) 1 ( 0.01%) 1 ( 0.04%) 6 ( 0.20%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<RequestService, std::default_delete<RequestService> >::~unique_ptr() (1x)
141 ( 0.01%)  44 ( 0.01%)  35 ( 0.01%) 7 ( 0.18%) 0          0          5 ( 0.16%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, std::shared_ptr<std::thread> >, std::allocator<std::pair<int, std::shared_ptr<std::thread> > > >::~vector() (1x)
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .           // Start the server
  8 ( 0.00%)   1 ( 0.00%)   3 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           void Server::start() {
  .            .            .          .          .          .          .          .          .               // Creating socket FD
 11 ( 0.00%)   3 ( 0.00%)   2 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  8 ( 0.00%)   2 ( 0.00%)   0          2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => ???:0x000000000010c6f0 (1x)
  .            .            .          .          .          .          .          .          .                   perror("socket failed");
  .            .            .          .          .          .          .          .          .                   exit(EXIT_FAILURE);
  .            .            .          .          .          .          .          .          .               }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .               // Set the socket options
  1 ( 0.00%)   0            1 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               int opt = 1;
 13 ( 0.00%)   2 ( 0.00%)   1 ( 0.00%) .          .          .          .          .          .               if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
  9 ( 0.00%)   2 ( 0.00%)   0          2 ( 0.05%) 1 ( 0.01%) 0          2 ( 0.07%) 1 ( 0.01%) .           => ???:0x000000000010cbf0 (1x)
  .            .            .          .          .          .          .          .          .                   perror("setsockopt");
  .            .            .          .          .          .          .          .          .                   exit(EXIT_FAILURE);
  .            .            .          .          .          .          .          .          .               }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .               // Set the address and port number
  2 ( 0.00%)   1 ( 0.00%)   1 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               address.sin_family = AF_INET;
  2 ( 0.00%)   1 ( 0.00%)   1 ( 0.00%) .          .          .          .          .          .               address.sin_addr.s_addr = INADDR_ANY;
  4 ( 0.00%)   1 ( 0.00%)   2 ( 0.00%) .          .          .          .          .          .               address.sin_port = htons(PORT);
  6 ( 0.00%)   2 ( 0.00%)   0          2 ( 0.05%) 1 ( 0.01%) 0          2 ( 0.07%) .          .           => ???:0x000000000010c680 (1x)
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .               // Bind the socket to the address and port number
 11 ( 0.00%)   3 ( 0.00%)   1 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {
  8 ( 0.00%)   2 ( 0.00%)   0          2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => ???:0x000000000010c6b0 (1x)
  .            .            .          .          .          .          .          .          .                   perror("bind failed");
  .            .            .          .          .          .          .          .          .                   exit(EXIT_FAILURE);
  .            .            .          .          .          .          .          .          .               }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .               // Listen for incoming connections
  8 ( 0.00%)   2 ( 0.00%)   1 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               if (listen(server_fd, 3) < 0) {
  8 ( 0.00%)   2 ( 0.00%)   0          2 ( 0.05%) 1 ( 0.01%) 0          2 ( 0.07%) .          .           => ???:0x000000000010ca30 (1x)
  .            .            .          .          .          .          .          .          .                   perror("listen");
  .            .            .          .          .          .          .          .          .                   exit(EXIT_FAILURE);
  .            .            .          .          .          .          .          .          .               }
  .            .            .          .          .          .          .          .          .           
 12 ( 0.00%)   1 ( 0.00%)   3 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               std::cout << "Server started listening on port " << PORT << std::endl;
488 ( 0.02%) 118 ( 0.02%)  50 ( 0.02%) 5 ( 0.13%) 1 ( 0.01%) 0          1 ( 0.03%) 1 ( 0.01%) .           => ???:0x000000000010c9a0 (1x)
486 ( 0.02%) 160 ( 0.03%)  78 ( 0.03%) 3 ( 0.08%) 1 ( 0.01%) .          .          .          .           => ???:0x000000000010c9d0 (1x)
454 ( 0.02%) 111 ( 0.02%)  65 ( 0.03%) 3 ( 0.08%) .          .          .          .          .           => ???:0x000000000010cba0 (1x)
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .               // Handle incoming connections
  3 ( 0.00%)   1 ( 0.00%)   1 ( 0.00%) .          .          .          .          .          .               this->handleConnections();
1,647 ( 0.07%) 533 ( 0.09%) 387 ( 0.17%) 18 ( 0.47%) 0          0          17 ( 0.56%) .          .           => Server.cpp:Server::handleConnections() (1x)
  6 ( 0.00%)   4 ( 0.00%)   .          .          .          .          .          .          .           }
  .            .            .          .          .          .          .          .          .           
  9 ( 0.00%)   1 ( 0.00%)   4 ( 0.00%) 1 ( 0.03%) 0          1 ( 0.04%) 1 ( 0.03%) 0          1 ( 0.04%)  void Server::stop(){
  3 ( 0.00%)   0            1 ( 0.00%) .          .          .          .          .          .               std::string command;
  8 ( 0.00%)   2 ( 0.00%)   3 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => ???:0x000000000010caa0 (1x)
  .            .            .          .          .          .          .          .          .               while(true){
  5 ( 0.00%)   0            1 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                   std::cin >> command;
6,344 ( 0.25%) 1,728 ( 0.28%) 1,111 ( 0.48%) 135 ( 3.53%) 54 ( 0.42%) 70 ( 2.46%) 97 ( 3.18%) 31 ( 0.34%) 69 ( 3.07%)  => ???:0x000000000010ca80 (1x)
  7 ( 0.00%)   0            1 ( 0.00%) .          .          .          .          .          .                   if (command == "stop") {
103 ( 0.00%)  21 ( 0.00%)  10 ( 0.00%) 7 ( 0.18%) 0          0          4 ( 0.13%) .          .           => /usr/include/c++/11/bits/basic_string.h:bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) (1x)
  5 ( 0.00%)   1 ( 0.00%)   1 ( 0.00%) .          .          .          .          .          .                       this->stopServer = true;
 49 ( 0.00%)  17 ( 0.00%)  17 ( 0.01%) 3 ( 0.08%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::operator=(bool) (1x)
  1 ( 0.00%)   .            .          .          .          .          .          .          .                       break;
  .            .            .          .          .          .          .          .          .                   }
  .            .            .          .          .          .          .          .          .               }
  9 ( 0.00%)   5 ( 0.00%)   1 ( 0.00%) .          .          .          .          .          .           }
  8 ( 0.00%)   3 ( 0.00%)   0          3 ( 0.08%) 1 ( 0.01%) 0          3 ( 0.10%) 1 ( 0.01%) .           => ???:0x000000000010c850 (1x)
  .            .            .          .          .          .          .          .          .           
 11 ( 0.00%)   1 ( 0.00%)   6 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           void Server::handleConnections(){
  1 ( 0.00%)   0            1 ( 0.00%) .          .          .          .          .          .               int addrlen = sizeof(this->address);
  .            .            .          .          .          .          .          .          .               fd_set readfds;
  .            .            .          .          .          .          .          .          .               struct timeval timeout;
  .            .            .          .          .          .          .          .          .               
 36 ( 0.00%)   5 ( 0.00%)   5 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               while(!stopServer) {
145 ( 0.01%)  50 ( 0.01%)  45 ( 0.02%) .          .          .          .          .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::operator bool() const (5x)
  5 ( 0.00%)   0            5 ( 0.00%) .          .          .          .          .          .                   int new_socket = -1;
510 ( 0.02%) 245 ( 0.04%) 170 ( 0.07%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                   FD_ZERO(&readfds);
 95 ( 0.00%)  25 ( 0.00%)   5 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .                   FD_SET(server_fd, &readfds);
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .                   // Set timeout to 1 second
  5 ( 0.00%)   0            5 ( 0.00%) .          .          .          .          .          .                   timeout.tv_sec = 1;
  5 ( 0.00%)   0            5 ( 0.00%) .          .          .          .          .          .                   timeout.tv_usec = 0;
  .            .            .          .          .          .          .          .          .           
 55 ( 0.00%)  10 ( 0.00%)  10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                   int activity = select(server_fd + 1, &readfds, NULL, NULL, &timeout);
565 ( 0.02%) 125 ( 0.02%)  80 ( 0.03%) 7 ( 0.18%) 0          0          7 ( 0.23%) .          .           => ???:0x000000000010c970 (5x)
  .            .            .          .          .          .          .          .          .           
 10 ( 0.00%)   5 ( 0.00%)   .          .          .          .          .          .          .                   if(activity < 0 && errno != EINTR) {
  .            .            .          .          .          .          .          .          .                       perror("select error");
  .            .            .          .          .          .          .          .          .                   }
  .            .            .          .          .          .          .          .          .           
 10 ( 0.00%)   5 ( 0.00%)   .          .          .          .          .          .          .                   if(activity == 0) {
  .            .            .          .          .          .          .          .          .                       // Timeout occurred, check if we should stop
 31 ( 0.00%)   5 ( 0.00%)   5 ( 0.00%) 2 ( 0.05%) 0          0          1 ( 0.03%) .          .                       if (stopServer) break;
145 ( 0.01%)  50 ( 0.01%)  45 ( 0.02%) .          .          .          .          .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::operator bool() const (5x)
  8 ( 0.00%)   .            .          .          .          .          .          .          .                       continue;
  .            .            .          .          .          .          .          .          .                   }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .                   if(FD_ISSET(server_fd, &readfds)) {
  .            .            .          .          .          .          .          .          .                       new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen);
  .            .            .          .          .          .          .          .          .                       if (new_socket < 0) {
  .            .            .          .          .          .          .          .          .                           perror("accept failed");
  .            .            .          .          .          .          .          .          .                           if(stopServer) break;
  .            .            .          .          .          .          .          .          .                           continue;
-- line 127 ----------------------------------------
-- line 132 ----------------------------------------
  .            .            .          .          .          .          .          .          .                       std::lock_guard<std::mutex> lock(clients_mutex);
  .            .            .          .          .          .          .          .          .                       std::cout << "New client connected!" << std::endl;
  .            .            .          .          .          .          .          .          .                       auto client_thread = std::make_shared<std::thread>(
  .            .            .          .          .          .          .          .          .                                               &Server::acceptClientAccess, this, new_socket);
  .            .            .          .          .          .          .          .          .                       clients_dataset.emplace_back(new_socket, std::move(client_thread));
  .            .            .          .          .          .          .          .          .                       std::cout << "Client has Added to the Clients list!" << std::endl;
  .            .            .          .          .          .          .          .          .                   }
  .            .            .          .          .          .          .          .          .               }
 10 ( 0.00%)   7 ( 0.00%)   0          2 ( 0.05%) 0          0          2 ( 0.07%) .          .           }
  .            .            .          .          .          .          .          .          .           
  .            .            .          .          .          .          .          .          .           void Server::acceptClientAccess(int client_socket){
  .            .            .          .          .          .          .          .          .               if(client_socket < 0) return;
  .            .            .          .          .          .          .          .          .               try {
  .            .            .          .          .          .          .          .          .                   this->patternType->handleRequest(client_socket);
  .            .            .          .          .          .          .          .          .               } catch (const std::exception& e) {
  .            .            .          .          .          .          .          .          .                   std::cerr << "Error handling client: " << e.what() << std::endl;
  .            .            .          .          .          .          .          .          .               }
-- line 148 ----------------------------------------
-- line 159 ----------------------------------------
  .            .            .          .          .          .          .          .          .                       // Close socket before removing from vector
  .            .            .          .          .          .          .          .          .                       if (close(client_socket) < 0) {
  .            .            .          .          .          .          .          .          .                           std::cerr << "Error closing socket: " << strerror(errno) << std::endl;
  .            .            .          .          .          .          .          .          .                       }
  .            .            .          .          .          .          .          .          .                       clients_dataset.erase(it);
  .            .            .          .          .          .          .          .          .                   }
  .            .            .          .          .          .          .          .          .               }
  .            .            .          .          .          .          .          .          .           
 21 ( 0.00%)   6 ( 0.00%)   5 ( 0.00%) 3 ( 0.08%) 0          0          3 ( 0.10%) .          .           }127 ( 0.01%)  31 ( 0.01%)  27 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => Server.cpp:__static_initialization_and_destruction_0(int, int) (1x)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_deque.h
--------------------------------------------------------------------------------
Ir           Dr           Dw          I1mr       D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 89 ----------------------------------------
  .            .           .          .          .          .          .          .          .             */
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .           #ifndef _GLIBCXX_DEQUE_BUF_SIZE
  .            .           .          .          .          .          .          .          .           #define _GLIBCXX_DEQUE_BUF_SIZE 512
  .            .           .          .          .          .          .          .          .           #endif
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .             _GLIBCXX_CONSTEXPR inline size_t
  .            .           .          .          .          .          .          .          .             __deque_buf_size(size_t __size)
100 ( 0.00%)   0          50 ( 0.02%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .             { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
200 ( 0.01%) 100 ( 0.02%)  0          1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .             /**
  .            .           .          .          .          .          .          .          .              *  @brief A deque::iterator.
  .            .           .          .          .          .          .          .          .              *
  .            .           .          .          .          .          .          .          .              *  Quite a bit of intelligence here.  Much of the functionality of
  .            .           .          .          .          .          .          .          .              *  deque is actually passed off to this class.  A deque holds two
  .            .           .          .          .          .          .          .          .              *  of these internally, marking its valid range.  Access to
-- line 106 ----------------------------------------
-- line 123 ----------------------------------------
  .            .           .          .          .          .          .          .          .           	using __iter = _Deque_iterator<_Tp, _CvTp&, __ptr_rebind<_Ptr, _CvTp>>;
  .            .           .          .          .          .          .          .          .               public:
  .            .           .          .          .          .          .          .          .                 typedef __iter<_Tp>				   iterator;
  .            .           .          .          .          .          .          .          .                 typedef __iter<const _Tp>				   const_iterator;
  .            .           .          .          .          .          .          .          .                 typedef __ptr_rebind<_Ptr, _Tp>			   _Elt_pointer;
  .            .           .          .          .          .          .          .          .                 typedef __ptr_rebind<_Ptr, _Elt_pointer>		   _Map_pointer;
  .            .           .          .          .          .          .          .          .           #endif
  .            .           .          .          .          .          .          .          .           
 30 ( 0.00%)   0          10 ( 0.00%) .          .          .          .          .          .                 static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 40 ( 0.00%)  20 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .                 { return __deque_buf_size(sizeof(_Tp)); }
120 ( 0.00%)  40 ( 0.01%) 20 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long) (10x)
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 typedef std::random_access_iterator_tag	iterator_category;
  .            .           .          .          .          .          .          .          .                 typedef _Tp				value_type;
  .            .           .          .          .          .          .          .          .                 typedef _Ptr				pointer;
  .            .           .          .          .          .          .          .          .                 typedef _Ref				reference;
  .            .           .          .          .          .          .          .          .                 typedef size_t				size_type;
  .            .           .          .          .          .          .          .          .                 typedef ptrdiff_t				difference_type;
  .            .           .          .          .          .          .          .          .                 typedef _Deque_iterator			_Self;
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
  .            .           .          .          .          .          .          .          .                 _Elt_pointer _M_first;
  .            .           .          .          .          .          .          .          .                 _Elt_pointer _M_last;
  .            .           .          .          .          .          .          .          .                 _Map_pointer _M_node;
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
  .            .           .          .          .          .          .          .          .                 : _M_cur(__x), _M_first(*__y),
  .            .           .          .          .          .          .          .          .           	_M_last(*__y + _S_buffer_size()), _M_node(__y) { }
  .            .           .          .          .          .          .          .          .           
 40 ( 0.00%)   0          20 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _Deque_iterator() _GLIBCXX_NOEXCEPT
110 ( 0.00%)  60 ( 0.01%) 40 ( 0.02%) .          .          .          .          .          .                 : _M_cur(), _M_first(), _M_last(), _M_node() { }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .           #if __cplusplus < 201103L
  .            .           .          .          .          .          .          .          .                 // Conversion from iterator to const_iterator.
  .            .           .          .          .          .          .          .          .                 _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
  .            .           .          .          .          .          .          .          .                 : _M_cur(__x._M_cur), _M_first(__x._M_first),
  .            .           .          .          .          .          .          .          .           	_M_last(__x._M_last), _M_node(__x._M_node) { }
  .            .           .          .          .          .          .          .          .           #else
  .            .           .          .          .          .          .          .          .                 // Conversion from iterator to const_iterator.
-- line 160 ----------------------------------------
-- line 252 ----------------------------------------
  .            .           .          .          .          .          .          .          .                 { return *(*this + __n); }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 /**
  .            .           .          .          .          .          .          .          .                  *  Prepares to traverse new_node.  Sets everything except
  .            .           .          .          .          .          .          .          .                  *  _M_cur, which should therefore be set by the caller
  .            .           .          .          .          .          .          .          .                  *  immediately afterwards, based on _M_first and _M_last.
  .            .           .          .          .          .          .          .          .                  */
  .            .           .          .          .          .          .          .          .                 void
 70 ( 0.00%)   0          40 ( 0.02%) .          .          .          .          .          .                 _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
  .            .           .          .          .          .          .          .          .                 {
 30 ( 0.00%)  20 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .           	_M_node = __new_node;
 40 ( 0.00%)  30 ( 0.00%) 10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	_M_first = *__new_node;
110 ( 0.00%)  30 ( 0.00%) 20 ( 0.01%) .          .          .          .          .          .           	_M_last = _M_first + difference_type(_S_buffer_size());
190 ( 0.01%)  60 ( 0.01%) 40 ( 0.02%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<TaskQueue::TaskData, TaskQueue::TaskData&, TaskQueue::TaskData*>::_S_buffer_size() (10x)
 40 ( 0.00%)  30 ( 0.00%)  .          .          .          .          .          .          .                 }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 friend bool
 50 ( 0.00%)   0          30 ( 0.01%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80 ( 0.00%)  60 ( 0.01%)  0          0          2 ( 0.02%) .          .          .          .                 { return __x._M_cur == __y._M_cur; }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 // Note: we also provide overloads whose operands are of the same type in
  .            .           .          .          .          .          .          .          .                 // order to avoid ambiguous overload resolution when std::rel_ops
  .            .           .          .          .          .          .          .          .                 // operators are in scope (for additional details, see libstdc++/3628)
  .            .           .          .          .          .          .          .          .                 template<typename _RefR, typename _PtrR>
  .            .           .          .          .          .          .          .          .           	friend bool
  .            .           .          .          .          .          .          .          .           	operator==(const _Self& __x,
  .            .           .          .          .          .          .          .          .           		   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
-- line 277 ----------------------------------------
-- line 429 ----------------------------------------
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 allocator_type
  .            .           .          .          .          .          .          .          .                 get_allocator() const _GLIBCXX_NOEXCEPT
  .            .           .          .          .          .          .          .          .                 { return allocator_type(_M_get_Tp_allocator()); }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 typedef _Deque_iterator<_Tp, _Tp&, _Ptr>	  iterator;
  .            .           .          .          .          .          .          .          .                 typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;
  .            .           .          .          .          .          .          .          .           
 30 ( 0.00%)   0          15 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _Deque_base()
 15 ( 0.00%)   5 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .                 : _M_impl()
410 ( 0.02%) 135 ( 0.02%) 135 ( 0.06%) 9 ( 0.24%) 0          0          5 ( 0.16%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> >::_Deque_impl::_Deque_impl() (5x)
 40 ( 0.00%)  20 ( 0.00%)  5 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 { _M_initialize_map(0); }
4,483 ( 0.18%) 1,149 ( 0.19%) 901 ( 0.39%) 32 ( 0.84%) 5 ( 0.04%) 12 ( 0.42%) 32 ( 1.05%) 0          11 ( 0.49%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> >::_M_initialize_map(unsigned long) (5x)
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 _Deque_base(size_t __num_elements)
  .            .           .          .          .          .          .          .          .                 : _M_impl()
  .            .           .          .          .          .          .          .          .                 { _M_initialize_map(__num_elements); }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 _Deque_base(const allocator_type& __a, size_t __num_elements)
  .            .           .          .          .          .          .          .          .                 : _M_impl(__a)
  .            .           .          .          .          .          .          .          .                 { _M_initialize_map(__num_elements); }
-- line 447 ----------------------------------------
-- line 487 ----------------------------------------
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 struct _Deque_impl_data
  .            .           .          .          .          .          .          .          .                 {
  .            .           .          .          .          .          .          .          .           	_Map_pointer _M_map;
  .            .           .          .          .          .          .          .          .           	size_t _M_map_size;
  .            .           .          .          .          .          .          .          .           	iterator _M_start;
  .            .           .          .          .          .          .          .          .           	iterator _M_finish;
  .            .           .          .          .          .          .          .          .           
 25 ( 0.00%)   0          10 ( 0.00%) .          .          .          .          .          .           	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 60 ( 0.00%)  20 ( 0.00%) 20 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	: _M_map(), _M_map_size(), _M_start(), _M_finish()
150 ( 0.01%)  60 ( 0.01%) 60 ( 0.03%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<TaskQueue::TaskData, TaskQueue::TaskData&, TaskQueue::TaskData*>::_Deque_iterator() (10x)
 15 ( 0.00%)  10 ( 0.00%)  .          .          .          .          .          .          .           	{ }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
  .            .           .          .          .          .          .          .          .           	_Deque_impl_data(const _Deque_impl_data&) = default;
  .            .           .          .          .          .          .          .          .           	_Deque_impl_data&
  .            .           .          .          .          .          .          .          .           	operator=(const _Deque_impl_data&) = default;
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .           	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
  .            .           .          .          .          .          .          .          .           	: _Deque_impl_data(__x)
-- line 505 ----------------------------------------
-- line 516 ----------------------------------------
  .            .           .          .          .          .          .          .          .                 };
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 // This struct encapsulates the implementation of the std::deque
  .            .           .          .          .          .          .          .          .                 // standard container and at the same time makes use of the EBO
  .            .           .          .          .          .          .          .          .                 // for empty allocators.
  .            .           .          .          .          .          .          .          .                 struct _Deque_impl
  .            .           .          .          .          .          .          .          .                 : public _Tp_alloc_type, public _Deque_impl_data
  .            .           .          .          .          .          .          .          .                 {
 25 ( 0.00%)   0          10 ( 0.00%) 5 ( 0.13%) 0          0          1 ( 0.03%) .          .           	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
  .            .           .          .          .          .          .          .          .           	  is_nothrow_default_constructible<_Tp_alloc_type>::value)
 30 ( 0.00%)  10 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .           	: _Tp_alloc_type()
250 ( 0.01%)  90 ( 0.01%) 90 ( 0.04%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> >::_Deque_impl_data::_Deque_impl_data() (5x)
 90 ( 0.00%)  25 ( 0.00%) 25 ( 0.01%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<TaskQueue::TaskData>::allocator() (5x)
 15 ( 0.00%)  10 ( 0.00%)  .          .          .          .          .          .          .           	{ }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .           	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
  .            .           .          .          .          .          .          .          .           	: _Tp_alloc_type(__a)
  .            .           .          .          .          .          .          .          .           	{ }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
  .            .           .          .          .          .          .          .          .           	_Deque_impl(_Deque_impl&&) = default;
  .            .           .          .          .          .          .          .          .           
-- line 535 ----------------------------------------
-- line 543 ----------------------------------------
  .            .           .          .          .          .          .          .          .           #endif
  .            .           .          .          .          .          .          .          .                 };
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 _Tp_alloc_type&
  .            .           .          .          .          .          .          .          .                 _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
  .            .           .          .          .          .          .          .          .                 { return this->_M_impl; }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 const _Tp_alloc_type&
 20 ( 0.00%)   0          10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 15 ( 0.00%)  15 ( 0.00%)  .          .          .          .          .          .          .                 { return this->_M_impl; }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 _Map_alloc_type
 30 ( 0.00%)   0          15 ( 0.01%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 55 ( 0.00%)  25 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .                 { return _Map_alloc_type(_M_get_Tp_allocator()); }
 95 ( 0.00%)  25 ( 0.00%) 30 ( 0.01%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<TaskQueue::TaskData*>::allocator<TaskQueue::TaskData>(std::allocator<TaskQueue::TaskData> const&) (5x)
 35 ( 0.00%)  15 ( 0.00%) 10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> >::_M_get_Tp_allocator() const (5x)
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 _Ptr
 25 ( 0.00%)   0          10 ( 0.00%) .          .          .          .          .          .                 _M_allocate_node()
  .            .           .          .          .          .          .          .          .                 {
  .            .           .          .          .          .          .          .          .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
 35 ( 0.00%)   5 ( 0.00%) 10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
1,284 ( 0.05%) 252 ( 0.04%) 218 ( 0.09%) 4 ( 0.10%) 4 ( 0.03%) 5 ( 0.18%) 4 ( 0.13%) 0          5 ( 0.22%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<TaskQueue::TaskData> >::allocate(std::allocator<TaskQueue::TaskData>&, unsigned long) (5x)
 60 ( 0.00%)  20 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long) (5x)
 10 ( 0.00%)  10 ( 0.00%)  .          .          .          .          .          .          .                 }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 void
  .            .           .          .          .          .          .          .          .                 _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
  .            .           .          .          .          .          .          .          .                 {
  .            .           .          .          .          .          .          .          .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
  .            .           .          .          .          .          .          .          .           	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
  .            .           .          .          .          .          .          .          .                 }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 _Map_pointer
 50 ( 0.00%)   5 ( 0.00%) 25 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _M_allocate_map(size_t __n)
  .            .           .          .          .          .          .          .          .                 {
 25 ( 0.00%)   5 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           	_Map_alloc_type __map_alloc = _M_get_map_allocator();
215 ( 0.01%)  65 ( 0.01%) 65 ( 0.03%) 5 ( 0.13%) 0          0          5 ( 0.16%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> >::_M_get_map_allocator() const (5x)
 40 ( 0.00%)   5 ( 0.00%)  5 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	return _Map_alloc_traits::allocate(__map_alloc, __n);
1,304 ( 0.05%) 262 ( 0.04%) 218 ( 0.09%) 4 ( 0.10%) 1 ( 0.01%) 6 ( 0.21%) 4 ( 0.13%) 0          5 ( 0.22%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<TaskQueue::TaskData*> >::allocate(std::allocator<TaskQueue::TaskData*>&, unsigned long) (5x)
 45 ( 0.00%)  25 ( 0.00%)  5 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 }
 90 ( 0.00%)  25 ( 0.00%) 25 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<TaskQueue::TaskData*>::~allocator() (5x)
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 void
  .            .           .          .          .          .          .          .          .                 _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
  .            .           .          .          .          .          .          .          .                 {
  .            .           .          .          .          .          .          .          .           	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  .            .           .          .          .          .          .          .          .           	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
  .            .           .          .          .          .          .          .          .                 }
  .            .           .          .          .          .          .          .          .           
-- line 585 ----------------------------------------
-- line 609 ----------------------------------------
  .            .           .          .          .          .          .          .          .              *  @param  __num_elements  The count of T's for which to allocate space
  .            .           .          .          .          .          .          .          .              *                          at first.
  .            .           .          .          .          .          .          .          .              *  @return   Nothing.
  .            .           .          .          .          .          .          .          .              *
  .            .           .          .          .          .          .          .          .              *  The initial underlying memory layout is a bit complicated...
  .            .           .          .          .          .          .          .          .             */
  .            .           .          .          .          .          .          .          .             template<typename _Tp, typename _Alloc>
  .            .           .          .          .          .          .          .          .               void
 50 ( 0.00%)   5 ( 0.00%) 25 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               _Deque_base<_Tp, _Alloc>::
  .            .           .          .          .          .          .          .          .               _M_initialize_map(size_t __num_elements)
  .            .           .          .          .          .          .          .          .               {
 40 ( 0.00%)   5 ( 0.00%) 10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 60 ( 0.00%)  20 ( 0.00%) 10 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long) (5x)
  .            .           .          .          .          .          .          .          .           				  + 1);
  .            .           .          .          .          .          .          .          .           
 45 ( 0.00%)  10 ( 0.00%) 15 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 70 ( 0.00%)  35 ( 0.01%) 15 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) (5x)
 15 ( 0.00%)   5 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           					   size_t(__num_nodes + 2));
 40 ( 0.00%)  20 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .                 this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
1,769 ( 0.07%) 392 ( 0.06%) 348 ( 0.15%) 13 ( 0.34%) 1 ( 0.01%) 6 ( 0.21%) 13 ( 0.43%) 0          5 ( 0.22%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> >::_M_allocate_map(unsigned long) (5x)
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 // For "small" maps (needing less than _M_map_size nodes), allocation
  .            .           .          .          .          .          .          .          .                 // starts in the middle elements and grows outwards.  So nstart may be
  .            .           .          .          .          .          .          .          .                 // the beginning of _M_map, but for small maps it may be as far in as
  .            .           .          .          .          .          .          .          .                 // _M_map+3.
  .            .           .          .          .          .          .          .          .           
 20 ( 0.00%)  10 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .                 _Map_pointer __nstart = (this->_M_impl._M_map
 25 ( 0.00%)  15 ( 0.00%)  0          1 ( 0.03%) 0          0          1 ( 0.03%) .          .           			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 25 ( 0.00%)  10 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .                 _Map_pointer __nfinish = __nstart + __num_nodes;
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 __try
 30 ( 0.00%)  15 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           	{ _M_create_nodes(__nstart, __nfinish); }
1,549 ( 0.06%) 337 ( 0.06%) 293 ( 0.13%) 7 ( 0.18%) 4 ( 0.03%) 6 ( 0.21%) 7 ( 0.23%) 0          6 ( 0.27%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> >::_M_create_nodes(TaskQueue::TaskData**, TaskQueue::TaskData**) (5x)
  .            .           .          .          .          .          .          .          .                 __catch(...)
  .            .           .          .          .          .          .          .          .           	{
  .            .           .          .          .          .          .          .          .           	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
  .            .           .          .          .          .          .          .          .           	  this->_M_impl._M_map = _Map_pointer();
  .            .           .          .          .          .          .          .          .           	  this->_M_impl._M_map_size = 0;
  .            .           .          .          .          .          .          .          .           	  __throw_exception_again;
  .            .           .          .          .          .          .          .          .           	}
  .            .           .          .          .          .          .          .          .           
 30 ( 0.00%)  10 ( 0.00%)  5 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 this->_M_impl._M_start._M_set_node(__nstart);
240 ( 0.01%)  85 ( 0.01%) 60 ( 0.03%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<TaskQueue::TaskData, TaskQueue::TaskData&, TaskQueue::TaskData*>::_M_set_node(TaskQueue::TaskData**) (5x)
 35 ( 0.00%)  10 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .                 this->_M_impl._M_finish._M_set_node(__nfinish - 1);
240 ( 0.01%)  85 ( 0.01%) 60 ( 0.03%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<TaskQueue::TaskData, TaskQueue::TaskData&, TaskQueue::TaskData*>::_M_set_node(TaskQueue::TaskData**) (5x)
 20 ( 0.00%)  15 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .                 this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 20 ( 0.00%)  15 ( 0.00%)  5 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 25 ( 0.00%)   .           .          .          .          .          .          .          .           					+ __num_elements
 40 ( 0.00%)   5 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           					% __deque_buf_size(sizeof(_Tp)));
 60 ( 0.00%)  20 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long) (5x)
 35 ( 0.00%)  25 ( 0.00%)  0          2 ( 0.05%) 0          0          2 ( 0.07%) .          .               }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .             template<typename _Tp, typename _Alloc>
  .            .           .          .          .          .          .          .          .               void
 40 ( 0.00%)   0          25 ( 0.01%) .          .          .          .          .          .               _Deque_base<_Tp, _Alloc>::
  .            .           .          .          .          .          .          .          .               _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
  .            .           .          .          .          .          .          .          .               {
  .            .           .          .          .          .          .          .          .                 _Map_pointer __cur;
  .            .           .          .          .          .          .          .          .                 __try
  .            .           .          .          .          .          .          .          .           	{
 50 ( 0.00%)  25 ( 0.00%) 10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 25 ( 0.00%)  10 ( 0.00%) 10 ( 0.00%) 0          0          1 ( 0.04%) 0          0          1 ( 0.04%)  	    *__cur = this->_M_allocate_node();
1,414 ( 0.06%) 287 ( 0.05%) 248 ( 0.11%) 5 ( 0.13%) 4 ( 0.03%) 5 ( 0.18%) 5 ( 0.16%) 0          5 ( 0.22%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> >::_M_allocate_node() (5x)
  .            .           .          .          .          .          .          .          .           	}
  .            .           .          .          .          .          .          .          .                 __catch(...)
  .            .           .          .          .          .          .          .          .           	{
  .            .           .          .          .          .          .          .          .           	  _M_destroy_nodes(__nstart, __cur);
  .            .           .          .          .          .          .          .          .           	  __throw_exception_again;
  .            .           .          .          .          .          .          .          .           	}
 20 ( 0.00%)  15 ( 0.00%)  0          1 ( 0.03%) 0          0          1 ( 0.03%) .          .               }
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .             template<typename _Tp, typename _Alloc>
  .            .           .          .          .          .          .          .          .               void
  .            .           .          .          .          .          .          .          .               _Deque_base<_Tp, _Alloc>::
  .            .           .          .          .          .          .          .          .               _M_destroy_nodes(_Map_pointer __nstart,
  .            .           .          .          .          .          .          .          .           		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
  .            .           .          .          .          .          .          .          .               {
  .            .           .          .          .          .          .          .          .                 for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
-- line 678 ----------------------------------------
-- line 826 ----------------------------------------
  .            .           .          .          .          .          .          .          .               public:
  .            .           .          .          .          .          .          .          .                 // [23.2.1.1] construct/copy/destroy
  .            .           .          .          .          .          .          .          .                 // (assign() and get_allocator() are also listed in this section)
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 /**
  .            .           .          .          .          .          .          .          .                  *  @brief  Creates a %deque with no elements.
  .            .           .          .          .          .          .          .          .                  */
  .            .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
 55 ( 0.00%)  15 ( 0.00%) 15 ( 0.01%) .          .          .          .          .          .                 deque() = default;
4,978 ( 0.20%) 1,309 ( 0.22%) 1,061 ( 0.45%) 43 ( 1.13%) 5 ( 0.04%) 12 ( 0.42%) 39 ( 1.28%) 0          11 ( 0.49%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> >::_Deque_base() (5x)
  .            .           .          .          .          .          .          .          .           #else
  .            .           .          .          .          .          .          .          .                 deque() { }
  .            .           .          .          .          .          .          .          .           #endif
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 /**
  .            .           .          .          .          .          .          .          .                  *  @brief  Creates a %deque with no elements.
  .            .           .          .          .          .          .          .          .                  *  @param  __a  An allocator object.
  .            .           .          .          .          .          .          .          .                  */
-- line 842 ----------------------------------------
-- line 1303 ----------------------------------------
  .            .           .          .          .          .          .          .          .                 { _M_shrink_to_fit(); }
  .            .           .          .          .          .          .          .          .           #endif
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 /**
  .            .           .          .          .          .          .          .          .                  *  Returns true if the %deque is empty.  (Thus begin() would
  .            .           .          .          .          .          .          .          .                  *  equal end().)
  .            .           .          .          .          .          .          .          .                  */
  .            .           .          .          .          .          .          .          .                 _GLIBCXX_NODISCARD bool
 50 ( 0.00%)   0          20 ( 0.01%) 5 ( 0.13%) 0          0          1 ( 0.03%) .          .                 empty() const _GLIBCXX_NOEXCEPT
 90 ( 0.00%)  40 ( 0.01%) 10 ( 0.00%) .          .          .          .          .          .                 { return this->_M_impl._M_finish == this->_M_impl._M_start; }
130 ( 0.01%)  60 ( 0.01%) 30 ( 0.01%) 2 ( 0.05%) 2 ( 0.02%) 0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::operator==(std::_Deque_iterator<TaskQueue::TaskData, TaskQueue::TaskData&, TaskQueue::TaskData*> const&, std::_Deque_iterator<TaskQueue::TaskData, TaskQueue::TaskData&, TaskQueue::TaskData*> const&) (10x)
  .            .           .          .          .          .          .          .          .           
  .            .           .          .          .          .          .          .          .                 // element access
  .            .           .          .          .          .          .          .          .                 /**
  .            .           .          .          .          .          .          .          .                  *  @brief Subscript access to the data contained in the %deque.
  .            .           .          .          .          .          .          .          .                  *  @param __n The index of the element for which data should be
  .            .           .          .          .          .          .          .          .                  *  accessed.
  .            .           .          .          .          .          .          .          .                  *  @return  Read/write reference to data.
  .            .           .          .          .          .          .          .          .                  *
-- line 1320 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/ext/new_allocator.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 71 ----------------------------------------
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
  .           .           .          .          .          .          .          .          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .           .           .          .          .          .          .          .          .                 // 2103. propagate_on_container_move_assignment
  .           .           .          .          .          .          .          .          .                 typedef std::true_type propagate_on_container_move_assignment;
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
175 ( 0.01%) 50 ( 0.01%) 50 ( 0.02%) 9 ( 0.24%) 0          0          9 ( 0.29%) .          .                 new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 _GLIBCXX20_CONSTEXPR
144 ( 0.01%) 36 ( 0.01%) 54 ( 0.02%) 5 ( 0.13%) 0          0          1 ( 0.03%) .          .                 new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 template<typename _Tp1>
  .           .           .          .          .          .          .          .          .           	_GLIBCXX20_CONSTEXPR
  .           .           .          .          .          .          .          .          .           	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #if __cplusplus <= 201703L
224 ( 0.01%) 64 ( 0.01%) 64 ( 0.03%) .          .          .          .          .          .                 ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 pointer
  .           .           .          .          .          .          .          .          .                 address(reference __x) const _GLIBCXX_NOEXCEPT
  .           .           .          .          .          .          .          .          .                 { return std::__addressof(__x); }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 const_pointer
  .           .           .          .          .          .          .          .          .                 address(const_reference __x) const _GLIBCXX_NOEXCEPT
  .           .           .          .          .          .          .          .          .                 { return std::__addressof(__x); }
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 // NB: __n is permitted to be 0.  The C++ standard says nothing
  .           .           .          .          .          .          .          .          .                 // about what the return value is when __n == 0.
  .           .           .          .          .          .          .          .          .                 _GLIBCXX_NODISCARD _Tp*
119 ( 0.00%)  0          68 ( 0.03%) 7 ( 0.18%) 0          0          7 ( 0.23%) .          .                 allocate(size_type __n, const void* = static_cast<const void*>(0))
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
  .           .           .          .          .          .          .          .          .           	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .           .           .          .          .          .          .          .          .           	 // 3308. std::allocator<void>().allocate(n)
  .           .           .          .          .          .          .          .          .           	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           
170 ( 0.01%) 34 ( 0.01%) 17 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	if (__builtin_expect(__n > this->_M_max_size(), false))
 35 ( 0.00%) 10 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<TaskQueue::TaskData>::_M_max_size() const (5x)
  .           .           .          .          .          .          .          .          .           	  {
  .           .           .          .          .          .          .          .          .           	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .           .           .          .          .          .          .          .          .           	    // 3190. allocator::allocate sometimes returns too little storage
  .           .           .          .          .          .          .          .          .           	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
  .           .           .          .          .          .          .          .          .           	      std::__throw_bad_array_new_length();
  .           .           .          .          .          .          .          .          .           	    std::__throw_bad_alloc();
  .           .           .          .          .          .          .          .          .           	  }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #if __cpp_aligned_new
  .           .           .          .          .          .          .          .          .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
  .           .           .          .          .          .          .          .          .           	  {
  .           .           .          .          .          .          .          .          .           	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
  .           .           .          .          .          .          .          .          .           	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
  .           .           .          .          .          .          .          .          .           	  }
  .           .           .          .          .          .          .          .          .           #endif
118 ( 0.00%) 17 ( 0.00%) 17 ( 0.01%) 5 ( 0.13%) 0          0          5 ( 0.16%) .          .           	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
1,044 ( 0.04%) 197 ( 0.03%) 158 ( 0.07%) 0          4 ( 0.03%) 5 ( 0.18%) 0          0          5 ( 0.22%)  => ???:0x000000000010c9b0 (5x)
 34 ( 0.00%) 34 ( 0.01%)  .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 // __p is not permitted to be a null pointer.
  .           .           .          .          .          .          .          .          .                 void
  7 ( 0.00%)  0           4 ( 0.00%) .          .          .          .          .          .                 deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           #if __cpp_aligned_new
  .           .           .          .          .          .          .          .          .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
  .           .           .          .          .          .          .          .          .           	  {
  .           .           .          .          .          .          .          .          .           	    ::operator delete(__p,
  .           .           .          .          .          .          .          .          .           # if __cpp_sized_deallocation
  .           .           .          .          .          .          .          .          .           			      __t * sizeof(_Tp),
  .           .           .          .          .          .          .          .          .           # endif
  .           .           .          .          .          .          .          .          .           			      std::align_val_t(alignof(_Tp)));
  .           .           .          .          .          .          .          .          .           	    return;
  .           .           .          .          .          .          .          .          .           	  }
  .           .           .          .          .          .          .          .          .           #endif
 10 ( 0.00%)  2 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .           	::operator delete(__p
 99 ( 0.00%) 31 ( 0.01%) 15 ( 0.01%) 0          1 ( 0.01%) .          .          .          .           => ???:0x000000000010c9c0 (1x)
  .           .           .          .          .          .          .          .          .           #if __cpp_sized_deallocation
  .           .           .          .          .          .          .          .          .           			  , __t * sizeof(_Tp)
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           			 );
  2 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #if __cplusplus <= 201703L
  .           .           .          .          .          .          .          .          .                 size_type
  5 ( 0.00%)  0           2 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 max_size() const _GLIBCXX_USE_NOEXCEPT
  5 ( 0.00%)  3 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .                 { return _M_max_size(); }
  7 ( 0.00%)  2 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::shared_ptr<ActiveObjectDP> >::_M_max_size() const (1x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
  .           .           .          .          .          .          .          .          .                 template<typename _Up, typename... _Args>
  .           .           .          .          .          .          .          .          .           	void
102 ( 0.00%)  0          69 ( 0.03%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	construct(_Up* __p, _Args&&... __args)
  .           .           .          .          .          .          .          .          .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
195 ( 0.01%) 74 ( 0.01%) 34 ( 0.01%) 3 ( 0.08%) 0          0          2 ( 0.07%) .          .           	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
1,893 ( 0.07%) 473 ( 0.08%) 428 ( 0.18%) 39 ( 1.02%) 1 ( 0.01%) 21 ( 0.74%) 16 ( 0.52%) 0          21 ( 0.93%)  => /usr/include/c++/11/bits/std_thread.h:std::thread::thread<void (Server::*)(), Server*, void>(void (Server::*&&)(), Server*&&) (1x)
  8 ( 0.00%)  3 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/new:operator new(unsigned long, void*) (1x)
  7 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:void (Server::*&&std::forward<void (Server::*)()>(std::remove_reference<void (Server::*)()>::type&))() (1x)
  7 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:Server*&& std::forward<Server*>(std::remove_reference<Server*>::type&) (1x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 template<typename _Up>
  .           .           .          .          .          .          .          .          .           	void
  6 ( 0.00%)  0           3 ( 0.00%) .          .          .          .          .          .           	destroy(_Up* __p)
  .           .           .          .          .          .          .          .          .           	noexcept(std::is_nothrow_destructible<_Up>::value)
  6 ( 0.00%)  3 ( 0.00%)  1 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	{ __p->~_Up(); }
 55 ( 0.00%) 18 ( 0.00%) 14 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_thread.h:std::thread::~thread() (1x)
  .           .           .          .          .          .          .          .          .           #else
  .           .           .          .          .          .          .          .          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .           .           .          .          .          .          .          .          .                 // 402. wrong new expression in [some_] allocator::construct
  .           .           .          .          .          .          .          .          .                 void
  .           .           .          .          .          .          .          .          .                 construct(pointer __p, const _Tp& __val)
  .           .           .          .          .          .          .          .          .                 { ::new((void *)__p) _Tp(__val); }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 void
-- line 176 ----------------------------------------
-- line 189 ----------------------------------------
  .           .           .          .          .          .          .          .          .           	friend _GLIBCXX20_CONSTEXPR bool
  .           .           .          .          .          .          .          .          .           	operator!=(const new_allocator&, const new_allocator<_Up>&)
  .           .           .          .          .          .          .          .          .           	_GLIBCXX_NOTHROW
  .           .           .          .          .          .          .          .          .           	{ return false; }
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               private:
  .           .           .          .          .          .          .          .          .                 _GLIBCXX_CONSTEXPR size_type
 72 ( 0.00%)  0          36 ( 0.02%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _M_max_size() const _GLIBCXX_USE_NOEXCEPT
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           #if __PTRDIFF_MAX__ < __SIZE_MAX__
 18 ( 0.00%)  .           .          .          .          .          .          .          .           	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
  .           .           .          .          .          .          .          .          .           #else
  .           .           .          .          .          .          .          .          .           	return std::size_t(-1) / sizeof(_Tp);
  .           .           .          .          .          .          .          .          .           #endif
 36 ( 0.00%) 36 ( 0.01%)  .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .               };
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           _GLIBCXX_END_NAMESPACE_VERSION
  .           .           .          .          .          .          .          .          .           } // namespace
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/shared_ptr.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 114 ----------------------------------------
  .           .           .          .          .          .          .          .          .              * can be retrieved by calling the `get()` member function.
  .           .           .          .          .          .          .          .          .              *
  .           .           .          .          .          .          .          .          .              * The equality and relational operators for `shared_ptr` only compare
  .           .           .          .          .          .          .          .          .              * the stored pointer returned by `get()`, not the owned pointer.
  .           .           .          .          .          .          .          .          .              * To test whether two `shared_ptr` objects share ownership of the same
  .           .           .          .          .          .          .          .          .              * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  .           .           .          .          .          .          .          .          .             */
  .           .           .          .          .          .          .          .          .             template<typename _Tp>
121 ( 0.00%) 33 ( 0.01%) 33 ( 0.01%) 6 ( 0.16%) 0          0          1 ( 0.03%) .          .               class shared_ptr : public __shared_ptr<_Tp>
410 ( 0.02%) 125 ( 0.02%) 90 ( 0.04%) 5 ( 0.13%) 0          0          5 ( 0.16%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() (10x)
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 template<typename... _Args>
  .           .           .          .          .          .          .          .          .           	using _Constructible = typename enable_if<
  .           .           .          .          .          .          .          .          .           	  is_constructible<__shared_ptr<_Tp>, _Args...>::value
  .           .           .          .          .          .          .          .          .           	>::type;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 template<typename _Arg>
  .           .           .          .          .          .          .          .          .           	using _Assignable = typename enable_if<
-- line 130 ----------------------------------------
-- line 140 ----------------------------------------
  .           .           .          .          .          .          .          .          .           # define __cpp_lib_shared_ptr_weak_type 201606
  .           .           .          .          .          .          .          .          .                 /// The corresponding weak_ptr type for this shared_ptr
  .           .           .          .          .          .          .          .          .                 using weak_type = weak_ptr<_Tp>;
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief  Construct an empty %shared_ptr.
  .           .           .          .          .          .          .          .          .                  *  @post   use_count()==0 && get()==0
  .           .           .          .          .          .          .          .          .                  */
 55 ( 0.00%) 15 ( 0.00%) 15 ( 0.01%) .          .          .          .          .          .                 constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
115 ( 0.00%) 35 ( 0.01%) 35 ( 0.01%) 3 ( 0.08%) 0          1 ( 0.04%) 3 ( 0.10%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() (5x)
  .           .           .          .          .          .          .          .          .           
 70 ( 0.00%) 20 ( 0.00%) 20 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
330 ( 0.01%) 125 ( 0.02%) 85 ( 0.04%) .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2> const&) (5x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief  Construct a %shared_ptr that owns the pointer @a __p.
  .           .           .          .          .          .          .          .          .                  *  @param  __p  A pointer that is convertible to element_type*.
  .           .           .          .          .          .          .          .          .                  *  @post   use_count() == 1 && get() == __p
  .           .           .          .          .          .          .          .          .                  *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
  .           .           .          .          .          .          .          .          .                  */
  .           .           .          .          .          .          .          .          .                 template<typename _Yp, typename = _Constructible<_Yp*>>
-- line 158 ----------------------------------------
-- line 296 ----------------------------------------
  .           .           .          .          .          .          .          .          .           	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
  .           .           .          .          .          .          .          .          .                   : __shared_ptr<_Tp>(__r) { }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief  Move-constructs a %shared_ptr instance from @a __r.
  .           .           .          .          .          .          .          .          .                  *  @param  __r  A %shared_ptr rvalue.
  .           .           .          .          .          .          .          .          .                  *  @post   *this contains the old value of @a __r, @a __r is empty.
  .           .           .          .          .          .          .          .          .                  */
 35 ( 0.00%)  0          20 ( 0.01%) .          .          .          .          .          .                 shared_ptr(shared_ptr&& __r) noexcept
 55 ( 0.00%) 25 ( 0.00%) 10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 : __shared_ptr<_Tp>(std::move(__r)) { }
265 ( 0.01%) 105 ( 0.02%) 80 ( 0.03%) 1 ( 0.03%) 0          1 ( 0.04%) 1 ( 0.03%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>&&) (5x)
 35 ( 0.00%) 15 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::shared_ptr<ActiveObjectDP>&>::type&& std::move<std::shared_ptr<ActiveObjectDP>&>(std::shared_ptr<ActiveObjectDP>&) (5x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief  Move-constructs a %shared_ptr instance from @a __r.
  .           .           .          .          .          .          .          .          .                  *  @param  __r  A %shared_ptr rvalue.
  .           .           .          .          .          .          .          .          .                  *  @post   *this contains the old value of @a __r, @a __r is empty.
  .           .           .          .          .          .          .          .          .                  */
  .           .           .          .          .          .          .          .          .                 template<typename _Yp, typename = _Constructible<shared_ptr<_Yp>>>
  .           .           .          .          .          .          .          .          .           	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
-- line 313 ----------------------------------------
-- line 349 ----------------------------------------
  .           .           .          .          .          .          .          .          .           	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
  .           .           .          .          .          .          .          .          .           	: __shared_ptr<_Tp>(std::move(__r), __sp_array_delete()) { }
  .           .           .          .          .          .          .          .          .           #endif
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 /**
  .           .           .          .          .          .          .          .          .                  *  @brief  Construct an empty %shared_ptr.
  .           .           .          .          .          .          .          .          .                  *  @post   use_count() == 0 && get() == nullptr
  .           .           .          .          .          .          .          .          .                  */
 60 ( 0.00%) 15 ( 0.00%) 20 ( 0.01%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
170 ( 0.01%) 50 ( 0.01%) 50 ( 0.02%) 3 ( 0.08%) 0          1 ( 0.04%) 3 ( 0.10%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP>::shared_ptr() (5x)
  .           .           .          .          .          .          .          .          .           
 70 ( 0.00%) 25 ( 0.00%) 20 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 shared_ptr& operator=(const shared_ptr&) noexcept = default;
365 ( 0.01%) 155 ( 0.03%) 90 ( 0.04%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>::operator=(std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2> const&) (5x)
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 template<typename _Yp>
  .           .           .          .          .          .          .          .          .           	_Assignable<const shared_ptr<_Yp>&>
  .           .           .          .          .          .          .          .          .           	operator=(const shared_ptr<_Yp>& __r) noexcept
  .           .           .          .          .          .          .          .          .           	{
  .           .           .          .          .          .          .          .          .           	  this->__shared_ptr<_Tp>::operator=(__r);
  .           .           .          .          .          .          .          .          .           	  return *this;
  .           .           .          .          .          .          .          .          .           	}
-- line 367 ----------------------------------------
-- line 400 ----------------------------------------
  .           .           .          .          .          .          .          .          .           	{
  .           .           .          .          .          .          .          .          .           	  this->__shared_ptr<_Tp>::operator=(std::move(__r));
  .           .           .          .          .          .          .          .          .           	  return *this;
  .           .           .          .          .          .          .          .          .           	}
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .               private:
  .           .           .          .          .          .          .          .          .                 // This constructor is non-standard, it is used by allocate_shared.
  .           .           .          .          .          .          .          .          .                 template<typename _Alloc, typename... _Args>
 50 ( 0.00%)  0          32 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 59 ( 0.00%) 19 ( 0.00%) 13 ( 0.01%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
2,826 ( 0.11%) 726 ( 0.12%) 677 ( 0.29%) 81 ( 2.12%) 1 ( 0.01%) 22 ( 0.77%) 50 ( 1.64%) 0          21 ( 0.93%)  => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<std::thread, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread>, void (Server::*)(), Server*>(std::_Sp_alloc_shared_tag<std::allocator<std::thread> >, void (Server::*&&)(), Server*&&) (1x)
  7 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:Server*&& std::forward<Server*>(std::remove_reference<Server*>::type&) (1x)
  7 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:void (Server::*&&std::forward<void (Server::*)()>(std::remove_reference<void (Server::*)()>::type&))() (1x)
 26 ( 0.00%) 19 ( 0.00%)  .          .          .          .          .          .          .           	{ }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 template<typename _Yp, typename _Alloc, typename... _Args>
  .           .           .          .          .          .          .          .          .           	friend shared_ptr<_Yp>
  .           .           .          .          .          .          .          .          .           	allocate_shared(const _Alloc& __a, _Args&&... __args);
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 // This constructor is non-standard, it is used by weak_ptr::lock().
  .           .           .          .          .          .          .          .          .                 shared_ptr(const weak_ptr<_Tp>& __r, std::nothrow_t) noexcept
  .           .           .          .          .          .          .          .          .                 : __shared_ptr<_Tp>(__r, std::nothrow) { }
-- line 418 ----------------------------------------
-- line 850 ----------------------------------------
  .           .           .          .          .          .          .          .          .              *  @throw  An exception thrown from @a _Alloc::allocate or from the
  .           .           .          .          .          .          .          .          .              *          constructor of @a _Tp.
  .           .           .          .          .          .          .          .          .              *
  .           .           .          .          .          .          .          .          .              *  A copy of @a __a will be used to allocate memory for the shared_ptr
  .           .           .          .          .          .          .          .          .              *  and the new object.
  .           .           .          .          .          .          .          .          .              */
  .           .           .          .          .          .          .          .          .             template<typename _Tp, typename _Alloc, typename... _Args>
  .           .           .          .          .          .          .          .          .               inline shared_ptr<_Tp>
 44 ( 0.00%)  0          26 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               allocate_shared(const _Alloc& __a, _Args&&... __args)
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 static_assert(!is_array<_Tp>::value, "make_shared<T[]> not supported");
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
 58 ( 0.00%) 19 ( 0.00%) 13 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           			     std::forward<_Args>(__args)...);
31,546 ( 1.25%) 8,468 ( 1.39%) 7,611 ( 3.26%) 469 (12.28%) 56 ( 0.43%) 163 ( 5.73%) 276 ( 9.04%) 21 ( 0.23%) 156 ( 6.95%)  => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP>::shared_ptr<std::allocator<ActiveObjectDP>, int&>(std::_Sp_alloc_shared_tag<std::allocator<ActiveObjectDP> >, int&) (5x)
 35 ( 0.00%) 15 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/move.h:int& std::forward<int&>(std::remove_reference<int&>::type&) (5x)
 19 ( 0.00%) 19 ( 0.00%)  .          .          .          .          .          .          .               }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             /**
  .           .           .          .          .          .          .          .          .              *  @brief  Create an object that is owned by a shared_ptr.
  .           .           .          .          .          .          .          .          .              *  @param  __args  Arguments for the @a _Tp object's constructor.
  .           .           .          .          .          .          .          .          .              *  @return A shared_ptr that owns the newly created object.
  .           .           .          .          .          .          .          .          .              *  @throw  std::bad_alloc, or an exception thrown from the
  .           .           .          .          .          .          .          .          .              *          constructor of @a _Tp.
  .           .           .          .          .          .          .          .          .              */
  .           .           .          .          .          .          .          .          .             template<typename _Tp, typename... _Args>
  .           .           .          .          .          .          .          .          .               inline shared_ptr<_Tp>
 62 ( 0.00%)  6 ( 0.00%) 32 ( 0.01%) 4 ( 0.10%) 0          0          3 ( 0.10%) .          .               make_shared(_Args&&... __args)
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 typedef typename std::remove_cv<_Tp>::type _Tp_nc;
 36 ( 0.00%)  0          12 ( 0.01%) .          .          .          .          .          .                 return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 90 ( 0.00%) 25 ( 0.00%) 25 ( 0.01%) 6 ( 0.16%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObjectDP>::allocator() (5x)
 90 ( 0.00%) 25 ( 0.00%) 25 ( 0.01%) .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<ActiveObjectDP>::~allocator() (5x)
 76 ( 0.00%) 13 ( 0.00%) 13 ( 0.01%) 4 ( 0.10%) 0          0          2 ( 0.07%) .          .           				       std::forward<_Args>(__args)...);
31,676 ( 1.25%) 8,513 ( 1.40%) 7,651 ( 3.27%) 470 (12.31%) 56 ( 0.43%) 163 ( 5.73%) 277 ( 9.08%) 21 ( 0.23%) 156 ( 6.95%)  => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP> std::allocate_shared<ActiveObjectDP, std::allocator<ActiveObjectDP>, int&>(std::allocator<ActiveObjectDP> const&, int&) (5x)
 35 ( 0.00%) 15 ( 0.00%) 10 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/move.h:int& std::forward<int&>(std::remove_reference<int&>::type&) (5x)
 44 ( 0.00%) 37 ( 0.01%)  0          6 ( 0.16%) 0          0          2 ( 0.07%) .          .               }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             /// std::hash specialization for shared_ptr.
  .           .           .          .          .          .          .          .          .             template<typename _Tp>
  .           .           .          .          .          .          .          .          .               struct hash<shared_ptr<_Tp>>
  .           .           .          .          .          .          .          .          .               : public __hash_base<size_t, shared_ptr<_Tp>>
  .           .           .          .          .          .          .          .          .               {
  .           .           .          .          .          .          .          .          .                 size_t
  .           .           .          .          .          .          .          .          .                 operator()(const shared_ptr<_Tp>& __s) const noexcept
-- line 888 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: ActiveObjectDP.cpp
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr        D1mr       D1mw       ILmr       DLmr       DLmw       

  .           .           .           .          .          .          .          .          .           #include "ActiveObjectDP.hpp"
  .           .           .           .          .          .          .          .          .           #include "PipeDP.hpp"
  .           .           .           .          .          .          .          .          .           
230 ( 0.01%) 60 ( 0.01%) 75 ( 0.03%)  4 ( 0.10%) 0          0          4 ( 0.13%) .          .           ActiveObjectDP::ActiveObjectDP(int stage) : stageID(stage), working(false), prevStageStatus(false), nextStage(nullptr) {
435 ( 0.02%) 125 ( 0.02%) 125 ( 0.05%)  8 ( 0.21%) 0          1 ( 0.04%) 8 ( 0.26%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::unique_ptr<std::default_delete<std::thread>, void>() (5x)
435 ( 0.02%) 125 ( 0.02%) 125 ( 0.05%)  5 ( 0.13%) 0          2 ( 0.07%) 5 ( 0.16%) 0          2 ( 0.09%)  => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<TaskQueue, std::default_delete<TaskQueue> >::unique_ptr<std::default_delete<TaskQueue>, void>() (5x)
230 ( 0.01%) 65 ( 0.01%) 70 ( 0.03%)  5 ( 0.13%) 0          1 ( 0.04%) 5 ( 0.16%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP>::shared_ptr(decltype(nullptr)) (5x)
145 ( 0.01%) 45 ( 0.01%) 60 ( 0.03%)  6 ( 0.16%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::function() (5x)
135 ( 0.01%) 40 ( 0.01%) 40 ( 0.02%)  1 ( 0.03%) 0          1 ( 0.04%) 0          0          1 ( 0.04%)  => /usr/include/c++/11/atomic:std::atomic<bool>::atomic(bool) (5x)
120 ( 0.00%) 30 ( 0.00%) 50 ( 0.02%)  8 ( 0.21%) 0          2 ( 0.07%) 0          0          2 ( 0.09%)  => /usr/include/c++/11/bits/std_mutex.h:std::mutex::mutex() (5x)
 40 ( 0.00%) 10 ( 0.00%) 15 ( 0.01%)  6 ( 0.16%) 1 ( 0.01%) 4 ( 0.14%) 2 ( 0.07%) 0          4 ( 0.18%)  => ???:0x000000000010cac0 (5x)
 60 ( 0.00%)  5 ( 0.00%) 15 ( 0.01%)  .          .          .          .          .          .               taskQueue = std::make_unique<TaskQueue>(); // Create a new task queue for the active object
7,162 ( 0.28%) 1,816 ( 0.30%) 1,619 ( 0.69%) 58 ( 1.52%) 5 ( 0.04%) 20 ( 0.70%) 49 ( 1.61%) 0          19 ( 0.85%)  => /usr/include/c++/11/bits/unique_ptr.h:std::_MakeUniq<TaskQueue>::__single_object std::make_unique<TaskQueue>() (5x)
1,910 ( 0.08%) 620 ( 0.10%) 580 ( 0.25%) 12 ( 0.31%) 0          0          11 ( 0.36%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<TaskQueue, std::default_delete<TaskQueue> >::operator=(std::unique_ptr<TaskQueue, std::default_delete<TaskQueue> >&&) (5x)
335 ( 0.01%) 110 ( 0.02%) 100 ( 0.04%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<TaskQueue, std::default_delete<TaskQueue> >::~unique_ptr() (5x)
100 ( 0.00%) 10 ( 0.00%) 30 ( 0.01%)  2 ( 0.05%) 0          0          2 ( 0.07%) .          .               activeObjectThread = std::make_unique<std::thread>(&ActiveObjectDP::work, this); // Create a new thread for the active object
13,535 ( 0.53%) 3,470 ( 0.57%) 2,864 ( 1.23%) 240 ( 6.28%) 49 ( 0.38%) 124 ( 4.36%) 140 ( 4.59%) 21 ( 0.23%) 120 ( 5.34%)  => /usr/include/c++/11/bits/unique_ptr.h:std::_MakeUniq<std::thread>::__single_object std::make_unique<std::thread, void (ActiveObjectDP::*)(), ActiveObjectDP*>(void (ActiveObjectDP::*&&)(), ActiveObjectDP*&&) (5x)
1,910 ( 0.08%) 620 ( 0.10%) 580 ( 0.25%)  7 ( 0.18%) 0          0          7 ( 0.23%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::operator=(std::unique_ptr<std::thread, std::default_delete<std::thread> >&&) (5x)
335 ( 0.01%) 110 ( 0.02%) 100 ( 0.04%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<std::thread, std::default_delete<std::thread> >::~unique_ptr() (5x)
 35 ( 0.00%) 25 ( 0.00%)  0           1 ( 0.03%) 0          0          1 ( 0.03%) .          .           }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           ActiveObjectDP::~ActiveObjectDP() {
  .           .           .           .          .          .          .          .          .               {
  .           .           .           .          .          .          .          .          .                   std::unique_lock<std::mutex> lock(activeTask_mutex); // Lock the mutex
  .           .           .           .          .          .          .          .          .                   stop = true; // Set the stop flag to true to stop the thread
  .           .           .           .          .          .          .          .          .               }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               // Clear the queue and notify the thread
-- line 15 ----------------------------------------
-- line 18 ----------------------------------------
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               // Join the thread
  .           .           .           .          .          .          .          .          .               if (this->activeObjectThread && this->activeObjectThread->joinable()) { // Check if the thread is joinable 
  .           .           .           .          .          .          .          .          .                   this->activeObjectThread->join(); // Join the thread (wait for the thread to finish)
  .           .           .           .          .          .          .          .          .               }
  .           .           .           .          .          .          .          .          .           }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           // Set the next stage
 30 ( 0.00%)  0          15 ( 0.01%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           void ActiveObjectDP::setNextStage(std::shared_ptr<ActiveObjectDP> next) {
 30 ( 0.00%) 10 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .               this->nextStage = next;
435 ( 0.02%) 180 ( 0.03%) 110 ( 0.05%)  3 ( 0.08%) 0          0          3 ( 0.10%) .          .           => /usr/include/c++/11/bits/shared_ptr.h:std::shared_ptr<ActiveObjectDP>::operator=(std::shared_ptr<ActiveObjectDP> const&) (5x)
 42 ( 0.00%) 11 ( 0.00%)  6 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .               if(nextStage.get() == this) this->prevStageStatus = true; // If the next stage is the same as this stage, set the previous stage status to true
 40 ( 0.00%) 20 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>::get() const (5x)
 15 ( 0.00%) 10 ( 0.00%)  .           .          .          .          .          .          .           }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           // Set the task handler
 30 ( 0.00%)  0          15 ( 0.01%)  .          .          .          .          .          .           void ActiveObjectDP::setTaskHandler(TaskQueue::TaskType handler) {
 30 ( 0.00%) 10 ( 0.00%)  5 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .               this->currentHandler = handler; // Set the task handler to the provided handler
2,350 ( 0.09%) 825 ( 0.14%) 695 ( 0.30%) 62 ( 1.62%) 0          0          62 ( 2.03%) .          .           => /usr/include/c++/11/bits/std_function.h:std::function<bool (int&, int)>::operator=(std::function<bool (int&, int)> const&) (5x)
 15 ( 0.00%) 10 ( 0.00%)  .           .          .          .          .          .          .           }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           // Enqueue a task
  .           .           .           .          .          .          .          .          .           void ActiveObjectDP::enqueue(int& arg1, int arg2) {
  .           .           .           .          .          .          .          .          .               if (this->currentHandler) { // Check if the task handler is set
  .           .           .           .          .          .          .          .          .                   this->taskQueue->enqueue(this->currentHandler, arg1, arg2); // Enqueue the task with the provided arguments
  .           .           .           .          .          .          .          .          .                   notify(); // Notify the thread to start working
  .           .           .           .          .          .          .          .          .               }
  .           .           .           .          .          .          .          .          .           }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           // The main work function for the active object
 45 ( 0.00%)  5 ( 0.00%) 20 ( 0.01%)  1 ( 0.03%) 0          5 ( 0.18%) 1 ( 0.03%) 0          5 ( 0.22%)  void ActiveObjectDP::work() {
  5 ( 0.00%)  0           5 ( 0.00%)  .          .          .          .          .          .               bool success = false; // Flag to check if the task was successful, set to false by default
  .           .           .           .          .          .          .          .          .               
  .           .           .           .          .          .          .          .          .               // infinite loop till the stop flag is set to true so that the thread can be stopped
 35 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .               while (!this->stop) { // Loop until the stop flag is set
145 ( 0.01%) 50 ( 0.01%) 45 ( 0.02%)  4 ( 0.10%) 1 ( 0.01%) 5 ( 0.18%) 2 ( 0.07%) 0          5 ( 0.22%)  => /usr/include/c++/11/atomic:std::atomic<bool>::operator bool() const (5x)
  .           .           .           .          .          .          .          .          .                   
 40 ( 0.00%)  5 ( 0.00%) 10 ( 0.00%)  5 ( 0.13%) 0          0          1 ( 0.03%) .          .                   if (taskQueue->isEmpty()) { // Check if the task queue is empty
340 ( 0.01%) 110 ( 0.02%) 100 ( 0.04%)  8 ( 0.21%) 0          10 ( 0.35%) 5 ( 0.16%) 0          10 ( 0.45%)  => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<TaskQueue, std::default_delete<TaskQueue> >::operator->() const (5x)
235 ( 0.01%) 80 ( 0.01%) 60 ( 0.03%) 18 ( 0.47%) 0          0          6 ( 0.20%) .          .           => /home/yairco/OS/FinalProject/OS_Project/TaskQueue.cpp:TaskQueue::isEmpty() const (5x)
 10 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .                       this->working = false; // Set the working flag to false
 20 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%)  .          .          .          .          .          .                       this->activeTask_condition.notify_all(); // Notify all the threads waiting on the condition variable
1,153 ( 0.05%) 334 ( 0.05%) 151 ( 0.06%) 24 ( 0.63%) 16 ( 0.12%) 16 ( 0.56%) 15 ( 0.49%) 9 ( 0.10%) 16 ( 0.71%)  => ???:0x000000000010cb60 (5x)
  .           .           .           .          .          .          .          .          .           
 30 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%)  5 ( 0.13%) 0          0          1 ( 0.03%) .          .                       std::unique_lock<std::mutex> lock(activeTask_mutex);
605 ( 0.02%) 185 ( 0.03%) 135 ( 0.06%) 19 ( 0.50%) 1 ( 0.01%) 0          6 ( 0.20%) .          .           => /usr/include/c++/11/bits/unique_lock.h:std::unique_lock<std::mutex>::unique_lock(std::mutex&) (5x)
150 ( 0.01%) 15 ( 0.00%) 35 ( 0.01%) 12 ( 0.31%) 0          0          2 ( 0.07%) .          .                        std::cout << "Stage " << stageID << " (Thread " << std::this_thread::get_id() << ") is sleeping" << std::endl;
5,042 ( 0.20%) 1,202 ( 0.20%) 631 ( 0.27%) 42 ( 1.10%) 16 ( 0.12%) 2 ( 0.07%) 21 ( 0.69%) 9 ( 0.10%) 2 ( 0.09%)  => /usr/include/c++/11/thread:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::thread::id) (5x)
4,781 ( 0.19%) 1,280 ( 0.21%) 672 ( 0.29%) 56 ( 1.47%) 4 ( 0.03%) 8 ( 0.28%) 5 ( 0.16%) 1 ( 0.01%) 8 ( 0.36%)  => ???:0x000000000010c9a0 (15x)
2,517 ( 0.10%) 815 ( 0.13%) 404 ( 0.17%) 47 ( 1.23%) 4 ( 0.03%) 0          1 ( 0.03%) .          .           => ???:0x000000000010c9d0 (5x)
1,993 ( 0.08%) 520 ( 0.09%) 305 ( 0.13%) 27 ( 0.71%) 4 ( 0.03%) 9 ( 0.32%) 0          0          9 ( 0.40%)  => ???:0x000000000010cba0 (5x)
175 ( 0.01%) 65 ( 0.01%) 40 ( 0.02%)  3 ( 0.08%) 1 ( 0.01%) 0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/std_thread.h:std::this_thread::get_id() (5x)
  .           .           .           .          .          .          .          .          .                       
  .           .           .           .          .          .          .          .          .                       // Wait until a task is enqueued and the previous stage is done working or the stop flag is set
 75 ( 0.00%) 30 ( 0.00%) 15 ( 0.01%)  3 ( 0.08%) 0          0          1 ( 0.03%) .          .                       activeTask_condition.wait(lock, [this] {
2,632 ( 0.10%) 701 ( 0.12%) 566 ( 0.24%) 54 ( 1.41%) 18 ( 0.14%) 1 ( 0.04%) 25 ( 0.82%) 7 ( 0.08%) .           => /usr/include/c++/11/condition_variable:void std::condition_variable::wait<ActiveObjectDP::work()::{lambda()#1}>(std::unique_lock<std::mutex>&, ActiveObjectDP::work()::{lambda()#1}) (5x)
 65 ( 0.00%)  0          15 ( 0.01%)  3 ( 0.08%) 0          0          1 ( 0.03%) .          .                           return (!taskQueue->isEmpty() && this->prevStageStatus) || stop;
340 ( 0.01%) 110 ( 0.02%) 100 ( 0.04%)  1 ( 0.03%) .          .          .          .          .           => /usr/include/c++/11/bits/unique_ptr.h:std::unique_ptr<TaskQueue, std::default_delete<TaskQueue> >::operator->() const (5x)
235 ( 0.01%) 80 ( 0.01%) 60 ( 0.03%)  5 ( 0.13%) 2 ( 0.02%) .          .          .          .           => /home/yairco/OS/FinalProject/OS_Project/TaskQueue.cpp:TaskQueue::isEmpty() const (5x)
145 ( 0.01%) 50 ( 0.01%) 45 ( 0.02%)  .          .          .          .          .          .           => /usr/include/c++/11/atomic:std::atomic<bool>::operator bool() const (5x)
 10 ( 0.00%) 10 ( 0.00%)  .           .          .          .          .          .          .                       });
  .           .           .           .          .          .          .          .          .                       
  .           .           .           .          .          .          .          .          .                       std::cout << "Stage " << stageID << " (Thread " << std::this_thread::get_id() << ") has woke up" << std::endl;
  .           .           .           .          .          .          .          .          .                   
  .           .           .           .          .          .          .          .          .                   } else if(!this->prevStageStatus) { // Check if the previous stage is active
  .           .           .           .          .          .          .          .          .                       success = false; // Set the success flag to false
  .           .           .           .          .          .          .          .          .                       this->working = false; // Set the working flag to false so that the stage needs to wait
  .           .           .           .          .          .          .          .          .                       this->updateNextStage(success); // Update the next stage with the success flag (false) to stop the next stage
  .           .           .           .          .          .          .          .          .                   
-- line 69 ----------------------------------------
-- line 75 ----------------------------------------
  .           .           .           .          .          .          .          .          .                           this->updateNextStage(success); // Update the next stage with the success flag
  .           .           .           .          .          .          .          .          .                       }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .                   } else return;  // If the stop flag is set, return to stop the thread
  .           .           .           .          .          .          .          .          .               }
  .           .           .           .          .          .          .          .          .           }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           // Set the previous stage status
  7 ( 0.00%)  0           3 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .           void ActiveObjectDP::setPrevStageStatus(bool status) {
 15 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%)  1 ( 0.03%) 0          0          1 ( 0.03%) .          .               if(this->nextStage && this->nextStage.get() == this) return;  // If the next stage is the same as this stage, return because the next stage is not set (exit condition)
 10 ( 0.00%)  4 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>::operator bool() const (1x)
  8 ( 0.00%)  4 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .           => /usr/include/c++/11/bits/shared_ptr_base.h:std::__shared_ptr<ActiveObjectDP, (__gnu_cxx::_Lock_policy)2>::get() const (1x)
  4 ( 0.00%)  2 ( 0.00%)  1 ( 0.00%)  .          .          .          .          .          .               this->prevStageStatus = status;  // Set the previous stage status to the provided status
  2 ( 0.00%)  2 ( 0.00%)  .           .          .          .          .          .          .           }
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .           // Update the next stage
  .           .           .           .          .          .          .          .          .           void ActiveObjectDP::updateNextStage(bool status) {
  .           .           .           .          .          .          .          .          .               if (this->nextStage && this->nextStage.get() == this) return; // If the next stage is the same as this stage, return because the next stage is not set (exit condition)
  .           .           .           .          .          .          .          .          .               this->nextStage->setPrevStageStatus(status); // Set the previous stage status of the next stage to the provided status (this stage's success status)
  .           .           .           .          .          .          .          .          .               std::cout<<"******** Notifying Next Stage (Stage number: "<< this->nextStage->stageID <<") ********"<<std::endl;    
  .           .           .           .          .          .          .          .          .               if (this->stageID == 4) { // Check if the next stage is the client exit stage
  .           .           .           .          .          .          .          .          .                   std::cout<<"****** Client has Disconnected ******"<<std::endl;
-- line 94 ----------------------------------------
-- line 135 ----------------------------------------
  .           .           .           .          .          .          .          .          .               activeTask_condition.wait(lock_pipe, [this] { return !this->isActive(); }); // Wait until the stage is not active
  .           .           .           .          .          .          .          .          .               pipe->setStageActiveStatus(false); // Set the stage active status to false
  .           .           .           .          .          .          .          .          .           
  .           .           .           .          .          .          .          .          .               std::cout<<"Stage Finished its work"<<std::endl;
  .           .           .           .          .          .          .          .          .               } else { // If the stage is not working
  .           .           .           .          .          .          .          .          .                   pipe->setStageActiveStatus(false); // Set the stage active status to false
  .           .           .           .          .          .          .          .          .                   std::cout<<"Stage is not working"<<std::endl;
  .           .           .           .          .          .          .          .          .               }
 21 ( 0.00%)  6 ( 0.00%)  5 ( 0.00%)  3 ( 0.08%) 0          0          3 ( 0.10%) .          .           }
127 ( 0.01%) 31 ( 0.01%) 27 ( 0.01%)  1 ( 0.03%) 0          1 ( 0.04%) 1 ( 0.03%) 0          1 ( 0.04%)  => ActiveObjectDP.cpp:__static_initialization_and_destruction_0(int, int) (1x)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/unique_lock.h
--------------------------------------------------------------------------------
Ir          Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 58 ----------------------------------------
 .           .           .          .          .          .          .          .          .               {
 .           .           .          .          .          .          .          .          .               public:
 .           .           .          .          .          .          .          .          .                 typedef _Mutex mutex_type;
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 unique_lock() noexcept
 .           .           .          .          .          .          .          .          .                 : _M_device(0), _M_owns(false)
 .           .           .          .          .          .          .          .          .                 { }
 .           .           .          .          .          .          .          .          .           
30 ( 0.00%)  0          15 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 explicit unique_lock(mutex_type& __m)
35 ( 0.00%) 15 ( 0.00%) 15 ( 0.01%) .          .          .          .          .          .                 : _M_device(std::__addressof(__m)), _M_owns(false)
35 ( 0.00%) 15 ( 0.00%) 10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/move.h:std::mutex* std::__addressof<std::mutex>(std::mutex&) (5x)
 .           .           .          .          .          .          .          .          .                 {
15 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           	lock();
465 ( 0.02%) 135 ( 0.02%) 85 ( 0.04%) 17 ( 0.45%) 1 ( 0.01%) 0          4 ( 0.13%) .          .           => /usr/include/c++/11/bits/unique_lock.h:std::unique_lock<std::mutex>::lock() (5x)
10 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           	_M_owns = true;
15 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 unique_lock(mutex_type& __m, defer_lock_t) noexcept
 .           .           .          .          .          .          .          .          .                 : _M_device(std::__addressof(__m)), _M_owns(false)
 .           .           .          .          .          .          .          .          .                 { }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 unique_lock(mutex_type& __m, try_to_lock_t)
 .           .           .          .          .          .          .          .          .                 : _M_device(std::__addressof(__m)), _M_owns(_M_device->try_lock())
 .           .           .          .          .          .          .          .          .                 { }
-- line 79 ----------------------------------------
-- line 123 ----------------------------------------
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           	__u._M_device = 0;
 .           .           .          .          .          .          .          .          .           	__u._M_owns = false;
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           	return *this;
 .           .           .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 void
25 ( 0.00%)  0          10 ( 0.00%) .          .          .          .          .          .                 lock()
 .           .           .          .          .          .          .          .          .                 {
20 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .          .           	if (!_M_device)
 .           .           .          .          .          .          .          .          .           	  __throw_system_error(int(errc::operation_not_permitted));
20 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .          .           	else if (_M_owns)
 .           .           .          .          .          .          .          .          .           	  __throw_system_error(int(errc::resource_deadlock_would_occur));
 .           .           .          .          .          .          .          .          .           	else
 .           .           .          .          .          .          .          .          .           	  {
20 ( 0.00%) 10 ( 0.00%)  5 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	    _M_device->lock();
355 ( 0.01%) 90 ( 0.01%) 65 ( 0.03%) 16 ( 0.42%) 1 ( 0.01%) 0          3 ( 0.10%) .          .           => /usr/include/c++/11/bits/std_mutex.h:std::mutex::lock() (5x)
10 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           	    _M_owns = true;
 .           .           .          .          .          .          .          .          .           	  }
15 ( 0.00%) 10 ( 0.00%)  .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 bool
 .           .           .          .          .          .          .          .          .                 try_lock()
 .           .           .          .          .          .          .          .          .                 {
 .           .           .          .          .          .          .          .          .           	if (!_M_device)
 .           .           .          .          .          .          .          .          .           	  __throw_system_error(int(errc::operation_not_permitted));
 .           .           .          .          .          .          .          .          .           	else if (_M_owns)
 .           .           .          .          .          .          .          .          .           	  __throw_system_error(int(errc::resource_deadlock_would_occur));
-- line 150 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/thread
--------------------------------------------------------------------------------
Ir          Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 84 ----------------------------------------
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             inline bool
 .           .           .          .          .          .          .          .          .             operator>=(thread::id __x, thread::id __y) noexcept
 .           .           .          .          .          .          .          .          .             { return !(__x < __y); }
 .           .           .          .          .          .          .          .          .           #endif // __cpp_lib_three_way_comparison
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             template<class _CharT, class _Traits>
 .           .           .          .          .          .          .          .          .               inline basic_ostream<_CharT, _Traits>&
45 ( 0.00%)  5 ( 0.00%) 20 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .               operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id)
 .           .           .          .          .          .          .          .          .               {
50 ( 0.00%) 10 ( 0.00%) 10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 if (__id == thread::id())
55 ( 0.00%) 20 ( 0.00%) 15 ( 0.01%) 2 ( 0.05%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/std_thread.h:std::operator==(std::thread::id, std::thread::id) (5x)
45 ( 0.00%) 15 ( 0.00%) 15 ( 0.01%) 2 ( 0.05%) .          .          .          .          .           => /usr/include/c++/11/bits/std_thread.h:std::thread::id::id() (5x)
 .           .           .          .          .          .          .          .          .           	return __out << "thread::id of a non-executing thread";
 .           .           .          .          .          .          .          .          .                 else
30 ( 0.00%) 10 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           	return __out << __id._M_thread;
4,792 ( 0.19%) 1,122 ( 0.18%) 566 ( 0.24%) 35 ( 0.92%) 16 ( 0.12%) 2 ( 0.07%) 18 ( 0.59%) 9 ( 0.10%) 2 ( 0.09%)  => ???:0x000000000010c6e0 (5x)
25 ( 0.00%) 20 ( 0.00%)  0          1 ( 0.03%) .          .          .          .          .               }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           #ifdef __cpp_lib_jthread
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .             /// A thread that can be requested to stop and automatically joined.
 .           .           .          .          .          .          .          .          .             class jthread
 .           .           .          .          .          .          .          .          .             {
 .           .           .          .          .          .          .          .          .             public:
 .           .           .          .          .          .          .          .          .               using id = thread::id;
-- line 106 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_queue.h
--------------------------------------------------------------------------------
Ir          Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr DLmw 

-- line 158 ----------------------------------------
 .           .           .          .          .          .          .          .          .                  */
 .           .           .          .          .          .          .          .          .           #if __cplusplus < 201103L
 .           .           .          .          .          .          .          .          .                 explicit
 .           .           .          .          .          .          .          .          .                 queue(const _Sequence& __c = _Sequence())
 .           .           .          .          .          .          .          .          .                 : c(__c) { }
 .           .           .          .          .          .          .          .          .           #else
 .           .           .          .          .          .          .          .          .                 template<typename _Seq = _Sequence, typename _Requires = typename
 .           .           .          .          .          .          .          .          .           	       enable_if<is_default_constructible<_Seq>::value>::type>
25 ( 0.00%)  0          10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	queue()
85 ( 0.00%) 20 ( 0.00%) 55 ( 0.02%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	: c() { }
5,033 ( 0.20%) 1,324 ( 0.22%) 1,076 ( 0.46%) 43 ( 1.13%) 5 ( 0.04%) 12 ( 0.42%) 39 ( 1.28%) 0          11 ( 0.49%)  => /usr/include/c++/11/bits/stl_deque.h:std::deque<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> >::deque() (5x)
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 explicit
 .           .           .          .          .          .          .          .          .                 queue(const _Sequence& __c)
 .           .           .          .          .          .          .          .          .                 : c(__c) { }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 explicit
 .           .           .          .          .          .          .          .          .                 queue(_Sequence&& __c)
 .           .           .          .          .          .          .          .          .                 : c(std::move(__c)) { }
-- line 175 ----------------------------------------
-- line 195 ----------------------------------------
 .           .           .          .          .          .          .          .          .           	queue(queue&& __q, const _Alloc& __a)
 .           .           .          .          .          .          .          .          .           	: c(std::move(__q.c), __a) { }
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /**
 .           .           .          .          .          .          .          .          .                  *  Returns true if the %queue is empty.
 .           .           .          .          .          .          .          .          .                  */
 .           .           .          .          .          .          .          .          .                 _GLIBCXX_NODISCARD bool
50 ( 0.00%)  0          20 ( 0.01%) 5 ( 0.13%) 0          0          1 ( 0.03%) .          .                 empty() const
50 ( 0.00%) 30 ( 0.00%) 10 ( 0.00%) .          .          .          .          .          .                 { return c.empty(); }
270 ( 0.01%) 100 ( 0.02%) 60 ( 0.03%) 7 ( 0.18%) 2 ( 0.02%) 0          3 ( 0.10%) .          .           => /usr/include/c++/11/bits/stl_deque.h:std::deque<TaskQueue::TaskData, std::allocator<TaskQueue::TaskData> >::empty() const (10x)
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /**  Returns the number of elements in the %queue.  */
 .           .           .          .          .          .          .          .          .                 size_type
 .           .           .          .          .          .          .          .          .                 size() const
 .           .           .          .          .          .          .          .          .                 { return c.size(); }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /**
 .           .           .          .          .          .          .          .          .                  *  Returns a read/write reference to the data at the first
-- line 212 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_vector.h
--------------------------------------------------------------------------------
Ir          Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 89 ----------------------------------------
 .           .           .          .          .          .          .          .          .                  	pointer;
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 struct _Vector_impl_data
 .           .           .          .          .          .          .          .          .                 {
 .           .           .          .          .          .          .          .          .           	pointer _M_start;
 .           .           .          .          .          .          .          .          .           	pointer _M_finish;
 .           .           .          .          .          .          .          .          .           	pointer _M_end_of_storage;
 .           .           .          .          .          .          .          .          .           
 8 ( 0.00%)  0           4 ( 0.00%) .          .          .          .          .          .           	_Vector_impl_data() _GLIBCXX_NOEXCEPT
12 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%) 1 ( 0.03%) 0          2 ( 0.07%) 1 ( 0.03%) 0          2 ( 0.09%)  	: _M_start(), _M_finish(), _M_end_of_storage()
 6 ( 0.00%)  4 ( 0.00%)  .          .          .          .          .          .          .           	{ }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
 .           .           .          .          .          .          .          .          .           	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 .           .           .          .          .          .          .          .          .           	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 .           .           .          .          .          .          .          .          .           	  _M_end_of_storage(__x._M_end_of_storage)
 .           .           .          .          .          .          .          .          .           	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           
-- line 107 ----------------------------------------
-- line 120 ----------------------------------------
 .           .           .          .          .          .          .          .          .           	  // information used by TBAA.
 .           .           .          .          .          .          .          .          .           	  _Vector_impl_data __tmp;
 .           .           .          .          .          .          .          .          .           	  __tmp._M_copy_data(*this);
 .           .           .          .          .          .          .          .          .           	  _M_copy_data(__x);
 .           .           .          .          .          .          .          .          .           	  __x._M_copy_data(__tmp);
 .           .           .          .          .          .          .          .          .           	}
 .           .           .          .          .          .          .          .          .                 };
 .           .           .          .          .          .          .          .          .           
11 ( 0.00%)  3 ( 0.00%)  3 ( 0.00%) 1 ( 0.03%) .          .          .          .          .                 struct _Vector_impl
18 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<std::pair<int, std::shared_ptr<std::thread> > >::~allocator() (1x)
 .           .           .          .          .          .          .          .          .           	: public _Tp_alloc_type, public _Vector_impl_data
 .           .           .          .          .          .          .          .          .                 {
10 ( 0.00%)  0           4 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 .           .           .          .          .          .          .          .          .           	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
12 ( 0.00%)  4 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .           	: _Tp_alloc_type()
18 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) 3 ( 0.08%) 0          0          3 ( 0.10%) .          .           => /usr/include/c++/11/bits/allocator.h:std::allocator<std::shared_ptr<ActiveObjectDP> >::allocator() (1x)
13 ( 0.00%)  5 ( 0.00%)  5 ( 0.00%) 1 ( 0.03%) 0          1 ( 0.04%) 1 ( 0.03%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::_Vector_impl_data::_Vector_impl_data() (1x)
 6 ( 0.00%)  4 ( 0.00%)  .          .          .          .          .          .          .           	{ }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 .           .           .          .          .          .          .          .          .           	: _Tp_alloc_type(__a)
 .           .           .          .          .          .          .          .          .           	{ }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
 .           .           .          .          .          .          .          .          .           	// Not defaulted, to enforce noexcept(true) even when
 .           .           .          .          .          .          .          .          .           	// !is_nothrow_move_constructible<_Tp_alloc_type>.
-- line 142 ----------------------------------------
-- line 268 ----------------------------------------
 .           .           .          .          .          .          .          .          .           #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
 .           .           .          .          .          .          .          .          .           #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 .           .           .          .          .          .          .          .          .                 };
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .               public:
 .           .           .          .          .          .          .          .          .                 typedef _Alloc allocator_type;
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 _Tp_alloc_type&
 8 ( 0.00%)  0           4 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 6 ( 0.00%)  6 ( 0.00%)  0          1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 { return this->_M_impl; }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 const _Tp_alloc_type&
 4 ( 0.00%)  0           2 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 3 ( 0.00%)  3 ( 0.00%)  .          .          .          .          .          .          .                 { return this->_M_impl; }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 allocator_type
 .           .           .          .          .          .          .          .          .                 get_allocator() const _GLIBCXX_NOEXCEPT
 .           .           .          .          .          .          .          .          .                 { return allocator_type(_M_get_Tp_allocator()); }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
22 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%) .          .          .          .          .          .                 _Vector_base() = default;
45 ( 0.00%) 14 ( 0.00%) 14 ( 0.01%) 4 ( 0.10%) 0          1 ( 0.04%) 4 ( 0.13%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::_Vector_impl::_Vector_impl() (1x)
 .           .           .          .          .          .          .          .          .           #else
 .           .           .          .          .          .          .          .          .                 _Vector_base() { }
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 .           .           .          .          .          .          .          .          .                 : _M_impl(__a) { }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 // Kept for ABI compatibility.
-- line 296 ----------------------------------------
-- line 325 ----------------------------------------
 .           .           .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           # endif
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 _Vector_base(const allocator_type& __a, _Vector_base&& __x)
 .           .           .          .          .          .          .          .          .                 : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
 .           .           .          .          .          .          .          .          .                 { }
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           
 5 ( 0.00%)  0           2 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 ~_Vector_base() _GLIBCXX_NOEXCEPT
 .           .           .          .          .          .          .          .          .                 {
 7 ( 0.00%)  3 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .           	_M_deallocate(_M_impl._M_start,
12 ( 0.00%)  3 ( 0.00%)  4 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::pair<int, std::shared_ptr<std::thread> >, std::allocator<std::pair<int, std::shared_ptr<std::thread> > > >::_M_deallocate(std::pair<int, std::shared_ptr<std::thread> >*, unsigned long) (1x)
10 ( 0.00%)  4 ( 0.00%)  .          .          .          .          .          .          .           		      _M_impl._M_end_of_storage - _M_impl._M_start);
 6 ( 0.00%)  3 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .                 }
29 ( 0.00%)  8 ( 0.00%)  8 ( 0.00%) 1 ( 0.03%) .          .          .          .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::pair<int, std::shared_ptr<std::thread> >, std::allocator<std::pair<int, std::shared_ptr<std::thread> > > >::_Vector_impl::~_Vector_impl() (1x)
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .               public:
 .           .           .          .          .          .          .          .          .                 _Vector_impl _M_impl;
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 pointer
 6 ( 0.00%)  0           3 ( 0.00%) .          .          .          .          .          .                 _M_allocate(size_t __n)
 .           .           .          .          .          .          .          .          .                 {
 .           .           .          .          .          .          .          .          .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 8 ( 0.00%)  3 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .           	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
248 ( 0.01%) 50 ( 0.01%) 42 ( 0.02%) 5 ( 0.13%) 0          1 ( 0.04%) 3 ( 0.10%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::shared_ptr<ActiveObjectDP> > >::allocate(std::allocator<std::shared_ptr<ActiveObjectDP> >&, unsigned long) (1x)
 2 ( 0.00%)  2 ( 0.00%)  0          1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 void
14 ( 0.00%)  0           8 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _M_deallocate(pointer __p, size_t __n)
 .           .           .          .          .          .          .          .          .                 {
 .           .           .          .          .          .          .          .          .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 4 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .          .           	if (__p)
 .           .           .          .          .          .          .          .          .           	  _Tr::deallocate(_M_impl, __p, __n);
 6 ( 0.00%)  4 ( 0.00%)  .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .               protected:
 .           .           .          .          .          .          .          .          .                 void
 .           .           .          .          .          .          .          .          .                 _M_create_storage(size_t __n)
 .           .           .          .          .          .          .          .          .                 {
 .           .           .          .          .          .          .          .          .           	this->_M_impl._M_start = this->_M_allocate(__n);
 .           .           .          .          .          .          .          .          .           	this->_M_impl._M_finish = this->_M_impl._M_start;
 .           .           .          .          .          .          .          .          .           	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
-- line 363 ----------------------------------------
-- line 445 ----------------------------------------
 .           .           .          .          .          .          .          .          .                 {
 .           .           .          .          .          .          .          .          .           	// Instantiating std::__relocate_a might cause an error outside the
 .           .           .          .          .          .          .          .          .           	// immediate context (in __relocate_object_a's noexcept-specifier),
 .           .           .          .          .          .          .          .          .           	// so only do it if we know the type can be move-inserted into *this.
 .           .           .          .          .          .          .          .          .           	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 .           .           .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 static pointer
 8 ( 0.00%)  0           5 ( 0.00%) .          .          .          .          .          .                 _S_do_relocate(pointer __first, pointer __last, pointer __result,
 .           .           .          .          .          .          .          .          .           		     _Tp_alloc_type& __alloc, true_type) noexcept
 .           .           .          .          .          .          .          .          .                 {
 6 ( 0.00%)  4 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .           	return std::__relocate_a(__first, __last, __result, __alloc);
72 ( 0.00%) 24 ( 0.00%) 24 ( 0.01%) 4 ( 0.10%) 0          0          4 ( 0.13%) .          .           => /usr/include/c++/11/bits/stl_uninitialized.h:std::shared_ptr<ActiveObjectDP>* std::__relocate_a<std::shared_ptr<ActiveObjectDP>*, std::shared_ptr<ActiveObjectDP>*, std::allocator<std::shared_ptr<ActiveObjectDP> > >(std::shared_ptr<ActiveObjectDP>*, std::shared_ptr<ActiveObjectDP>*, std::shared_ptr<ActiveObjectDP>*, std::allocator<std::shared_ptr<ActiveObjectDP> >&) (1x)
 2 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 static pointer
 .           .           .          .          .          .          .          .          .                 _S_do_relocate(pointer, pointer, pointer __result,
 .           .           .          .          .          .          .          .          .           		     _Tp_alloc_type&, false_type) noexcept
 .           .           .          .          .          .          .          .          .                 { return __result; }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 static pointer
 8 ( 0.00%)  0           5 ( 0.00%) .          .          .          .          .          .                 _S_relocate(pointer __first, pointer __last, pointer __result,
 .           .           .          .          .          .          .          .          .           		  _Tp_alloc_type& __alloc) noexcept
 .           .           .          .          .          .          .          .          .                 {
 .           .           .          .          .          .          .          .          .           	using __do_it = __bool_constant<_S_use_relocate()>;
 6 ( 0.00%)  4 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .           	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
88 ( 0.00%) 30 ( 0.00%) 30 ( 0.01%) 4 ( 0.10%) 0          0          4 ( 0.13%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::_S_do_relocate(std::shared_ptr<ActiveObjectDP>*, std::shared_ptr<ActiveObjectDP>*, std::shared_ptr<ActiveObjectDP>*, std::allocator<std::shared_ptr<ActiveObjectDP> >&, std::integral_constant<bool, true>) (1x)
 2 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           #endif // C++11
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .               protected:
 .           .           .          .          .          .          .          .          .                 using _Base::_M_allocate;
 .           .           .          .          .          .          .          .          .                 using _Base::_M_deallocate;
 .           .           .          .          .          .          .          .          .                 using _Base::_M_impl;
 .           .           .          .          .          .          .          .          .                 using _Base::_M_get_Tp_allocator;
 .           .           .          .          .          .          .          .          .           
-- line 478 ----------------------------------------
-- line 479 ----------------------------------------
 .           .           .          .          .          .          .          .          .               public:
 .           .           .          .          .          .          .          .          .                 // [23.2.4.1] construct/copy/destroy
 .           .           .          .          .          .          .          .          .                 // (assign() and get_allocator() are also listed in this section)
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /**
 .           .           .          .          .          .          .          .          .                  *  @brief  Creates a %vector with no elements.
 .           .           .          .          .          .          .          .          .                  */
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
22 ( 0.00%)  6 ( 0.00%)  6 ( 0.00%) 4 ( 0.10%) 0          0          4 ( 0.13%) .          .                 vector() = default;
56 ( 0.00%) 17 ( 0.00%) 17 ( 0.01%) 4 ( 0.10%) 0          1 ( 0.04%) 4 ( 0.13%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::_Vector_base() (1x)
 .           .           .          .          .          .          .          .          .           #else
 .           .           .          .          .          .          .          .          .                 vector() { }
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /**
 .           .           .          .          .          .          .          .          .                  *  @brief  Creates a %vector with no elements.
 .           .           .          .          .          .          .          .          .                  *  @param  __a  An allocator object.
 .           .           .          .          .          .          .          .          .                  */
-- line 495 ----------------------------------------
-- line 670 ----------------------------------------
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /**
 .           .           .          .          .          .          .          .          .                  *  The dtor only erases the elements, and note that if the
 .           .           .          .          .          .          .          .          .                  *  elements themselves are pointers, the pointed-to memory is
 .           .           .          .          .          .          .          .          .                  *  not touched in any way.  Managing the pointer is the user's
 .           .           .          .          .          .          .          .          .                  *  responsibility.
 .           .           .          .          .          .          .          .          .                  */
 5 ( 0.00%)  0           2 ( 0.00%) 2 ( 0.05%) 0          0          1 ( 0.03%) .          .                 ~vector() _GLIBCXX_NOEXCEPT
 .           .           .          .          .          .          .          .          .                 {
 7 ( 0.00%)  4 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .           	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
43 ( 0.00%) 12 ( 0.00%) 12 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/alloc_traits.h:void std::_Destroy<std::pair<int, std::shared_ptr<std::thread> >*, std::pair<int, std::shared_ptr<std::thread> > >(std::pair<int, std::shared_ptr<std::thread> >*, std::pair<int, std::shared_ptr<std::thread> >*, std::allocator<std::pair<int, std::shared_ptr<std::thread> > >&) (1x)
 4 ( 0.00%)  1 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .           		      _M_get_Tp_allocator());
 7 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::pair<int, std::shared_ptr<std::thread> >, std::allocator<std::pair<int, std::shared_ptr<std::thread> > > >::_M_get_Tp_allocator() (1x)
 .           .           .          .          .          .          .          .          .           	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 6 ( 0.00%)  3 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .                 }
69 ( 0.00%) 21 ( 0.00%) 16 ( 0.01%) 3 ( 0.08%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::pair<int, std::shared_ptr<std::thread> >, std::allocator<std::pair<int, std::shared_ptr<std::thread> > > >::~_Vector_base() (1x)
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /**
 .           .           .          .          .          .          .          .          .                  *  @brief  %Vector assignment operator.
 .           .           .          .          .          .          .          .          .                  *  @param  __x  A %vector of identical element and allocator types.
 .           .           .          .          .          .          .          .          .                  *
 .           .           .          .          .          .          .          .          .                  *  All the elements of @a __x are copied, but any unused capacity in
 .           .           .          .          .          .          .          .          .                  *  @a __x will not be copied.
 .           .           .          .          .          .          .          .          .                  *
-- line 691 ----------------------------------------
-- line 803 ----------------------------------------
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 // iterators
 .           .           .          .          .          .          .          .          .                 /**
 .           .           .          .          .          .          .          .          .                  *  Returns a read/write iterator that points to the first
 .           .           .          .          .          .          .          .          .                  *  element in the %vector.  Iteration is done in ordinary
 .           .           .          .          .          .          .          .          .                  *  element order.
 .           .           .          .          .          .          .          .          .                  */
 .           .           .          .          .          .          .          .          .                 iterator
 8 ( 0.00%)  1 ( 0.00%)  3 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 begin() _GLIBCXX_NOEXCEPT
11 ( 0.00%)  6 ( 0.00%)  1 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 { return iterator(this->_M_impl._M_start); }
12 ( 0.00%)  5 ( 0.00%)  4 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<int, std::shared_ptr<std::thread> >*, std::vector<std::pair<int, std::shared_ptr<std::thread> >, std::allocator<std::pair<int, std::shared_ptr<std::thread> > > > >::__normal_iterator(std::pair<int, std::shared_ptr<std::thread> >* const&) (1x)
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /**
 .           .           .          .          .          .          .          .          .                  *  Returns a read-only (constant) iterator that points to the
 .           .           .          .          .          .          .          .          .                  *  first element in the %vector.  Iteration is done in ordinary
 .           .           .          .          .          .          .          .          .                  *  element order.
 .           .           .          .          .          .          .          .          .                  */
 .           .           .          .          .          .          .          .          .                 const_iterator
 .           .           .          .          .          .          .          .          .                 begin() const _GLIBCXX_NOEXCEPT
-- line 820 ----------------------------------------
-- line 821 ----------------------------------------
 .           .           .          .          .          .          .          .          .                 { return const_iterator(this->_M_impl._M_start); }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /**
 .           .           .          .          .          .          .          .          .                  *  Returns a read/write iterator that points one past the last
 .           .           .          .          .          .          .          .          .                  *  element in the %vector.  Iteration is done in ordinary
 .           .           .          .          .          .          .          .          .                  *  element order.
 .           .           .          .          .          .          .          .          .                  */
 .           .           .          .          .          .          .          .          .                 iterator
48 ( 0.00%)  6 ( 0.00%) 18 ( 0.01%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 end() _GLIBCXX_NOEXCEPT
72 ( 0.00%) 36 ( 0.01%)  6 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 { return iterator(this->_M_impl._M_finish); }
12 ( 0.00%)  5 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<int, std::shared_ptr<std::thread> >*, std::vector<std::pair<int, std::shared_ptr<std::thread> >, std::allocator<std::pair<int, std::shared_ptr<std::thread> > > > >::__normal_iterator(std::pair<int, std::shared_ptr<std::thread> >* const&) (1x)
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /**
 .           .           .          .          .          .          .          .          .                  *  Returns a read-only (constant) iterator that points one past
 .           .           .          .          .          .          .          .          .                  *  the last element in the %vector.  Iteration is done in
 .           .           .          .          .          .          .          .          .                  *  ordinary element order.
 .           .           .          .          .          .          .          .          .                  */
 .           .           .          .          .          .          .          .          .                 const_iterator
 .           .           .          .          .          .          .          .          .                 end() const _GLIBCXX_NOEXCEPT
-- line 838 ----------------------------------------
-- line 910 ----------------------------------------
 .           .           .          .          .          .          .          .          .                 const_reverse_iterator
 .           .           .          .          .          .          .          .          .                 crend() const noexcept
 .           .           .          .          .          .          .          .          .                 { return const_reverse_iterator(begin()); }
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 // [23.2.4.2] capacity
 .           .           .          .          .          .          .          .          .                 /**  Returns the number of elements in the %vector.  */
 .           .           .          .          .          .          .          .          .                 size_type
 4 ( 0.00%)  0           2 ( 0.00%) .          .          .          .          .          .                 size() const _GLIBCXX_NOEXCEPT
 9 ( 0.00%)  6 ( 0.00%)  0          1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /**  Returns the size() of the largest possible %vector.  */
 .           .           .          .          .          .          .          .          .                 size_type
 5 ( 0.00%)  0           2 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 max_size() const _GLIBCXX_NOEXCEPT
 7 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .                 { return _S_max_size(_M_get_Tp_allocator()); }
66 ( 0.00%) 22 ( 0.00%) 18 ( 0.01%) 6 ( 0.16%) 0          0          6 ( 0.20%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::_S_max_size(std::allocator<std::shared_ptr<ActiveObjectDP> > const&) (1x)
 7 ( 0.00%)  3 ( 0.00%)  2 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::_M_get_Tp_allocator() const (1x)
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
 .           .           .          .          .          .          .          .          .                 /**
 .           .           .          .          .          .          .          .          .                  *  @brief  Resizes the %vector to the specified number of elements.
 .           .           .          .          .          .          .          .          .                  *  @param  __new_size  Number of elements the %vector should contain.
 .           .           .          .          .          .          .          .          .                  *
 .           .           .          .          .          .          .          .          .                  *  This function will %resize the %vector to the specified
 .           .           .          .          .          .          .          .          .                  *  number of elements.  If the number is smaller than the
-- line 932 ----------------------------------------
-- line 990 ----------------------------------------
 .           .           .          .          .          .          .          .          .                 { _M_shrink_to_fit(); }
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /**
 .           .           .          .          .          .          .          .          .                  *  Returns the total number of elements that the %vector can
 .           .           .          .          .          .          .          .          .                  *  hold before needing to allocate more memory.
 .           .           .          .          .          .          .          .          .                  */
 .           .           .          .          .          .          .          .          .                 size_type
 4 ( 0.00%)  0           2 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 capacity() const _GLIBCXX_NOEXCEPT
 2 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .          .                 { return size_type(this->_M_impl._M_end_of_storage
 7 ( 0.00%)  4 ( 0.00%)  .          .          .          .          .          .          .           			 - this->_M_impl._M_start); }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /**
 .           .           .          .          .          .          .          .          .                  *  Returns true if the %vector is empty.  (Thus begin() would
 .           .           .          .          .          .          .          .          .                  *  equal end().)
 .           .           .          .          .          .          .          .          .                  */
 .           .           .          .          .          .          .          .          .                 _GLIBCXX_NODISCARD bool
 .           .           .          .          .          .          .          .          .                 empty() const _GLIBCXX_NOEXCEPT
 .           .           .          .          .          .          .          .          .                 { return begin() == end(); }
-- line 1008 ----------------------------------------
-- line 1035 ----------------------------------------
 .           .           .          .          .          .          .          .          .                  *  @return  Read/write reference to data.
 .           .           .          .          .          .          .          .          .                  *
 .           .           .          .          .          .          .          .          .                  *  This operator allows for easy, array-style, data access.
 .           .           .          .          .          .          .          .          .                  *  Note that data access with this operator is unchecked and
 .           .           .          .          .          .          .          .          .                  *  out_of_range lookups are not defined. (For checked lookups
 .           .           .          .          .          .          .          .          .                  *  see at().)
 .           .           .          .          .          .          .          .          .                  */
 .           .           .          .          .          .          .          .          .                 reference
80 ( 0.00%)  0          48 ( 0.02%) .          .          .          .          .          .                 operator[](size_type __n) _GLIBCXX_NOEXCEPT
 .           .           .          .          .          .          .          .          .                 {
 .           .           .          .          .          .          .          .          .           	__glibcxx_requires_subscript(__n);
80 ( 0.00%) 48 ( 0.01%)  .          .          .          .          .          .          .           	return *(this->_M_impl._M_start + __n);
32 ( 0.00%) 32 ( 0.01%)  .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /**
 .           .           .          .          .          .          .          .          .                  *  @brief  Subscript access to the data contained in the %vector.
 .           .           .          .          .          .          .          .          .                  *  @param __n The index of the element for which data should be
 .           .           .          .          .          .          .          .          .                  *  accessed.
 .           .           .          .          .          .          .          .          .                  *  @return  Read-only (constant) reference to data.
 .           .           .          .          .          .          .          .          .                  *
 .           .           .          .          .          .          .          .          .                  *  This operator allows for easy, array-style, data access.
-- line 1055 ----------------------------------------
-- line 1135 ----------------------------------------
 .           .           .          .          .          .          .          .          .           	return *begin();
 .           .           .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /**
 .           .           .          .          .          .          .          .          .                  *  Returns a read/write reference to the data at the last
 .           .           .          .          .          .          .          .          .                  *  element of the %vector.
 .           .           .          .          .          .          .          .          .                  */
 .           .           .          .          .          .          .          .          .                 reference
40 ( 0.00%)  5 ( 0.00%) 15 ( 0.01%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 back() _GLIBCXX_NOEXCEPT
 .           .           .          .          .          .          .          .          .                 {
 .           .           .          .          .          .          .          .          .           	__glibcxx_requires_nonempty();
60 ( 0.00%)  5 ( 0.00%) 25 ( 0.01%) .          .          .          .          .          .           	return *(end() - 1);
195 ( 0.01%) 70 ( 0.01%) 50 ( 0.02%) 6 ( 0.16%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObjectDP>*, std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > > >::operator-(long) const (5x)
160 ( 0.01%) 60 ( 0.01%) 40 ( 0.02%) 7 ( 0.18%) 0          0          3 ( 0.10%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::end() (5x)
40 ( 0.00%) 20 ( 0.00%) 10 ( 0.00%) 5 ( 0.13%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::shared_ptr<ActiveObjectDP>*, std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > > >::operator*() const (5x)
25 ( 0.00%) 20 ( 0.00%)  0          1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /**
 .           .           .          .          .          .          .          .          .                  *  Returns a read-only (constant) reference to the data at the
 .           .           .          .          .          .          .          .          .                  *  last element of the %vector.
 .           .           .          .          .          .          .          .          .                  */
 .           .           .          .          .          .          .          .          .                 const_reference
 .           .           .          .          .          .          .          .          .                 back() const _GLIBCXX_NOEXCEPT
 .           .           .          .          .          .          .          .          .                 {
-- line 1155 ----------------------------------------
-- line 1195 ----------------------------------------
 .           .           .          .          .          .          .          .          .           	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 .           .           .          .          .          .          .          .          .           	  }
 .           .           .          .          .          .          .          .          .           	else
 .           .           .          .          .          .          .          .          .           	  _M_realloc_insert(end(), __x);
 .           .           .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
 .           .           .          .          .          .          .          .          .                 void
30 ( 0.00%)  0          15 ( 0.01%) .          .          .          .          .          .                 push_back(value_type&& __x)
55 ( 0.00%) 20 ( 0.00%) 10 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 { emplace_back(std::move(__x)); }
1,440 ( 0.06%) 510 ( 0.08%) 415 ( 0.18%) 27 ( 0.71%) 0          1 ( 0.04%) 15 ( 0.49%) 0          1 ( 0.04%)  => /usr/include/c++/11/bits/vector.tcc:std::shared_ptr<ActiveObjectDP>& std::vector<std::shared_ptr<ActiveObjectDP>, std::allocator<std::shared_ptr<ActiveObjectDP> > >::emplace_back<std::shared_ptr<ActiveObjectDP> >(std::shared_ptr<ActiveObjectDP>&&) (5x)
35 ( 0.00%) 15 ( 0.00%) 10 ( 0.00%) 3 ( 0.08%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/move.h:std::remove_reference<std::shared_ptr<ActiveObjectDP>&>::type&& std::move<std::shared_ptr<ActiveObjectDP>&>(std::shared_ptr<ActiveObjectDP>&) (5x)
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 template<typename... _Args>
 .           .           .          .          .          .          .          .          .           #if __cplusplus > 201402L
 .           .           .          .          .          .          .          .          .           	reference
 .           .           .          .          .          .          .          .          .           #else
 .           .           .          .          .          .          .          .          .           	void
 .           .           .          .          .          .          .          .          .           #endif
 .           .           .          .          .          .          .          .          .           	emplace_back(_Args&&... __args);
-- line 1212 ----------------------------------------
-- line 1490 ----------------------------------------
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 /**
 .           .           .          .          .          .          .          .          .                  *  Erases all the elements.  Note that this function only erases the
 .           .           .          .          .          .          .          .          .                  *  elements, and that if the elements themselves are pointers, the
 .           .           .          .          .          .          .          .          .                  *  pointed-to memory is not touched in any way.  Managing the pointer is
 .           .           .          .          .          .          .          .          .                  *  the user's responsibility.
 .           .           .          .          .          .          .          .          .                  */
 .           .           .          .          .          .          .          .          .                 void
 5 ( 0.00%)  0           2 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 clear() _GLIBCXX_NOEXCEPT
 9 ( 0.00%)  5 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .                 { _M_erase_at_end(this->_M_impl._M_start); }
19 ( 0.00%)  6 ( 0.00%)  4 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .           => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, std::shared_ptr<std::thread> >, std::allocator<std::pair<int, std::shared_ptr<std::thread> > > >::_M_erase_at_end(std::pair<int, std::shared_ptr<std::thread> >*) (1x)
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .               protected:
 .           .           .          .          .          .          .          .          .                 /**
 .           .           .          .          .          .          .          .          .                  *  Memory expansion handler.  Uses the member allocation function to
 .           .           .          .          .          .          .          .          .                  *  obtain @a n bytes of memory, and then copies [first,last) into it.
 .           .           .          .          .          .          .          .          .                  */
 .           .           .          .          .          .          .          .          .                 template<typename _ForwardIterator>
 .           .           .          .          .          .          .          .          .           	pointer
-- line 1507 ----------------------------------------
-- line 1768 ----------------------------------------
 .           .           .          .          .          .          .          .          .                 {
 .           .           .          .          .          .          .          .          .           	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 .           .           .          .          .          .          .          .          .           	  __throw_length_error(
 .           .           .          .          .          .          .          .          .           	      __N("cannot create std::vector larger than max_size()"));
 .           .           .          .          .          .          .          .          .           	return __n;
 .           .           .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 static size_type
 8 ( 0.00%)  1 ( 0.00%)  3 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 .           .           .          .          .          .          .          .          .                 {
 .           .           .          .          .          .          .          .          .           	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
 .           .           .          .          .          .          .          .          .           	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
 .           .           .          .          .          .          .          .          .           	// (even if std::allocator_traits::max_size says we can).
 2 ( 0.00%)  0           1 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           	const size_t __diffmax
 .           .           .          .          .          .          .          .          .           	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
 4 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           	const size_t __allocmax = _Alloc_traits::max_size(__a);
27 ( 0.00%)  8 ( 0.00%)  8 ( 0.00%) 3 ( 0.08%) 0          0          3 ( 0.10%) .          .           => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::shared_ptr<ActiveObjectDP> > >::max_size(std::allocator<std::shared_ptr<ActiveObjectDP> > const&) (1x)
 6 ( 0.00%)  1 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .           	return (std::min)(__diffmax, __allocmax);
14 ( 0.00%)  7 ( 0.00%)  3 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) (1x)
 5 ( 0.00%)  4 ( 0.00%)  .          .          .          .          .          .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 // Internal erase functions follow.
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
 .           .           .          .          .          .          .          .          .                 // _M_assign_aux.
 .           .           .          .          .          .          .          .          .                 void
 6 ( 0.00%)  0           3 ( 0.00%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 .           .           .          .          .          .          .          .          .                 {
10 ( 0.00%)  4 ( 0.00%)  1 ( 0.00%) .          .          .          .          .          .           	if (size_type __n = this->_M_impl._M_finish - __pos)
 .           .           .          .          .          .          .          .          .           	  {
 .           .           .          .          .          .          .          .          .           	    std::_Destroy(__pos, this->_M_impl._M_finish,
 .           .           .          .          .          .          .          .          .           			  _M_get_Tp_allocator());
 .           .           .          .          .          .          .          .          .           	    this->_M_impl._M_finish = __pos;
 .           .           .          .          .          .          .          .          .           	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
 .           .           .          .          .          .          .          .          .           	  }
 3 ( 0.00%)  2 ( 0.00%)  0          1 ( 0.03%) 0          0          1 ( 0.03%) .          .                 }
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 iterator
 .           .           .          .          .          .          .          .          .                 _M_erase(iterator __position);
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .                 iterator
 .           .           .          .          .          .          .          .          .                 _M_erase(iterator __first, iterator __last);
 .           .           .          .          .          .          .          .          .           
 .           .           .          .          .          .          .          .          .           #if __cplusplus >= 201103L
-- line 1809 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/atomic_base.h
--------------------------------------------------------------------------------
Ir           Dr          Dw          I1mr       D1mr       D1mw       ILmr       DLmr       DLmw       

-- line 97 ----------------------------------------
  .           .           .          .          .          .          .          .          .             constexpr memory_order
  .           .           .          .          .          .          .          .          .             operator|(memory_order __m, __memory_order_modifier __mod)
  .           .           .          .          .          .          .          .          .             {
  .           .           .          .          .          .          .          .          .               return memory_order(int(__m) | int(__mod));
  .           .           .          .          .          .          .          .          .             }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             constexpr memory_order
  .           .           .          .          .          .          .          .          .             operator&(memory_order __m, __memory_order_modifier __mod)
105 ( 0.00%)  0          63 ( 0.03%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .             {
 63 ( 0.00%) 42 ( 0.01%)  .          .          .          .          .          .          .               return memory_order(int(__m) & int(__mod));
 42 ( 0.00%) 42 ( 0.01%)  .          .          .          .          .          .          .             }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .             // Drop release ordering as per [atomics.types.operations.req]/21
  .           .           .          .          .          .          .          .          .             constexpr memory_order
  .           .           .          .          .          .          .          .          .             __cmpexch_failure_order2(memory_order __m) noexcept
  .           .           .          .          .          .          .          .          .             {
  .           .           .          .          .          .          .          .          .               return __m == memory_order_acq_rel ? memory_order_acquire
  .           .           .          .          .          .          .          .          .                 : __m == memory_order_release ? memory_order_relaxed : __m;
  .           .           .          .          .          .          .          .          .             }
-- line 115 ----------------------------------------
-- line 337 ----------------------------------------
  .           .           .          .          .          .          .          .          .               public:
  .           .           .          .          .          .          .          .          .                 __atomic_base() noexcept = default;
  .           .           .          .          .          .          .          .          .                 ~__atomic_base() noexcept = default;
  .           .           .          .          .          .          .          .          .                 __atomic_base(const __atomic_base&) = delete;
  .           .           .          .          .          .          .          .          .                 __atomic_base& operator=(const __atomic_base&) = delete;
  .           .           .          .          .          .          .          .          .                 __atomic_base& operator=(const __atomic_base&) volatile = delete;
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 // Requires __int_type convertible to _M_i.
 84 ( 0.00%) 28 ( 0.00%) 28 ( 0.01%) 0          0          1 ( 0.04%) 0          0          1 ( 0.04%)        constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 operator __int_type() const noexcept
  .           .           .          .          .          .          .          .          .                 { return load(); }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 operator __int_type() const volatile noexcept
  .           .           .          .          .          .          .          .          .                 { return load(); }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 __int_type
  7 ( 0.00%)  0           3 ( 0.00%) 2 ( 0.05%) 0          0          2 ( 0.07%) .          .                 operator=(__int_type __i) noexcept
  .           .           .          .          .          .          .          .          .                 {
  6 ( 0.00%)  2 ( 0.00%)  4 ( 0.00%) .          .          .          .          .          .           	store(__i);
  1 ( 0.00%)  1 ( 0.00%)  .          .          .          .          .          .          .           	return __i;
  2 ( 0.00%)  2 ( 0.00%)  .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 __int_type
  .           .           .          .          .          .          .          .          .                 operator=(__int_type __i) volatile noexcept
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	store(__i);
  .           .           .          .          .          .          .          .          .           	return __i;
  .           .           .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
-- line 366 ----------------------------------------
-- line 451 ----------------------------------------
  .           .           .          .          .          .          .          .          .           	return __atomic_is_lock_free(sizeof(_M_i),
  .           .           .          .          .          .          .          .          .           	    reinterpret_cast<void *>(-_S_alignment));
  .           .           .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 _GLIBCXX_ALWAYS_INLINE void
  .           .           .          .          .          .          .          .          .                 store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	memory_order __b __attribute__ ((__unused__))
  5 ( 0.00%)  1 ( 0.00%)  2 ( 0.00%) .          .          .          .          .          .           	  = __m & __memory_order_mask;
 10 ( 0.00%)  4 ( 0.00%)  3 ( 0.00%) .          .          .          .          .          .           => /usr/include/c++/11/bits/atomic_base.h:std::operator&(std::memory_order, std::__memory_order_modifier) (1x)
  .           .           .          .          .          .          .          .          .           	__glibcxx_assert(__b != memory_order_acquire);
  .           .           .          .          .          .          .          .          .           	__glibcxx_assert(__b != memory_order_acq_rel);
  .           .           .          .          .          .          .          .          .           	__glibcxx_assert(__b != memory_order_consume);
  .           .           .          .          .          .          .          .          .           
  3 ( 0.00%)  3 ( 0.00%)  1 ( 0.00%) 1 ( 0.03%) .          .          .          .          .           	__atomic_store_n(&_M_i, __i, int(__m));
  1 ( 0.00%)  .           .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 _GLIBCXX_ALWAYS_INLINE void
  .           .           .          .          .          .          .          .          .                 store(__int_type __i,
  .           .           .          .          .          .          .          .          .           	    memory_order __m = memory_order_seq_cst) volatile noexcept
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	memory_order __b __attribute__ ((__unused__))
  .           .           .          .          .          .          .          .          .           	  = __m & __memory_order_mask;
  .           .           .          .          .          .          .          .          .           	__glibcxx_assert(__b != memory_order_acquire);
-- line 473 ----------------------------------------
-- line 476 ----------------------------------------
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .           	__atomic_store_n(&_M_i, __i, int(__m));
  .           .           .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 _GLIBCXX_ALWAYS_INLINE __int_type
  .           .           .          .          .          .          .          .          .                 load(memory_order __m = memory_order_seq_cst) const noexcept
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	memory_order __b __attribute__ ((__unused__))
100 ( 0.00%) 20 ( 0.00%) 40 ( 0.02%) .          .          .          .          .          .           	  = __m & __memory_order_mask;
200 ( 0.01%) 80 ( 0.01%) 60 ( 0.03%) 1 ( 0.03%) 0          0          1 ( 0.03%) .          .           => /usr/include/c++/11/bits/atomic_base.h:std::operator&(std::memory_order, std::__memory_order_modifier) (20x)
  .           .           .          .          .          .          .          .          .           	__glibcxx_assert(__b != memory_order_release);
  .           .           .          .          .          .          .          .          .           	__glibcxx_assert(__b != memory_order_acq_rel);
  .           .           .          .          .          .          .          .          .           
 80 ( 0.00%) 40 ( 0.01%)  0          0          1 ( 0.01%) .          .          .          .           	return __atomic_load_n(&_M_i, int(__m));
  .           .           .          .          .          .          .          .          .                 }
  .           .           .          .          .          .          .          .          .           
  .           .           .          .          .          .          .          .          .                 _GLIBCXX_ALWAYS_INLINE __int_type
  .           .           .          .          .          .          .          .          .                 load(memory_order __m = memory_order_seq_cst) const volatile noexcept
  .           .           .          .          .          .          .          .          .                 {
  .           .           .          .          .          .          .          .          .           	memory_order __b __attribute__ ((__unused__))
  .           .           .          .          .          .          .          .          .           	  = __m & __memory_order_mask;
  .           .           .          .          .          .          .          .          .           	__glibcxx_assert(__b != memory_order_release);
-- line 496 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./csu/../csu/libc-start.c
  ./ctype/./ctype/ctype-info.c
  ./elf/../bits/stdlib-bsearch.h
  ./elf/../elf/dl-sysdep.c
  ./elf/../elf/dl-tls.c
  ./elf/../sysdeps/generic/dl-protected.h
  ./elf/../sysdeps/generic/ldsodefs.h
  ./elf/../sysdeps/nptl/dl-tls_init_tp.c
  ./elf/../sysdeps/posix/dl-fileid.h
  ./elf/../sysdeps/x86/cpu-features.c
  ./elf/../sysdeps/x86/dl-cacheinfo.h
  ./elf/../sysdeps/x86/dl-prop.h
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/../sysdeps/x86_64/dl-trampoline.h
  ./elf/./dl-find_object.h
  ./elf/./dl-load.h
  ./elf/./dl-map-segments.h
  ./elf/./elf/dl-cache.c
  ./elf/./elf/dl-deps.c
  ./elf/./elf/dl-environ.c
  ./elf/./elf/dl-error-skeleton.c
  ./elf/./elf/dl-find_object.c
  ./elf/./elf/dl-fini.c
  ./elf/./elf/dl-hwcaps.c
  ./elf/./elf/dl-hwcaps_split.c
  ./elf/./elf/dl-init.c
  ./elf/./elf/dl-load.c
  ./elf/./elf/dl-lookup-direct.c
  ./elf/./elf/dl-lookup.c
  ./elf/./elf/dl-minimal-malloc.c
  ./elf/./elf/dl-minimal.c
  ./elf/./elf/dl-misc.c
  ./elf/./elf/dl-object.c
  ./elf/./elf/dl-profstub.c
  ./elf/./elf/dl-reloc.c
  ./elf/./elf/dl-runtime.c
  ./elf/./elf/dl-setup_hash.c
  ./elf/./elf/dl-sort-maps.c
  ./elf/./elf/dl-tunables.c
  ./elf/./elf/dl-tunables.h
  ./elf/./elf/dl-version.c
  ./elf/./elf/do-rel.h
  ./elf/./elf/get-dynamic-info.h
  ./elf/./elf/rtld.c
  ./elf/./get-dynamic-info.h
  ./iconv/./iconv/gconv_simple.c
  ./io/../sysdeps/unix/sysv/linux/fstatat64.c
  ./io/../sysdeps/unix/sysv/linux/open64_nocancel.c
  ./io/../sysdeps/unix/sysv/linux/write.c
  ./libio/./libio/fileops.c
  ./libio/./libio/genops.c
  ./libio/./libio/getc.c
  ./libio/./libio/iofflush.c
  ./libio/./libio/iofwrite.c
  ./libio/./libio/ioungetc.c
  ./libio/./libio/libioP.h
  ./libio/./libio/putc.c
  ./malloc/./malloc/arena.c
  ./malloc/./malloc/malloc.c
  ./misc/../sysdeps/unix/sysv/linux/clone-internal.c
  ./misc/../sysdeps/unix/sysv/linux/mmap64.c
  ./misc/../sysdeps/unix/sysv/linux/select.c
  ./misc/../sysdeps/unix/sysv/linux/x86_64/clone.S
  ./nptl/./nptl/allocatestack.c
  ./nptl/./nptl/cancellation.c
  ./nptl/./nptl/futex-internal.c
  ./nptl/./nptl/pthread_attr_copy.c
  ./nptl/./nptl/pthread_cond_broadcast.c
  ./nptl/./nptl/pthread_cond_wait.c
  ./nptl/./nptl/pthread_create.c
  ./nptl/./nptl/pthread_getattr_default_np.c
  ./nptl/./nptl/pthread_mutex_lock.c
  ./nptl/./nptl/pthread_mutex_unlock.c
  ./posix/./posix/getopt.c
  ./setjmp/../sysdeps/x86_64/setjmp.S
  ./stdlib/./stdlib/cxa_atexit.c
  ./stdlib/./stdlib/cxa_finalize.c
  ./stdlib/./stdlib/exit.c
  ./stdlib/./stdlib/getenv.c
  ./string/../sysdeps/x86_64/multiarch/../strchr.S
  ./string/../sysdeps/x86_64/multiarch/memcmp-sse4.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strlen-vec.S
  ./string/../sysdeps/x86_64/strcmp.S
  ./string/../sysdeps/x86_64/strcspn.S
  ./wcsmbs/./wcsmbs/btowc.c
  ./wcsmbs/./wcsmbs/wctob.c
  ./wcsmbs/./wcsmbsload.h
  ./wctype/./wctype/wctype_l.c

--------------------------------------------------------------------------------
Ir              Dr              Dw             I1mr         D1mr        D1mw        ILmr         DLmr       DLmw        
--------------------------------------------------------------------------------
33,802 ( 1.34%) 10,547 ( 1.74%) 9,882 ( 4.23%) 777 (20.35%) 10 ( 0.08%) 58 ( 2.04%) 581 (19.04%) 1 ( 0.01%) 56 ( 2.49%)  events annotated

