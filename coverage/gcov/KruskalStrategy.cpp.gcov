        -:    0:Source:KruskalStrategy.cpp
        -:    1:#include "KruskalStrategy.hpp"
        -:    2:
        -:    3:// Helper function to perform DFS to check for cycles
    #####:    4:bool KruskalStrategy::hasCycle(int current, int parent, const std::vector<std::vector<int>> &adj, std::vector<bool> &visited)
        -:    5:{
    #####:    6:    visited[current] = true;
    #####:    7:    int numVer = adj.size(); // Number of vertices in the graph
    #####:    8:    for (int neighbor = 0; neighbor < numVer; ++neighbor)
        -:    9:    {
    #####:   10:        if (adj[current][neighbor] != 0)
        -:   11:        {
    #####:   12:            if (!visited[neighbor])
        -:   13:            {
    #####:   14:                if (hasCycle(neighbor, current, adj, visited))
    #####:   15:                    return true;
        -:   16:            }
    #####:   17:            else if (neighbor != parent)
        -:   18:            {
    #####:   19:                return true;
        -:   20:            }
        -:   21:        }
        -:   22:    }
    #####:   23:    return false;
        -:   24:}
        -:   25:
    #####:   26:std::unique_ptr<std::vector<std::vector<int>>> KruskalStrategy::computeMST(const std::vector<std::vector<int>> &graphAdjacencyMatrix)
        -:   27:{
        -:   28:    {
    #####:   29:        std::lock_guard<std::mutex> cout_lock(cout_mtx);
    #####:   30:        std::cout << "Strategy Activated - Start Compute MST using Kruskal" << std::endl;
    #####:   31:    }
    #####:   32:    int numVertices = graphAdjacencyMatrix.size();
    #####:   33:    std::vector<std::tuple<int, int, int>> edges; // (weight, src, dest) To keep track of included edges for sorting and processing
        -:   34:
        -:   35:    // Collect all edges from the adjacency matrix
    #####:   36:    for (int i = 0; i < numVertices; i++)
        -:   37:    {
    #####:   38:        for (int j = i + 1; j < numVertices; j++)
        -:   39:        {
    #####:   40:            if (graphAdjacencyMatrix[i][j] > 0)
        -:   41:            {
    #####:   42:                edges.emplace_back(graphAdjacencyMatrix[i][j], i, j);
        -:   43:            }
        -:   44:        }
        -:   45:    }
        -:   46:
        -:   47:    auto mstMatrix = std::make_unique<std::vector<std::vector<int>>>(
    #####:   48:        numVertices, std::vector<int>(numVertices, 0));
        -:   49:
    #####:   50:    std::sort(edges.begin(), edges.end()); // Sort edges by their weights
    #####:   51:    int edgesAdded = 0;
        -:   52:
        -:   53:    // Kruskal's algorithm - Adding edges to the MST, checking for cycles
    #####:   54:    for (const auto &eg : edges)
        -:   55:    {
    #####:   56:        int weight = std::get<0>(eg);
    #####:   57:        int u = std::get<1>(eg);
    #####:   58:        int v = std::get<2>(eg);
    #####:   59:        (*mstMatrix)[v][u] = weight;
    #####:   60:        (*mstMatrix)[u][v] = weight;
        -:   61:
        -:   62:        // Check for a cycle using DFS
    #####:   63:        std::vector<bool> visited(numVertices, false);
    #####:   64:        if (hasCycle(u, -1, *mstMatrix, visited))
        -:   65:        {
        -:   66:            // If adding this edge creates a cycle, remove it
    #####:   67:            (*mstMatrix)[u][v] = 0;
    #####:   68:            (*mstMatrix)[v][u] = 0;
        -:   69:        }
        -:   70:        else
        -:   71:        {
        -:   72:            // If no cycle is formed, continue
    #####:   73:            edgesAdded++;
    #####:   74:            if (edgesAdded == numVertices - 1)
    #####:   75:                break; // Stop when enough edges have been added
        -:   76:        }
    #####:   77:    }
        -:   78:    {
    #####:   79:        std::lock_guard<std::mutex> cout_lock(cout_mtx);
    #####:   80:        std::cout << "Finish Compute MST using Kruskal" << std::endl;
    #####:   81:    }
        -:   82:    // Reference of the MST adjacency matrix
    #####:   83:    return mstMatrix;
    #####:   84:}
