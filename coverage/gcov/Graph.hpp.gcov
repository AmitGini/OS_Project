        -:    0:Source:Graph.hpp
        -:    0:Graph:./LeaderFollowerDP.gcno
        -:    0:Data:./LeaderFollowerDP.gcda
        -:    0:Runs:5
        -:    1:#ifndef GRAPH_HPP
        -:    2:#define GRAPH_HPP
        -:    3:
        -:    4:#include <vector>
        -:    5:#include <sstream>
        -:    6:#include <stdexcept>
        -:    7:#include <climits>
        -:    8:#include <memory>
        -:    9:
        -:   10:class Graph{
        -:   11:private:
        -:   12:    std::vector<std::vector<int>> graphMatrix;  // Adjacency matrix - graph representations
        -:   13:    std::unique_ptr<std::vector<std::vector<int>>> mstMatrix;  // Smart pointer
        -:   14:    int numVertices;
        -:   15:    int numEdges;
        -:   16:    bool hasUpdatedMST;  // Flag to check if MST has been updated
        -:   17:
        -:   18:    void validateVertices(int u, int v) const;
        -:   19:
        -:   20:
        -:   21:public:
        -:   22:    Graph(int vertices);
    #####:   23:    ~Graph() = default;  // RAII - Destructor
        -:   24:    
        -:   25:    // Origin Graph Functions
        -:   26:    void addEdge(int u, int v, int weight);  // Add edge to graph
        -:   27:    void removeEdge(int u, int v);  // Remove edge from graph
        -:   28:    int getSizeVertices() const;  // Get number of vertices
        -:   29:    const std::vector<std::vector<int>> &getGraph() const;  // Get adjacency matrix
        -:   30:    bool hasMST() const;  // Check if MST has been computed
        -:   31:    
        -:   32:    // MST Graph Functions - after activate MST Algorithm
        -:   33:    void setMST(std::unique_ptr<std::vector<std::vector<int>>> mst);
        -:   34:    int getMSTTotalWeight() const;
        -:   35:    int getMSTLongestDistance() const;
        -:   36:    int getMSTShortestDistance() const;
        -:   37:    double getMSTAvgEdgeWeight() const;
        -:   38:    std::string printMST() const;
        -:   39:
        -:   40:
        -:   41:};
        -:   42:
        -:   43:#endif
