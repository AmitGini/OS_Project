        -:    0:Source:TaskQueue.cpp
        -:    0:Graph:./TaskQueue.gcno
        -:    0:Data:./TaskQueue.gcda
        -:    0:Runs:5
        -:    1:#include "TaskQueue.hpp"
        -:    2:#include <iostream>
        -:    3:
    #####:    4:TaskQueue::~TaskQueue(){
    #####:    5:    clear();
    #####:    6:}
        -:    7:
       65:    8:void TaskQueue::enqueue(TaskType func, int &arg1, int arg2)
        -:    9:{
        -:   10:    TaskData data{
       65:   11:        std::move(func),
       65:   12:        arg1,
        -:   13:        arg2
       65:   14:    };
       65:   15:    taskQueue.push(std::move(data));
       65:   16:    std::cout << "Task enqueued, task number: " << arg2 << std::endl;
       65:   17:}
        -:   18:
       65:   19:bool TaskQueue::executeTask() {
       65:   20:    if (taskQueue.empty()) {
    #####:   21:        std::cerr << "Queue is empty!" << std::endl;
    #####:   22:        return false;
        -:   23:    }
        -:   24:    
       65:   25:    TaskData data = std::move(taskQueue.front()); 
       65:   26:    taskQueue.pop();
       65:   27:    std::cout<<"Starting Task Execution"<<std::endl;
       65:   28:    return data.task(data.arg1, data.arg2); // Execute the function with stored arguments
       65:   29:}
        -:   30:
        -:   31:
       12:   32:int TaskQueue::size(){
       12:   33:    return this->taskQueue.size();
        -:   34:}
        -:   35:
      168:   36:bool TaskQueue::isEmpty() const{ return taskQueue.empty(); }
        -:   37:
        1:   38:void TaskQueue::clear() {
        1:   39:    while (!taskQueue.empty()) {
    #####:   40:        taskQueue.pop();
        -:   41:    }
        1:   42:}
